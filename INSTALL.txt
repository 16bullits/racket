Quick Instructions
==================

On Unix of Mac OS X, `make' (or `make in-place') creates a build in
the "racket" directory.

The build includes (via links) all packages that are in the "pkgs"
directory.


Building Racket
===============

The "racket" directory contains a stripped down version of Racket ---
enough to run `raco pkg' to install everything else.

The "pkgs" directory contains the packages that are included in a
Racket distribution.

On Unix and Mac OS X, you can build Racket plus the included packages
with `make in-place' (or just `make'). The resulting build is in the
"racket" subdirectory. For now, you need to have `git' installed for
downloading native-library packages. If you want more control over the
process, see below.

On Windows, you must first clone "git://github.com/plt/libs.git"
as "build/native-pkgs". Then, you can use `nmake win32-in-place',
as long as you're using Microsoft Visual Studio 9.0 (2008).

To install a subset of the packages in "pkgs", supply `PKGS' value to
`make'. For example,

  make PKGS="gui-lib readline-lib"

links only the "gui-lib" and "readline-lib" packages and their
dependencies. The default value of `PKGS' reaches all packages in
"pkgs" among its dependencies. See "Linking Packages for Development
Mode", below, for more information on package links and the way that
`PKGS' is remembered for future `make in-place's.

Note that `make -j <n>' controls parallelism for the makefile part of
a build, but not for the `raco setup' part. To control both the
makefile and the `raco setup' part, use

 make CPUS=<n>

which recurs with `make -j <n> JOB_OPTIONS="-j <n>"'.


Building Racket Pieces
======================

Instead of just using `make in-place', you can take more control over
the build.

Building Core Racket
--------------------

Instead of using the top-level makefile, you can go into "racket/src"
and follow the "README" there, which gives you more configuration
options.

If you don't want any special configuration and you just want the core
build, you can use `make core' (or `nmake win32-core') with the
top-level makefile.

(The Racket core does not require additional native libraries to run,
but under Windows, encoding-conversion, extflonum, and SSL
functionality is hobbled until native libraries from the
`racket-win32-i386' or `racket-win32-x86_64' package are installed.)

On Unix or Mac OS X, you can use `make in-place' and still set
`configure' options by supplying `CONFIGURE_ARGS_qq'. (The `_qq'
suffix on the variable name is a convention that indicates that
single- and double-quote marks are allowed in the value.)

On all platforms, `JOB_OPTIONS' as a makefile variable and
`PLT_SETUP_OPTIONS' as an environment variable are passed on to the
`raco setup' that is used to build core libraries.

Installing Packages
-------------------

In the near future, after you've built the core, you can install
packages via a package-catalog server (ignoring the content of
"pkgs"). That catalog server is not ready, yet.

Linking Packages for Development Mode
-------------------------------------

Aside from the issue of native-library packages, using the
"main-distribution" package corresponds to a build that is like the
main Racket distribution. Furthermore, if you install all of those
packages with `raco pkg install -i --link ...', then you can edit
libraries or update via `git pull' plus `raco setup' (as opposed to
updating or reinstalling packages).

The `pkg-links' target of the makefile links (or re-links) packages
from "pkgs" into the "racket" build. (The `in-place' target of the
makefile uses `pkg-links'.) By default, `pkg-links' starts with the
"main-distribution" and "plt-services" packages and links all of their
dependencies, which includes all of the packages in "pkgs". Specify a
subset of the packages with `PKGS="...."' as an argument to `make
pkg-links'. Make the `pkg-links' target whenever the set of
dependencies can change.

When you supply `PKGS=' with a value that is not the default value,
then the set of packages is recorded in "racket/etc/pkg-links.rktd"
and used for any future `make pkg-links' where `PKGS' is the
default. So, you can supply a `PKGS=' and it sticks for future builds,
but you must manually delete "racket/etc/pkg-links.rktd" to get
back to the default configuration.

Packages are linked in a database (at "racket/lib/devel-pkgs") that is
added to the installation's search paths. As a result, the links
affect only the build in the "racket" directory, and they are not
mixed with any links that you specifically install in installation
scope. Packages are linked with the `--no-setup' flag (effectively),
which means that a `raco setup' is needed after installing links.

Native-library packages provide (on Mac OS X and Windows) pre-built
native libraries, such as Cario. Currently, the libraries must be
downloaded from GitHub. On a non-Windows platform, the
`native-from-git' makefile target clones/updates the native-library
repository from GitHub; otherwise, clone

   git://github.com/plt/libs.git

as
 
   build/native-pkgs

Trying Packages Locally
-----------------------

Suppose that you've built core "racket" and you want to see what it
looks like to install individual packages as if provided by a server
(i.e., not through development-mode links).

Use `make local-catalog' to create a package catalog that provides
mappings for all of the packages in "pkgs" as well as packages
pre-built native libraries downloaded from GitHub. (On Unix, use the
`local-source-catalog' makefile target to skip native libraries, since
none are needed.)

To install a package, try

 racket/bin/raco pkg install -i --catalog build/local/catalog --deps search-auto <pkg-name>

The `-i' flag makes the package install specific to the build in the
"racket" directory. The `--catalog build/local/catalog' causes the
installation to use the catalog created by the `local-catalog'
makefile target. The `--deps search-auto' flag installs dependencies
(from the local catalog) automatically.

To remove the package, try

 racket/bin/raco pkg remove -i --auto <pkg-name>

The `--auto' flag undoes automatic installs from `--deps search-auto'.


Building Installers
===================

To build distribution installers, do not use `make in-place' or just
`make', but instead start from a clean repository.

Use one non-Windows machine as a server, where packages will be
pre-built. Then, create platform-specific installers on N client
machines, each of which contacts the server machine to obtain
pre-built packages. The server can act as a client, naturally, to
create an installer for the server's platform.

Running Build Farms
-------------------

The `installers' target of the makefile will do everything to generate
installers: build a server on the current machine, run clients on
hosts specified via CONFIG, and start/stop VirtualBox virtual machines
that act as client machines.

See "Site Configuration Modules" below for a description of the
site-configuration module and requirements on client hosts.

If "my-site-config.rkt" is a configuration module, then

 make installers CONFIG=my-site-config.rkt

drives the build farm, and the resulting installers are in
"build/installers", with a hash table mapping descriptions to
installer filenames in "build/installer/table.rktd".

The default CONFIG path is "build/site.rkt", so you could put your
configuration file there and omit the `CONFIG' argument to
`make'. Supply `CONFIG_MODE=...' to pass a configuration mode on to
your site-configuration module (accessible via the `current-mode'
parameter). Supply `CLEAN_MODE=--clean' to make the default `#:clean?'
configration for a client #t instead of #f.

A configuration file can specify the packages to include, host address
of the server, distribution name, installer directory, and
documentation search URL, but defaults can be provided as `make'
arguments via `PKGS', `SERVER', `DIST_NAME', `DIST_BASE', and
`DIST_DIR', `DOC_SEARCH', respectively. The site configuration's
top-level options for packages and documentation search URL are used
to configure the set of packages that are available to client
machines to include in installers.

For each installer written to "build/installers", the installer's name
is

 <dist-base>-<version>-<platform>-<dist-suffix>.<ext>

where <dist-base> defaults to "racket" (but can be set via
`DIST_BASE'), <platform> is from `(system-library-subpath #f)' but
normalizing the Windows results to "i386-win32" and "x86_63-win32",
-<dist-suffix> is omitted unless a `#:dist-suffix' string is specified
for the client in the site configuration, and <ext> is
platform-specific: ".sh" for Unix, ".dmg" for Mac Os X, and ".exe" for
Windows.

Generating Installer Web Sites
------------------------------

The `site' target of the makefile uses the `installers' target to
generate a set of installers, and then it combines the installers,
packages, and a package catalog into a directory that is suitable for
access via a web server.

Supply the same `CONFIG=...' and `CONFIG_MODE=...' arguments for
`site' as for `installers'. The configuration file should have a
`#:dist-base-url' entry for the URL where installers and packages will
be made available; the `installers' target uses `#:dist-base-url' to
embed suitable configuration into the installers. Specifically,
installers are configured to access pre-built packages and
documentation from the site indicated by `#:dist-base-url'.

Note that `#:dist-base-url' should almost always end with "/", since
others URLs will be constructed as relative to `#:dist-base-url'.

The site is generated as "build/site" but default. A `#:site-dest'
entry in the configuration file can select an alternate destination.

Use the `site-from-installers' makefile target to perform the part of
`site' that happens after `installers' (i.e., to generate a `site'
from an already-generated set of installers).

Managing Snapshot Web Sites
---------------------------

The `snapshot-site' makefile target uses `site' (so supply the same
`CONFIG=...' and `CONFIG_MODE=...' arguments), and then treats the
resulting site as a snapshot with additional snapshot-management
tasks.

For snapshot management, the destination of the files generated for
`site' (as specified by `#:site-dest') should be within a directory of
snapshots. The configuration file can use `(current-stamp)' to get a
string that represents the current build, and then use the string both
for `#:dist-base-url' and `#:site-dest'. Normally, the stamp string is
a combination of the date and git commit hash.

Snapshot management includes creating an "index.html" file in the
snapshots directory (essentially a copy of the snapshot's own
"index.html") and pruning snapshot subdirectories to keep the number
of snapshots at the amount specified by `#:max-snapshots'
configuration-file entry (with a default value of 5).

Use the `snapshot-at-site' makefile target to perform the part of
`snapshot-site that happens after `site (i.e., to manage snapshots
around an already-generated site).

Separate Server and Clients
---------------------------

Instead of using the `installers' makefile target and a site
configuration file, you can run server and client processes manually.

Roughly, the steps are

 1. On the server machine:
      make server PKGS="..."

    Add `DOC_SEARCH="..."' to the `server' line to build documentation
    so that it redirects to the given URL when a remote search is
    necessary.

 2. On each client machine:
      make client SERVER=... PKGS="..."
    or
      nmake win32-client SERVER=... PKGS="..."

    Add `DOC_SEARCH="..."' to the `client' line, if needed;
    normally, it should be the same as for the `server' line.

    Add `RELEASE_MODE=--release' to the `client' line to build
    a "release" installer, as opposed to a snapshot installer.

    Add `DIST_NAME="..."' to the `client' line to give an installer a
    different human-readable distribution name, instead of "Racket".

    Add `DIST_BASE="..."' to the `client' line to adjust the installer
    name's prefix, instead of starting with "racket".

    Add `DIST_DIR="..."' to the `client' line to make the installer
    use a different directory name on installation on Unix, instead of
    "racket".

    Add `DIST_SUFFIX="..."' to the `client' line to add a suffix
    string for the installer's name, such as an identifier for a
    particular variant of Linux.

    Add `DIST_DESC="..."' to the `client' line to set the installer's
    description, which is used as a key in the generated table of
    installer files.

    Add `DIST_CATALOGS_q='...'' to the `client' line to declare a
    space-separated sequence of catalog URLs to set an installation's
    initial package catalog URLs. Use the empty string in place of a
    URL to indicate that te default path should be spliced.

In more detail:

 1a. Build "racket" on a server.
    
     The `core' target of the makefile will do that, if you haven't
     done it already. On Windows, use `nmake win32-core'.

 1b. On the server, build packages and start a catalog server.

     The `server-from-core' target of the makefile will do that. (The
     server only works on non-Windows platforms, currently.)

     Alternatively, use the `server' target, which combines `core' and
     `server-from-core' (i.e., steps 1a and 1b).

     The `PKGS' variable of the makefile determines which packages are
     built for potential inclusion in a distribution.

     The `DOC_SEARCH' variable of the makefile determine a URL that is
     embedded in rendered documentation for cases where a remote
     search is needed (because other documentation is not installed).

     The `SRC_CATALOG' variable determines the catalog that is used to
     get package sources and native-library packages, but a value of
     "local" triggers a bootstrap mode where native libraries are
     downloaded directly from GitHub and all other packages are
     represented by directories in the makefile's directory. For now,
     "local" is the default.

     If you stop the server and want to restart it, use the
     `built-package-server' makefile target instead of starting over
     with the `server' target.

 2a. On each client (one for each platform to bundle), build "racket".

     This is the same as step 1, but on each client. If the client and
     server are the same, there's nothing more to do for step 3.

 2b. On each client, create an installer.

     The `client' (or `win32-client') target of the makefile will do
     that. Provide `SERVER' as the hostname of the server machine, and
     provide the same `PKGS' (or a subset) as in step 1b if you want a
     different set than the ones listed in the makefile. Similarly,
     `DOC_SEARCH' normally should be the same as in step 1b, but for a
     client, it affects future documentation builds in the
     installation.

     Alternatively, use the `client' target, which combines `core' and
     `client-from-core' (i.e., steps 2a and 2b).

     On Windows, you need NSIS installed, either in the usual location
     or with `makensis' in your command-line path.

     To create a release installer, provide `RELEASE_MODE' as
     "--release" to `make'. A release installer has slightly different
     defaults that are suitable for infrequently updated release
     installations, as opposed to ferquently updated snapshot
     installations.

     To change the human-readable name of the distribution as embedded
     in the installer, provide `DIST_NAME' to `make'. The default
     distribution name is "Racket". Whatever name you pick, the Racket
     version number is automatically added for various contexts.

     To change the base name of the installer file, provide `DIST_BASE
     to `make'. The default is "racket".

     To change the directory name for Unix installation, provide
     `DIST_DIR' to `make'. The default is "racket".

     To add an extra piece to the installer's name, such as an
     identifier for a variant of Linux, provide `DIST_SUFFIX' to
     `make'. The default is "", which omits the prefix and its
     preceding hyphen.

     To set the description string for the installer, provide
     `DIST_DESC' to `make'. The description string is recorded
     alongside the installer.

     To set the initial package catalogs URLs for an installation,
     provide `DIST_CATALOGS_q' to `make'. Separate multiple URLs with
     a space, and use an empty string in place of a URL to indicate
     that the default catalogs should be used. The "_q" in the
     variable name indicates that its value can include double quotes
     (but not single quotes) --- which are needed to specify an empty
     string, for example.

On each client, step 2b produces a "bundle/installer.txt" file that
contains the path to the generated installer on one line, followed by
the description on a second line. The installer is also uploaded to
the server, which leaves the installer in a "build/installers"
directory and records a mapping from the installer's description to
its filename in "build/installers/table.rktd".

If you provide `JOB_OPTIONS=...' for either a client or server build,
the options are used both for `raco setup' and `raco pkg
install'. Normally, `JOB_OPTIONS' is used to control parallelism.


Site Configuration Modules
==========================

A build farm is normally run via the `installers', `site', or
`snapshot-site' target of the Racket repository's top-level
makefile. Each of those targets uses `installers', which expects a
`CONFIG=...' argument to specify a configuration module file (or uses
"build/site.rkt" as the default).

A site configuration module starts `#lang distro-build/config' and
uses keywords to specify various options for the configuration. This
format is described is detail further below; for now, it's enough to
know that there are various options, each of which is associated with
a keyword.

The machine where `make installers' is run is the server machine.
The server machine first prepares packages for installation on
clients.  The site configuration's top-level entry is consulted for
a `#:pkgs' and/or `#:doc-search' option, which overrides any `PKGS'
and/or `DOC_SEARCH' configuration from the makefile.

The site configuration file otherwise describes and configures
client machines hierarchically, where configuration options
propagate down the hierarchy when they are not overridden more
locally.

Each client is normally built by running commands via `ssh', where
the client's host, `#:host' (with and optional `#:port' and/or
`#:user') indicate the ssh target. Each client machine must be set
up with a public-key authenticaion, because a direct `ssh' is
expected to work without a password prompt. An exception is when
the host is "localhost" and user is #f, in which case a shell is
used directly instead of `ssh'.

On the client machine, all work is performed at a specified
directory as specified by `#:dir'. The directory defaults to
"build/plt" (Unix, Mac OS X) or "build\\plt" (Windows), except when
the host is "localhost" and the client is #f, in which case the
current directory (i.e., the server's directory) is used.

Normally, the client directory is a git clone:

  - If the directory exists already on a client machine (and the
    machine is not configured for "clean" mode), then if directory
    contains a ".git" subdirectory, is assumed to be a a git clone
    and updated with `git pull'. The `git pull' operation can be
    disabled by specifying `#:pull?' as #f, and it defaults to #f
    in the case that `#:dir' is not specified, the host is
    "localhost", and the user is #f.

  - If the directory does not exist, a git repository is
    cloned. The respository can be specified with `#:repo'. By
    default, the server is used as the source git repository (so
    that the server and client are in sync), which means that the
    server's directory must be a git clone.

Note that neither ssh nor git turn out to be needed when the host
is "localhost", the user is #f, and the directory is not specified
(which corresponds to the defaults in all cases).

If a build fails for a machine, building continues on other
machines.  Success for a given machine means that its installer
ends up in "build/installers" (and failure for a machine means no
installer) as recorded in the "table.rktd" file.

To use the `site' makefile target, the configuration file must at
least provide a `#:dist-base-url' value, which is a URL at which the
site will be made available. To use the `snapshot-sire' makefile
target, then `#:site-dest' will need to be specified, normally as a
path that ends with the value produced by `(current-stamp)'.

Machine Requirements
--------------------

Each Unix or Mac OS X client needs the following available:

  * ssh server with public-key authentication (except "localhost")
  * git (unless the working directory is ready)
  * gcc, make, etc.

Each Windows client needs the following:

  * ssh server with public-key authentication
  * git (unless the working directory is ready)
  * Microsoft Visual Studio 9.0 (2008), installed in the
    default folder:
     C:\Program Files\Microsoft Visual Studio 9.0       (32-bit host)
     C:\Program Files (x86)\Microsoft Visual Studio 9.0 (64-bit host)
  * Nullsoft Scriptable Install System (NSIS), installed in the
    default folder:
     C:\Program Files\NSIS\makensis.exe
     or  C:\Program Files (x86)\NSIS\makensis.exe
    or instaled so that `makensis' in your PATH.

Site Configuration
-------------------

A site configuration module is normally written in the
`distro-build/config' language. The configuration describes individual
machines, and groups them with `parallel' or `sequential' to indicate
whether the machine's builds should run sequentially or in parallel.
Options specified at `parallel' or `sequential' are propagated to each
machine in the group.

Site-configuration keywords (where <string*> means no spaces, etc.):

  #:host <string*> --- defaults to "localhost"

  #:port <integer> --- ssh port for the client; defaults to 22

  #:user <string*/false> --- ssh user for the client; defaults to #f,
    which means the current user

  #:dir <path-string> --- defaults to "build/plt" or "build\\plt", or
    to the current directory if the host is "localhost" and the user
    is #f

  #:server <string*> --- the address of the server as accessed by the
    client; defaults to the `SERVER' makefile variable

  #:repo <string> --- the git repository for Racket; defaults to
    "http://<server>:9440/.git"

  #:pkgs '(<string*> ...) --- packages to install; defaults to the
    `PKGS' makefile variable

  #:dist-base-url <string> --- a URL that is used to construct a
    default for `#:doc-search' and `#:dist-catalogs', where the
    constructed values are consistent with converting a build server's
    content into a download site; since URLs are constructed via
    relative paths, this URL normally should end with a slash

  #:doc-search <string> --- URL to install as the configuration for
    remote documentation searches in generated installers; "" is
    replaced with the PLT default; defaults to #:dist-base-url (if
    present) extended with "doc/search.html", or the `DOC_SEARCH'
    makefile variable

  #:dist-name <string> --- the distribution name; defaults to the
    `DIST_NAME' makefile variable

  #:dist-base <string*> --- the distribution's installater name prefix;
    defaults to the `DIST_BASE' makefile variable

  #:dist-dir <string*> --- the distribution's installation directory;
    defaults to the `DIST_DIR' makefile variable

  #:dist-suffix <string*> --- a suffix for the installer's name,
    usually used for an OS variant; defaults to the `DIST_SUFFIX'
    makefile variable

  #:dist-catalogs '(<string> ...) --- catalog URLs to install as the
    initial catalog configuration in generated installed, where "" is
    replaced with the PLT default catalogs; defaults to
    `#:dist-base-url' (if present) extended with "catalogs" in a list
    followed by ""

  #:max-vm <real> --- max number of VMs allowed to run with this
    machine, counting the machine; defaults to 1

  #:vbox <string> --- Virtual Box machine name; if provided the
    virtual machine is started and stopped on the server as needed

  #:platform <symbol> --- 'windows or 'unix, defaults to 'unix

  #:configure '(<string> ...) --- arguments to `configure'

  #:bits <integer> --- 32 or 64, affects Visual Studio path

  #:vc <string*> --- "x86" or "x64" to select the Visual C build mode;
    default depends on `#:bits'

  #:j <integer> --- parallelism for `make' on Unix and Mac OS X and
    for `raco setup' on all platforms; defaults to 1

  #:timeout <number> --- numbers of seconds to wait before declaring
    failure; defaults to 30 minutes

  #:clean? <boolean> --- if true, then the build process on the client
    machine starts by removing <dir>; set this to #f for a shared repo
    checkout; the default is determined by the `CLEAN_MODE' makefile
    variable, unless `#:host' is "localhost", `#:user' is #f, and
    `#:dir' is not specified, in which casethe default is #f

  #:pull? <boolean> --- if true, then the build process on the client
    machine starts by a `git pull' in `#:dir'; set to #f, for example,
    for a repo checkout that is shared with server; the default is #t,
    unless `#:host' is "localhost", `#:user' is #f, and `#:dir' is not
    specified, in which casethe default is #f

  #:site-dest <path-string> --- destination for completed build, used
    by the `site' and `snapshot-site' makefile targets; the default is
    "build/site"

  #:max-snapshots <number> --- number of snapshots to keep, used by
    the `snapshot-site' makefile target

Machine-only keywords:

  #:name <string> --- defaults to host; this string is recorded as a
    description of the installer (for use in a generated table of
    installer links, for example)

More precisely, the `distro-build/config' language is like
`racket/base' except that the module body must have exactly one
expression (plus any number of definitions, etc.) that produces a
site-configuration value. The value is exported as `site-config'
from the module. Any module can act as a site-configuration module
a long as it exports `site-config' as a site-configuration value.

The `distro-build/config' language also adds the following functions
to `racket/base':

 (machine <opt-kw> <opt-val> ... ...) -> site-config?
   Produces a site configuration based on the given keyword-based
   options. The support keyword arguments are described above.

 (sequential <opt-kw> <opt-val> ... ... config ...)
   -> site-config?
    config : site-config?
   Produces a site configuration that runs each `config'
   sequentially. The support keyword arguments are described above.

 (parallel <opt-kw> <opt-val> ... ... config ...)
   -> site-config?
    config : site-config?
   Produces a site configuration that runs each `config' in
   parallel. The support keyword arguments are described above.

 (site-config? v) -> boolean?
 (site-config-tag config) -> (or/c 'machine 'sequential 'parallel)
    config : site-config?
 (site-config-options config) -> (hash/c keyword? any/c)
    config : site-config?
 (site-config-content config) -> (listof site-config?)
    config : site-config?
  Site configuation inspection

 (current-mode) -> string?
 (current-mode s) -> void?
    s : string?
  A parameter whose value is the user's requested mode for this
  configuration, normally as provided via the makefile's
  `CONFIG_MODE' variable. The default mode is "default". The
  interpretation of modes is completely up to the
  site configuration file.

 (current-stamp) -> string?
  Returns a string to identifiy the current build, normally a
  combination of the date and a git commit hash.

Examples
--------

** Single Installer **

The simplest possible configuration file is

  #lang distro-build/config
  (machine)

In fact, this configuration file is created automatically as
"build/site.rkt" (if the file does not exist already) and used as the
default configuration. With this configuration,

  make installers

creates an installer in "build/installers" for the platform that is
used to create the installer.

** Installer Web Page ***

To make a web page that serves both a minimal installer and packages,
create a "site.rkt" file with

 #lang distro-build/config

 (sequential
  ;; The packages that will be available:
  #:pkgs '("main-distribution")
  ;; FIXME: the URL where the installer and packages will be:
  #:dist-base-url "http://my-server.domain/snapshot/"
  (machine
   ;; FIXME: the way the installer is described on the web page:
   #:name "Minimal Racket | My Platform" 
   ;; The packages in this installer:
   #:pkgs '()))

then

 make site CONFIG=site.rkt

creates a "build/site" directory that you can move to your web server's
"snapshot" directory, so that "build/site/index.html" is the main
page, and so on.

** Accumulated Shapshots Web Page **

To make a web site that provides some number (5, by default) of
snapshots, use `(current-stamp)' when constructing the
`#:dist-base-url' value. Also, use `(current-stamp)' as the directory
for assembling the "site":

 #lang distro-build/config
 (sequential
  ;; The packages that will be available:
  #:pkgs '("gui-lib")
  ;; FIXME: the URL where the installer and packages will be:
  #:dist-base-url (string-append "http://my-server.domain/snapshots/"
                                 (current-stamp) "/")
  ;; The local directory where a snapshot is written
  #:site-dest (build-path "build/site" (current-stamp))
  (machine
   ;; FIXME: the way the installer is described on the web page:
   #:name "Minimal Racket | My Platform" 
   ;; The packages in this installer:
   #:pkgs '()))

Then,

  make snapshot-site CONFIG=site.rkt

creates a "build/site" directory that you can move to your web
server's "snapshots" directory, so that "build/site/index.html" is the
main page that initially points to "build/site/<stamp>/index.html",
and so on. To make a newer snapshot, update the git repository, leave
"build/site" in place, and run

  make snapshot-site CONFIG=site.rkt

again. The new installers will go into a new <stamp> subdirectory, and
the main "index.html" file will be rewritten to point to them.
 
** Multiple Platforms **

A configuration module that drives multiple clients to build
installers might look like this:

    #lang distro-build/config
   
    (sequential
     #:pkgs '("drracket")
     (machine
      #:desc "Linux (32-bit, Precise Pangolin)"
      #:name "Ubuntu 32"
      #:vbox "Ubuntu 12.04"
      #:host "192.168.56.102"
      #:server "192.168.56.1")
     (machine
      #:desc "Windows (64-bit)"
      #:name "Windows 64"
      #:host "10.0.0.7"
      #:server "10.0.0.1"
      #:dir "c:\\Users\\racket\\build\\plt"
      #:platform 'windows
      #:bits 64))

The configuration describes using the hosts "192.168.56.1" and
"192.168.56.103" for Linux and Windows builds, respectively, which are
run one at a time. Furthermore, the Linux machine runs in VirtualBox
on the server machine (in a virtual machine named "Ubuntu 12.04").

With this configuration file in "site.rkt",

  make installers CONFIG=site.rkt

produces two installers, both in "build/installers", and a hash table
in "table.rktd" that maps "Linux (32-bit, Precise Pangolin)" to the
Linux installer and "Windows (64-bit)" to the Windows installer.
