Quick Instructions
==================

On Unix of Mac OS X, `make' (or `make in-place') creates a build in
the "racket" directory.

The build includes (via links) all packages that are in the "pkgs"
directory.


Building Racket
===============

The "racket" directory contains a stripped down version of Racket ---
enough to run `raco pkg' to install everything else.

The "pkgs" directory contains the packages that are included in a
Racket distribution.

On Unix and Mac OS X, you can build Racket plus the included packages
with `make in-place' (or just `make'). The resulting build is in the
"racket" subdirectory. For now, you need to have `git' installed for
downloading native-library packages. If you want more control over the
process, see below.

On Windows, you must first clone "git://github.com/plt/libs.git"
as "build/native-pkgs". Then, you can use `nmake win32-in-place',
as long as you're using Microsoft Visual Studio 9.0 (2008).

To install a subset of the packages in "pkgs", supply `PKGS' value to
`make'. For example,

  make PKGS="gui-lib readline-lib"

links only the "gui-lib" and "readline-lib" packages and their
dependencies. The default value of `PKGS' is "main-distribution",
which has all packages in "pkgs" among its dependencies. See "Linking
Packages for Development Mode", below, for more information.


Building Racket Pieces
======================

Instead of just using `make in-place', you can take more control over
the build.

Building Core Racket
--------------------

Instead of using the top-level makefile, you can go into "racket/src"
and follow the "README" there, which gives you more configuration
options.

If you don't want any special configuration and you just want the core
build, you can use `make core' (or `nmake win32-core') with the
top-level makefile.

(The Racket core does not require additional native libraries to run,
but under Windows, encoding-conversion, extflonum, and SSL
functionality is hobbled until native libraries from the
`racket-win32-i386' or `racket-win32-x86_64' package are installed.)

Installing Packages
-------------------

In the near future, after you've built the core, you can install
packages via a package-catalog server (ignoring the content of
"pkgs"). That catalog server is not ready, yet.

Linking Packages for Development Mode
-------------------------------------

Aside from the issue of native-library packages, using all of the
packages in "pkgs" corresponds to a build that is like the main Racket
distribution. Furthermore, if you install all of those packages with
`raco pkg install -i --link ...', then you can edit libraries or
update via `git pull' plus `raco setup' (as opposed to updating or
reinstalling packages).

The `pkg-links' target of the makefile links (or re-links) packages
from "pkgs" into the "racket" build. (The `in-place' target of the
makefile uses `pkg-links'.) By default, `pkg-links' starts with the
"main-distribution" package and links all of its dependencies, which
includes all of the packages in "pkgs". Specify a subset of the
packages with `PKG="...."' as an argument to `make pkg-links'. Make
the `pkg-links' target whenever the set of dependencies can change
(or, for the default mode, when any native package or package in
"pkgs" changes).

Packages are linked in a database (at "racket/lib/devel-pkgs") that is
added to the installation's search paths. As a result, the links
affect only the build in the "racket" directory, and they are not
mixed with any links that you specifically install in installation
scope. Packages are linked with the `--no-setup' flag (effectively),
which means that a `raco setup' is needed after installing links.

Native-library packages provide (on Mac OS X and Windows) pre-built
native libraries, such as Cario. Currently, the libraries must be
downloaded from GitHub. On a non-Windows platform, the
`native-from-git' makefile target clones/updates the native-library
repository from GitHub; otherwise, clone

   git://github.com/plt/libs.git

as
 
   build/native-pkgs

When you have a "build/native-pkgs" directory, then the `pkg-links'
makefile target also links relavant native packages.

Trying Packages Locally
-----------------------

Suppose that you've built core "racket" and you want to see what it
looks like to install individual packages as if provided by a server
(i.e., not through development-mode links).

Use `make local-catalog' to create a package catalog that provides
mappings for all of the packages in "pkgs" as well as packages
pre-built native libraries downloaded from GitHub. (On Unix, use the
`local-source-catalog' makefile target to skip native libraries, since
none are needed.)

To install a package, try

 racket/bin/raco pkg install -i --catalog build/local/catalog --deps search-auto <pkg-name>

The `-i' flag makes the package install specific to the build in the
"racket" directory. The `--catalog build/local/catalog' causes the
installation to use the catalog created by the `local-catalog'
makefile target. The `--deps search-auto' flag installs dependencies
(from the local catalog) automatically.

To remove the package, try

 racket/bin/raco pkg remove -i --auto <pkg-name>

The `--auto' flag undoes automatic installs from `--deps search-auto'.


Building Installers
===================

To build distribution installers, do not use `make in-place' or just
`make', but instead start from a clean repository.

Use one non-Windows machine as a server, where packages will be
pre-built. Then, create platform-specific installers on N client
machines, each of which contacts the server machine to obtain
pre-built packages. The server can act as a client, naturally, to
create an installer for the server's platform.

Running Build Farms
-------------------

The `farm' target of the makefile will do everything to generate
installers: build a server on the current machine, run clients on
hosts specified via FARM_CONFIG, and start/stop VirtualBox virtual
machines that implement clients.

See

  pkgs/distro-build/drive-clients.rkt

for a description of the farm-configuration file and requirements on
client hosts.

If "my-farm-config.rktd" is a configuration file, then

 make farm FARM_CONFIG=my-farm-config.rktd PKGS="..."

drives the build farm, and the resulting installers are in
"build/installers".

The default FARM_CONFIG path is "build/farm-config.rktd", so you could
put your configuration file there and omit the `FARM_CONFIG' argument
to `make'. Similarly, you can omit `PKGS' to use the default specified
in the Makefile.

A configuration file can specify the packages to include, host address
of the server, distribution name, and installer directory, but default
can be provided as `make' arguments via `PKGS', `SERVER', `DIST_NAME'
and `DIST_DIR', respectively. Note that a sets of packages specified
in a configure file affects the clients, but it does not affect the
packages prepared by the server; only `PKGS' affects the server (and
the client's packages must be a subset of the server's packages).

For each installer written to "build/installers", the installer's name
is

 <dist-name>-<version>-<platform>-<dist-suffix>.<ext>

where <dist-name> defaults to "racket" (but can be set via
`DIST_NAME'), <platform> is from `(system-library-subpath #f)' but
normalizing the Windows results to "i386-win32" and "x86_63-win32",
-<dist-suffix> is omitted unless a `#:dist-suffix' string is specified
for the client in the farm configuration, and <ext> is
platform-specific: ".sh" for Unix, ".dmg" for Mac Os X, and ".exe" for
Windows.

Separate Server and Clients
---------------------------

Instead of using the `farm' makefile target and a farm configuration
file, you can run server and client processes manually.

Roughly, the steps are

 1. On the server machine:
      make server PKGS="..."

 2. On each client machine:
      make client SERVER=... PKGS="..."
    or
      nmake win32-client SERVER=... PKGS="..."

    Add `RELEASE_MODE=--release' to the `client' line to build
    a "release" installer, as opposed to a snapshot installer.

    Add `DIST_NAME="..."' to the `client' line to give an installer a
    different human-readable distribution name, instead of "Racket".

    Add `DIST_DIR="..."' to the `client' line to make the installer
    use a different directory name on installation, instead of
    "racket".

    Add `DIST_SUFFIX="..."' to the `client' line to add a suffix
    string for the installer's name, such as an identifier for a
    particular variant of Linux.

In more detail:

 1a. Build "racket" on a server.
    
     The `core' target of the makefile will do that, if you haven't
     done it already. On Windows, use `nmake win32-core'.

 1b. On the server, build packages and start a catalog server.

     The `server-from-core' target of the makefile will do that. (The
     server only works on non-Windows platforms, currently.)

     Alternatively, use the `server' target, which combines `core' and
     `server-from-core' (i.e., steps 1a and 1b).

     The `PKGS' variable of the makefile determines which packages are
     built for potential inclusion in a distribution.

     The `SRC_CATALOG' variable determines the catalog that is used to
     get package sources and native-library packages, but a value of
     "local" triggers a bootstrap mode where native libraries are
     downloaded directly from GitHub and all other packages are
     represented by directories in the makefile's directory. For now,
     "local" is the default.

     If you stop the server and want to restart it, use the
     `built-package-server' makefile target instead of starting over
     with the `server' target.

 2a. On each client (one for each platform to bundle), build "racket".

     This is the same as step 1, but on each client. If the client and
     server are the same, there's nothing more to do for step 3.

 2b. On each client, create an installer.

     The `client' (or `win32-client') target of the makefile will do
     that. Provide `SERVER' as the hostname of the server machine, and
     provide the same `PKGS' (or a subset) as in step 1b if you want a
     different set than the ones listed in the makefile.

     Alternatively, use the `client' target, which combines `core' and
     `client-from-core' (i.e., steps 2a and 2b).

     On Windows, you need NSIS installed, either in the usual location
     or with `makensis' in your command-line path.

     To create a release installer, provide `RELEASE_MODE' as
     "--release" to `make'. A release installer has slightly different
     defaults that are suitable for infrequently updated release
     installations, as opposed to ferquently updated snapshot
     installations.

     To change the human-readable name of the distribution as embedded
     in the installer, provide `DIST_NAME' to `make'. The default
     distribution name is "Racket". Whatever name you pick, the Racket
     version number is automatically added for various contexts.

     To change the directory name for Unix installation, as well as
     the base name of the installer file for all platforms, provide
     `DIST_DIR' to `make'. The default is "racket".

     To add an extra piece to the installer's name, such as an
     identifier for a variant of Linux, provide `DIST_SUFFIX to
     `make'. The default is "", which omits the prefix and its
     preceding hyphen.

On each client, step 2b produces a "bundle/installer.txt" file that
contains the path to the generated installer, but the installer is
also uploaded to the server, which leaves the installer in a
"build/installers" directory.
