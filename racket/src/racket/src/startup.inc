#define EVAL_STARTUP EVAL_ONE_STR(startup_source)
static const char *startup_source =
"(linklet"
"()"
"((boot boot)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/compile compile)"
"(compile-keep-source-locations! compile-keep-source-locations!)"
"(compile-to-linklets compile-to-linklets)"
"(1/current-compile current-compile)"
"(1/current-compiled-file-roots current-compiled-file-roots)"
"(1/current-eval current-eval)"
"(1/current-library-collection-links current-library-collection-links)"
"(1/current-library-collection-paths current-library-collection-paths)"
"(1/current-load current-load)"
"(1/current-load/use-compiled current-load/use-compiled)"
"(1/current-namespace current-namespace)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(1/datum->syntax datum->syntax)"
"(declare-primitive-module! declare-primitive-module!)"
"(1/dynamic-require dynamic-require)"
"(embedded-load embedded-load)"
"(1/eval eval)"
"(eval$1 eval-top-level)"
"(expand$1 expand)"
"(1/find-library-collection-links find-library-collection-links)"
"(1/find-library-collection-paths find-library-collection-paths)"
"(find-main-config find-main-config)"
"(1/identifier-binding identifier-binding)"
"(identifier? identifier?)"
"(1/load load)"
"(1/load-extension load-extension)"
"(1/load/use-compiled load/use-compiled)"
"(make-namespace make-namespace)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(1/module->language-info module->language-info)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(1/module-declared? module-declared?)"
"(1/module-path-index-join module-path-index-join)"
"(1/module-path-index? module-path-index?)"
"(1/module-path? module-path?)"
"(1/module-predefined? module-predefined?)"
"(namespace->instance namespace->instance)"
"(1/namespace-attach-module namespace-attach-module)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(namespace-datum-introduce namespace-datum-introduce)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/namespace-require namespace-require)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/read read)"
"(1/read-accept-compiled read-accept-compiled)"
"(1/read-syntax read-syntax)"
"(1/resolved-module-path? resolved-module-path?)"
"(seal seal)"
"(1/syntax->datum syntax->datum)"
"(1/syntax-debug-info syntax-debug-info)"
"(1/syntax-e syntax-e)"
"(syntax-property$1 syntax-property)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(syntax?$1 syntax?)"
"(1/use-collection-link-paths use-collection-link-paths)"
"(1/use-compiled-file-check use-compiled-file-check)"
"(1/use-compiled-file-paths use-compiled-file-paths)"
"(1/use-user-specific-search-paths use-user-specific-search-paths))"
"(define-values"
"(qq-append)"
"  (lambda (a_0 b_0) (begin (if (list? a_0) (append a_0 b_0) (raise-argument-error 'unquote-splicing \"list?\" a_0)))))"
"(define-values(call/ec) call-with-escape-continuation)"
"(define-values"
"(bad-list$1)"
"  (lambda (who_0 orig-l_0) (begin 'bad-list (raise-mismatch-error who_0 \"not a proper list: \" orig-l_0))))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(let-values()"
"(values"
"(let-values(((memq_12)"
"(lambda(v_0 orig-l_0)"
"(begin"
" 'memq"
"((letrec-values(((loop_15)"
"(lambda(ls_0)"
"(begin"
" 'loop"
"(if(null? ls_0)"
"(let-values() #f)"
"(if(not(pair? ls_0))"
"(let-values()(bad-list$1 'memq orig-l_0))"
"(if(eq? v_0(car ls_0))"
"(let-values() ls_0)"
"(let-values()(loop_15(cdr ls_0))))))))))"
" loop_15)"
" orig-l_0)))))"
" memq_12)"
"(let-values(((memv_17)"
"(lambda(v_0 orig-l_0)"
"(begin"
" 'memv"
"((letrec-values(((loop_20)"
"(lambda(ls_0)"
"(begin"
" 'loop"
"(if(null? ls_0)"
"(let-values() #f)"
"(if(not(pair? ls_0))"
"(let-values()(bad-list$1 'memv orig-l_0))"
"(if(eqv? v_0(car ls_0))"
"(let-values() ls_0)"
"(let-values()(loop_20(cdr ls_0))))))))))"
" loop_20)"
" orig-l_0)))))"
" memv_17)"
"(let-values(((default_22)"
"(let-values(((member_23)"
"(lambda(v_0 orig-l_0)"
"(begin"
" 'member"
"((letrec-values(((loop_26)"
"(lambda(ls_0)"
"(begin"
" 'loop"
"(if(null? ls_0)"
"(let-values() #f)"
"(if(not(pair? ls_0))"
"(let-values()(bad-list$1 'member orig-l_0))"
"(if(equal? v_0(car ls_0))"
"(let-values() ls_0)"
"(let-values()(loop_26(cdr ls_0))))))))))"
" loop_26)"
" orig-l_0)))))"
" member_23)))"
"(let-values(((member_28)"
"(case-lambda"
"((v_0 orig-l_0)(begin 'member(default_22 v_0 orig-l_0)))"
"((v_0 orig-l_0 eq?_0)"
"(begin"
"(if(if(procedure? eq?_0)(procedure-arity-includes? eq?_0 2) #f)"
"(void)"
"                             (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_0))"
"((let-values(((member_34)"
"(lambda(v_1 orig-l_1)"
"(begin"
" 'member"
"((letrec-values(((loop_37)"
"(lambda(ls_0)"
"(begin"
" 'loop"
"(if(null? ls_0)"
"(let-values() #f)"
"(if(not(pair? ls_0))"
"(let-values()(bad-list$1 'member orig-l_1))"
"(if(eq?_0 v_1(car ls_0))"
"(let-values() ls_0)"
"(let-values()(loop_37(cdr ls_0))))))))))"
" loop_37)"
" orig-l_1)))))"
" member_34)"
" v_0"
" orig-l_0))))))"
" member_28))))))"
"(define-values"
"(current-parameterization)"
"(lambda()(begin(extend-parameterization(continuation-mark-set-first #f parameterization-key)))))"
"(define-values"
"(call-with-parameterization)"
"(lambda(paramz_0 thunk_0)"
"(begin"
"(begin"
"(if(parameterization? paramz_0)"
"(void)"
"          (let-values () (raise-argument-error 'call-with-parameterization \"parameterization?\" 0 paramz_0 thunk_0)))"
"(if(if(procedure? thunk_0)(procedure-arity-includes? thunk_0 0) #f)"
"(void)"
"          (let-values () (raise-argument-error 'call-with-parameterization \"(-> any)\" 1 paramz_0 thunk_0)))"
"(with-continuation-mark parameterization-key paramz_0(thunk_0))))))"
"(define-values"
"(struct:break-paramz make-break-paramz break-paramz? break-paramz-ref break-paramz-set!)"
"(make-struct-type 'break-parameterization #f 1 0 #f))"
"(define-values"
"(current-break-parameterization)"
"(lambda()(begin(make-break-paramz(continuation-mark-set-first #f break-enabled-key)))))"
"(define-values"
"(call-with-break-parameterization)"
"(lambda(paramz_0 thunk_0)"
"(begin"
"(begin"
"(if(break-paramz? paramz_0)"
"(void)"
"(let-values()"
"            (raise-argument-error 'call-with-break-parameterization \"break-parameterization?\" 0 paramz_0 thunk_0)))"
"(if(if(procedure? thunk_0)(procedure-arity-includes? thunk_0 0) #f)"
"(void)"
"          (let-values () (raise-argument-error 'call-with-parameterization \"(-> any)\" 1 paramz_0 thunk_0)))"
"(begin0"
"(with-continuation-mark break-enabled-key(break-paramz-ref paramz_0 0)(begin(check-for-break)(thunk_0)))"
"(check-for-break))))))"
"(define-values"
"(select-handler/no-breaks)"
"(lambda(e_0 bpz_0 l_0)"
"(begin"
"(with-continuation-mark"
" break-enabled-key"
"(make-thread-cell #f)"
"((letrec-values(((loop_495)"
"(lambda(l_1)"
"(begin"
" 'loop"
"(if(null? l_1)"
"(let-values()(raise e_0))"
"(if((caar l_1) e_0)"
"(let-values()"
"(begin0"
"((cdar l_1) e_0)"
"(with-continuation-mark break-enabled-key bpz_0(check-for-break))))"
"(let-values()(loop_495(cdr l_1)))))))))"
" loop_495)"
" l_0)))))"
"(define-values(false-thread-cell)(make-thread-cell #f))"
"(define-values(handler-prompt-key)(make-continuation-prompt-tag 'handler-prompt-tag))"
"(define-values"
"(call-handled-body)"
"(lambda(bpz_0 handle-proc_0 body-thunk_0)"
"(begin"
"(with-continuation-mark"
" break-enabled-key"
" false-thread-cell"
"(call-with-continuation-prompt"
"(lambda(bpz_1 body-thunk_1)"
"(with-continuation-mark"
" break-enabled-key"
" bpz_1"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(e_0)(abort-current-continuation handler-prompt-key e_0))"
"(body-thunk_1))))"
" handler-prompt-key"
" handle-proc_0"
" bpz_0"
" body-thunk_0)))))"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_0 thunk_0)(begin(begin0(with-continuation-mark exception-handler-key exnh_0(thunk_0))(void)))))"
"(define-values(not-there)(gensym))"
"(define-values"
"(do-hash-update)"
"(lambda(who_0 mut?_0 set_0 ht_0 key_0 xform_0 default_0)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()"
"(begin"
"(if(if(hash? ht_0)(if mut?_0(not(immutable? ht_0))(immutable? ht_0)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_0"
"                   (if mut?_0 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_0)))"
"(if(if(procedure? xform_0)(procedure-arity-includes? xform_0 1) #f)"
"(void)"
"                (let-values () (raise-argument-error who_0 \"(any/c . -> . any/c)\" xform_0))))))"
"(let-values(((v_516)(hash-ref ht_0 key_0 default_0)))"
"(if(eq? v_516 not-there)"
"            (raise-mismatch-error who_0 \"no value found for key: \" key_0)"
"(set_0 ht_0 key_0(xform_0 v_516))))))))"
"(define-values"
"(hash-update)"
"(case-lambda"
"((ht_0 key_0 xform_0 default_0)(begin(do-hash-update 'hash-update #f hash-set ht_0 key_0 xform_0 default_0)))"
"((ht_0 key_0 xform_0)(hash-update ht_0 key_0 xform_0 not-there))))"
"(define-values"
"(hash-update!)"
"(case-lambda"
"((ht_0 key_0 xform_0 default_0)(begin(do-hash-update 'hash-update! #t hash-set! ht_0 key_0 xform_0 default_0)))"
"((ht_0 key_0 xform_0)(hash-update! ht_0 key_0 xform_0 not-there))))"
"(define-values"
"(hash-ref!)"
"(lambda(ht_0 key_0 new_0)"
"(begin"
"(begin"
"(if(if(hash? ht_0)(not(immutable? ht_0)) #f)"
"(void)"
"          (let-values () (raise-argument-error 'hash-ref! \"(and/c hash? (not/c immutable?))\" 0 ht_0 key_0 new_0)))"
"(let-values(((v_536)(hash-ref ht_0 key_0 not-there)))"
"(if(eq? not-there v_536)"
"(let-values(((n_537)(if(procedure? new_0)(new_0) new_0)))(begin(hash-set! ht_0 key_0 n_537) n_537))"
" v_536))))))"
"(define-values"
"(path-string?)"
"(lambda(s_0)"
"(begin"
"(let-values(((or-part_2)(path? s_0)))"
"(if or-part_2"
" or-part_2"
"(if(string? s_0)"
"(let-values(((or-part_3)(relative-path? s_0)))(if or-part_3 or-part_3(absolute-path? s_0)))"
" #f))))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_0)"
"(begin"
"(begin"
"(if(let-values(((or-part_5)(path-for-some-system? s_0)))(if or-part_5 or-part_5(path-string? s_0)))"
"(void)"
"          (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_0)))"
"(if(if(path-for-some-system? s_0)(eq?(path-convention-type s_0) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_6)(if(string? s_0) s_0(bytes->string/locale(path->bytes s_0)))))"
"              (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_6)"
"(if(string? s_0)(string->path s_0) s_0)"
"(let-values(((s_7)(string-locale-downcase str_6)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                     '#rx\"/\""
"                     (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_7)"
" s_7"
"                       (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_7 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_0)(let-values()(string->path s_0))(let-values() s_0)))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_0 sfx_0 who_0 sep_0 trust-sep?_0)"
"(begin"
"(begin"
"(let-values(((err-msg_13 err-index_14)"
"(if(not"
"(let-values(((or-part_15)(path-for-some-system? s_0)))"
"(if or-part_15 or-part_15(path-string? s_0))))"
"                        (let-values () (values \"(or/c path-for-some-system? path-string?)\" 0))"
"(if(not"
"(let-values(((or-part_16)(string? sfx_0)))(if or-part_16 or-part_16(bytes? sfx_0))))"
"                          (let-values () (values \"(or/c string? bytes?)\" 1))"
"(if(not"
"(let-values(((or-part_17) trust-sep?_0))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(string? sep_0)))"
"(if or-part_18 or-part_18(bytes? sep_0))))))"
"                            (let-values () (values \"(or/c string? bytes?)\" 2))"
"(let-values()(values #f #f)))))))"
"(if err-msg_13"
"(let-values()"
"(if trust-sep?_0"
"(raise-argument-error who_0 err-msg_13 err-index_14 s_0 sfx_0)"
"(raise-argument-error who_0 err-msg_13 err-index_14 s_0 sfx_0 sep_0)))"
"(void)))"
"(let-values(((base_19 name_20 dir?_21)(split-path s_0)))"
"(begin"
"(if(not base_19)"
"              (let-values () (raise-mismatch-error who_0 \"cannot add an extension to a root path: \" s_0))"
"(void))"
"(values base_19 name_20)))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_0 sep_0 rest-bytes_0 s_0 sfx_0 trust-sep?_0)"
"(begin"
"(let-values(((base_28 name_29)(check-extension-call s_0 sfx_0 name_0 sep_0 trust-sep?_0)))"
"(let-values(((bs_30)(path-element->bytes name_29)))"
"(let-values(((finish_31)"
"(lambda(i_0 sep_1 i2_0)"
"(begin"
" 'finish"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_30 0 i_0)"
"(if(string? sep_1)(string->bytes/locale sep_1(char->integer '#\\?)) sep_1)"
"(rest-bytes_0 bs_30 i2_0)"
"(if(string? sfx_0)(string->bytes/locale sfx_0(char->integer '#\\?)) sfx_0))"
"(if(path-for-some-system? s_0)"
"(path-convention-type s_0)"
"(system-path-convention-type)))))))"
"(let-values(((new-name_35)"
"(letrec-values(((loop_36)"
"(lambda(i_0)"
"(begin"
" 'loop"
"(if(zero? i_0)"
"                                                 (finish_31 (bytes-length bs_30) #\"\" (bytes-length bs_30))"
"(let-values(((i_38)(sub1 i_0)))"
"(if(if(not(zero? i_38))"
"(eq?(char->integer '#\\.)(bytes-ref bs_30 i_38))"
" #f)"
"(finish_31 i_38 sep_0(add1 i_38))"
"(loop_36 i_38))))))))"
"(loop_36(bytes-length bs_30)))))"
"(if(path-for-some-system? base_28)(build-path base_28 new-name_35) new-name_35))))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_0 sfx_0) (begin (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_0 i_0) #\"\") s_0 sfx_0 #t))))"
"(define-values"
"(path-add-extension)"
"(case-lambda"
"   ((s_0 sfx_0) (begin (path-adjust-extension 'path-add-extension #\"_\" subbytes s_0 sfx_0 #t)))"
"((s_0 sfx_0 sep_0)(path-adjust-extension 'path-add-extension sep_0 subbytes s_0 sfx_0 #f))))"
"(define-values"
"(reroot-path)"
"(lambda(p_0 root_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_53)(path-string? p_0)))"
"(if or-part_53 or-part_53(path-for-some-system? p_0)))"
"(void)"
"(let-values()"
"                          (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_0 root_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_54)(path-string? root_0)))"
"(if or-part_54 or-part_54(path-for-some-system? root_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                             \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_0"
" root_0)))"
"(values))))"
"(let-values(((conv_50)"
"(if(path-for-some-system? p_0)(path-convention-type p_0)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_55)(complete-path? p_0)))"
"(if or-part_55 or-part_55(eq?(system-path-convention-type) conv_50)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"path is not complete and not the platform's convention\""
"                                 \"path\""
" p_0"
"                                 \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_0)"
"(path-convention-type root_0)"
"(system-path-convention-type))"
" conv_50)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                   \"given paths use different conventions\""
"                                   \"path\""
" p_0"
"                                   \"root path\""
" root_0)))"
"(values))))"
"(let-values(((c-p_51)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_0) p_0(path->complete-path p_0))))))"
"(let-values(((bstr_52)(path->bytes c-p_51)))"
"(if(eq? conv_50 'unix)"
"(let-values()"
"                        (if (bytes=? bstr_52 #\"/\")"
"(if(path-for-some-system? root_0) root_0(string->path root_0))"
"(build-path root_0(bytes->path(subbytes(path->bytes c-p_51) 1) conv_50))))"
"(if(eq? conv_50 'windows)"
"(let-values()"
"(build-path"
" root_0"
"(bytes->path"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_52)"
"(let-values()"
"                                (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_52 4 5) #\"\\\\\" (subbytes bstr_52 6)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_52)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_52 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_52)"
"                                  (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_52 4)))"
"                                  (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_52)"
"                                    (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_52 2)))"
"                                    (if (regexp-match? '#rx\"^[a-z]:\" bstr_52)"
"(let-values()(bytes-append(subbytes bstr_52 0 1)(subbytes bstr_52 2)))"
"(void))))))"
" conv_50)))"
"(void)))))))))))))"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_1) #f)"
"((cons-path_2)"
"(lambda(default_0 s_0 l_0)"
"(begin"
" 'cons-path"
"                    (let-values (((s_6) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_0 #\"\") s_0)))"
"                      (if (bytes=? s_6 #\"\") (append default_0 l_0) (cons (bytes->path s_6) l_0)))))))"
"(lambda(s_0 default_0)"
"(begin"
"(begin"
"(if r_1"
"(void)"
"(let-values()"
"(set! r_1"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_9) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_9 sep_9)))))))"
"(if(let-values(((or-part_10)(bytes? s_0)))(if or-part_10 or-part_10(string? s_0)))"
"(void)"
"            (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_0)))"
"(if(if(list? default_0)(andmap path? default_0) #f)"
"(void)"
"            (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_0)))"
"((letrec-values(((loop_11)"
"(lambda(s_1)"
"(begin"
" 'loop"
"(let-values(((m_13)(regexp-match r_1 s_1)))"
"(if m_13"
"(cons-path_2 default_0(cadr m_13)(loop_11(caddr m_13)))"
"(cons-path_2 default_0 s_1 null)))))))"
" loop_11)"
"(if(string? s_0)(string->bytes/utf-8 s_0) s_0)))))))"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_0 libpath_0 reverse?_0)"
"(begin"
"(begin"
"(if(path-string? program_0)"
"(void)"
"          (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_0)))"
"(if(let-values(((or-part_4)(not libpath_0)))"
"(if or-part_4 or-part_4(if(path-string? libpath_0)(relative-path? libpath_0) #f)))"
"(void)"
"(let-values()"
"            (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_0)))"
"(letrec-values(((found-exec_5)"
"(lambda(exec-name_0)"
"(begin"
" 'found-exec"
"(if libpath_0"
"(let-values(((base_7 name_8 isdir?_9)(split-path exec-name_0)))"
"(let-values(((next_10)"
"(lambda()"
"(begin"
" 'next"
"(let-values(((resolved_11)(resolve-path exec-name_0)))"
"(if(equal? resolved_11 exec-name_0)"
"(let-values() #f)"
"(if(relative-path? resolved_11)"
"(let-values()(found-exec_5(build-path base_7 resolved_11)))"
"(let-values()(found-exec_5 resolved_11)))))))))"
"(let-values(((or-part_12)(if reverse?_0(next_10) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_7)"
"(let-values(((lib_14)(build-path base_7 libpath_0)))"
"(if(let-values(((or-part_15)(directory-exists? lib_14)))"
"(if or-part_15 or-part_15(file-exists? lib_14)))"
" lib_14"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_0)(next_10) #f)))))))"
" exec-name_0)))))"
"(if(if(relative-path? program_0)"
"(let-values(((base_16 name_17 dir?_18)(split-path program_0)))(eq? base_16 'relative))"
" #f)"
"            (let-values (((paths-str_19) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_20)"
"(lambda(s_0)"
"                            (begin 'win-add (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_0) s_0)))))"
"((letrec-values(((loop_22)"
"(lambda(paths_0)"
"(begin"
" 'loop"
"(if(null? paths_0)"
" #f"
"(let-values(((base_24)(path->complete-path(car paths_0))))"
"(let-values(((name_25)(build-path base_24 program_0)))"
"(if(file-exists? name_25)"
"(found-exec_5 name_25)"
"(loop_22(cdr paths_0))))))))))"
" loop_22)"
"(win-add_20"
"(if paths-str_19(path-list-string->path-list(bytes->string/locale paths-str_19 '#\\?) null) null))))"
"(let-values(((p_26)(path->complete-path program_0)))(if(file-exists? p_26)(found-exec_5 p_26) #f)))))))"
"((program_0 libpath_0)(find-executable-path program_0 libpath_0 #f))"
"((program_0)(find-executable-path program_0 #f #f))))"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_0)"
"(begin"
"(if(if(procedure? thunk_0)(procedure-arity-includes? thunk_0 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" 1/read-square-bracket-as-paren"
" #t"
" 1/read-curly-brace-as-paren"
" #t"
" 1/read-square-bracket-with-tag"
" #f"
" 1/read-curly-brace-with-tag"
" #f"
" 1/read-accept-box"
" #t"
" 1/read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" 1/read-accept-graph"
" #t"
" 1/read-decimal-as-inexact"
" #t"
" 1/read-cdot"
" #f"
" 1/read-accept-dot"
" #t"
" 1/read-accept-infix-dot"
" #t"
" 1/read-accept-quasiquote"
" #t"
" 1/read-accept-reader"
" #f"
" 1/read-accept-lang"
" #t"
" 1/current-readtable"
" #f)"
"(let-values()(thunk_0)))"
"        (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_0)))))"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_0)"
"(begin(if(keyword-impersonator? v_0)(let-values()((keyword-impersonator-ref v_0) v_0))(let-values() #f)))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_0 info-l_0)(if(exact-integer? v_0)(make-struct-field-accessor(list-ref info-l_0 3) v_0) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property"
" 'procedure"
" #f"
"(list(cons prop:procedure values)(cons prop:procedure-accessor values))"
" #t))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_0)"
"(begin"
"(if(keyword-procedure? p_0)"
"(let-values()(values(keyword-procedure-required p_0)(keyword-procedure-allowed p_0)))"
"(if(procedure? p_0)"
"(let-values()"
"(if(new-procedure? p_0)"
"(let-values(((v_1668)(new-procedure-ref p_0)))"
"(if(procedure? v_1668)"
"(procedure-keywords v_1668)"
"(let-values(((a_1669)(procedure-accessor-ref p_0)))"
"(if a_1669(procedure-keywords(a_1669 p_0))(values null null)))))"
"(values null null)))"
"          (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_0)))))))"
"(define-values(print-values)(lambda vs_0(begin(begin(for-each(current-print) vs_0)(apply values vs_0)))))"
"(define-values"
"(reverse$1)"
"(lambda(l_0)"
"(begin"
" 'reverse"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"          (if (list? l_0) (void) (raise-argument-error 'reverse \"list?\" l_0)))"
"(letrec-values(((loop_2)"
"(lambda(a_0 l_1)(begin 'loop(if(null? l_1) a_0(loop_2(cons(car l_1) a_0)(cdr l_1)))))))"
"(loop_2 null l_0))))))"
"(define-values"
"(sort vector-sort vector-sort!)"
"(let-values()"
"(let-values(((generic-sort_49)"
"(lambda(A_0 less-than?_0 n_0)"
"(begin"
" 'generic-sort"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_156)(unsafe-fxrshift n_0 1)))"
"(let-values(((n/2+_157)(unsafe-fx- n_0 n/2-_156)))"
"(letrec-values(((copying-mergesort_193)"
"(lambda(Alo_0 Blo_0 n_1)"
"(begin"
" 'copying-mergesort"
"(if(unsafe-fx= n_1 1)"
"(let-values()"
"(unsafe-vector-set! A_0 Blo_0(unsafe-vector-ref A_0 Alo_0)))"
"(if(unsafe-fx= n_1 2)"
"(let-values()"
"(let-values(((x_197)(unsafe-vector-ref A_0 Alo_0))"
"((y_198)"
"(unsafe-vector-ref A_0(unsafe-fx+ Alo_0 1))))"
"(if(less-than?_0 y_198 x_197)"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 y_198)"
"(unsafe-vector-set! A_0(unsafe-fx+ Blo_0 1) x_197))"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 x_197)"
"(unsafe-vector-set! A_0(unsafe-fx+ Blo_0 1) y_198)))))"
"(if(unsafe-fx< n_1 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" Blo_0"
"(unsafe-vector-ref A_0 Alo_0))"
"((letrec-values(((iloop_199)"
"(lambda(i_0)"
"(begin"
" 'iloop"
"(if(unsafe-fx< i_0 n_1)"
"(let-values()"
"(let-values(((ref-i_201)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx+"
" Alo_0"
" i_0))))"
"((letrec-values(((jloop_202)"
"(lambda(j_0)"
"(begin"
" 'jloop"
"(let-values(((ref-j-1_204)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx-"
" j_0"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_0"
" j_0)"
"(less-than?_0"
" ref-i_201"
" ref-j-1_204)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-j-1_204)"
"(jloop_202"
"(unsafe-fx-"
" j_0"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-i_201)"
"(iloop_199"
"(unsafe-fx+"
" i_0"
" 1)))))))))"
" jloop_202)"
"(unsafe-fx+ Blo_0 i_0))))"
"(void))))))"
" iloop_199)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_205)(unsafe-fxrshift n_1 1)))"
"(let-values(((n/2+_206)(unsafe-fx- n_1 n/2-_205)))"
"(let-values(((Amid1_207)(unsafe-fx+ Alo_0 n/2-_205))"
"((Amid2_208)(unsafe-fx+ Alo_0 n/2+_206))"
"((Bmid1_209)(unsafe-fx+ Blo_0 n/2-_205)))"
"(begin"
"(copying-mergesort_193 Amid1_207 Bmid1_209 n/2+_206)"
"(copying-mergesort_193 Alo_0 Amid2_208 n/2-_205)"
"(let-values(((b2_210)(unsafe-fx+ Blo_0 n_1)))"
"((letrec-values(((loop_211)"
"(lambda(a1_0 b1_0 c1_0)"
"(begin"
" 'loop"
"(let-values(((x_215)"
"(unsafe-vector-ref"
" A_0"
" a1_0))"
"((y_216)"
"(unsafe-vector-ref"
" A_0"
" b1_0)))"
"(if(not"
"(less-than?_0"
" y_216"
" x_215))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" x_215)"
"(let-values(((a1_217)"
"(unsafe-fx+"
" a1_0"
" 1))"
"((c1_218)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<"
" c1_218"
" b1_0)"
"(let-values()"
"(loop_211"
" a1_217"
" b1_0"
" c1_218))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" y_216)"
"(let-values(((b1_219)"
"(unsafe-fx+"
" b1_0"
" 1))"
"((c1_220)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<="
" b2_210"
" b1_219)"
"((letrec-values(((loop_221)"
"(lambda(a1_1"
" c1_1)"
"(begin"
" 'loop"
"(if(unsafe-fx<"
" c1_1"
" b1_219)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_1"
"(unsafe-vector-ref"
" A_0"
" a1_1))"
"(loop_221"
"(unsafe-fx+"
" a1_1"
" 1)"
"(unsafe-fx+"
" c1_1"
" 1))))"
"(void))))))"
" loop_221)"
" a1_0"
" c1_220)"
"(loop_211"
" a1_0"
" b1_219"
" c1_220))))))))))"
" loop_211)"
" Amid2_208"
" Bmid1_209"
" Blo_0))))))))))))))"
"(let-values(((Alo_224) 0)"
"((Amid1_225) n/2-_156)"
"((Amid2_226) n/2+_157)"
"((Ahi_227) n_0)"
"((B1lo_228) n_0))"
"(begin"
"(copying-mergesort_193 Amid1_225 B1lo_228 n/2+_157)"
"(if(zero? n/2-_156)"
"(void)"
"(let-values()(copying-mergesort_193 Alo_224 Amid2_226 n/2-_156)))"
"(let-values(((b2_229) Ahi_227))"
"((letrec-values(((loop_230)"
"(lambda(a1_0 b1_0 c1_0)"
"(begin"
" 'loop"
"(let-values(((x_234)(unsafe-vector-ref A_0 a1_0))"
"((y_235)(unsafe-vector-ref A_0 b1_0)))"
"(if(less-than?_0 x_234 y_235)"
"(begin"
"(unsafe-vector-set! A_0 c1_0 x_234)"
"(let-values(((a1_236)(unsafe-fx+ a1_0 1))"
"((c1_237)(unsafe-fx+ c1_0 1)))"
"(if(unsafe-fx< c1_237 b1_0)"
"(let-values()(loop_230 a1_236 b1_0 c1_237))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_0 c1_0 y_235)"
"(let-values(((b1_238)(unsafe-fx+ b1_0 1))"
"((c1_239)(unsafe-fx+ c1_0 1)))"
"(if(unsafe-fx<= b2_229 b1_238)"
"((letrec-values(((loop_240)"
"(lambda(a1_1 c1_1)"
"(begin"
" 'loop"
"(if(unsafe-fx< c1_1 b1_238)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_1"
"(unsafe-vector-ref"
" A_0"
" a1_1))"
"(loop_240"
"(unsafe-fx+ a1_1 1)"
"(unsafe-fx+"
" c1_1"
" 1))))"
"(void))))))"
" loop_240)"
" a1_0"
" c1_239)"
"(loop_230 a1_0 b1_238 c1_239))))))))))"
" loop_230)"
" B1lo_228"
" Amid2_226"
" Alo_224)))))))))))))"
"(let-values(((generic-sort/key_50)"
"(lambda(A_0 less-than?_0 n_0 key_0)"
"(begin"
" 'generic-sort/key"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_286)(unsafe-fxrshift n_0 1)))"
"(let-values(((n/2+_287)(unsafe-fx- n_0 n/2-_286)))"
"(letrec-values(((copying-mergesort_323)"
"(lambda(Alo_0 Blo_0 n_1)"
"(begin"
" 'copying-mergesort"
"(if(unsafe-fx= n_1 1)"
"(let-values()"
"(unsafe-vector-set! A_0 Blo_0(unsafe-vector-ref A_0 Alo_0)))"
"(if(unsafe-fx= n_1 2)"
"(let-values()"
"(let-values(((x_327)(unsafe-vector-ref A_0 Alo_0))"
"((y_328)"
"(unsafe-vector-ref A_0(unsafe-fx+ Alo_0 1))))"
"(if(if key_0"
"(less-than?_0(key_0 y_328)(key_0 x_327))"
"(less-than?_0 y_328 x_327))"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 y_328)"
"(unsafe-vector-set! A_0(unsafe-fx+ Blo_0 1) x_327))"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 x_327)"
"(unsafe-vector-set! A_0(unsafe-fx+ Blo_0 1) y_328)))))"
"(if(unsafe-fx< n_1 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" Blo_0"
"(unsafe-vector-ref A_0 Alo_0))"
"((letrec-values(((iloop_329)"
"(lambda(i_0)"
"(begin"
" 'iloop"
"(if(unsafe-fx< i_0 n_1)"
"(let-values()"
"(let-values(((ref-i_331)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx+"
" Alo_0"
" i_0))))"
"((letrec-values(((jloop_332)"
"(lambda(j_0)"
"(begin"
" 'jloop"
"(let-values(((ref-j-1_334)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx-"
" j_0"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_0"
" j_0)"
"(if key_0"
"(less-than?_0"
"(key_0"
" ref-i_331)"
"(key_0"
" ref-j-1_334))"
"(less-than?_0"
" ref-i_331"
" ref-j-1_334))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-j-1_334)"
"(jloop_332"
"(unsafe-fx-"
" j_0"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-i_331)"
"(iloop_329"
"(unsafe-fx+"
" i_0"
" 1)))))))))"
" jloop_332)"
"(unsafe-fx+ Blo_0 i_0))))"
"(void))))))"
" iloop_329)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_335)(unsafe-fxrshift n_1 1)))"
"(let-values(((n/2+_336)(unsafe-fx- n_1 n/2-_335)))"
"(let-values(((Amid1_337)(unsafe-fx+ Alo_0 n/2-_335))"
"((Amid2_338)(unsafe-fx+ Alo_0 n/2+_336))"
"((Bmid1_339)(unsafe-fx+ Blo_0 n/2-_335)))"
"(begin"
"(copying-mergesort_323"
" Amid1_337"
" Bmid1_339"
" n/2+_336)"
"(copying-mergesort_323 Alo_0 Amid2_338 n/2-_335)"
"(let-values(((b2_340)(unsafe-fx+ Blo_0 n_1)))"
"((letrec-values(((loop_341)"
"(lambda(a1_0 b1_0 c1_0)"
"(begin"
" 'loop"
"(let-values(((x_345)"
"(unsafe-vector-ref"
" A_0"
" a1_0))"
"((y_346)"
"(unsafe-vector-ref"
" A_0"
" b1_0)))"
"(if(not"
"(if key_0"
"(less-than?_0"
"(key_0 y_346)"
"(key_0 x_345))"
"(less-than?_0"
" y_346"
" x_345)))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" x_345)"
"(let-values(((a1_347)"
"(unsafe-fx+"
" a1_0"
" 1))"
"((c1_348)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<"
" c1_348"
" b1_0)"
"(let-values()"
"(loop_341"
" a1_347"
" b1_0"
" c1_348))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" y_346)"
"(let-values(((b1_349)"
"(unsafe-fx+"
" b1_0"
" 1))"
"((c1_350)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<="
" b2_340"
" b1_349)"
"((letrec-values(((loop_351)"
"(lambda(a1_1"
" c1_1)"
"(begin"
" 'loop"
"(if(unsafe-fx<"
" c1_1"
" b1_349)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_1"
"(unsafe-vector-ref"
" A_0"
" a1_1))"
"(loop_351"
"(unsafe-fx+"
" a1_1"
" 1)"
"(unsafe-fx+"
" c1_1"
" 1))))"
"(void))))))"
" loop_351)"
" a1_0"
" c1_350)"
"(loop_341"
" a1_0"
" b1_349"
" c1_350))))))))))"
" loop_341)"
" Amid2_338"
" Bmid1_339"
" Blo_0))))))))))))))"
"(let-values(((Alo_354) 0)"
"((Amid1_355) n/2-_286)"
"((Amid2_356) n/2+_287)"
"((Ahi_357) n_0)"
"((B1lo_358) n_0))"
"(begin"
"(copying-mergesort_323 Amid1_355 B1lo_358 n/2+_287)"
"(if(zero? n/2-_286)"
"(void)"
"(let-values()(copying-mergesort_323 Alo_354 Amid2_356 n/2-_286)))"
"(let-values(((b2_359) Ahi_357))"
"((letrec-values(((loop_360)"
"(lambda(a1_0 b1_0 c1_0)"
"(begin"
" 'loop"
"(let-values(((x_364)(unsafe-vector-ref A_0 a1_0))"
"((y_365)(unsafe-vector-ref A_0 b1_0)))"
"(if(if key_0"
"(less-than?_0(key_0 x_364)(key_0 y_365))"
"(less-than?_0 x_364 y_365))"
"(begin"
"(unsafe-vector-set! A_0 c1_0 x_364)"
"(let-values(((a1_366)(unsafe-fx+ a1_0 1))"
"((c1_367)(unsafe-fx+ c1_0 1)))"
"(if(unsafe-fx< c1_367 b1_0)"
"(let-values()(loop_360 a1_366 b1_0 c1_367))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_0 c1_0 y_365)"
"(let-values(((b1_368)(unsafe-fx+ b1_0 1))"
"((c1_369)(unsafe-fx+ c1_0 1)))"
"(if(unsafe-fx<= b2_359 b1_368)"
"((letrec-values(((loop_370)"
"(lambda(a1_1 c1_1)"
"(begin"
" 'loop"
"(if(unsafe-fx<"
" c1_1"
" b1_368)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_1"
"(unsafe-vector-ref"
" A_0"
" a1_1))"
"(loop_370"
"(unsafe-fx+ a1_1 1)"
"(unsafe-fx+"
" c1_1"
" 1))))"
"(void))))))"
" loop_370)"
" a1_0"
" c1_369)"
"(loop_360 a1_0 b1_368 c1_369))))))))))"
" loop_360)"
" B1lo_358"
" Amid2_356"
" Alo_354)))))))))))))"
"(values"
"(case-lambda"
"((lst_0 less-than?_0)"
"(let-values(((n_375)(length lst_0)))"
"(let-values()"
"(if(unsafe-fx= n_375 0)"
"(let-values() lst_0)"
"(if((letrec-values(((loop_399)"
"(lambda(last_0 next_0)"
"(begin"
" 'loop"
"(let-values(((or-part_402)(null? next_0)))"
"(if or-part_402"
" or-part_402"
"(if(not(less-than?_0(unsafe-car next_0) last_0))"
"(loop_399(unsafe-car next_0)(unsafe-cdr next_0))"
" #f)))))))"
" loop_399)"
"(car lst_0)"
"(cdr lst_0))"
"(let-values() lst_0)"
"(if(unsafe-fx<= n_375 3)"
"(let-values()"
"(if(unsafe-fx= n_375 1)"
"(let-values() lst_0)"
"(if(unsafe-fx= n_375 2)"
"(let-values()(list(cadr lst_0)(car lst_0)))"
"(let-values()"
"(let-values(((a_403)(car lst_0))((b_404)(cadr lst_0))((c_405)(caddr lst_0)))"
"(if(less-than?_0 b_404 a_403)"
"(if(less-than?_0 c_405 b_404)"
"(list c_405 b_404 a_403)"
"(if(less-than?_0 c_405 a_403)(list b_404 c_405 a_403)(list b_404 a_403 c_405)))"
"(if(less-than?_0 c_405 a_403)(list c_405 a_403 b_404)(list a_403 c_405 b_404))))))))"
"(let-values()"
"(let-values(((vec_406)(make-vector(+ n_375(ceiling(/ n_375 2))))))"
"(begin"
"((letrec-values(((loop_407)"
"(lambda(i_0 lst_1)"
"(begin"
" 'loop"
"(if(pair? lst_1)"
"(let-values()"
"(begin"
"(vector-set! vec_406 i_0(car lst_1))"
"(loop_407(add1 i_0)(cdr lst_1))))"
"(void))))))"
" loop_407)"
" 0"
" lst_0)"
"(generic-sort_49 vec_406 less-than?_0 n_375)"
"((letrec-values(((loop_410)"
"(lambda(i_0 r_0)"
"(begin"
" 'loop"
"(let-values(((i_413)(sub1 i_0)))"
"(if(< i_413 0)"
" r_0"
"(loop_410 i_413(cons(vector-ref vec_406 i_413) r_0))))))))"
" loop_410)"
" n_375"
" '()))))))))))"
"((lst_0 less-than?_0 getkey_0)"
"(if(if getkey_0(not(eq? values getkey_0)) #f)"
"(sort lst_0 less-than?_0 getkey_0 #f)"
"(sort lst_0 less-than?_0)))"
"((lst_0 less-than?_0 getkey_0 cache-keys?_0)"
"(if(if getkey_0(not(eq? values getkey_0)) #f)"
"(let-values(((n_421)(length lst_0)))"
"(let-values()"
"(if(unsafe-fx= n_421 0)"
"(let-values() lst_0)"
"(if cache-keys?_0"
"(let-values()"
"(let-values(((vec_436)(make-vector(+ n_421(ceiling(/ n_421 2))))))"
"(begin"
"((letrec-values(((loop_437)"
"(lambda(i_0 lst_1)"
"(begin"
" 'loop"
"(if(pair? lst_1)"
"(let-values()"
"(let-values(((x_440)(car lst_1)))"
"(begin"
"(unsafe-vector-set! vec_436 i_0(cons(getkey_0 x_440) x_440))"
"(loop_437(unsafe-fx+ i_0 1)(cdr lst_1)))))"
"(void))))))"
" loop_437)"
" 0"
" lst_0)"
"(generic-sort/key_50 vec_436 less-than?_0 n_421 unsafe-car)"
"((letrec-values(((loop_441)"
"(lambda(i_0 r_0)"
"(begin"
" 'loop"
"(let-values(((i_444)(unsafe-fx- i_0 1)))"
"(if(unsafe-fx< i_444 0)"
" r_0"
"(loop_441"
" i_444"
"(cons(unsafe-cdr(unsafe-vector-ref vec_436 i_444)) r_0))))))))"
" loop_441)"
" n_421"
" '()))))"
"(if((letrec-values(((loop_445)"
"(lambda(last_0 next_0)"
"(begin"
" 'loop"
"(let-values(((or-part_448)(null? next_0)))"
"(if or-part_448"
" or-part_448"
"(if(not"
"(if getkey_0"
"(less-than?_0"
"(getkey_0(unsafe-car next_0))"
"(getkey_0 last_0))"
"(less-than?_0(unsafe-car next_0) last_0)))"
"(loop_445(unsafe-car next_0)(unsafe-cdr next_0))"
" #f)))))))"
" loop_445)"
"(car lst_0)"
"(cdr lst_0))"
"(let-values() lst_0)"
"(if(unsafe-fx<= n_421 3)"
"(let-values()"
"(if(unsafe-fx= n_421 1)"
"(let-values() lst_0)"
"(if(unsafe-fx= n_421 2)"
"(let-values()(list(cadr lst_0)(car lst_0)))"
"(let-values()"
"(let-values(((a_449)(car lst_0))((b_450)(cadr lst_0))((c_451)(caddr lst_0)))"
"(if(if getkey_0"
"(less-than?_0(getkey_0 b_450)(getkey_0 a_449))"
"(less-than?_0 b_450 a_449))"
"(if(if getkey_0"
"(less-than?_0(getkey_0 c_451)(getkey_0 b_450))"
"(less-than?_0 c_451 b_450))"
"(list c_451 b_450 a_449)"
"(if(if getkey_0"
"(less-than?_0(getkey_0 c_451)(getkey_0 a_449))"
"(less-than?_0 c_451 a_449))"
"(list b_450 c_451 a_449)"
"(list b_450 a_449 c_451)))"
"(if(if getkey_0"
"(less-than?_0(getkey_0 c_451)(getkey_0 a_449))"
"(less-than?_0 c_451 a_449))"
"(list c_451 a_449 b_450)"
"(list a_449 c_451 b_450))))))))"
"(let-values()"
"(let-values(((vec_452)(make-vector(+ n_421(ceiling(/ n_421 2))))))"
"(begin"
"((letrec-values(((loop_453)"
"(lambda(i_0 lst_1)"
"(begin"
" 'loop"
"(if(pair? lst_1)"
"(let-values()"
"(begin"
"(vector-set! vec_452 i_0(car lst_1))"
"(loop_453(add1 i_0)(cdr lst_1))))"
"(void))))))"
" loop_453)"
" 0"
" lst_0)"
"(generic-sort/key_50 vec_452 less-than?_0 n_421 getkey_0)"
"((letrec-values(((loop_456)"
"(lambda(i_0 r_0)"
"(begin"
" 'loop"
"(let-values(((i_459)(sub1 i_0)))"
"(if(< i_459 0)"
" r_0"
"(loop_456 i_459(cons(vector-ref vec_452 i_459) r_0))))))))"
" loop_456)"
" n_421"
" '()))))))))))"
"(sort lst_0 less-than?_0))))"
"(case-lambda"
"((vec_0 less-than?_0 start_0 end_0)"
"(let-values(((n_464)(- end_0 start_0)))"
"(let-values(((dst-vec_496)(make-vector n_464)))"
"(let-values(((dst-start_497) 0))"
"(begin"
"(if(unsafe-fx= n_464 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_504)"
"(lambda(prev-val_0 next-index_0)"
"(begin"
" 'loop"
"(let-values(((or-part_507)(unsafe-fx= next-index_0 end_0)))"
"(if or-part_507"
" or-part_507"
"(let-values(((next-val_508)(unsafe-vector-ref vec_0 next-index_0)))"
"(if(not(less-than?_0 next-val_508 prev-val_0))"
"(loop_504 next-val_508(unsafe-fx+ next-index_0 1))"
" #f))))))))"
" loop_504)"
"(unsafe-vector-ref vec_0 start_0)"
"(unsafe-fx+ start_0 1))"
"(let-values()(let-values()(vector-copy! dst-vec_496 dst-start_497 vec_0 start_0 end_0)))"
"(if(unsafe-fx<= n_464 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_496 dst-start_497 vec_0 start_0 end_0))"
"(if(unsafe-fx= n_464 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_464 2)"
"(let-values()"
"(let-values(((tmp_509)"
"(unsafe-vector-ref dst-vec_496(unsafe-fx+ dst-start_497 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_496"
"(unsafe-fx+ dst-start_497 0)"
"(unsafe-vector-ref dst-vec_496(unsafe-fx+ dst-start_497 1)))"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 1) tmp_509))))"
"(let-values()"
"(let-values(((a_510)(unsafe-vector-ref dst-vec_496(unsafe-fx+ dst-start_497 0)))"
"((b_511)(unsafe-vector-ref dst-vec_496(unsafe-fx+ dst-start_497 1)))"
"((c_512)(unsafe-vector-ref dst-vec_496(unsafe-fx+ dst-start_497 2))))"
"(if(less-than?_0 b_511 a_510)"
"(let-values()"
"(if(less-than?_0 c_512 b_511)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 0) c_512)"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 2) a_510)))"
"(if(less-than?_0 c_512 a_510)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 0) b_511)"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 1) c_512)"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 2) a_510)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 0) b_511)"
"(unsafe-vector-set!"
" dst-vec_496"
"(unsafe-fx+ dst-start_497 1)"
" a_510))))))"
"(if(less-than?_0 c_512 a_510)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 0) c_512)"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 1) a_510)"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 2) b_511)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_496(unsafe-fx+ dst-start_497 1) c_512)"
"(unsafe-vector-set!"
" dst-vec_496"
"(unsafe-fx+ dst-start_497 2)"
" b_511)))))))))))"
"(let-values()"
"(let-values(((work-vec_513)(make-vector(+ n_464(ceiling(/ n_464 2))) #f)))"
"(begin"
"(vector-copy! work-vec_513 0 vec_0 start_0 end_0)"
"(generic-sort_49 work-vec_513 less-than?_0 n_464)"
"(vector-copy! dst-vec_496 dst-start_497 work-vec_513 0 n_464)))))))"
" dst-vec_496)))))"
"((vec_0 less-than?_0 start_0 end_0 getkey_0 cache-keys?_0)"
"(if(if getkey_0(not(eq? values getkey_0)) #f)"
"(let-values(((n_520)(- end_0 start_0)))"
"(let-values(((dst-vec_552)(make-vector n_520)))"
"(let-values(((dst-start_553) 0))"
"(begin"
"(if(unsafe-fx= n_520 0)"
"(let-values()(void))"
"(if cache-keys?_0"
"(let-values()"
"(let-values(((work-vec_554)(make-vector(+ n_520(ceiling(/ n_520 2))) #t)))"
"(begin"
"((letrec-values(((loop_555)"
"(lambda(i_0)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_0 n_520)"
"(let-values()"
"(begin"
"(let-values(((x_557)"
"(unsafe-vector-ref"
" vec_0"
"(unsafe-fx+ i_0 start_0))))"
"(unsafe-vector-set!"
" work-vec_554"
" i_0"
"(cons(getkey_0 x_557) x_557)))"
"(loop_555(unsafe-fx+ i_0 1))))"
"(void))))))"
" loop_555)"
" 0)"
"(generic-sort/key_50 work-vec_554 less-than?_0 n_520 unsafe-car)"
"((letrec-values(((loop_558)"
"(lambda(i_0)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_0 n_520)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_552"
"(unsafe-fx+ i_0 dst-start_553)"
"(unsafe-cdr(unsafe-vector-ref work-vec_554 i_0)))"
"(loop_558(unsafe-fx+ i_0 1))))"
"(void))))))"
" loop_558)"
" 0))))"
"(if((letrec-values(((loop_560)"
"(lambda(prev-val_0 next-index_0)"
"(begin"
" 'loop"
"(let-values(((or-part_563)(unsafe-fx= next-index_0 end_0)))"
"(if or-part_563"
" or-part_563"
"(let-values(((next-val_564)"
"(unsafe-vector-ref vec_0 next-index_0)))"
"(if(not"
"(if getkey_0"
"(less-than?_0"
"(getkey_0 next-val_564)"
"(getkey_0 prev-val_0))"
"(less-than?_0 next-val_564 prev-val_0)))"
"(loop_560 next-val_564(unsafe-fx+ next-index_0 1))"
" #f))))))))"
" loop_560)"
"(unsafe-vector-ref vec_0 start_0)"
"(unsafe-fx+ start_0 1))"
"(let-values()(let-values()(vector-copy! dst-vec_552 dst-start_553 vec_0 start_0 end_0)))"
"(if(unsafe-fx<= n_520 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_552 dst-start_553 vec_0 start_0 end_0))"
"(if(unsafe-fx= n_520 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_520 2)"
"(let-values()"
"(let-values(((tmp_565)"
"(unsafe-vector-ref dst-vec_552(unsafe-fx+ dst-start_553 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_552"
"(unsafe-fx+ dst-start_553 0)"
"(unsafe-vector-ref dst-vec_552(unsafe-fx+ dst-start_553 1)))"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 1) tmp_565))))"
"(let-values()"
"(let-values(((a_566)"
"(unsafe-vector-ref dst-vec_552(unsafe-fx+ dst-start_553 0)))"
"((b_567)"
"(unsafe-vector-ref dst-vec_552(unsafe-fx+ dst-start_553 1)))"
"((c_568)"
"(unsafe-vector-ref dst-vec_552(unsafe-fx+ dst-start_553 2))))"
"(if(if getkey_0"
"(less-than?_0(getkey_0 b_567)(getkey_0 a_566))"
"(less-than?_0 b_567 a_566))"
"(let-values()"
"(if(if getkey_0"
"(less-than?_0(getkey_0 c_568)(getkey_0 b_567))"
"(less-than?_0 c_568 b_567))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 0) c_568)"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 2) a_566)))"
"(if(if getkey_0"
"(less-than?_0(getkey_0 c_568)(getkey_0 a_566))"
"(less-than?_0 c_568 a_566))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 0) b_567)"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 1) c_568)"
"(unsafe-vector-set!"
" dst-vec_552"
"(unsafe-fx+ dst-start_553 2)"
" a_566)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 0) b_567)"
"(unsafe-vector-set!"
" dst-vec_552"
"(unsafe-fx+ dst-start_553 1)"
" a_566))))))"
"(if(if getkey_0"
"(less-than?_0(getkey_0 c_568)(getkey_0 a_566))"
"(less-than?_0 c_568 a_566))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 0) c_568)"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 1) a_566)"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 2) b_567)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_552(unsafe-fx+ dst-start_553 1) c_568)"
"(unsafe-vector-set!"
" dst-vec_552"
"(unsafe-fx+ dst-start_553 2)"
" b_567)))))))))))"
"(let-values()"
"(let-values(((work-vec_569)(make-vector(+ n_520(ceiling(/ n_520 2))) #f)))"
"(begin"
"(vector-copy! work-vec_569 0 vec_0 start_0 end_0)"
"(generic-sort/key_50 work-vec_569 less-than?_0 n_520 getkey_0)"
"(vector-copy! dst-vec_552 dst-start_553 work-vec_569 0 n_520))))))))"
" dst-vec_552))))"
"(vector-sort vec_0 less-than?_0 start_0 end_0))))"
"(case-lambda"
"((vec_0 less-than?_0 start_0 end_0)"
"(let-values(((n_574)(- end_0 start_0)))"
"(let-values(((dst-vec_606) vec_0))"
"(let-values(((dst-start_607) start_0))"
"(begin"
"(if(unsafe-fx= n_574 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_614)"
"(lambda(prev-val_0 next-index_0)"
"(begin"
" 'loop"
"(let-values(((or-part_617)(unsafe-fx= next-index_0 end_0)))"
"(if or-part_617"
" or-part_617"
"(let-values(((next-val_618)(unsafe-vector-ref vec_0 next-index_0)))"
"(if(not(less-than?_0 next-val_618 prev-val_0))"
"(loop_614 next-val_618(unsafe-fx+ next-index_0 1))"
" #f))))))))"
" loop_614)"
"(unsafe-vector-ref vec_0 start_0)"
"(unsafe-fx+ start_0 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_574 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_574 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_574 2)"
"(let-values()"
"(let-values(((tmp_619)"
"(unsafe-vector-ref dst-vec_606(unsafe-fx+ dst-start_607 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_606"
"(unsafe-fx+ dst-start_607 0)"
"(unsafe-vector-ref dst-vec_606(unsafe-fx+ dst-start_607 1)))"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 1) tmp_619))))"
"(let-values()"
"(let-values(((a_620)(unsafe-vector-ref dst-vec_606(unsafe-fx+ dst-start_607 0)))"
"((b_621)(unsafe-vector-ref dst-vec_606(unsafe-fx+ dst-start_607 1)))"
"((c_622)(unsafe-vector-ref dst-vec_606(unsafe-fx+ dst-start_607 2))))"
"(if(less-than?_0 b_621 a_620)"
"(let-values()"
"(if(less-than?_0 c_622 b_621)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 0) c_622)"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 2) a_620)))"
"(if(less-than?_0 c_622 a_620)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 0) b_621)"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 1) c_622)"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 2) a_620)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 0) b_621)"
"(unsafe-vector-set!"
" dst-vec_606"
"(unsafe-fx+ dst-start_607 1)"
" a_620))))))"
"(if(less-than?_0 c_622 a_620)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 0) c_622)"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 1) a_620)"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 2) b_621)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_606(unsafe-fx+ dst-start_607 1) c_622)"
"(unsafe-vector-set!"
" dst-vec_606"
"(unsafe-fx+ dst-start_607 2)"
" b_621)))))))))))"
"(let-values()"
"(let-values(((work-vec_623)(make-vector(+ n_574(ceiling(/ n_574 2))) #f)))"
"(begin"
"(vector-copy! work-vec_623 0 vec_0 start_0 end_0)"
"(generic-sort_49 work-vec_623 less-than?_0 n_574)"
"(vector-copy! dst-vec_606 dst-start_607 work-vec_623 0 n_574)))))))"
"(void))))))"
"((vec_0 less-than?_0 start_0 end_0 getkey_0 cache-keys?_0)"
"(if(if getkey_0(not(eq? values getkey_0)) #f)"
"(let-values(((n_630)(- end_0 start_0)))"
"(let-values(((dst-vec_662) vec_0))"
"(let-values(((dst-start_663) start_0))"
"(begin"
"(if(unsafe-fx= n_630 0)"
"(let-values()(void))"
"(if cache-keys?_0"
"(let-values()"
"(let-values(((work-vec_664)(make-vector(+ n_630(ceiling(/ n_630 2))) #t)))"
"(begin"
"((letrec-values(((loop_665)"
"(lambda(i_0)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_0 n_630)"
"(let-values()"
"(begin"
"(let-values(((x_667)"
"(unsafe-vector-ref"
" vec_0"
"(unsafe-fx+ i_0 start_0))))"
"(unsafe-vector-set!"
" work-vec_664"
" i_0"
"(cons(getkey_0 x_667) x_667)))"
"(loop_665(unsafe-fx+ i_0 1))))"
"(void))))))"
" loop_665)"
" 0)"
"(generic-sort/key_50 work-vec_664 less-than?_0 n_630 unsafe-car)"
"((letrec-values(((loop_668)"
"(lambda(i_0)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_0 n_630)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_662"
"(unsafe-fx+ i_0 dst-start_663)"
"(unsafe-cdr(unsafe-vector-ref work-vec_664 i_0)))"
"(loop_668(unsafe-fx+ i_0 1))))"
"(void))))))"
" loop_668)"
" 0))))"
"(if((letrec-values(((loop_670)"
"(lambda(prev-val_0 next-index_0)"
"(begin"
" 'loop"
"(let-values(((or-part_673)(unsafe-fx= next-index_0 end_0)))"
"(if or-part_673"
" or-part_673"
"(let-values(((next-val_674)"
"(unsafe-vector-ref vec_0 next-index_0)))"
"(if(not"
"(if getkey_0"
"(less-than?_0"
"(getkey_0 next-val_674)"
"(getkey_0 prev-val_0))"
"(less-than?_0 next-val_674 prev-val_0)))"
"(loop_670 next-val_674(unsafe-fx+ next-index_0 1))"
" #f))))))))"
" loop_670)"
"(unsafe-vector-ref vec_0 start_0)"
"(unsafe-fx+ start_0 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_630 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_630 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_630 2)"
"(let-values()"
"(let-values(((tmp_675)"
"(unsafe-vector-ref dst-vec_662(unsafe-fx+ dst-start_663 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_662"
"(unsafe-fx+ dst-start_663 0)"
"(unsafe-vector-ref dst-vec_662(unsafe-fx+ dst-start_663 1)))"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 1) tmp_675))))"
"(let-values()"
"(let-values(((a_676)"
"(unsafe-vector-ref dst-vec_662(unsafe-fx+ dst-start_663 0)))"
"((b_677)"
"(unsafe-vector-ref dst-vec_662(unsafe-fx+ dst-start_663 1)))"
"((c_678)"
"(unsafe-vector-ref dst-vec_662(unsafe-fx+ dst-start_663 2))))"
"(if(if getkey_0"
"(less-than?_0(getkey_0 b_677)(getkey_0 a_676))"
"(less-than?_0 b_677 a_676))"
"(let-values()"
"(if(if getkey_0"
"(less-than?_0(getkey_0 c_678)(getkey_0 b_677))"
"(less-than?_0 c_678 b_677))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 0) c_678)"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 2) a_676)))"
"(if(if getkey_0"
"(less-than?_0(getkey_0 c_678)(getkey_0 a_676))"
"(less-than?_0 c_678 a_676))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 0) b_677)"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 1) c_678)"
"(unsafe-vector-set!"
" dst-vec_662"
"(unsafe-fx+ dst-start_663 2)"
" a_676)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 0) b_677)"
"(unsafe-vector-set!"
" dst-vec_662"
"(unsafe-fx+ dst-start_663 1)"
" a_676))))))"
"(if(if getkey_0"
"(less-than?_0(getkey_0 c_678)(getkey_0 a_676))"
"(less-than?_0 c_678 a_676))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 0) c_678)"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 1) a_676)"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 2) b_677)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_662(unsafe-fx+ dst-start_663 1) c_678)"
"(unsafe-vector-set!"
" dst-vec_662"
"(unsafe-fx+ dst-start_663 2)"
" b_677)))))))))))"
"(let-values()"
"(let-values(((work-vec_679)(make-vector(+ n_630(ceiling(/ n_630 2))) #f)))"
"(begin"
"(vector-copy! work-vec_679 0 vec_0 start_0 end_0)"
"(generic-sort/key_50 work-vec_679 less-than?_0 n_630 getkey_0)"
"(vector-copy! dst-vec_662 dst-start_663 work-vec_679 0 n_630))))))))"
"(void)))))"
"(vector-sort! vec_0 less-than?_0 start_0 end_0)))))))))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_0 si_0)"
"(begin"
"(if(if(vector? v_0)"
"(if(= 3(vector-length v_0))"
"(if(procedure?(vector-ref v_0 0))"
"(if(procedure-arity-includes?(vector-ref v_0 0) 1)"
"(if(procedure?(vector-ref v_0 1))"
"(if(procedure-arity-includes?(vector-ref v_0 1) 1)"
"(if(procedure?(vector-ref v_0 2))(procedure-arity-includes?(vector-ref v_0 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_0)))"
"(vector->immutable-vector v_0)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_0 si_0)"
"(begin"
"(if(if(procedure? v_0)(procedure-arity-includes? v_0 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_0)))"
" v_0))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_0)"
"(let-values(((cont?_3268)(range-ref v_0 2)))(if cont?_3268(not(cont?_3268(range-ref v_0 0))) #f)))"
"(lambda(v_0)(range-ref v_0 0))"
"(lambda(v_0)(make-range((range-ref v_0 1)(range-ref v_0 0))(range-ref v_0 1)(range-ref v_0 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_0)(values values #f(range-ref v_0 1)(range-ref v_0 0)(range-ref v_0 2) #f #f))))))"
"(define-values"
"(check-range)"
"(lambda(a_0 b_0 step_0)"
"(begin"
"(begin"
"        (if (real? a_0) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_0)))"
"        (if (real? b_0) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_0)))"
"        (if (real? step_0) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_0)))))))"
"(define-values"
"(check-naturals)"
"(lambda(n_0)"
"(begin"
"(if(if(integer? n_0)(if(exact? n_0)(>= n_0 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_0))))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_0)(not(pair?(list-stream-ref v_0 0))))"
"(lambda(v_0)(car(list-stream-ref v_0 0)))"
"(lambda(v_0)(make-list-stream(cdr(list-stream-ref v_0 0))))))"
"(cons prop:gen-sequence(lambda(v_0)(values car cdr values(list-stream-ref v_0 0) pair? #f #f))))))"
"(define-values"
"(check-list)"
"  (lambda (l_0) (begin (if (list? l_0) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_0))))))"
"(define-values"
"(check-in-hash)"
"(lambda(ht_0)"
"(begin"
"      (if ((lambda (ht_1) (hash? ht_1)) ht_0) (void) (let-values () (raise-argument-error 'in-hash \"hash?\" ht_0))))))"
"(define-values"
"(check-in-immutable-hash)"
"(lambda(ht_0)"
"(begin"
"(if((lambda(ht_1)(if(hash? ht_1)(immutable? ht_1) #f)) ht_0)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_0))))))"
"(define-values"
"(check-in-hash-keys)"
"(lambda(ht_0)"
"(begin"
"(if((lambda(ht_1)(hash? ht_1)) ht_0)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_0))))))"
"(define-values"
"(check-in-immutable-hash-keys)"
"(lambda(ht_0)"
"(begin"
"(if((lambda(ht_1)(if(hash? ht_1)(immutable? ht_1) #f)) ht_0)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_0))))))"
"(define-values"
"(check-in-hash-values)"
"(lambda(ht_0)"
"(begin"
"(if((lambda(ht_1)(hash? ht_1)) ht_0)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_0))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_0 vec_0 start_0 stop_0 step_0 len_0)"
"(begin"
"(begin"
"(if(if(exact-nonnegative-integer? start_0)"
"(let-values(((or-part_3439)(< start_0 len_0)))(if or-part_3439 or-part_3439(= len_0 start_0 stop_0)))"
" #f)"
"(void)"
"          (let-values () (raise-range-error who_0 \"vector\" \"starting \" start_0 vec_0 0 (sub1 len_0))))"
"(if(if(exact-integer? stop_0)(if(<= -1 stop_0)(<= stop_0 len_0) #f) #f)"
"(void)"
"          (let-values () (raise-range-error who_0 \"vector\" \"stopping \" stop_0 vec_0 -1 len_0)))"
"(if(if(exact-integer? step_0)(not(zero? step_0)) #f)"
"(void)"
"          (let-values () (raise-argument-error who_0 \"(and/c exact-integer? (not/c zero?))\" step_0)))"
"(if(if(< start_0 stop_0)(< step_0 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_0"
"             \"starting index less than stopping index, but given a negative step\""
"             \"starting index\""
" start_0"
"             \"stopping index\""
" stop_0"
"             \"step\""
" step_0))"
"(void))"
"(if(if(< stop_0 start_0)(> step_0 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_0"
"             \"starting index more than stopping index, but given a positive step\""
"             \"starting index\""
" start_0"
"             \"stopping index\""
" stop_0"
"             \"step\""
" step_0))"
"(void))))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_0 type-name_0 vector?_0 unsafe-vector-length_0 vec_0 start_0 stop_0 step_0)"
"(begin"
"(begin"
"(if(vector?_0 vec_0)(void)(let-values()(raise-argument-error who_0 type-name_0 vec_0)))"
"(let-values(((len_3448)(unsafe-vector-length_0 vec_0)))"
"(let-values(((stop*_3449)(if stop_0 stop_0 len_3448)))"
"(begin"
"(check-ranges who_0 vec_0 start_0 stop*_3449 step_0 len_3448)"
"(values vec_0 start_0 stop*_3449 step_0))))))))"
"(define-values"
"(check-vector)"
"  (lambda (v_0) (begin (if (vector? v_0) (void) (let-values () (raise-argument-error 'in-vector \"vector\" v_0))))))"
"(define-values"
"(check-string)"
"  (lambda (v_0) (begin (if (string? v_0) (void) (let-values () (raise-argument-error 'in-string \"string\" v_0))))))"
"(define-values"
"(check-bytes)"
"  (lambda (v_0) (begin (if (bytes? v_0) (void) (let-values () (raise-argument-error 'in-bytes \"bytes\" v_0))))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_0)((do-stream-ref v_0 0)))"
"(lambda(v_0)((do-stream-ref v_0 1)))"
"(lambda(v_0)((do-stream-ref v_0 2))))))))"
"(define-values(empty-stream)(make-do-stream(lambda() #t) void void))"
"(define-values"
"(grow-vector)"
"(lambda(vec_0)"
"(begin"
"(let-values(((n_3765)(vector-length vec_0)))"
"(let-values(((new-vec_3766)(make-vector(* 2 n_3765))))"
"(begin(vector-copy! new-vec_3766 0 vec_0 0 n_3765) new-vec_3766))))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_0 i_0)"
"(begin"
"(let-values(((new-vec_3769)(make-vector i_0)))"
"(begin(vector-copy! new-vec_3769 0 vec_0 0 i_0) new-vec_3769)))))"
"(define-values"
"(map2)"
"(let-values(((map_4)"
"(case-lambda"
"((f_0 l_0)"
"(begin"
" 'map"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_0)(if(procedure-arity-includes? f_0 1)(list? l_0) #f) #f))"
"((letrec-values(((loop_7)"
"(lambda(l_1)"
"(begin"
" 'loop"
"(if(null? l_1)"
"(let-values() null)"
"(let-values()"
"(let-values(((r_9)(cdr l_1)))"
"(cons(f_0(car l_1))(loop_7 r_9)))))))))"
" loop_7)"
" l_0)"
"(gen-map f_0(list l_0)))))"
"((f_0 l1_0 l2_0)"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_0)"
"(if(procedure-arity-includes? f_0 2)"
"(if(list? l1_0)(if(list? l2_0)(=(length l1_0)(length l2_0)) #f) #f)"
" #f)"
" #f))"
"((letrec-values(((loop_13)"
"(lambda(l1_1 l2_1)"
"(begin"
" 'loop"
"(if(null? l1_1)"
"(let-values() null)"
"(let-values()"
"(let-values(((r1_16)(cdr l1_1))((r2_17)(cdr l2_1)))"
"(cons(f_0(car l1_1)(car l2_1))(loop_13 r1_16 r2_17)))))))))"
" loop_13)"
" l1_0"
" l2_0)"
"(gen-map f_0(list l1_0 l2_0))))"
"((f_0 l_0 . args_0)(gen-map f_0(cons l_0 args_0))))))"
" map_4))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_21)"
"(case-lambda"
"((f_0 l_0)"
"(begin"
" 'for-each"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_0)(if(procedure-arity-includes? f_0 1)(list? l_0) #f) #f))"
"((letrec-values(((loop_24)"
"(lambda(l_1)"
"(begin"
" 'loop"
"(if(null? l_1)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r_26)(cdr l_1)))"
"(begin(f_0(car l_1))(loop_24 r_26)))))))))"
" loop_24)"
" l_0)"
"(gen-for-each f_0(list l_0)))))"
"((f_0 l1_0 l2_0)"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_0)"
"(if(procedure-arity-includes? f_0 2)"
"(if(list? l1_0)(if(list? l2_0)(=(length l1_0)(length l2_0)) #f) #f)"
" #f)"
" #f))"
"((letrec-values(((loop_30)"
"(lambda(l1_1 l2_1)"
"(begin"
" 'loop"
"(if(null? l1_1)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r1_33)(cdr l1_1))((r2_34)(cdr l2_1)))"
"(begin(f_0(car l1_1)(car l2_1))(loop_30 r1_33 r2_34)))))))))"
" loop_30)"
" l1_0"
" l2_0)"
"(gen-for-each f_0(list l1_0 l2_0))))"
"((f_0 l_0 . args_0)(gen-for-each f_0(cons l_0 args_0))))))"
" for-each_21))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_38)"
"(case-lambda"
"((f_0 l_0)"
"(begin"
" 'andmap"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_0)(if(procedure-arity-includes? f_0 1)(list? l_0) #f) #f))"
"(if(null? l_0)"
" #t"
"((letrec-values(((loop_41)"
"(lambda(l_1)"
"(begin"
" 'loop"
"(if(null?(cdr l_1))"
"(let-values()(f_0(car l_1)))"
"(let-values()"
"(let-values(((r_43)(cdr l_1)))"
"(if(f_0(car l_1))(loop_41 r_43) #f))))))))"
" loop_41)"
" l_0))"
"(gen-andmap f_0(list l_0)))))"
"((f_0 l1_0 l2_0)"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_0)"
"(if(procedure-arity-includes? f_0 2)"
"(if(list? l1_0)(if(list? l2_0)(=(length l1_0)(length l2_0)) #f) #f)"
" #f)"
" #f))"
"(if(null? l1_0)"
" #t"
"((letrec-values(((loop_47)"
"(lambda(l1_1 l2_1)"
"(begin"
" 'loop"
"(if(null?(cdr l1_1))"
"(let-values()(f_0(car l1_1)(car l2_1)))"
"(let-values()"
"(let-values(((r1_50)(cdr l1_1))((r2_51)(cdr l2_1)))"
"(if(f_0(car l1_1)(car l2_1))(loop_47 r1_50 r2_51) #f))))))))"
" loop_47)"
" l1_0"
" l2_0))"
"(gen-andmap f_0(list l1_0 l2_0))))"
"((f_0 l_0 . args_0)(gen-andmap f_0(cons l_0 args_0))))))"
" andmap_38))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_55)"
"(case-lambda"
"((f_0 l_0)"
"(begin"
" 'ormap"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_0)(if(procedure-arity-includes? f_0 1)(list? l_0) #f) #f))"
"(if(null? l_0)"
" #f"
"((letrec-values(((loop_58)"
"(lambda(l_1)"
"(begin"
" 'loop"
"(if(null?(cdr l_1))"
"(let-values()(f_0(car l_1)))"
"(let-values()"
"(let-values(((r_60)(cdr l_1)))"
"(let-values(((or-part_61)(f_0(car l_1))))"
"(if or-part_61 or-part_61(loop_58 r_60))))))))))"
" loop_58)"
" l_0))"
"(gen-ormap f_0(list l_0)))))"
"((f_0 l1_0 l2_0)"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_0)"
"(if(procedure-arity-includes? f_0 2)"
"(if(list? l1_0)(if(list? l2_0)(=(length l1_0)(length l2_0)) #f) #f)"
" #f)"
" #f))"
"(if(null? l1_0)"
" #f"
"((letrec-values(((loop_65)"
"(lambda(l1_1 l2_1)"
"(begin"
" 'loop"
"(if(null?(cdr l1_1))"
"(let-values()(f_0(car l1_1)(car l2_1)))"
"(let-values()"
"(let-values(((r1_68)(cdr l1_1))((r2_69)(cdr l2_1)))"
"(let-values(((or-part_70)(f_0(car l1_1)(car l2_1))))"
"(if or-part_70 or-part_70(loop_65 r1_68 r2_69))))))))))"
" loop_65)"
" l1_0"
" l2_0))"
"(gen-ormap f_0(list l1_0 l2_0))))"
"((f_0 l_0 . args_0)(gen-ormap f_0(cons l_0 args_0))))))"
" ormap_55))"
"(define-values"
"(check-args)"
"(lambda(who_0 f_0 ls_0)"
"(begin"
"(begin"
"        (if (procedure? f_0) (void) (let-values () (raise-argument-error who_0 \"procedure?\" f_0)))"
"((letrec-values(((loop_77)"
"(lambda(prev-len_0 ls_1 i_0)"
"(begin"
" 'loop"
"(if(null? ls_1)"
"(void)"
"(let-values()"
"(let-values(((l_81)(car ls_1)))"
"(begin"
"                                      (if (list? l_81) (void) (let-values () (raise-argument-error who_0 \"list?\" l_81)))"
"(let-values(((len_82)(length l_81)))"
"(begin"
"(if(if prev-len_0(not(= len_82 prev-len_0)) #f)"
"(let-values()"
"(raise-arguments-error"
" who_0"
"                                               \"all lists must have same size\""
"                                               \"first list length\""
" prev-len_0"
"                                               \"other list length\""
" len_82"
"                                               \"procedure\""
" f_0))"
"(void))"
"(loop_77 len_82(cdr ls_1)(add1 i_0))))))))))))"
" loop_77)"
" #f"
" ls_0"
" 1)"
"(if(procedure-arity-includes? f_0(length ls_0))"
"(void)"
"(let-values()"
"(let-values(((required-keywords_83 optional-keywords_84)(procedure-keywords f_0)))"
"(apply"
" raise-arguments-error"
" who_0"
"(if(pair? required-keywords_83)"
"                 (string-append \"argument mismatch;\\n\" \" the given procedure expects keyword arguments\")"
"(string-append"
"                  \"argument mismatch;\\n\""
"                  \" the given procedure's expected number of arguments does not match\""
"                  \" the given number of lists\"))"
"               \"given procedure\""
"(unquoted-printing-string"
"(let-values(((or-part_85)"
"(let-values(((n_86)(object-name f_0)))(if(symbol? n_86)(symbol->string n_86) #f))))"
"                  (if or-part_85 or-part_85 \"#<procedure>\")))"
"(append"
"(let-values(((a_87)(procedure-arity f_0)))"
"(if(pair? required-keywords_83)"
"(let-values() null)"
"(if(integer? a_87)"
"                      (let-values () (list \"expected\" a_87))"
"(if(arity-at-least? a_87)"
"(let-values()"
"(list"
"                           \"expected\""
"(unquoted-printing-string"
"                            (string-append \"at least \" (number->string (arity-at-least-value a_87))))))"
"(let-values() null)))))"
"                (if (pair? required-keywords_83) (let-values () null) (let-values () (list \"given\" (length ls_0))))"
"(if(pair? required-keywords_83)"
"(let-values()"
"(list"
"                     \"required keywords\""
"(unquoted-printing-string"
"(apply"
" string-append"
"(cdr"
"((letrec-values(((loop_88)"
"(lambda(kws_0)"
"(begin"
" 'loop"
"(if(null? kws_0)"
"(let-values() null)"
"(let-values()"
"(list*"
"                                                   \" \""
"                                                   (string-append \"#:\" (keyword->string (car kws_0)))"
"(loop_88(cdr kws_0)))))))))"
" loop_88)"
" required-keywords_83))))))"
"(let-values() null))"
"(let-values(((w_90)(quotient(error-print-width)(length ls_0))))"
"(if(> w_90 10)"
"(list"
"                     \"argument lists...\""
"(unquoted-printing-string"
"(apply"
" string-append"
"((letrec-values(((loop_91)"
"(lambda(ls_1)"
"(begin"
" 'loop"
"(if(null? ls_1)"
"(let-values() null)"
"(let-values()"
"(cons"
"(string-append"
"                                                   \"\\n   \""
"((error-value->string-handler)(car ls_1) w_90))"
"(loop_91(cdr ls_1)))))))))"
" loop_91)"
" ls_0))))"
" null)))))))))))"
"(define-values"
"(gen-map)"
"(lambda(f_0 ls_0)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference)) #t(check-args 'map f_0 ls_0))"
"((letrec-values(((loop_95)"
"(lambda(ls_1)"
"(begin"
" 'loop"
"(if(null?(car ls_1))"
"(let-values() null)"
"(let-values()"
"(let-values(((next-ls_97)(map2 cdr ls_1)))"
"(cons(apply f_0(map2 car ls_1))(loop_95 next-ls_97)))))))))"
" loop_95)"
" ls_0)))))"
"(define-values"
"(gen-for-each)"
"(lambda(f_0 ls_0)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference)) #t(check-args 'for-each f_0 ls_0))"
"((letrec-values(((loop_100)"
"(lambda(ls_1)"
"(begin"
" 'loop"
"(if(null?(car ls_1))"
"(void)"
"(let-values()"
"(let-values(((next-ls_102)(map2 cdr ls_1)))"
"(begin(apply f_0(map2 car ls_1))(loop_100 next-ls_102)))))))))"
" loop_100)"
" ls_0)))))"
"(define-values"
"(gen-andmap)"
"(lambda(f_0 ls_0)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference)) #t(check-args 'andmap f_0 ls_0))"
"((letrec-values(((loop_105)"
"(lambda(ls_1)"
"(begin"
" 'loop"
"(if(null?(car ls_1))"
"(let-values() #t)"
"(if(null?(cdar ls_1))"
"(let-values()(apply f_0(map2 car ls_1)))"
"(let-values()"
"(let-values(((next-ls_107)(map2 cdr ls_1)))"
"(if(apply f_0(map2 car ls_1))(loop_105 next-ls_107) #f)))))))))"
" loop_105)"
" ls_0)))))"
"(define-values"
"(gen-ormap)"
"(lambda(f_0 ls_0)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference)) #t(check-args 'ormap f_0 ls_0))"
"((letrec-values(((loop_110)"
"(lambda(ls_1)"
"(begin"
" 'loop"
"(if(null?(car ls_1))"
"(let-values() #f)"
"(if(null?(cdar ls_1))"
"(let-values()(apply f_0(map2 car ls_1)))"
"(let-values()"
"(let-values(((next-ls_112)(map2 cdr ls_1)))"
"(let-values(((or-part_113)(apply f_0(map2 car ls_1))))"
"(if or-part_113 or-part_113(loop_110 next-ls_112)))))))))))"
" loop_110)"
" ls_0)))))"
"(define-values"
"(hash-keys)"
"(lambda(h_0)"
"(begin"
"((letrec-values(((loop_2)"
"(lambda(pos_0)"
"(begin"
" 'loop"
"(if pos_0"
"(cons(hash-iterate-key h_0 pos_0)(loop_2(hash-iterate-next h_0 pos_0)))"
" null)))))"
" loop_2)"
"(hash-iterate-first h_0)))))"
"(define-values"
"(hash-values)"
"(lambda(table_0)"
"(begin"
"(begin"
"        (if (hash? table_0) (void) (let-values () (raise-argument-error 'hash-values \"hash?\" table_0)))"
"(hash-map table_0(lambda(k_0 v_0) v_0))))))"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_0 key1_0 lst5_0 less?6_0)"
"(begin"
" 'sort7"
"(let-values(((lst_5) lst5_0))"
"(let-values(((less?_6) less?6_0))"
"(let-values(((getkey_7) key1_0))"
"(let-values(((cache-keys?_8) cache-keys?2_0))"
"(let-values()"
"(begin"
"                  (if (list? lst_5) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_5)))"
"(if(if(procedure? less?_6)(procedure-arity-includes? less?_6 2) #f)"
"(void)"
"                    (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_6)))"
"(if(if getkey_7(not(if(procedure? getkey_7)(procedure-arity-includes? getkey_7 1) #f)) #f)"
"                    (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_7))"
"(void))"
"(if getkey_7(sort lst_5 less?_6 getkey_7 cache-keys?_8)(sort lst_5 less?_6)))))))))))"
"(define-values"
"(bad-list)"
"  (lambda (who_0 orig-l_0) (begin (raise-mismatch-error who_0 \"not a proper list: \" orig-l_0))))"
"(define-values"
"(bad-item)"
"  (lambda (who_0 a_0 orig-l_0) (begin (raise-mismatch-error who_0 \"non-pair found in list: \" a_0 \" in \" orig-l_0))))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values()"
"(let-values(((assq_95)"
"(lambda(x_0 l_0)"
"(begin"
" 'assq"
"((letrec-values(((loop_101)"
"(lambda(l_1 t_0)"
"(begin"
" 'loop"
"(if(pair? l_1)"
"(let-values()"
"(let-values(((a_104)(unsafe-car l_1)))"
"(if(pair? a_104)"
"(if(eq? x_0(unsafe-car a_104))"
" a_104"
"(let-values(((l_105)(unsafe-cdr l_1)))"
"(if(pair? l_105)"
"(let-values()"
"(let-values(((a_106)(unsafe-car l_105)))"
"(if(pair? a_106)"
"(if(eq? x_0(unsafe-car a_106))"
" a_106"
"(let-values(((t_107)(unsafe-cdr t_0))"
"((l_108)(unsafe-cdr l_105)))"
"(if(eq? l_108 t_107)"
"(bad-list 'assq l_0)"
"(loop_101 l_108 t_107))))"
"(bad-item 'assq a_106 l_0))))"
"(if(null? l_105)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_0))))))"
"(bad-item 'assq a_104 l_0))))"
"(if(null? l_1)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_0))))))))"
" loop_101)"
" l_0"
" l_0))))"
"((assv_96)"
"(lambda(x_0 l_0)"
"(begin"
" 'assv"
"((letrec-values(((loop_111)"
"(lambda(l_1 t_0)"
"(begin"
" 'loop"
"(if(pair? l_1)"
"(let-values()"
"(let-values(((a_114)(unsafe-car l_1)))"
"(if(pair? a_114)"
"(if(eqv? x_0(unsafe-car a_114))"
" a_114"
"(let-values(((l_115)(unsafe-cdr l_1)))"
"(if(pair? l_115)"
"(let-values()"
"(let-values(((a_116)(unsafe-car l_115)))"
"(if(pair? a_116)"
"(if(eqv? x_0(unsafe-car a_116))"
" a_116"
"(let-values(((t_117)(unsafe-cdr t_0))"
"((l_118)(unsafe-cdr l_115)))"
"(if(eq? l_118 t_117)"
"(bad-list 'assv l_0)"
"(loop_111 l_118 t_117))))"
"(bad-item 'assv a_116 l_0))))"
"(if(null? l_115)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_0))))))"
"(bad-item 'assv a_114 l_0))))"
"(if(null? l_1)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_0))))))))"
" loop_111)"
" l_0"
" l_0))))"
"((assoc_97)"
"(case-lambda"
"((x_0 l_0)"
"(begin"
" 'assoc"
"((letrec-values(((loop_121)"
"(lambda(l_1 t_0)"
"(begin"
" 'loop"
"(if(pair? l_1)"
"(let-values()"
"(let-values(((a_124)(unsafe-car l_1)))"
"(if(pair? a_124)"
"(if(equal? x_0(unsafe-car a_124))"
" a_124"
"(let-values(((l_125)(unsafe-cdr l_1)))"
"(if(pair? l_125)"
"(let-values()"
"(let-values(((a_126)(unsafe-car l_125)))"
"(if(pair? a_126)"
"(if(equal? x_0(unsafe-car a_126))"
" a_126"
"(let-values(((t_127)(unsafe-cdr t_0))"
"((l_128)(unsafe-cdr l_125)))"
"(if(eq? l_128 t_127)"
"(bad-list 'assoc l_0)"
"(loop_121 l_128 t_127))))"
"(bad-item 'assoc a_126 l_0))))"
"(if(null? l_125)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_0))))))"
"(bad-item 'assoc a_124 l_0))))"
"(if(null? l_1)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_0))))))))"
" loop_121)"
" l_0"
" l_0)))"
"((x_0 l_0 is-equal?_0)"
"(begin"
"(if(if(procedure? is-equal?_0)(procedure-arity-includes? is-equal?_0 2) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_0)))"
"((letrec-values(((loop_132)"
"(lambda(l_1 t_0)"
"(begin"
" 'loop"
"(if(pair? l_1)"
"(let-values()"
"(let-values(((a_135)(unsafe-car l_1)))"
"(if(pair? a_135)"
"(if(is-equal?_0 x_0(unsafe-car a_135))"
" a_135"
"(let-values(((l_136)(unsafe-cdr l_1)))"
"(if(pair? l_136)"
"(let-values()"
"(let-values(((a_137)(unsafe-car l_136)))"
"(if(pair? a_137)"
"(if(is-equal?_0 x_0(unsafe-car a_137))"
" a_137"
"(let-values(((t_138)(unsafe-cdr t_0))"
"((l_139)(unsafe-cdr l_136)))"
"(if(eq? l_139 t_138)"
"(bad-list 'assoc l_0)"
"(loop_132 l_139 t_138))))"
"(bad-item 'assoc a_137 l_0))))"
"(if(null? l_136)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_0))))))"
"(bad-item 'assoc a_135 l_0))))"
"(if(null? l_1)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_0))))))))"
" loop_132)"
" l_0"
" l_0)))))"
"((assf_98)"
"(lambda(f_0 l_0)"
"(begin"
" 'assf"
"(begin"
"(if(if(procedure? f_0)(procedure-arity-includes? f_0 1) #f)"
"(void)"
"                            (let-values () (raise-argument-error 'assf \"(any/c . -> . any/c)\" f_0)))"
"((letrec-values(((loop_142)"
"(lambda(l_1 t_0)"
"(begin"
" 'loop"
"(if(pair? l_1)"
"(let-values()"
"(let-values(((a_145)(unsafe-car l_1)))"
"(if(pair? a_145)"
"(if((lambda(__0 a_0)(f_0 a_0)) #f(unsafe-car a_145))"
" a_145"
"(let-values(((l_148)(unsafe-cdr l_1)))"
"(if(pair? l_148)"
"(let-values()"
"(let-values(((a_149)(unsafe-car l_148)))"
"(if(pair? a_149)"
"(if((lambda(__0 a_0)(f_0 a_0))"
" #f"
"(unsafe-car a_149))"
" a_149"
"(let-values(((t_152)(unsafe-cdr t_0))"
"((l_153)(unsafe-cdr l_148)))"
"(if(eq? l_153 t_152)"
"(bad-list 'assf l_0)"
"(loop_142 l_153 t_152))))"
"(bad-item 'assf a_149 l_0))))"
"(if(null? l_148)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_0))))))"
"(bad-item 'assf a_145 l_0))))"
"(if(null? l_1)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_0))))))))"
" loop_142)"
" l_0"
" l_0))))))"
"(values assq_95 assv_96 assoc_97 assf_98)))))"
"(define-values"
"(filter)"
"(lambda(f_0 list_0)"
"(begin"
"(begin"
"(if(if(procedure? f_0)(procedure-arity-includes? f_0 1) #f)"
"(void)"
"          (let-values () (raise-argument-error 'filter \"(any/c . -> . any/c)\" f_0)))"
"        (if (list? list_0) (void) (let-values () (raise-argument-error 'filter \"list?\" list_0)))"
"((letrec-values(((loop_195)"
"(lambda(l_0 result_0)"
"(begin"
" 'loop"
"(if(null? l_0)"
"(reverse$1 result_0)"
"(loop_195(cdr l_0)(if(f_0(car l_0))(cons(car l_0) result_0) result_0)))))))"
" loop_195)"
" list_0"
" null)))))"
"(define-values(no-empty-edge-table)(make-hash))"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_0 mode1_0 path5_0)"
"(begin"
" 'open-input-file6"
"(let-values(((path_4) path5_0))"
"(let-values(((mode_5) mode1_0))"
"(let-values(((for-module?_6) for-module?2_0))"
"(let-values()"
"(begin"
"(if(path-string? path_4)"
"(void)"
"                  (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_4)))"
"(if(memq mode_5 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_5)))"
"(open-input-file path_4 mode_5(if for-module?_6 'module 'none))))))))))"
"(define-values"
"(with-input-from-file45.1)"
"(lambda(mode41_0 path43_0 proc44_0)"
"(begin"
" 'with-input-from-file45"
"(let-values(((path_136) path43_0))"
"(let-values(((proc_137) proc44_0))"
"(let-values(((mode_138) mode41_0))"
"(let-values()"
"(begin"
"(if(path-string? path_136)"
"(void)"
"                  (let-values () (raise-argument-error 'with-input-from-file \"path-string?\" path_136)))"
"(if(if(procedure? proc_137)(procedure-arity-includes? proc_137 0) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'with-input-from-file \"(-> any)\" proc_137)))"
"(if(memq mode_138 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-input-from-file binary-or-text-desc mode_138)))"
"(with-input-from-file path_136 proc_137 mode_138)))))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_0 path59_0 proc60_0)"
"(begin"
" 'call-with-input-file*61"
"(let-values(((path_190) path59_0))"
"(let-values(((proc_191) proc60_0))"
"(let-values(((mode_192) mode57_0))"
"(let-values()"
"(begin"
"(if(path-string? path_190)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_190)))"
"(if(if(procedure? proc_191)(procedure-arity-includes? proc_191 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_191)))"
"(if(memq mode_192 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_192)))"
"(let-values(((p_193)(open-input-file path_190 mode_192)))"
"(dynamic-wind void(lambda()(proc_191 p_193))(lambda()(close-input-port p_193))))))))))))"
"(define-values(the-empty-hash) '#hash())"
"(define-values(the-empty-hasheq) '#hasheq())"
"(define-values(the-empty-hasheqv) '#hasheqv())"
"(define-values"
"(set)"
"(case-lambda"
"(()(begin the-empty-hash))"
"(l_0"
"(let-values(((lst_77) l_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_77)))"
"((letrec-values(((for-loop_78)"
"(lambda(s_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_81)(unsafe-car lst_0))((rest_82)(unsafe-cdr lst_0)))"
"(let-values(((s_83)"
"(let-values(((s_84) s_0))"
"(let-values(((s_85)(let-values()(hash-set s_84 e_81 #t))))"
"(values s_85)))))"
"(if(not #f)(for-loop_78 s_83 rest_82) s_83)))"
" s_0)))))"
" for-loop_78)"
" the-empty-hash"
" lst_77))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(()(begin the-empty-hasheq))"
"(l_0"
"(let-values(((lst_87) l_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_87)))"
"((letrec-values(((for-loop_88)"
"(lambda(s_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_91)(unsafe-car lst_0))((rest_92)(unsafe-cdr lst_0)))"
"(let-values(((s_93)"
"(let-values(((s_94) s_0))"
"(let-values(((s_95)(let-values()(hash-set s_94 e_91 #t))))"
"(values s_95)))))"
"(if(not #f)(for-loop_88 s_93 rest_92) s_93)))"
" s_0)))))"
" for-loop_88)"
" the-empty-hasheq"
" lst_87))))))"
"(define-values(seteqv)(lambda()(begin the-empty-hasheqv)))"
"(define-values(set?)(lambda(s_0)(begin(hash? s_0))))"
"(define-values(set-empty?)(lambda(s_0)(begin(zero?(hash-count s_0)))))"
"(define-values(set-member?)(lambda(s_0 e_0)(begin(hash-ref s_0 e_0 #f))))"
"(define-values(set-count)(lambda(s_0)(begin(hash-count s_0))))"
"(define-values(set-add)(lambda(s_0 e_0)(begin(hash-set s_0 e_0 #t))))"
"(define-values(set-remove)(lambda(s_0 e_0)(begin(hash-remove s_0 e_0))))"
"(define-values(set-first)(lambda(s_0)(begin(hash-iterate-key s_0(hash-iterate-first s_0)))))"
"(define-values(subset?)(lambda(s1_0 s2_0)(begin(hash-keys-subset? s1_0 s2_0))))"
"(define-values"
"(set=?)"
"(lambda(s1_0 s2_0)"
"(begin"
"(let-values(((or-part_110)(eq? s1_0 s2_0)))"
"(if or-part_110 or-part_110(if(=(hash-count s1_0)(hash-count s2_0))(hash-keys-subset? s1_0 s2_0) #f))))))"
"(define-values"
"(set-subtract)"
"(lambda(s1_0 s2_0)"
"(begin"
"(let-values(((ht_113) s2_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_113)))"
"((letrec-values(((for-loop_114)"
"(lambda(s1_1 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_117)(unsafe-immutable-hash-iterate-key ht_113 i_0)))"
"(let-values(((s1_118)"
"(let-values(((s1_119) s1_1))"
"(let-values(((s1_120)(let-values()(hash-remove s1_119 k_117))))"
"(values s1_120)))))"
"(if(not #f)"
"(for-loop_114 s1_118(unsafe-immutable-hash-iterate-next ht_113 i_0))"
" s1_118)))"
" s1_1)))))"
" for-loop_114)"
" s1_0"
"(unsafe-immutable-hash-iterate-first ht_113)))))))"
"(define-values"
"(set-union)"
"(lambda(s1_0 s2_0)"
"(begin"
"(if(<(set-count s1_0)(set-count s2_0))"
"(set-union s2_0 s1_0)"
"(let-values(((ht_123) s2_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_123)))"
"((letrec-values(((for-loop_124)"
"(lambda(s1_1 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_127)(unsafe-immutable-hash-iterate-key ht_123 i_0)))"
"(let-values(((s1_128)"
"(let-values(((s1_129) s1_1))"
"(let-values(((s1_130)"
"(let-values()(hash-set s1_129 k_127 #t))))"
"(values s1_130)))))"
"(if(not #f)"
"(for-loop_124 s1_128(unsafe-immutable-hash-iterate-next ht_123 i_0))"
" s1_128)))"
" s1_1)))))"
" for-loop_124)"
" s1_0"
"(unsafe-immutable-hash-iterate-first ht_123))))))))"
"(define-values"
"(set-intersect)"
"(lambda(s1_0 s2_0)"
"(begin"
"(if(<(set-count s1_0)(set-count s2_0))"
"(set-intersect s2_0 s1_0)"
"(let-values(((ht_133) s2_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_133)))"
"((letrec-values(((for-loop_134)"
"(lambda(s_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_137)(unsafe-immutable-hash-iterate-key ht_133 i_0)))"
"(let-values(((s_138)"
"(let-values(((s_139) s_0))"
"(let-values(((s_140)"
"(let-values()"
"(if(hash-ref s1_0 k_137 #f)"
" s_139"
"(hash-remove s_139 k_137)))))"
"(values s_140)))))"
"(if(not #f)"
"(for-loop_134 s_138(unsafe-immutable-hash-iterate-next ht_133 i_0))"
" s_138)))"
" s_0)))))"
" for-loop_134)"
" s2_0"
"(unsafe-immutable-hash-iterate-first ht_133))))))))"
"(define-values"
"(set-partition)"
"(lambda(s_0 pred_0 empty-y-set_0 empty-n-set_0)"
"(begin"
"(let-values(((ht_145) s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_145)))"
"((letrec-values(((for-loop_146)"
"(lambda(y_0 n_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((v_150)(unsafe-immutable-hash-iterate-key ht_145 i_0)))"
"(let-values(((y_151 n_152)"
"(let-values(((y_153) y_0)((n_154) n_0))"
"(let-values(((y_155 n_156)"
"(let-values()"
"(if(pred_0 v_150)"
"(values(set-add y_153 v_150) n_154)"
"(values y_153(set-add n_154 v_150))))))"
"(values y_155 n_156)))))"
"(if(not #f)"
"(for-loop_146 y_151 n_152(unsafe-immutable-hash-iterate-next ht_145 i_0))"
"(values y_151 n_152))))"
"(values y_0 n_0))))))"
" for-loop_146)"
" empty-y-set_0"
" empty-n-set_0"
"(unsafe-immutable-hash-iterate-first ht_145)))))))"
"(define-values"
"(set->list)"
"(lambda(s_0)"
"(begin"
"(reverse$1"
"(let-values(((ht_158) s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_158)))"
"((letrec-values(((for-loop_159)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_162)(unsafe-immutable-hash-iterate-key ht_158 i_0)))"
"(let-values(((fold-var_163)"
"(let-values(((fold-var_164) fold-var_0))"
"(let-values(((fold-var_165)"
"(let-values()"
"(cons(let-values() k_162) fold-var_164))))"
"(values fold-var_165)))))"
"(if(not #f)"
"(for-loop_159 fold-var_163(unsafe-immutable-hash-iterate-next ht_158 i_0))"
" fold-var_163)))"
" fold-var_0)))))"
" for-loop_159)"
" null"
"(unsafe-immutable-hash-iterate-first ht_158))))))))"
"(define-values"
"(list->set)"
"(lambda(l_0)"
"(begin"
"(let-values(((lst_167) l_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_167)))"
"((letrec-values(((for-loop_168)"
"(lambda(table_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((k_171)(unsafe-car lst_0))((rest_172)(unsafe-cdr lst_0)))"
"(let-values(((table_173)"
"(let-values(((table_174) table_0))"
"(let-values(((table_175)"
"(let-values()"
"(let-values(((key_176 val_177)"
"(let-values()"
"(values(let-values() k_171) #t))))"
"(hash-set table_174 key_176 val_177)))))"
"(values table_175)))))"
"(if(not #f)(for-loop_168 table_173 rest_172) table_173)))"
" table_0)))))"
" for-loop_168)"
" '#hash()"
" lst_167))))))"
"(define-values"
"(list->seteq)"
"(lambda(l_0)"
"(begin"
"(let-values(((lst_179) l_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_179)))"
"((letrec-values(((for-loop_180)"
"(lambda(table_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((k_183)(unsafe-car lst_0))((rest_184)(unsafe-cdr lst_0)))"
"(let-values(((table_185)"
"(let-values(((table_186) table_0))"
"(let-values(((table_187)"
"(let-values()"
"(let-values(((key_188 val_189)"
"(let-values()"
"(values(let-values() k_183) #t))))"
"(hash-set table_186 key_188 val_189)))))"
"(values table_187)))))"
"(if(not #f)(for-loop_180 table_185 rest_184) table_185)))"
" table_0)))))"
" for-loop_180)"
" '#hasheq()"
" lst_179))))))"
"(define-values(start-atomic)(lambda()(begin(unsafe-start-atomic))))"
"(define-values(end-atomic)(lambda()(begin(unsafe-end-atomic))))"
"(define-values(start-breakable-atomic)(lambda()(begin(unsafe-start-breakable-atomic))))"
"(define-values(end-breakable-atomic)(lambda()(begin(unsafe-end-breakable-atomic))))"
"(define-values(monitor-owner) #f)"
"(define-values"
"(entered-err-string-handler)"
"(lambda(s_0 n_0)(begin(call-as-nonatomic(lambda()((error-value->string-handler) s_0 n_0))))))"
"(define-values(old-paramz) #f)"
"(define-values(old-break-paramz) #f)"
"(define-values(extra-atomic-depth) 0)"
"(define-values(exited-key)(gensym 'as-exit))"
"(define-values(lock-tag)(make-continuation-prompt-tag 'lock))"
"(define-values"
"(call-as-atomic)"
"(lambda(f_0)"
"(begin"
"(begin"
"(if(if(procedure? f_0)(procedure-arity-includes? f_0 0) #f)"
"(void)"
"          (let-values () (raise-type-error 'call-as-atomic \"procedure (arity 0)\" f_0)))"
"(if(eq? monitor-owner(current-thread))"
"(let-values()"
"(dynamic-wind"
"(lambda()(begin(start-breakable-atomic)(set! extra-atomic-depth(add1 extra-atomic-depth))))"
" f_0"
"(lambda()(begin(set! extra-atomic-depth(sub1 extra-atomic-depth))(end-breakable-atomic)))))"
"(let-values()"
"(with-continuation-mark"
" exited-key"
" #f"
"(call-with-continuation-prompt"
"(lambda()"
"(dynamic-wind"
"(lambda()(begin(start-breakable-atomic)(set! monitor-owner(current-thread))))"
"(lambda()"
"(begin"
"(set! old-paramz(current-parameterization))"
"(set! old-break-paramz(current-break-parameterization))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" error-value->string-handler"
" entered-err-string-handler)"
"(let-values()"
"(with-continuation-mark"
" break-enabled-key"
"(make-thread-cell #f)"
"(begin"
"(check-for-break)"
"(let-values()"
"(call-with-exception-handler"
"(lambda(exn_0)"
"(if(continuation-mark-set-first #f exited-key)"
" exn_0"
"(abort-current-continuation lock-tag(lambda()(raise exn_0)))))"
" f_0))))))))"
"(lambda()"
"(begin"
"(set! monitor-owner #f)"
"(set! old-paramz #f)"
"(set! old-break-paramz #f)"
"(end-breakable-atomic)))))"
" lock-tag"
"(lambda(t_0)(t_0))))))))))"
"(define-values"
"(call-as-nonatomic)"
"(lambda(f_0)"
"(begin"
"(begin"
"(if(if(procedure? f_0)(procedure-arity-includes? f_0 0) #f)"
"(void)"
"          (let-values () (raise-type-error 'call-as-nonatomic \"procedure (arity 0)\" f_0)))"
"(if(eq? monitor-owner(current-thread))"
"(void)"
"          (let-values () (error 'call-as-nonatomic \"not in atomic area for ~e\" f_0)))"
"(let-values(((paramz_7) old-paramz)((break-paramz_8) old-break-paramz)((extra-depth_9) extra-atomic-depth))"
"(with-continuation-mark"
" exited-key"
" #t"
"(call-with-parameterization"
" paramz_7"
"(lambda()"
"(call-with-break-parameterization"
" break-paramz_8"
"(lambda()"
"(dynamic-wind"
"(lambda()"
"(begin"
"(set! monitor-owner #f)"
"(set! extra-atomic-depth 0)"
"(end-breakable-atomic)"
"((letrec-values(((loop_10)"
"(lambda(i_0)"
"(begin"
" 'loop"
"(if(zero? i_0)"
"(void)"
"(let-values()(begin(end-breakable-atomic)(loop_10(sub1 i_0)))))))))"
" loop_10)"
" extra-depth_9)))"
" f_0"
"(lambda()"
"(begin"
"(start-breakable-atomic)"
"(set! old-paramz paramz_7)"
"(set! old-break-paramz break-paramz_8)"
"((letrec-values(((loop_12)"
"(lambda(i_0)"
"(begin"
" 'loop"
"(if(zero? i_0)"
"(void)"
"(let-values()(begin(start-breakable-atomic)(loop_12(sub1 i_0)))))))))"
" loop_12)"
" extra-depth_9)"
"(set! extra-atomic-depth extra-depth_9)"
"(set! monitor-owner(current-thread)))))))))))))))"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(define-values"
"(1/module-path?)"
"(lambda(v_0)"
"(begin"
" 'module-path?"
"(let-values(((or-part_2)(if(pair? v_0)(if(eq?(car v_0) 'submod)(submodule-module-path? v_0) #f) #f)))"
"(if or-part_2 or-part_2(root-module-path? v_0))))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_0)"
"(begin"
"(let-values(((or-part_4)(path? v_0)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(if(string? v_0)(string-module-path? v_0) #f)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(if(symbol? v_0)(symbol-module-path? v_0) #f)))"
"(if or-part_6"
" or-part_6"
"(if(pair? v_0)"
"(let-values(((tmp_7)(car v_0)))"
"(if(equal? tmp_7 'quote)"
"(let-values()(if(pair?(cdr v_0))(if(symbol?(cadr v_0))(null?(cddr v_0)) #f) #f))"
"(if(equal? tmp_7 'lib)"
"(let-values()(lib-module-path? v_0))"
"(if(equal? tmp_7 'file)"
"(let-values()"
"(if(pair?(cdr v_0))"
"(if(string?(cadr v_0))(if(path-string?(cadr v_0))(null?(cddr v_0)) #f) #f)"
" #f))"
"(if(equal? tmp_7 'planet)(let-values()(planet-module-path? v_0))(let-values() #f))))))"
" #f))))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_0)"
"(begin"
"(if(pair?(cdr v_0))"
"(if(list? v_0)"
"          (if (let-values (((or-part_9) (equal? (cadr v_0) \"..\")))"
"(if or-part_9"
" or-part_9"
"                  (let-values (((or-part_10) (equal? (cadr v_0) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_0))))))"
"(let-values(((lst_11)(cddr v_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_11)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_15)(unsafe-car lst_0))((rest_16)(unsafe-cdr lst_0)))"
"(let-values(((result_17)"
"(let-values()"
"(let-values(((result_19)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_20)"
"                                                                                          (equal? e_15 \"..\")))"
"(if or-part_20"
" or-part_20"
"(symbol? e_15)))))))"
"(values result_19)))))"
"(if(if(not((lambda x_0(not result_17)) e_15))(not #f) #f)"
"(for-loop_12 result_17 rest_16)"
" result_17)))"
" result_0)))))"
" for-loop_12)"
" #t"
" lst_11)))"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(string-module-path?)"
"(lambda(v_0)"
"(begin"
"(let-values(((v13_24) v_0)((temp14_25) #t)((temp15_26) #t)((temp16_27) #t))"
"(module-path-string?10.1 temp14_25 temp16_27 #f temp15_26 v13_24)))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_0)"
"(begin(let-values(((temp17_29)(symbol->string v_0)))(module-path-string?10.1 #f #f #f #f temp17_29)))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_0)"
"(begin"
"(if(list? v_0)"
"(if(pair?(cdr v_0))"
"((letrec-values(((loop_31)"
"(lambda(v_1 first?_0)"
"(begin"
" 'loop"
"(let-values(((or-part_34)(null? v_1)))"
"(if or-part_34"
" or-part_34"
"(if(string?(car v_1))"
"(if(let-values(((temp18_36)(car v_1))"
"((first?19_37) first?_0)"
"((first?20_38) first?_0))"
"(module-path-string?10.1 #f first?20_38 #f first?19_37 temp18_36))"
"(loop_31(cdr v_1) #f)"
" #f)"
" #f)))))))"
" loop_31)"
"(cdr v_0)"
" #t)"
" #f)"
" #f))))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_0)"
"(begin"
"(if(list? v_0)"
"(let-values(((tmp_40)(length v_0)))"
"(if(equal? tmp_40 1)"
"(let-values() #f)"
"(if(equal? tmp_40 2)"
"(let-values()"
"(let-values(((e_41)(cadr v_0)))"
"(if(string? e_41)"
"(let-values()"
"(let-values(((e21_43) e_41)((temp22_44) #t)((temp23_45) #t))"
"(module-path-string?10.1 #f temp23_45 temp22_44 #f e21_43)))"
"(if(symbol? e_41)"
"(let-values()"
"(let-values(((temp24_47)(symbol->string e_41))((temp25_48) #t))"
"(module-path-string?10.1 #f #f temp25_48 #f temp24_47)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_49)(cadr v_0)))"
"(let-values(((pkg_50)(caddr v_0)))"
"(let-values(((subs_51)(cdddr v_0)))"
"(if file_49"
"(if(let-values(((file26_53) file_49)((temp27_54) #t)((temp28_55) #t))"
"(module-path-string?10.1 #f temp28_55 #f temp27_54 file26_53))"
"(if(if(list? pkg_50)"
"(if(<= 2(length pkg_50) 4)"
"(if(planet-user/pkg-string?(car pkg_50))"
"(if(planet-user/pkg-string?(cadr pkg_50))"
"(let-values(((or-part_56)(null?(cddr pkg_50))))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_57)(planet-version-number?(caddr pkg_50))))"
"(if or-part_57"
" or-part_57"
"(let-values(((or-part_58)(null?(cddr pkg_50))))"
"(if or-part_58"
" or-part_58"
"(planet-version-minor-spec?(cadddr pkg_50))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_59) subs_51))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_59)))"
"((letrec-values(((for-loop_60)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((sub_63)(unsafe-car lst_0))"
"((rest_64)(unsafe-cdr lst_0)))"
"(let-values(((result_65)"
"(let-values()"
"(let-values(((result_67)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_68)"
" sub_63))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" sub29_68))))))"
"(values result_67)))))"
"(if(if(not((lambda x_0(not result_65)) sub_63))"
"(not #f)"
" #f)"
"(for-loop_60 result_65 rest_64)"
" result_65)))"
" result_0)))))"
" for-loop_60)"
" #t"
" lst_59)))"
" #f)"
" #f)"
" #f))))))))"
" #f))))"
"(define-values(planet-version-number?)(lambda(v_0)(begin(exact-nonnegative-integer? v_0))))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_0)"
"(begin"
"(let-values(((or-part_72)(planet-version-number? v_0)))"
"(if or-part_72"
" or-part_72"
"(if(pair? v_0)"
"(if(list? v_0)"
"(if(= 2(length v_0))"
"(let-values(((tmp_73)(car v_0)))"
"(if(if(equal? tmp_73 '=) #t(if(equal? tmp_73 '+) #t(equal? tmp_73 '-)))"
"(let-values()(planet-version-number?(cadr v_0)))"
"(let-values()(if(planet-version-number?(car v_0))(planet-version-number?(cadr v_0)) #f))))"
" #f)"
" #f)"
" #f))))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_0 file-end-ok?4_0 for-planet?1_0 just-file-ok?3_0 v9_0)"
"(begin"
" 'module-path-string?10"
"(let-values(((v_79) v9_0))"
"(let-values(((for-planet?_80) for-planet?1_0))"
"(let-values(((dots-dir-ok?_81) dots-dir-ok?2_0))"
"(let-values(((just-file-ok?_82) just-file-ok?3_0))"
"(let-values(((file-end-ok?_83) file-end-ok?4_0))"
"(let-values()"
"(let-values(((len_84)(string-length v_79)))"
"(if(positive? len_84)"
"(if(not(char=? '#\\/(string-ref v_79 0)))"
"(if(not(char=? '#\\/(string-ref v_79(sub1 len_84))))"
"(let-values(((start-package-version-pos_85 end-package-version-pos_86)"
"(if for-planet?_80(check-planet-part v_79 len_84)(values 0 0))))"
"(if start-package-version-pos_85"
"((letrec-values(((loop_87)"
"(lambda(i_0 prev-was-slash?_0 saw-slash?_0 saw-dot?_0)"
"(begin"
" 'loop"
"(if(not(negative? i_0))"
"(let-values()"
"(let-values(((c_92)(string-ref v_79 i_0)))"
"(if(char=? c_92 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_0)"
"(loop_87(sub1 i_0) #t #t saw-dot?_0)"
" #f))"
"(if(char=? c_92 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_0) len_84)"
"(if(not"
"(char=?(string-ref v_79(add1 i_0)) '#\\/))"
"(not(char=?(string-ref v_79(add1 i_0)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_0)"
"(loop_87(sub1 i_0) #f saw-slash?_0 #t)"
" #f)"
"(loop_87(sub1 i_0) #f saw-slash?_0 saw-dot?_0)))"
"(if(let-values(((or-part_93)(plain-char? c_92)))"
"(if or-part_93"
" or-part_93"
"(if(char=? c_92 '#\\%)"
"(if(<(+ i_0 2) len_84)"
"(hex-sequence? v_79(add1 i_0))"
" #f)"
" #f)))"
"(let-values()"
"(loop_87(sub1 i_0) #f saw-slash?_0 saw-dot?_0))"
"(if(if(>= i_0 start-package-version-pos_85)"
"(< i_0 end-package-version-pos_86)"
" #f)"
"(let-values()"
"(loop_87(sub1 i_0) #f saw-slash?_0 saw-dot?_0))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_82)"
"(if saw-dot?_0(not saw-slash?_0) #f)"
" #f))"
"(let-values(((or-part_94) dots-dir-ok?_81))"
"(if or-part_94"
" or-part_94"
"((letrec-values(((loop_95)"
"(lambda(i_1)"
"(begin"
" 'loop"
"(if(= i_1 len_84)"
"(let-values() #t)"
"(if(char=?"
"(string-ref v_79 i_1)"
" '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_97)"
"(="
" len_84"
"(add1"
" i_1))))"
"(if or-part_97"
" or-part_97"
"(char=?"
"(string-ref"
" v_79"
"(add1 i_1))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_79"
"(add1 i_1))"
" '#\\.)"
"(let-values(((or-part_98)"
"(="
" len_84"
"(+"
" i_1"
" 2))))"
"(if or-part_98"
" or-part_98"
"(char=?"
"(string-ref"
" v_79"
"(+ i_1 2))"
" '#\\/)))"
" #f))"
"(loop_95"
"((letrec-values(((loop_99)"
"(lambda(i_2)"
"(begin"
" 'loop"
"(if(char=?"
" '#\\."
"(string-ref"
" v_79"
" i_2))"
"(loop_99"
"(add1"
" i_2))"
" i_2)))))"
" loop_99)"
" i_1))"
" #f)"
" #f))"
"(let-values()"
"(loop_95(add1 i_1)))))))))"
" loop_95)"
" 0)))"
" #f)))))))"
" loop_87)"
"(sub1 len_84)"
" #f"
"(not file-end-ok?_83)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f)))))))))))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_0)"
"(begin"
"(if(string? v_0)"
"(let-values(((len_134)(string-length v_0)))"
"(if(positive? len_134)"
"(let-values(((vec_135 len_136)"
"(let-values(((vec_138) v_0))"
"(begin(check-string vec_138)(values vec_138(unsafe-string-length vec_138)))))"
"((start_137) 0))"
"(begin"
" #f"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_137)))"
"((letrec-values(((for-loop_139)"
"(lambda(result_0 pos_0 pos_1)"
"(begin"
" 'for-loop"
"(if(if(unsafe-fx< pos_0 len_136) #t #f)"
"(let-values(((c_143)(string-ref vec_135 pos_0))((i_144) pos_1))"
"(let-values(((result_145)"
"(let-values()"
"(let-values(((result_147)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_148)"
"(plain-char? c_143)))"
"(if or-part_148"
" or-part_148"
"(let-values(((or-part_149)"
"(char=? '#\\. c_143)))"
"(if or-part_149"
" or-part_149"
"(if(char=? '#\\% c_143)"
"(if(< i_144(- len_134 2))"
"(hex-sequence? v_0(add1 i_144))"
" #f)"
" #f)))))))))"
"(values result_147)))))"
"(if(if(not((lambda x_0(not result_145)) c_143))"
"(if(not((lambda x_0(not result_145)) i_144))(not #f) #f)"
" #f)"
"(for-loop_139 result_145(unsafe-fx+ 1 pos_0)(+ pos_1 1))"
" result_145)))"
" result_0)))))"
" for-loop_139)"
" #t"
" 0"
" start_137)))"
" #f))"
" #f))))"
"(define-values"
"(plain-char?)"
"(lambda(c_0)"
"(begin"
"(let-values(((or-part_153)(char<=? '#\\a c_0 '#\\z)))"
"(if or-part_153"
" or-part_153"
"(let-values(((or-part_154)(char<=? '#\\A c_0 '#\\Z)))"
"(if or-part_154"
" or-part_154"
"(let-values(((or-part_155)(char<=? '#\\0 c_0 '#\\9)))"
"(if or-part_155"
" or-part_155"
"(let-values(((or-part_156)(char=? '#\\- c_0)))"
"(if or-part_156"
" or-part_156"
"(let-values(((or-part_157)(char=? '#\\_ c_0)))"
"(if or-part_157 or-part_157(char=? '#\\+ c_0))))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_0 i_0)"
"(begin"
"(let-values(((c1_160)(string-ref s_0 i_0)))"
"(let-values(((c2_161)(string-ref s_0(add1 i_0))))"
"(if(hex-char? c1_160)"
"(if(hex-char? c2_161)"
"(let-values(((c_162)(integer->char(+(*(hex-char->integer c1_160) 16)(hex-char->integer c2_161)))))"
"(not(plain-char? c_162)))"
" #f)"
" #f))))))"
"(define-values"
"(hex-char?)"
"(lambda(c_0)"
"(begin"
"(let-values(((or-part_164)(char<=? '#\\a c_0 '#\\f)))(if or-part_164 or-part_164(char<=? '#\\0 c_0 '#\\9))))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_0)"
"(begin"
"(if(char<=? '#\\a c_0 '#\\f)"
"(let-values()(-(char->integer c_0)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_0 '#\\F)"
"(let-values()(-(char->integer c_0)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_0)(char->integer '#\\0))))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_0 len_0)"
"(begin"
"(let-values(((start-package-version-pos_168 end-package-version-pos_169 colon1-pos_170 colon2-pos_171)"
"((letrec-values(((loop_172)"
"(lambda(j_0"
" start-package-version-pos_0"
" end-package-version-pos_0"
" colon1-pos_0"
" colon2-pos_0)"
"(begin"
" 'loop"
"(if(= j_0 len_0)"
"(let-values()"
"(values"
" start-package-version-pos_0"
"(let-values(((or-part_178) end-package-version-pos_0))"
"(if or-part_178 or-part_178 j_0))"
" colon1-pos_0"
" colon2-pos_0))"
"(let-values()"
"(let-values(((tmp_179)(string-ref v_0 j_0)))"
"(if(equal? tmp_179 '#\\/)"
"(let-values()"
"(loop_172"
"(add1 j_0)"
"(let-values(((or-part_180) start-package-version-pos_0))"
"(if or-part_180 or-part_180(add1 j_0)))"
"(if start-package-version-pos_0"
"(let-values(((or-part_181) end-package-version-pos_0))"
"(if or-part_181 or-part_181 j_0))"
" #f)"
" colon1-pos_0"
" colon2-pos_0))"
"(if(equal? tmp_179 '#\\:)"
"(let-values()"
"(if colon2-pos_0"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_0"
"(let-values()"
"(loop_172"
"(add1 j_0)"
" start-package-version-pos_0"
" end-package-version-pos_0"
" colon1-pos_0"
" j_0))"
"(let-values()"
"(loop_172"
"(add1 j_0)"
" start-package-version-pos_0"
" end-package-version-pos_0"
" j_0"
" #f)))))"
"(let-values()"
"(loop_172"
"(add1 j_0)"
" start-package-version-pos_0"
" end-package-version-pos_0"
" colon1-pos_0"
" colon2-pos_0)))))))))))"
" loop_172)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_168"
"(if(> end-package-version-pos_169 start-package-version-pos_168)"
"(let-values(((or-part_182)(not colon2-pos_171)))"
"(if or-part_182 or-part_182(<(add1 colon2-pos_171) end-package-version-pos_169)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_170"
"(let-values()"
"(let-values(((colon1-end_183)"
"(let-values(((or-part_184) colon2-pos_171))"
"(if or-part_184 or-part_184 end-package-version-pos_169))))"
"(if(if(integer-sequence? v_0(add1 colon1-pos_170) colon1-end_183)"
"(let-values(((or-part_185)(not colon2-pos_171)))"
"(if or-part_185"
" or-part_185"
"(let-values(((tmp_186)(string-ref v_0(add1 colon2-pos_171))))"
"(if(equal? tmp_186 '#\\=)"
"(let-values()(integer-sequence? v_0(+ 2 colon2-pos_171) end-package-version-pos_169))"
"(if(if(equal? tmp_186 '#\\>) #t(equal? tmp_186 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_171) end-package-version-pos_169)"
"(char=? '#\\=(string-ref v_0(+ colon2-pos_171 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_0(+ 3 colon2-pos_171) end-package-version-pos_169))"
"(let-values()"
"(integer-sequence? v_0(+ 2 colon2-pos_171) end-package-version-pos_169))))"
"(let-values()"
"(integer-range-sequence?"
" v_0"
"(add1 colon2-pos_171)"
" end-package-version-pos_169)))))))"
" #f)"
"(let-values()(values colon1-pos_170 end-package-version-pos_169))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f)))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_0 start_0 end_0)"
"(begin"
"(if(< start_0 end_0)"
"(let-values(((start_190) start_0)((end_191) end_0)((inc_192) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_190 end_191 inc_192)))"
"((letrec-values(((for-loop_193)"
"(lambda(result_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_191)"
"(let-values(((i_196) pos_0))"
"(let-values(((result_197)"
"(let-values()"
"(let-values(((result_199)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_0 i_196) '#\\9)))))"
"(values result_199)))))"
"(if(if(not((lambda x_0(not result_197)) i_196))(not #f) #f)"
"(for-loop_193 result_197(+ pos_0 inc_192))"
" result_197)))"
" result_0)))))"
" for-loop_193)"
" #t"
" start_190)))"
" #f))))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_0 start_0 end_0)"
"(begin"
"(if(< start_0 end_0)"
"(if(let-values(((start_204) start_0)((end_205) end_0)((inc_206) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_204 end_205 inc_206)))"
"((letrec-values(((for-loop_207)"
"(lambda(result_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_205)"
"(let-values(((i_210) pos_0))"
"(let-values(((result_211)"
"(let-values()"
"(let-values(((result_213)"
"(let-values()"
"(let-values()"
"(let-values(((c_214)"
"(string-ref s_0 i_210)))"
"(let-values(((or-part_215)"
"(char=? c_214 '#\\-)))"
"(if or-part_215"
" or-part_215"
"(char<=? '#\\0 c_214 '#\\9))))))))"
"(values result_213)))))"
"(if(if(not((lambda x_0(not result_211)) i_210))(not #f) #f)"
"(for-loop_207 result_211(+ pos_0 inc_206))"
" result_211)))"
" result_0)))))"
" for-loop_207)"
" #t"
" start_204)))"
"(>="
" 1"
"(let-values(((start_217) start_0)((end_218) end_0)((inc_219) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_217 end_218 inc_219)))"
"((letrec-values(((for-loop_220)"
"(lambda(result_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_218)"
"(let-values(((i_223) pos_0))"
"(let-values(((result_224)"
"(let-values(((result_225) result_0))"
"(let-values(((result_226)"
"(let-values()"
"(+"
" result_225"
"(let-values()"
"(if(char=?(string-ref s_0 i_223) '#\\-)"
" 1"
" 0))))))"
"(values result_226)))))"
"(if(not #f)(for-loop_220 result_224(+ pos_0 inc_219)) result_224)))"
" result_0)))))"
" for-loop_220)"
" 0"
" start_217))))"
" #f)"
" #f))))"
"(define-values"
"(struct:weak-intern-table weak-intern-table1.1 weak-intern-table? weak-intern-table-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'weak-intern-table"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'weak-intern-table)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'box))))"
"(define-values"
"(struct:table table2.1 table? table-ht table-count table-prune-at)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'ht)"
"(make-struct-field-accessor -ref_24 1 'count)"
"(make-struct-field-accessor -ref_24 2 'prune-at))))"
"(define-values(make-weak-intern-table)(lambda()(begin(weak-intern-table1.1(box(table2.1(hasheqv) 0 128))))))"
"(define-values"
"(weak-intern!)"
"(lambda(tt_0 v_0)"
"(begin"
"(let-values(((b_53)(weak-intern-table-box tt_0)))"
"(let-values(((t_54)(unbox b_53)))"
"(let-values(((code_55)(equal-hash-code v_0)))"
"(let-values(((vals_56)(hash-ref(table-ht t_54) code_55 null)))"
"(let-values(((or-part_57)"
"(let-values(((lst_58) vals_56))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((b_62)(unsafe-car lst_0))"
"((rest_63)(unsafe-cdr lst_0)))"
"(let-values(((result_64)"
"(let-values()"
"(let-values(((result_66)"
"(let-values()"
"(let-values()"
"(let-values(((bv_67)"
"(weak-box-value"
" b_62)))"
"(if(equal? bv_67 v_0)"
" bv_67"
" #f))))))"
"(values result_66)))))"
"(if(if(not((lambda x_0 result_64) b_62))(not #f) #f)"
"(for-loop_59 result_64 rest_63)"
" result_64)))"
" result_0)))))"
" for-loop_59)"
" #f"
" lst_58)))))"
"(if or-part_57"
" or-part_57"
"(let-values(((pruned-t_69)"
"(if(=(table-count t_54)(table-prune-at t_54))(prune-table t_54) t_54)))"
"(let-values(((ht_70)(table-ht pruned-t_69)))"
"(let-values(((new-t_71)"
"(table2.1"
"(hash-set ht_70 code_55(cons(make-weak-box v_0)(hash-ref ht_70 code_55 null)))"
"(add1(table-count pruned-t_69))"
"(table-prune-at pruned-t_69))))"
"(let-values(((or-part_72)(if(box-cas! b_53 t_54 new-t_71) v_0 #f)))"
"(if or-part_72 or-part_72(weak-intern! tt_0 v_0)))))))))))))))"
"(define-values"
"(prune-table)"
"(lambda(t_0)"
"(begin"
"(let-values(((new-ht_74)"
"(let-values(((ht_76)(table-ht t_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_76)))"
"((letrec-values(((for-loop_77)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_80 vals_81)(hash-iterate-key+value ht_76 i_0)))"
"(let-values(((table_82)"
"(let-values(((new-vals_83)"
"(reverse$1"
"(let-values(((lst_84) vals_81))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((b_88)"
"(unsafe-car"
" lst_0))"
"((rest_89)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_90)"
"(let-values(((fold-var_91)"
" fold-var_0))"
"(if(weak-box-value"
" b_88)"
"(let-values(((fold-var_92)"
" fold-var_91))"
"(let-values(((fold-var_93)"
"(let-values()"
"(cons"
"(let-values()"
" b_88)"
" fold-var_92))))"
"(values"
" fold-var_93)))"
" fold-var_91))))"
"(if(not"
" #f)"
"(for-loop_85"
" fold-var_90"
" rest_89)"
" fold-var_90)))"
" fold-var_0)))))"
" for-loop_85)"
" null"
" lst_84))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_94)"
"(lambda(table_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_96)"
"(let-values(((table_97)"
" table_1))"
"(if(pair?"
" new-vals_83)"
"(let-values(((table_98)"
" table_97))"
"(let-values(((table_99)"
"(let-values()"
"(let-values(((key_100"
" val_101)"
"(let-values()"
"(values"
" k_80"
" new-vals_83))))"
"(hash-set"
" table_98"
" key_100"
" val_101)))))"
"(values"
" table_99)))"
" table_97))))"
" table_96))))))"
" for-loop_94)"
" table_0)))))"
"(if(not #f)"
"(for-loop_77 table_82(hash-iterate-next ht_76 i_0))"
" table_82)))"
" table_0)))))"
" for-loop_77)"
" '#hash()"
"(hash-iterate-first ht_76))))))"
"(let-values(((count_75)"
"(let-values(((ht_102) new-ht_74))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_102)))"
"((letrec-values(((for-loop_103)"
"(lambda(result_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_106 vals_107)(hash-iterate-key+value ht_102 i_0)))"
"(let-values(((result_108)"
"(let-values(((result_109) result_0))"
"(let-values(((result_110)"
"(let-values()"
"(+"
" result_109"
"(let-values()"
"(length vals_107))))))"
"(values result_110)))))"
"(if(not #f)"
"(for-loop_103 result_108(hash-iterate-next ht_102 i_0))"
" result_108)))"
" result_0)))))"
" for-loop_103)"
" 0"
"(hash-iterate-first ht_102))))))"
"(table2.1 new-ht_74 count_75(max 128(* 2 count_75))))))))"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(r_0 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:resolved-module-path)"
"(ser-push!_0(1/resolved-module-path-name r_0)))))"
"(cons"
" prop:custom-write"
"(lambda(r_0 port_0 mode_0)"
"(begin"
"                           (if mode_0 (let-values () (write-string \"#<resolved-module-path:\" port_0)) (void))"
"                           (fprintf port_0 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_0)))"
"                           (if mode_0 (let-values () (write-string \">\" port_0)) (void)))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_0 b_0 eql?_0)"
"(eql?_0(1/resolved-module-path-name a_0)(1/resolved-module-path-name b_0)))"
"(lambda(a_0 hash-code_0)(hash-code_0(1/resolved-module-path-name a_0)))"
"(lambda(a_0 hash-code_0)(hash-code_0(1/resolved-module-path-name a_0))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_0)"
"(begin"
"(if(path? p_0)"
"        (let-values () (string-append \"\\\"\" (path->string p_0) \"\\\"\"))"
"(if(symbol? p_0)"
"(let-values()(format-symbol p_0))"
"(let-values()(format-submod(format-resolved-module-path-name(car p_0))(cdr p_0))))))))"
"(define-values"
"(format-symbol)"
"  (lambda (p_0) (begin (format \"'~s~a\" p_0 (if (symbol-interned? p_0) \"\" (format \"[~a]\" (eq-hash-code p_0)))))))"
"(define-values"
"(format-submod)"
"(lambda(base_0 syms_0)"
"(begin"
"(format"
"       \"(submod ~a~a)\""
" base_0"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_39) syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_39)))"
"((letrec-values(((for-loop_40)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((i_43)(unsafe-car lst_0))((rest_44)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_45)"
"(let-values(((fold-var_46) fold-var_0))"
"(let-values(((fold-var_47)"
"(let-values()"
"(cons"
"                                                                        (let-values () (format \" ~s\" i_43))"
" fold-var_46))))"
"(values fold-var_47)))))"
"(if(not #f)(for-loop_40 fold-var_45 rest_44) fold-var_45)))"
" fold-var_0)))))"
" for-loop_40)"
" null"
" lst_39)))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_0)"
"(begin(let-values(((name_49)(1/resolved-module-path-name r_0)))(if(pair? name_49)(car name_49) name_49)))))"
"(define-values(resolved-module-paths)(make-weak-intern-table))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_0)"
"(begin"
" 'make-resolved-module-path"
"(begin"
"(if(let-values(((or-part_51)(symbol? p_0)))"
"(if or-part_51"
" or-part_51"
"(let-values(((or-part_52)(if(path? p_0)(complete-path? p_0) #f)))"
"(if or-part_52"
" or-part_52"
"(if(pair? p_0)"
"(if(pair?(cdr p_0))"
"(if(list? p_0)"
"(if(let-values(((or-part_53)(symbol?(car p_0))))"
"(if or-part_53 or-part_53(if(path?(car p_0))(complete-path?(car p_0)) #f)))"
"(let-values(((lst_54)(cdr p_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_58)(unsafe-car lst_0))"
"((rest_59)(unsafe-cdr lst_0)))"
"(let-values(((result_60)"
"(let-values()"
"(let-values(((result_62)"
"(let-values()"
"(let-values()"
"(symbol? s_58)))))"
"(values result_62)))))"
"(if(if(not((lambda x_0(not result_60)) s_58))"
"(not #f)"
" #f)"
"(for-loop_55 result_60 rest_59)"
" result_60)))"
" result_0)))))"
" for-loop_55)"
" #t"
" lst_54)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"              \"(or/c symbol?\\n\""
"              \"      (and/c path? complete-path?)\\n\""
"              \"      (cons/c (or/c symbol?\\n\""
"              \"                    (and/c path? complete-path?))\\n\""
"              \"              (non-empty-listof symbol?)))\")"
" p_0)))"
"(weak-intern! resolved-module-paths(resolved-module-path1.1 p_0))))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_0)"
"(begin"
"(let-values(((name_65)(1/resolved-module-path-name r_0)))"
"(let-values(((root-name_66)(if(pair? name_65)(car name_65) name_65)))"
"(let-values(((root-mod-path_67)(if(path? root-name_66) root-name_66(list 'quote root-name_66))))"
"(if(pair? name_65)(list* 'submod root-mod-path_67(cdr name_65)) root-mod-path_67)))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_68 make-_69 ?_70 -ref_71 -set!_72)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:custom-write"
"(lambda(r_0 port_0 mode_0)"
"(begin"
"                           (write-string \"#<module-path-index\" port_0)"
"(if(top-level-module-path-index? r_0)"
"                             (let-values () (fprintf port_0 \":top-level\"))"
"(if(module-path-index-path r_0)"
"(let-values()"
"(let-values(((l_106)"
"((letrec-values(((loop_107)"
"(lambda(r_1)"
"(begin"
" 'loop"
"(if(not r_1)"
"(let-values() null)"
"(if(1/resolved-module-path? r_1)"
"                                                                         (let-values () (list \"+\" (format \"~a\" r_1)))"
"(if(module-path-index-path r_1)"
"(let-values()"
"(cons"
"((letrec-values(((loop_109)"
"(lambda(v_0)"
"(begin"
" 'loop"
"(if(if(pair? v_0)"
"(if(eq?"
" 'quote"
"(car"
" v_0))"
"(null?"
"(cddr v_0))"
" #f)"
" #f)"
"(let-values()"
"(format-symbol"
"(cadr v_0)))"
"(if(if(pair?"
" v_0)"
"(eq?"
" 'submod"
"(car v_0))"
" #f)"
"(let-values()"
"(format-submod"
"(loop_109"
"(cadr v_0))"
"(cddr v_0)))"
"(let-values()"
"(format"
"                                                                                                           \"~.s\""
" v_0))))))))"
" loop_109)"
"(module-path-index-path r_1))"
"(loop_107(module-path-index-base r_1))))"
"(if(module-path-index-resolved r_1)"
"(let-values()"
"(list"
"                                                                                \"+\""
"(format"
"                                                                                 \"~a\""
"(module-path-index-resolved r_1))))"
"(let-values() null)))))))))"
" loop_107)"
" r_0)))"
"(fprintf"
" port_0"
"                                    \":~.a\""
"(apply"
" string-append"
"(car l_106)"
"(reverse$1"
"(let-values(((lst_111)(cdr l_106)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_111)))"
"((letrec-values(((for-loop_112)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((i_115)(unsafe-car lst_0))"
"((rest_116)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_117)"
"(let-values(((fold-var_118)"
" fold-var_0))"
"(let-values(((fold-var_119)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
"                                                                                                        \" ~a\""
" i_115))"
" fold-var_118))))"
"(values fold-var_119)))))"
"(if(not #f)"
"(for-loop_112 fold-var_117 rest_116)"
" fold-var_117)))"
" fold-var_0)))))"
" for-loop_112)"
" null"
" lst_111))))))))"
"(if(module-path-index-resolved r_0)"
"                                 (let-values () (fprintf port_0 \"=~a\" (module-path-index-resolved r_0)))"
"(void))))"
"                           (write-string \">\" port_0))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_0 b_0 eql?_0)"
"(if(eql?_0(module-path-index-path a_0)(module-path-index-path b_0))"
"(eql?_0(module-path-index-base a_0)(module-path-index-base b_0))"
" #f))"
"(lambda(a_0 hash-code_0)"
"(+(hash-code_0(module-path-index-path a_0))(hash-code_0(module-path-index-base a_0))))"
"(lambda(a_0 hash-code_0)"
"(+(hash-code_0(module-path-index-path a_0))(hash-code_0(module-path-index-base a_0)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))))"
"(values"
" struct:_68"
" make-_69"
" ?_70"
"(make-struct-field-accessor -ref_71 0 'path)"
"(make-struct-field-accessor -ref_71 1 'base)"
"(make-struct-field-accessor -ref_71 2 'resolved)"
"(make-struct-field-accessor -ref_71 3 'shift-cache)"
"(make-struct-field-mutator -set!_72 2 'resolved)"
"(make-struct-field-mutator -set!_72 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_0 base_0)(begin(1/module-path-index-join path_0 base_0)))"
"((name_0)(make-self-module-path-index(1/make-resolved-module-path name_0)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve5_130)"
"(lambda(mpi4_0 load?3_0)"
"(begin"
" 'module-path-index-resolve5"
"(let-values(((mpi_133) mpi4_0))"
"(let-values(((load?_134) load?3_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_133)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_133)))"
"(let-values(((or-part_136)(module-path-index-resolved mpi_133)))"
"(if or-part_136"
" or-part_136"
"(let-values(((mod-name_137)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_133)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_133)"
" load?_134)"
" #f"
" load?_134)))"
"(begin"
"(if(1/resolved-module-path? mod-name_137)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                             \"current module name resolver's result is not a resolved module path\""
"                                             \"result\""
" mod-name_137)))"
"(set-module-path-index-resolved! mpi_133 mod-name_137)"
" mod-name_137))))))))))))))"
"(case-lambda"
"((mpi_0)(begin 'module-path-index-resolve(module-path-index-resolve5_130 mpi_0 #f)))"
"((mpi_0 load?3_0)(module-path-index-resolve5_130 mpi_0 load?3_0)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_0)"
"(begin"
"(if(module-path-index-resolved mpi_0)"
"(let-values()"
"(let-values(((path_142 base_143)(1/module-path-index-split mpi_0)))"
"(1/module-path-index-join path_142 base_143)))"
"(let-values() mpi_0)))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join10_144)"
"(lambda(mod-path8_0 base9_0 submod7_0)"
"(begin"
" 'module-path-index-join10"
"(let-values(((mod-path_148) mod-path8_0))"
"(let-values(((base_149) base9_0))"
"(let-values(((submod_150) submod7_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(x_0)"
"(let-values(((or-part_153)(not x_0)))"
"(if or-part_153 or-part_153(1/module-path? x_0))))"
" mod-path_148)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                       \"(or/c #f module-path?)\""
" mod-path_148)))"
"(if(let-values(((or-part_154)(not base_149)))"
"(if or-part_154"
" or-part_154"
"(let-values(((or-part_155)(1/resolved-module-path? base_149)))"
"(if or-part_155 or-part_155(1/module-path-index? base_149)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                       \"(or/c #f resolved-module-path? module-path-index?)\""
" base_149)))"
"(if(let-values(((or-part_156)(not submod_150)))"
"(if or-part_156"
" or-part_156"
"(if(pair? submod_150)"
"(if(list? submod_150)(andmap2 symbol? submod_150) #f)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                       \"(or/c #f (non-empty-listof symbol?))\""
" submod_150)))"
"(if(if(not mod-path_148) base_149 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                       \"cannot combine #f path with non-#f base\""
"                                       \"given base\""
" base_149))"
"(void))"
"(if(if submod_150 mod-path_148 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                       \"cannot combine #f submodule list with non-#f module path\""
"                                       \"given module path\""
" mod-path_148"
"                                       \"given submodule list\""
" submod_150))"
"(void))"
"(if submod_150"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_150))))"
"(let-values()"
"(let-values(((keep-base_157)"
"((letrec-values(((loop_158)"
"(lambda(mod-path_0)"
"(begin"
" 'loop"
"(if(path? mod-path_0)"
"(let-values() #f)"
"(if(if(pair? mod-path_0)"
"(eq? 'quote(car mod-path_0))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_0)"
"(let-values() #f)"
"(if(if(pair? mod-path_0)"
"(eq? 'submod(car mod-path_0))"
" #f)"
"(let-values()"
"(loop_158(cadr mod-path_0)))"
"(let-values() base_149)))))))))"
" loop_158)"
" mod-path_148)))"
"(module-path-index2.1 mod-path_148 keep-base_157 #f #f)))))))))))))))"
"(case-lambda"
"((mod-path_0 base_0)(begin 'module-path-index-join(module-path-index-join10_144 mod-path_0 base_0 #f)))"
"((mod-path_0 base_0 submod7_0)(module-path-index-join10_144 mod-path_0 base_0 submod7_0)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_0 load?_0)"
"(begin(if(1/module-path-index? base_0)(1/module-path-index-resolve base_0 load?_0) base_0))))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_0)"
"(begin"
" 'module-path-index-split"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_0)"
"(void)"
"              (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_0)))"
"(values(module-path-index-path mpi_0)(module-path-index-base mpi_0))))))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_0)"
"(begin"
" 'module-path-index-submodule"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_0)"
"(void)"
"              (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_0)))"
"(if(not(module-path-index-path mpi_0))"
"(let-values(((r_171)(module-path-index-resolved mpi_0)))"
"(if r_171"
"(let-values(((p_172)(1/resolved-module-path-name r_171)))(if(pair? p_172)(cdr p_172) #f))"
" #f))"
" #f)))))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_0)(begin(module-path-index2.1 #f #f name_0 #f)))"
"((name_0 enclosing_0)"
"(make-self-module-path-index"
"(let-values(((name25_176) name_0)((temp26_177)(if enclosing_0(1/module-path-index-resolve enclosing_0) #f)))"
"(build-module-name16.1 unsafe-undefined name25_176 temp26_177))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_0)"
"(begin"
"(let-values(((r_179)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_0))))"
"(begin"
"(start-atomic)"
"(begin0"
"(let-values(((or-part_180)"
"(let-values(((e_181)(hash-ref generic-self-mpis r_179 #f)))"
"(if e_181(ephemeron-value e_181) #f))))"
"(if or-part_180"
" or-part_180"
"(let-values(((mpi_182)(module-path-index2.1 #f #f r_179 #f)))"
"(begin(hash-set! generic-self-mpis r_179(make-ephemeron r_179 mpi_182)) mpi_182))))"
"(end-atomic)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_0)"
"(begin"
"(let-values(((name_184)(1/resolved-module-path-name r_0)))"
"(1/make-resolved-module-path"
"(if(symbol? name_184) generic-module-name(cons generic-module-name(cdr name_184))))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_0)"
"(begin"
"(let-values(((r_186)(module-path-index-resolved mpi_0)))"
"(if r_186"
"(let-values()"
"(set-module-path-index-resolved! mpi_0(resolved-module-path-to-generic-resolved-module-path r_186)))"
"(void))))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_0 from-mpi_0 to-mpi_0)"
"(begin"
"(if(eq? mpi_0 from-mpi_0)"
"(let-values() to-mpi_0)"
"(let-values()"
"(let-values(((base_190)(module-path-index-base mpi_0)))"
"(if(not base_190)"
"(let-values() mpi_0)"
"(let-values()"
"(let-values(((shifted-base_191)(module-path-index-shift base_190 from-mpi_0 to-mpi_0)))"
"(if(eq? shifted-base_191 base_190)"
"(let-values() mpi_0)"
"(let-values(((c1_192)(shift-cache-ref(module-path-index-shift-cache shifted-base_191) mpi_0)))"
"(if c1_192"
" c1_192"
"(let-values()"
"(let-values(((shifted-mpi_193)"
"(module-path-index2.1(module-path-index-path mpi_0) shifted-base_191 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_191) mpi_0 shifted-mpi_193)"
" shifted-mpi_193)))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_0)"
"(begin"
"(let-values(((or-part_195)"
"(let-values(((cache_196)(module-path-index-shift-cache mpi_0)))"
"(if cache_196(if(weak-box-value cache_196) cache_196 #f) #f))))"
"(if or-part_195"
" or-part_195"
"(let-values(((cache_197)(make-weak-box(box '#hasheq()))))"
"(begin(set-module-path-index-shift-cache! mpi_0 cache_197) cache_197)))))))"
"(define-values"
"(shift-cache-ref)"
"(lambda(cache_0 v_0)"
"(begin"
"(if cache_0(let-values(((b_200)(weak-box-value cache_0)))(if b_200(hash-ref(unbox b_200) v_0 #f) #f)) #f))))"
"(define-values"
"(shift-cache-set!)"
"(lambda(cache_0 v_0 r_0)"
"(begin"
"(let-values(((b_204)(weak-box-value cache_0)))"
"(if b_204(let-values()(set-box! b_204(hash-set(unbox b_204) v_0 r_0)))(void))))))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_0)(begin(eq? top-level-module-path-index mpi_0))))"
"(define-values(non-self-module-path-index?)(lambda(mpi_0)(begin(if(module-path-index-path mpi_0) #t #f))))"
"(define-values"
"(core-module-name-resolver)"
"(case-lambda"
"((name_0 from-namespace_0)(begin(void)))"
"((p_0 enclosing_0 source-stx-stx_0 load?_0)"
"(begin"
"(if(1/module-path? p_0)"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_0)))"
"(if(let-values(((or-part_215)(not enclosing_0)))"
"(if or-part_215 or-part_215(1/resolved-module-path? enclosing_0)))"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_0)))"
"(if(if(list? p_0)(if(=(length p_0) 2)(if(eq? 'quote(car p_0))(symbol?(cadr p_0)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_0)))"
"        (if (if (list? p_0) (if (eq? 'submod (car p_0)) (equal? \"..\" (cadr p_0)) #f) #f)"
"(let-values()"
"(let-values(((lst_216)(cdr p_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_216)))"
"((letrec-values(((for-loop_217)"
"(lambda(enclosing_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_220)(unsafe-car lst_0))((rest_221)(unsafe-cdr lst_0)))"
"(let-values(((enclosing_222)"
"(let-values(((enclosing_223) enclosing_1))"
"(let-values(((enclosing_224)"
"(let-values()"
"(let-values(((s27_226) s_220)"
"((enclosing28_227) enclosing_223)"
"((p29_228) p_0))"
"(build-module-name16.1"
" p29_228"
" s27_226"
" enclosing28_227)))))"
"(values enclosing_224)))))"
"(if(not #f)(for-loop_217 enclosing_222 rest_221) enclosing_222)))"
" enclosing_1)))))"
" for-loop_217)"
" enclosing_0"
" lst_216))))"
"          (if (if (list? p_0) (if (eq? 'submod (car p_0)) (equal? \".\" (cadr p_0)) #f) #f)"
"(let-values()"
"(let-values(((lst_229)(cddr p_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_229)))"
"((letrec-values(((for-loop_230)"
"(lambda(enclosing_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_233)(unsafe-car lst_0))((rest_234)(unsafe-cdr lst_0)))"
"(let-values(((enclosing_235)"
"(let-values(((enclosing_236) enclosing_1))"
"(let-values(((enclosing_237)"
"(let-values()"
"(let-values(((s30_239) s_233)"
"((enclosing31_240)"
" enclosing_236)"
"((p32_241) p_0))"
"(build-module-name16.1"
" p32_241"
" s30_239"
" enclosing31_240)))))"
"(values enclosing_237)))))"
"(if(not #f)(for-loop_230 enclosing_235 rest_234) enclosing_235)))"
" enclosing_1)))))"
" for-loop_230)"
" enclosing_0"
" lst_229))))"
"(if(if(list? p_0)(eq? 'submod(car p_0)) #f)"
"(let-values()"
"(let-values(((base_242)((1/current-module-name-resolver)(cadr p_0) enclosing_0 #f #f)))"
"(let-values(((lst_243)(cddr p_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_243)))"
"((letrec-values(((for-loop_244)"
"(lambda(enclosing_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_247)(unsafe-car lst_0))((rest_248)(unsafe-cdr lst_0)))"
"(let-values(((enclosing_249)"
"(let-values(((enclosing_250) enclosing_1))"
"(let-values(((enclosing_251)"
"(let-values()"
"(let-values(((s33_253) s_247)"
"((enclosing34_254)"
" enclosing_250)"
"((p35_255) p_0))"
"(build-module-name16.1"
" p35_255"
" s33_253"
" enclosing34_254)))))"
"(values enclosing_251)))))"
"(if(not #f)(for-loop_244 enclosing_249 rest_248) enclosing_249)))"
" enclosing_1)))))"
" for-loop_244)"
" base_242"
" lst_243)))))"
"              (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_0))))))))))"
"(define-values"
"(build-module-name16.1)"
"(lambda(original12_0 name14_0 enclosing15_0)"
"(begin"
" 'build-module-name16"
"(let-values(((name_259) name14_0))"
"(let-values(((enclosing_260) enclosing15_0))"
"(let-values(((orig-name_261)(if(eq? original12_0 unsafe-undefined) name_259 original12_0)))"
"(let-values()"
"(let-values(((enclosing-module-name_262)"
"(if enclosing_260(1/resolved-module-path-name enclosing_260) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_262)"
"(let-values() name_259)"
"(if(symbol? enclosing-module-name_262)"
"(let-values()(list enclosing-module-name_262 name_259))"
"                     (if (equal? name_259 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_262)"
"                           (let-values () (error \"too many \\\"..\\\"s:\" orig-name_261))"
"(if(= 2(length enclosing-module-name_262))"
"(let-values()(car enclosing-module-name_262))"
"(let-values()(reverse$1(cdr(reverse$1 enclosing-module-name_262)))))))"
"(let-values()(append enclosing-module-name_262(list name_259)))))))))))))))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
" core-module-name-resolver"
"(lambda(v_0)"
"(begin"
"(if(if(procedure? v_0)(if(procedure-arity-includes? v_0 2)(procedure-arity-includes? v_0 4) #f) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-name-resolver"
"            \"(and/c (procedure-arity-includes/c 2) (procedure-arity-includes/c 4))\""
" v_0)))"
" v_0))))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_0)"
"(begin"
"(if(let-values(((or-part_282)(not r_0)))(if or-part_282 or-part_282(1/resolved-module-path? r_0)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_0)))"
" r_0))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_0)"
"(begin"
"(if(let-values(((or-part_284)(not s_0)))"
"(if or-part_284"
" or-part_284"
"(let-values(((or-part_285)(symbol? s_0)))"
"(if or-part_285 or-part_285(if(path? s_0)(complete-path? s_0) #f)))))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-module-declare-source \"(or/c #f symbol? (and/c path? complete-path?))\" s_0)))"
" s_0))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_0)"
"(begin"
"(let-values(((current-name_287)(1/current-module-declare-name)))"
"(let-values(((root-name_288)"
"(if current-name_287"
"(resolved-module-path-root-name current-name_287)"
"(if(pair? default-name_0)(car default-name_0) default-name_0))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_0)(cons root-name_288(cdr default-name_0)) root-name_288)))))))"
"(define-values"
"(struct:promise promise1.1 promise? promise-val promise-status set-promise-val! set-promise-status!)"
"(let-values(((struct:_13 make-_14 ?_15 -ref_16 -set!_17)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))))"
"(values"
" struct:_13"
" make-_14"
" ?_15"
"(make-struct-field-accessor -ref_16 0 'val)"
"(make-struct-field-accessor -ref_16 1 'status)"
"(make-struct-field-mutator -set!_17 0 'val)"
"(make-struct-field-mutator -set!_17 1 'status))))"
"(define-values"
"(force)"
"(lambda(v_0)"
"(begin"
"(if(promise? v_0)"
"(let-values()"
"(let-values(((s_39)(promise-status v_0)))"
"(if(not s_39)"
"(let-values()"
"(let-values(((result_40)((promise-val v_0))))"
"(begin(set-promise-val! v_0 result_40)(set-promise-status! v_0 #t) result_40)))"
"(let-values()(promise-val v_0)))))"
"(let-values() v_0)))))"
"(define-values"
"(phase?)"
"(lambda(v_0)(begin(let-values(((or-part_2)(not v_0)))(if or-part_2 or-part_2(exact-integer? v_0))))))"
"(define-values(phase+)(lambda(a_0 b_0)(begin(if a_0(if b_0(+ a_0 b_0) #f) #f))))"
"(define-values(phase-)(lambda(a_0 b_0)(begin(if a_0(if b_0(- a_0 b_0) #f) #f))))"
"(define-values"
"(phase<?)"
"(lambda(a_0 b_0)"
"(begin(if(not b_0)(let-values() #f)(if(not a_0)(let-values() #t)(let-values()(< a_0 b_0)))))))"
"(define-values(zero-phase?)(lambda(a_0)(begin(eq? a_0 0))))"
"(define-values(label-phase?)(lambda(a_0)(begin(not a_0))))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(define-values(make-small-hasheq)(lambda()(begin(box '#hasheq()))))"
"(define-values(make-small-hasheqv)(lambda()(begin(box '#hasheqv()))))"
"(define-values"
"(small-hash-ref)"
"(lambda(small-ht_0 key_0 default_0)(begin(hash-ref(unbox small-ht_0) key_0 default_0))))"
"(define-values"
"(small-hash-set!)"
"(lambda(small-ht_0 key_0 val_0)(begin(set-box! small-ht_0(hash-set(unbox small-ht_0) key_0 val_0)))))"
"(define-values(small-hash-keys)(lambda(small-ht_0)(begin(hash-keys(unbox small-ht_0)))))"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-multi-scope-tables"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-syntax-context"
" serialize-state-sharing-syntaxes)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 12"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11)"
" #f"
" 'serialize-state)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_4 1 'bindings-intern)"
"(make-struct-field-accessor -ref_4 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_4 3 'scopes)"
"(make-struct-field-accessor -ref_4 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_4 5 'multi-scope-tables)"
"(make-struct-field-accessor -ref_4 6 'mpi-shifts)"
"(make-struct-field-accessor -ref_4 7 'context-triples)"
"(make-struct-field-accessor -ref_4 8 'props)"
"(make-struct-field-accessor -ref_4 9 'interned-props)"
"(make-struct-field-accessor -ref_4 10 'syntax-context)"
"(make-struct-field-accessor -ref_4 11 'sharing-syntaxes))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_0)"
"(begin"
"(let-values(((state_77)"
"(serialize-state1.1"
" reachable-scopes_0"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(box null)"
"(make-hasheq))))"
"(let-values(((empty-seteq_78)(seteq)))"
"(begin"
"(hash-set!(serialize-state-scopes state_77) empty-seteq_78 empty-seteq_78)"
"(hash-set!(serialize-state-shifted-multi-scopes state_77) empty-seteq_78 empty-seteq_78)"
"(hash-set!(serialize-state-interned-props state_77) empty-seteq_78 empty-seteq_78)"
" state_77))))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_0 state_0)"
"(begin"
"(let-values(((or-part_81)(hash-ref(serialize-state-scopes state_0) scs_0 #f)))"
"(if or-part_81 or-part_81(begin(hash-set!(serialize-state-scopes state_0) scs_0 scs_0) scs_0))))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_0 state_0)"
"(begin"
"(let-values(((or-part_84)(hash-ref(serialize-state-shifted-multi-scopes state_0) sms_0 #f)))"
"(if or-part_84"
" or-part_84"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_0) sms_0 sms_0) sms_0))))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_0 state_0)"
"(begin"
"(if(null? mpi-shifts_0)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_87)(intern-mpi-shifts(cdr mpi-shifts_0) state_0)))"
"(let-values(((tail-table_88)"
"(let-values(((or-part_89)(hash-ref(serialize-state-mpi-shifts state_0) tail_87 #f)))"
"(if or-part_89"
" or-part_89"
"(let-values(((ht_90)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_0) tail_87 ht_90) ht_90))))))"
"(let-values(((or-part_91)(hash-ref tail-table_88(car mpi-shifts_0) #f)))"
"(if or-part_91"
" or-part_91"
"(let-values(((v_92)(cons(car mpi-shifts_0) tail_87)))"
"(begin(hash-set! tail-table_88(car mpi-shifts_0) v_92) v_92)))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_0 sms_0 mpi-shifts_0 state_0)"
"(begin"
"(let-values(((scs-ht_97)"
"(let-values(((or-part_99)(hash-ref(serialize-state-context-triples state_0) scs_0 #f)))"
"(if or-part_99"
" or-part_99"
"(let-values(((ht_100)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_0) scs_0 ht_100) ht_100))))))"
"(let-values(((sms-ht_98)"
"(let-values(((or-part_101)(hash-ref scs-ht_97 sms_0 #f)))"
"(if or-part_101"
" or-part_101"
"(let-values(((ht_102)(make-hasheq)))(begin(hash-set! scs-ht_97 sms_0 ht_102) ht_102))))))"
"(let-values(((or-part_103)(hash-ref sms-ht_98 mpi-shifts_0 #f)))"
"(if or-part_103"
" or-part_103"
"(let-values(((vec_104)(vector-immutable scs_0 sms_0 mpi-shifts_0)))"
"(begin(hash-set! sms-ht_98 mpi-shifts_0 vec_104) vec_104)))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_0 get-preserved-props_0 state_0)"
"(begin"
"(let-values(((v_108)(hash-ref(serialize-state-props state_0) all-props_0 'no)))"
"(if(eq? v_108 'no)"
"(let-values()"
"(let-values(((preserved-props_109)(get-preserved-props_0)))"
"(let-values(((p_110)"
"(if(zero?(hash-count preserved-props_109))"
"(let-values() #f)"
"(let-values(((c1_111)"
"(hash-ref(serialize-state-interned-props state_0) preserved-props_109 #f)))"
"(if c1_111"
"((lambda(p_0) p_0) c1_111)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_0)"
" preserved-props_109"
" preserved-props_109)"
" preserved-props_109)))))))"
"(begin(hash-set!(serialize-state-props state_0) all-props_0 p_110) p_110))))"
"(let-values() v_108))))))"
"(define-values"
"(push-syntax-context!)"
"(lambda(state_0 v_0)"
"(begin"
"(let-values(((b_115)(serialize-state-syntax-context state_0)))(set-box! b_115(cons v_0(unbox b_115)))))))"
"(define-values"
"(get-syntax-context)"
"(lambda(state_0)"
"(begin"
"(let-values(((b_117)(serialize-state-syntax-context state_0)))"
"(if(null?(unbox b_117)) #f(car(unbox b_117)))))))"
"(define-values"
"(pop-syntax-context!)"
"(lambda(state_0)"
"(begin(let-values(((b_119)(serialize-state-syntax-context state_0)))(set-box! b_119(cdr(unbox b_119)))))))"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_0)"
"(begin(let-values(((k_2)(prefab-struct-key v_0)))(if k_2(if(all-fields-immutable? k_2) k_2 #f) #f)))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_0)"
"(begin"
"(let-values(((or-part_4)(symbol? k_0)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(null? k_0)))"
"(if or-part_5"
" or-part_5"
"(let-values(((rk_6)(cdr k_0)))"
"(let-values(((rk_7)(if(if(pair? rk_6)(exact-integer?(car rk_6)) #f)(cdr rk_6) rk_6)))"
"(let-values(((rk_8)"
"(if(if(pair? rk_7)(pair?(car rk_7)) #f)"
"(if(zero?(caar rk_7))(cdr rk_7)(cons '#(1)(cdr rk_7)))"
" rk_7)))"
"(if(if(pair? rk_8)(vector?(car rk_8)) #f)"
"(if(zero?(vector-length(car rk_8)))(all-fields-immutable?(cdr rk_8)) #f)"
"(all-fields-immutable? rk_8))))))))))))"
" (define-values (not-an-fX.1) (lambda (who_0 v_0) (begin 'not-an-fX (raise-argument-error who_0 \"fixnum?\" v_0))))"
"(define-values"
"(datum-map-slow)"
"(lambda(tail?_0 s_0 f_0 seen_0)"
"(begin"
"((letrec-values(((loop_43)"
"(lambda(tail?_1 s_1 prev-seen_0)"
"(begin"
" 'loop"
"(let-values(((seen_47)"
"(if(if prev-seen_0(datum-has-elements? s_1) #f)"
"(let-values()"
"(if(hash-ref prev-seen_0 s_1 #f)"
"(let-values()((hash-ref prev-seen_0 'cycle-fail) s_1))"
"(let-values()(hash-set prev-seen_0 s_1 #t))))"
"(let-values() prev-seen_0))))"
"(if(null? s_1)"
"(let-values()(f_0 tail?_1 s_1))"
"(if(pair? s_1)"
"(let-values()"
"(f_0 tail?_1(cons(loop_43 #f(car s_1) seen_47)(loop_43 #t(cdr s_1) seen_47))))"
"(if(let-values(((or-part_48)(symbol? s_1)))"
"(if or-part_48"
" or-part_48"
"(let-values(((or-part_49)(boolean? s_1)))"
"(if or-part_49 or-part_49(number? s_1)))))"
"(let-values()(f_0 #f s_1))"
"(if(vector? s_1)"
"(let-values()"
"(f_0"
" #f"
"(vector->immutable-vector"
"(let-values(((len_50)(vector-length s_1)))"
"(begin"
"(if(exact-nonnegative-integer? len_50)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                   \"exact-nonnegative-integer?\""
" len_50)))"
"(let-values(((v_51)(make-vector len_50 0)))"
"(begin"
"(if(zero? len_50)"
"(void)"
"(let-values()"
"(let-values(((vec_52 len_53)"
"(let-values(((vec_54) s_1))"
"(begin"
"(check-vector vec_54)"
"(values"
" vec_54"
"(unsafe-vector-length vec_54))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_55)"
"(lambda(i_0 pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_53)"
"(let-values(((e_58)"
"(unsafe-vector-ref"
" vec_52"
" pos_0)))"
"(let-values(((i_59)"
"(let-values(((i_60)"
" i_0))"
"(let-values(((i_61)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_51"
" i_60"
"(let-values()"
"(loop_43"
" #f"
" e_58"
" seen_47)))"
"(unsafe-fx+"
" 1"
" i_60)))))"
"(values i_61)))))"
"(if(if(not"
"((lambda x_0"
"(unsafe-fx="
" i_59"
" len_50))"
" e_58))"
"(not #f)"
" #f)"
"(for-loop_55"
" i_59"
"(unsafe-fx+ 1 pos_0))"
" i_59)))"
" i_0)))))"
" for-loop_55)"
" 0"
" 0)))))"
" v_51)))))))"
"(if(box? s_1)"
"(let-values()(f_0 #f(box-immutable(loop_43 #f(unbox s_1) seen_47))))"
"(let-values(((c1_63)(immutable-prefab-struct-key s_1)))"
"(if c1_63"
"((lambda(key_0)"
"(f_0"
" #f"
"(apply"
" make-prefab-struct"
" key_0"
"(reverse$1"
"(let-values(((v*_65 start*_66 stop*_67 step*_68)"
"(normalise-inputs"
" 'in-vector"
"                                                                 \"vector\""
"(lambda(x_0)(vector? x_0))"
"(lambda(x_0)(unsafe-vector-length x_0))"
"(struct->vector s_1)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_71)"
"(lambda(fold-var_0 idx_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< idx_0 stop*_67)"
"(let-values(((e_74)"
"(unsafe-vector-ref"
" v*_65"
" idx_0)))"
"(let-values(((fold-var_75)"
"(let-values(((fold-var_76)"
" fold-var_0))"
"(let-values(((fold-var_77)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_43"
" #f"
" e_74"
" seen_47))"
" fold-var_76))))"
"(values"
" fold-var_77)))))"
"(if(not #f)"
"(for-loop_71"
" fold-var_75"
"(unsafe-fx+ idx_0 1))"
" fold-var_75)))"
" fold-var_0)))))"
" for-loop_71)"
" null"
" start*_66)))))))"
" c1_63)"
"(if(if(hash? s_1)(immutable? s_1) #f)"
"(let-values()"
"(if(hash-eq? s_1)"
"(let-values()"
"(f_0"
" #f"
"(let-values(((ht_78) s_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_78)))"
"((letrec-values(((for-loop_79)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_82 v_83)"
"(hash-iterate-key+value"
" ht_78"
" i_0)))"
"(let-values(((table_84)"
"(let-values(((table_85)"
" table_0))"
"(let-values(((table_86)"
"(let-values()"
"(let-values(((key_87"
" val_88)"
"(let-values()"
"(values"
" k_82"
"(loop_43"
" #f"
" v_83"
" seen_47)))))"
"(hash-set"
" table_85"
" key_87"
" val_88)))))"
"(values"
" table_86)))))"
"(if(not #f)"
"(for-loop_79"
" table_84"
"(hash-iterate-next ht_78 i_0))"
" table_84)))"
" table_0)))))"
" for-loop_79)"
" '#hasheq()"
"(hash-iterate-first ht_78))))))"
"(if(hash-eqv? s_1)"
"(let-values()"
"(f_0"
" #f"
"(let-values(((ht_89) s_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_93 v_94)"
"(hash-iterate-key+value"
" ht_89"
" i_0)))"
"(let-values(((table_95)"
"(let-values(((table_96)"
" table_0))"
"(let-values(((table_97)"
"(let-values()"
"(let-values(((key_98"
" val_99)"
"(let-values()"
"(values"
" k_93"
"(loop_43"
" #f"
" v_94"
" seen_47)))))"
"(hash-set"
" table_96"
" key_98"
" val_99)))))"
"(values"
" table_97)))))"
"(if(not #f)"
"(for-loop_90"
" table_95"
"(hash-iterate-next ht_89 i_0))"
" table_95)))"
" table_0)))))"
" for-loop_90)"
" '#hasheqv()"
"(hash-iterate-first ht_89))))))"
"(let-values()"
"(f_0"
" #f"
"(let-values(((ht_100) s_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_100)))"
"((letrec-values(((for-loop_101)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_104 v_105)"
"(hash-iterate-key+value"
" ht_100"
" i_0)))"
"(let-values(((table_106)"
"(let-values(((table_107)"
" table_0))"
"(let-values(((table_108)"
"(let-values()"
"(let-values(((key_109"
" val_110)"
"(let-values()"
"(values"
" k_104"
"(loop_43"
" #f"
" v_105"
" seen_47)))))"
"(hash-set"
" table_107"
" key_109"
" val_110)))))"
"(values"
" table_108)))))"
"(if(not #f)"
"(for-loop_101"
" table_106"
"(hash-iterate-next"
" ht_100"
" i_0))"
" table_106)))"
" table_0)))))"
" for-loop_101)"
" '#hash()"
"(hash-iterate-first ht_100)))))))))"
"(let-values()(f_0 #f s_1)))))))))))))))"
" loop_43)"
" tail?_0"
" s_0"
" seen_0))))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_0)"
"(begin"
"(let-values(((or-part_112)(pair? d_0)))"
"(if or-part_112"
" or-part_112"
"(let-values(((or-part_113)(vector? d_0)))"
"(if or-part_113"
" or-part_113"
"(let-values(((or-part_114)(box? d_0)))"
"(if or-part_114"
" or-part_114"
"(let-values(((or-part_115)(immutable-prefab-struct-key d_0)))"
"(if or-part_115"
" or-part_115"
"(if(hash? d_0)(if(immutable? d_0)(positive?(hash-count d_0)) #f) #f))))))))))))"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_0)(begin(if(preserved-property-value? v_0)(preserved-property-value-content v_0) v_0))))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_0 syntax?_0)"
"(begin"
"(let-values(((check-preserve_25)"
"(lambda(tail?_0 v_1)"
"(begin"
" 'check-preserve"
"(begin"
"(if(let-values(((or-part_28)(null? v_1)))"
"(if or-part_28"
" or-part_28"
"(let-values(((or-part_29)(boolean? v_1)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? v_1)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(number? v_1)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(char? v_1)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_33)(string? v_1)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_34)(bytes? v_1)))"
"(if or-part_34"
" or-part_34"
"(let-values(((or-part_35)(regexp? v_1)))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36)(syntax?_0 v_1)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(pair? v_1)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(vector? v_1)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)(box? v_1)))"
"(if or-part_39"
" or-part_39"
"(let-values(((or-part_40)(hash? v_1)))"
"(if or-part_40"
" or-part_40"
"(immutable-prefab-struct-key"
" v_1)))))))))))))))))))))))))))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'write"
"                               \"disallowed value in preserved syntax property\""
"                               \"value\""
" v_1)))"
" v_1)))))"
"(let-values(((s_41) v_0)((f_42) check-preserve_25)((gf_43) check-preserve_25)((seen_44) disallow-cycles$1))"
"((letrec-values(((loop_45)"
"(lambda(tail?_0 s_0 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_49)(fx+ 1 prev-depth_0)))"
"(if(if seen_44(fx> depth_49 32) #f)"
"(let-values()"
"(datum-map-slow tail?_0 s_0(lambda(tail?_1 s_1)(gf_43 tail?_1 s_1)) seen_44))"
"(if(null? s_0)"
"(let-values()(f_42 tail?_0 s_0))"
"(if(pair? s_0)"
"(let-values()"
"(f_42"
" tail?_0"
"(cons(loop_45 #f(car s_0) depth_49)(loop_45 #t(cdr s_0) depth_49))))"
"(if(symbol? s_0)"
"(let-values()(f_42 #f s_0))"
"(if(boolean? s_0)"
"(let-values()(f_42 #f s_0))"
"(if(number? s_0)"
"(let-values()(f_42 #f s_0))"
"(if(let-values(((or-part_52)(vector? s_0)))"
"(if or-part_52"
" or-part_52"
"(let-values(((or-part_53)(box? s_0)))"
"(if or-part_53"
" or-part_53"
"(let-values(((or-part_54)(prefab-struct-key s_0)))"
"(if or-part_54 or-part_54(hash? s_0)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_0"
"(lambda(tail?_1 s_1)(gf_43 tail?_1 s_1))"
" seen_44))"
"(let-values()(gf_43 #f s_0))))))))))))))"
" loop_45)"
" #f"
" s_41"
" 0))))))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_0) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_0))))"
"(define-values"
"(tamper?)"
"(lambda(v_0)"
"(begin"
"(let-values(((or-part_2)(not v_0)))"
"(if or-part_2 or-part_2(let-values(((or-part_3)(symbol? v_0)))(if or-part_3 or-part_3(set? v_0))))))))"
"(define-values(tamper-tainted?)(lambda(v_0)(begin(symbol? v_0))))"
"(define-values(tamper-armed?)(lambda(v_0)(begin(set? v_0))))"
"(define-values(tamper-clean?)(lambda(v_0)(begin(not v_0))))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_0)(begin(if(datum-has-elements? v_0) 'tainted/need-propagate 'tainted))))"
"(define-values(tamper-needs-propagate?)(lambda(t_0)(begin(eq? t_0 'tainted/need-propagate))))"
"(define-values(tamper-propagated)(lambda(t_0)(begin(if(eq? t_0 'tainted/need-propagate) 'tainted t_0))))"
"(define-values(serialize-tamper)(lambda(t_0)(begin(if(tamper-armed? t_0) 'armed t_0))))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_0)(begin(if(eq? t_0 'armed)(current-arm-inspectors) t_0))))"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations+tamper"
" syntax-mpi-shifts"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" set-syntax-content!"
" set-syntax-scope-propagations+tamper!)"
"(let-values(((struct:_65 make-_66 ?_67 -ref_68 -set!_69)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:reach-scopes"
"(lambda(s_0 reach_0)"
"(let-values(((prop_122)(syntax-scope-propagations+tamper s_0)))"
"(begin"
"(reach_0"
"(if(propagation?$1 prop_122)((propagation-ref prop_122) s_0)(syntax-content s_0)))"
"(reach_0(syntax-scopes s_0))"
"(reach_0(syntax-shifted-multi-scopes s_0))"
"(let-values(((ht_123)(syntax-props s_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_123)))"
"((letrec-values(((for-loop_124)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_126 v_127)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_123"
" i_0)))"
"(let-values((()"
"(let-values()"
"(if(preserved-property-value? v_127)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(reach_0"
"(plain-property-value"
" v_127)))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_124"
"(unsafe-immutable-hash-iterate-next ht_123 i_0))"
"(values))))"
"(values))))))"
" for-loop_124)"
"(unsafe-immutable-hash-iterate-first ht_123))))"
"(void)"
"(reach_0(syntax-srcloc s_0))))))"
"(cons"
" prop:serialize"
"(lambda(s_0 ser-push!_0 state_0)"
"(let-values(((prop_131)(syntax-scope-propagations+tamper s_0)))"
"(let-values(((content_132)"
"(if(propagation?$1 prop_131)"
"((propagation-ref prop_131) s_0)"
"(syntax-content s_0))))"
"(let-values(((properties_133)"
"(intern-properties"
"(syntax-props s_0)"
"(lambda()"
"(let-values(((ht_137)(syntax-props s_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_137)))"
"((letrec-values(((for-loop_138)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_141 v_142)"
"(hash-iterate-key+value"
" ht_137"
" i_0)))"
"(let-values(((table_143)"
"(let-values(((table_144)"
" table_0))"
"(if(preserved-property-value?"
" v_142)"
"(let-values(((table_145)"
" table_144))"
"(let-values(((table_146)"
"(let-values()"
"(let-values(((key_147"
" val_148)"
"(let-values()"
"(values"
" k_141"
"(check-value-to-preserve"
"(plain-property-value"
" v_142)"
" syntax?$1)))))"
"(hash-set"
" table_145"
" key_147"
" val_148)))))"
"(values table_146)))"
" table_144))))"
"(if(not #f)"
"(for-loop_138"
" table_143"
"(hash-iterate-next ht_137 i_0))"
" table_143)))"
" table_0)))))"
" for-loop_138)"
" '#hasheq()"
"(hash-iterate-first ht_137)))))"
" state_0)))"
"(let-values(((tamper_134)(serialize-tamper(syntax-tamper s_0))))"
"(let-values(((context-triple_135)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_0) state_0)"
"(intern-shifted-multi-scopes(syntax-shifted-multi-scopes s_0) state_0)"
"(intern-mpi-shifts(syntax-mpi-shifts s_0) state_0)"
" state_0)))"
"(let-values(((stx-state_136)(get-syntax-context state_0)))"
"(if(let-values(((or-part_149) properties_133))"
"(if or-part_149 or-part_149 tamper_134))"
"(let-values()"
"(begin"
"(ser-push!_0 'tag '#:syntax+props)"
"(push-syntax-context! state_0 #f)"
"(ser-push!_0 content_132)"
"(pop-syntax-context! state_0)"
"(ser-push!_0 'reference context-triple_135)"
"(ser-push!_0 'reference(syntax-srcloc s_0))"
"(ser-push!_0 properties_133)"
"(ser-push!_0 tamper_134)"
"(if stx-state_136"
"(let-values()(set-syntax-state-all-sharing?! stx-state_136 #f))"
"(void))))"
"(let-values()"
"(let-values(((sharing-mode_150)"
"(hash-ref"
"(serialize-state-sharing-syntaxes state_0)"
" s_0"
" 'unknown)))"
"(begin"
"(if(eq? sharing-mode_150 'share)"
"(let-values()"
"(begin"
"(ser-push!_0 'tag '#:datum->syntax)"
"(ser-push!_0(syntax->datum$1 s_0))))"
"(if(eq? sharing-mode_150 'unknown)"
"(let-values()"
"(let-values((()(begin(ser-push!_0 'tag '#:syntax)(values))))"
"(let-values(((this-state_151)"
"(if(no-pair-syntax-in-cdr? content_132)"
"(syntax-state17.1"
" #t"
" context-triple_135"
"(syntax-srcloc s_0))"
" #f)))"
"(let-values((()"
"(begin"
"(push-syntax-context! state_0 this-state_151)"
"(values))))"
"(let-values((()(begin(ser-push!_0 content_132)(values))))"
"(let-values((()"
"(begin"
"(pop-syntax-context! state_0)"
"(values))))"
"(let-values(((new-sharing-mode_152)"
"(if(if this-state_151"
"(syntax-state-all-sharing?"
" this-state_151)"
" #f)"
" 'share"
" 'none)))"
"(begin"
"(hash-set!"
"(serialize-state-sharing-syntaxes state_0)"
" s_0"
"(if(datum-has-elements? content_132)"
" new-sharing-mode_152"
" 'none))"
"(if(if stx-state_136"
"(eq? new-sharing-mode_152 'none)"
" #f)"
"(let-values()"
"(set-syntax-state-all-sharing?! stx-state_136 #f))"
"(void))))))))))"
"(let-values()"
"(begin"
"(ser-push!_0 'tag '#:syntax)"
"(push-syntax-context! state_0 #f)"
"(ser-push!_0 content_132)"
"(pop-syntax-context! state_0)))))"
"(ser-push!_0 'reference context-triple_135)"
"(ser-push!_0 'reference(syntax-srcloc s_0))"
"(if stx-state_136"
"(let-values()"
"(if(if(eq?"
" context-triple_135"
"(syntax-state-context-triple stx-state_136))"
"(equal?(syntax-srcloc s_0)(syntax-state-srcloc stx-state_136))"
" #f)"
"(void)"
"(let-values()(set-syntax-state-all-sharing?! stx-state_136 #f))))"
"(void))))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_0 port_0 mode_0)"
"                         (let-values ((() (begin (write-string \"#<syntax\" port_0) (values))))"
"(let-values(((srcloc_156)(syntax-srcloc s_0)))"
"(begin"
"(if srcloc_156"
"(let-values()"
"(let-values(((srcloc-str_157)(srcloc->string srcloc_156)))"
"                                     (if srcloc-str_157 (let-values () (fprintf port_0 \":~a\" srcloc-str_157)) (void))))"
"(void))"
"                               (fprintf port_0 \" ~.s\" (syntax->datum$1 s_0))"
"                               (write-string \">\" port_0)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'syntax)))))"
"(values"
" struct:_65"
" make-_66"
" ?_67"
"(make-struct-field-accessor -ref_68 0 'content)"
"(make-struct-field-accessor -ref_68 1 'scopes)"
"(make-struct-field-accessor -ref_68 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_68 3 'scope-propagations+tamper)"
"(make-struct-field-accessor -ref_68 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_68 5 'srcloc)"
"(make-struct-field-accessor -ref_68 6 'props)"
"(make-struct-field-accessor -ref_68 7 'inspector)"
"(make-struct-field-mutator -set!_69 0 'content)"
"(make-struct-field-mutator -set!_69 3 'scope-propagations+tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values"
"(prop:propagation-tamper propagation-tamper? propagation-tamper-ref)"
"(make-struct-type-property 'propagation-tamper))"
"(define-values"
"(prop:propagation-set-tamper propagation-set-tamper? propagation-set-tamper-ref)"
"(make-struct-type-property 'propagation-set-tamper))"
"(define-values"
"(syntax-tamper)"
"(lambda(s_0)"
"(begin"
"(let-values(((v_159)(syntax-scope-propagations+tamper s_0)))"
"(if(tamper? v_159) v_159((propagation-tamper-ref v_159) v_159))))))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f empty-props #f))"
"(define-values(identifier?)(lambda(s_0)(begin(if(syntax?$1 s_0)(symbol?(syntax-content s_0)) #f))))"
"(define-values(syntax-identifier?)(lambda(s_0)(begin(symbol?(syntax-content s_0)))))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_0)"
"(begin"
" 'syntax->datum"
"(let-values(((s_163) s_0)"
"((f_164)(lambda(tail?_0 x_0)(begin 'f x_0)))"
"((d->s_165)(lambda(s_1 d_0)(begin 'd->s d_0)))"
"((s-e_166) syntax-content)"
"((seen_167) #f))"
"((letrec-values(((loop_172)"
"(lambda(s_1)"
"(begin"
" 'loop"
"(let-values(((s_174) s_1)"
"((f_175) f_164)"
"((gf_176)"
"(lambda(tail?_0 v_0)"
"(begin"
" 'gf"
"(if(syntax?$1 v_0)"
"(let-values()(d->s_165 v_0(loop_172(s-e_166 v_0))))"
"(let-values()(f_164 tail?_0 v_0))))))"
"((seen_177) seen_167))"
"((letrec-values(((loop_180)"
"(lambda(tail?_0 s_2 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_184)(fx+ 1 prev-depth_0)))"
"(if(if seen_177(fx> depth_184 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)(gf_176 tail?_1 s_3))"
" seen_177))"
"(if(null? s_2)"
"(let-values()(f_175 tail?_0 s_2))"
"(if(pair? s_2)"
"(let-values()"
"(f_175"
" tail?_0"
"(cons"
"(loop_180 #f(car s_2) depth_184)"
"(loop_180 #t(cdr s_2) depth_184))))"
"(if(symbol? s_2)"
"(let-values()(f_175 #f s_2))"
"(if(boolean? s_2)"
"(let-values()(f_175 #f s_2))"
"(if(number? s_2)"
"(let-values()(f_175 #f s_2))"
"(if(let-values(((or-part_187)(vector? s_2)))"
"(if or-part_187"
" or-part_187"
"(let-values(((or-part_188)(box? s_2)))"
"(if or-part_188"
" or-part_188"
"(let-values(((or-part_189)"
"(prefab-struct-key s_2)))"
"(if or-part_189"
" or-part_189"
"(hash? s_2)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)(gf_176 tail?_1 s_3))"
" seen_177))"
"(let-values()(gf_176 #f s_2))))))))))))))"
" loop_180)"
" #f"
" s_174"
" 0))))))"
" loop_172)"
" s_163)))))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax6_192)"
"(lambda(stx-c4_0 s5_0 stx-l2_0 stx-p3_0)"
"(begin"
" 'datum->syntax6"
"(let-values(((stx-c_197) stx-c4_0))"
"(let-values(((s_198) s5_0))"
"(let-values(((stx-l_199) stx-l2_0))"
"(let-values(((stx-p_200) stx-p3_0))"
"(let-values()"
"(if(syntax?$1 s_198)"
"(let-values() s_198)"
"(let-values()"
"(let-values(((wrap_201)"
"(lambda(content_0)"
"(begin"
" 'wrap"
"(syntax1.1"
" content_0"
"(if stx-c_197(syntax-scopes stx-c_197) empty-scopes)"
"(if stx-c_197"
"(syntax-shifted-multi-scopes stx-c_197)"
" empty-shifted-multi-scopes)"
"(if stx-c_197"
"(if(syntax-tamper stx-c_197)"
"(tamper-tainted-for-content content_0)"
" #f)"
" #f)"
"(if stx-c_197(syntax-mpi-shifts stx-c_197) empty-mpi-shifts)"
"(if stx-l_199(syntax-srcloc stx-l_199) #f)"
" empty-props"
"(if stx-c_197(syntax-inspector stx-c_197) #f))))))"
"(let-values(((result-s_202)"
"(let-values(((s_204) s_198)"
"((f_205)"
"(lambda(tail?_0 x_0)"
"(begin 'f(if tail?_0 x_0(wrap_201 x_0)))))"
"((s->_206)(lambda(s_0)(begin 's-> s_0)))"
"((seen_207) disallow-cycles))"
"(let-values(((s_211) s_204)"
"((f_212) f_205)"
"((gf_213)"
"(lambda(tail?_0 v_0)"
"(begin"
" 'gf"
"(if(syntax?$1 v_0)"
"(let-values()(s->_206 v_0))"
"(let-values()(f_205 tail?_0 v_0))))))"
"((seen_214) seen_207))"
"((letrec-values(((loop_217)"
"(lambda(tail?_0 s_0 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_221)"
"(fx+ 1 prev-depth_0)))"
"(if(if seen_214(fx> depth_221 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_0"
"(lambda(tail?_1 s_1)"
"(gf_213 tail?_1 s_1))"
" seen_214))"
"(if(null? s_0)"
"(let-values()(f_212 tail?_0 s_0))"
"(if(pair? s_0)"
"(let-values()"
"(f_212"
" tail?_0"
"(cons"
"(loop_217"
" #f"
"(car s_0)"
" depth_221)"
"(loop_217"
" #t"
"(cdr s_0)"
" depth_221))))"
"(if(symbol? s_0)"
"(let-values()(f_212 #f s_0))"
"(if(boolean? s_0)"
"(let-values()(f_212 #f s_0))"
"(if(number? s_0)"
"(let-values()(f_212 #f s_0))"
"(if(let-values(((or-part_224)"
"(vector?"
" s_0)))"
"(if or-part_224"
" or-part_224"
"(let-values(((or-part_225)"
"(box?"
" s_0)))"
"(if or-part_225"
" or-part_225"
"(let-values(((or-part_226)"
"(prefab-struct-key"
" s_0)))"
"(if or-part_226"
" or-part_226"
"(hash?"
" s_0)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_0"
"(lambda(tail?_1 s_1)"
"(gf_213 tail?_1 s_1))"
" seen_214))"
"(let-values()"
"(gf_213"
" #f"
" s_0))))))))))))))"
" loop_217)"
" #f"
" s_211"
" 0)))))"
"(if(if stx-p_200(not(eq?(syntax-props stx-p_200) empty-props)) #f)"
"(let-values(((the-struct_229) result-s_202))"
"(if(syntax?$1 the-struct_229)"
"(let-values(((props19_230)(syntax-props stx-p_200)))"
"(syntax1.1"
"(syntax-content the-struct_229)"
"(syntax-scopes the-struct_229)"
"(syntax-shifted-multi-scopes the-struct_229)"
"(syntax-scope-propagations+tamper the-struct_229)"
"(syntax-mpi-shifts the-struct_229)"
"(syntax-srcloc the-struct_229)"
" props19_230"
"(syntax-inspector the-struct_229)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_229)))"
" result-s_202))))))))))))))"
"(case-lambda"
"((stx-c_0 s_0)(begin 'datum->syntax(datum->syntax6_192 stx-c_0 s_0 #f #f)))"
"((stx-c_0 s_0 stx-l_0 stx-p3_0)(datum->syntax6_192 stx-c_0 s_0 stx-l_0 stx-p3_0))"
"((stx-c_0 s_0 stx-l2_0)(datum->syntax6_192 stx-c_0 s_0 stx-l2_0 #f)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_0) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" \"datum\" s_0))))"
"(define-values"
"(struct:syntax-state"
" syntax-state17.1"
" syntax-state?"
" syntax-state-all-sharing?"
" syntax-state-context-triple"
" syntax-state-srcloc"
" set-syntax-state-all-sharing?!)"
"(let-values(((struct:_241 make-_242 ?_243 -ref_244 -set!_245)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syntax-state #f 3 0 #f null(current-inspector) #f '(1 2) #f 'syntax-state)))))"
"(values"
" struct:_241"
" make-_242"
" ?_243"
"(make-struct-field-accessor -ref_244 0 'all-sharing?)"
"(make-struct-field-accessor -ref_244 1 'context-triple)"
"(make-struct-field-accessor -ref_244 2 'srcloc)"
"(make-struct-field-mutator -set!_245 0 'all-sharing?))))"
"(define-values"
"(no-pair-syntax-in-cdr?)"
"(lambda(content_0)"
"(begin"
"(if(pair? content_0)"
"(let-values()"
"((letrec-values(((loop_272)"
"(lambda(content_1)"
"(begin"
" 'loop"
"(if(if(syntax?$1 content_1)(pair?(syntax-content content_1)) #f)"
"(let-values() #f)"
"(if(pair? content_1)"
"(let-values()(loop_272(cdr content_1)))"
"(let-values() #t)))))))"
" loop_272)"
"(cdr content_0)))"
"(let-values() #t)))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_0 context-triple_0 srcloc_0 props_0 tamper_0 inspector_0)"
"(begin"
"(syntax1.1"
" content_0"
"(vector*-ref context-triple_0 0)"
"(vector*-ref context-triple_0 1)"
"(deserialize-tamper tamper_0)"
"(vector*-ref context-triple_0 2)"
" srcloc_0"
"(if props_0"
"(let-values(((ht_280) props_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_280)))"
"((letrec-values(((for-loop_281)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_284 v_285)(unsafe-immutable-hash-iterate-key+value ht_280 i_0)))"
"(let-values(((table_286)"
"(let-values(((table_287) table_0))"
"(let-values(((table_288)"
"(let-values()"
"(let-values(((key_289 val_290)"
"(let-values()"
"(values"
" k_284"
"(preserved-property-value1.1"
" v_285)))))"
"(hash-set table_287 key_289 val_290)))))"
"(values table_288)))))"
"(if(not #f)"
"(for-loop_281 table_286(unsafe-immutable-hash-iterate-next ht_280 i_0))"
" table_286)))"
" table_0)))))"
" for-loop_281)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_280))))"
" empty-props)"
" inspector_0))))"
"(define-values"
"(deserialize-datum->syntax)"
"(lambda(content_0 context-triple_0 srcloc_0 inspector_0)"
"(begin"
"(let-values(((s_295)(deserialize-syntax #f context-triple_0 srcloc_0 #f #f inspector_0)))"
"(datum->syntax$1 s_295 content_0 s_295 s_295)))))"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:binding-reach-scopes(lambda(b_0)(binding-free=id b_0))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'frame-id)"
"(make-struct-field-accessor -ref_4 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_0)(begin(if(full-binding? b_0)(full-binding-frame-id b_0) #f))))"
"(define-values(binding-free=id)(lambda(b_0)(begin(if(full-binding? b_0)(full-binding-free=id b_0) #f))))"
"(define-values"
"(make-module-binding22.1)"
"(lambda(extra-inspector8_0"
" extra-nominal-bindings9_0"
" frame-id6_0"
" free=id7_0"
" nominal-module2_0"
" nominal-phase3_0"
" nominal-require-phase5_0"
" nominal-sym4_0"
" wrt1_0"
" module19_0"
" phase20_0"
" sym21_0)"
"(begin"
" 'make-module-binding22"
"(let-values(((module_13) module19_0))"
"(let-values(((phase_14) phase20_0))"
"(let-values(((sym_15) sym21_0))"
"(let-values()"
"(let-values(((nominal-module_17)"
"(if(eq? nominal-module2_0 unsafe-undefined) module_13 nominal-module2_0)))"
"(let-values(((nominal-phase_18)"
"(if(eq? nominal-phase3_0 unsafe-undefined) phase_14 nominal-phase3_0)))"
"(let-values(((nominal-sym_19)(if(eq? nominal-sym4_0 unsafe-undefined) sym_15 nominal-sym4_0)))"
"(let-values(((nominal-require-phase_20) nominal-require-phase5_0))"
"(let-values(((frame-id_21) frame-id6_0))"
"(let-values(((free=id_22) free=id7_0))"
"(let-values(((extra-inspector_23) extra-inspector8_0))"
"(let-values(((extra-nominal-bindings_24) extra-nominal-bindings9_0))"
"(let-values()"
"(if(let-values(((or-part_25) frame-id_21))"
"(if or-part_25"
" or-part_25"
"(let-values(((or-part_26) free=id_22))"
"(if or-part_26"
" or-part_26"
"(let-values(((or-part_27) extra-inspector_23))"
"(if or-part_27"
" or-part_27"
"(not"
"(if(eqv? nominal-phase_18 phase_14)"
"(if(eq? nominal-sym_19 sym_15)"
"(if(eqv? nominal-require-phase_20 0)"
"(null? extra-nominal-bindings_24)"
" #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding51.1"
" frame-id_21"
" free=id_22"
" module_13"
" phase_14"
" sym_15"
" nominal-module_17"
" nominal-phase_18"
" nominal-sym_19"
" nominal-require-phase_20"
" extra-inspector_23"
" extra-nominal-bindings_24))"
"(let-values()"
"(simple-module-binding52.1"
" module_13"
" phase_14"
" sym_15"
" nominal-module_17)))))))))))))))))))"
"(define-values"
"(module-binding-update48.1)"
"(lambda(extra-inspector34_0"
" extra-nominal-bindings35_0"
" frame-id32_0"
" free=id33_0"
" module25_0"
" nominal-module28_0"
" nominal-phase29_0"
" nominal-require-phase31_0"
" nominal-sym30_0"
" phase26_0"
" sym27_0"
" b47_0)"
"(begin"
" 'module-binding-update48"
"(let-values(((b_108) b47_0))"
"(let-values(((module_109)(if(eq? module25_0 unsafe-undefined)(module-binding-module b_108) module25_0)))"
"(let-values(((phase_110)(if(eq? phase26_0 unsafe-undefined)(module-binding-phase b_108) phase26_0)))"
"(let-values(((sym_111)(if(eq? sym27_0 unsafe-undefined)(module-binding-sym b_108) sym27_0)))"
"(let-values(((nominal-module_112)"
"(if(eq? nominal-module28_0 unsafe-undefined)"
"(module-binding-nominal-module b_108)"
" nominal-module28_0)))"
"(let-values(((nominal-phase_113)"
"(if(eq? nominal-phase29_0 unsafe-undefined)"
"(module-binding-nominal-phase b_108)"
" nominal-phase29_0)))"
"(let-values(((nominal-sym_114)"
"(if(eq? nominal-sym30_0 unsafe-undefined)"
"(module-binding-nominal-sym b_108)"
" nominal-sym30_0)))"
"(let-values(((nominal-require-phase_115)"
"(if(eq? nominal-require-phase31_0 unsafe-undefined)"
"(module-binding-nominal-require-phase b_108)"
" nominal-require-phase31_0)))"
"(let-values(((frame-id_116)"
"(if(eq? frame-id32_0 unsafe-undefined)(binding-frame-id b_108) frame-id32_0)))"
"(let-values(((free=id_117)"
"(if(eq? free=id33_0 unsafe-undefined)(binding-free=id b_108) free=id33_0)))"
"(let-values(((extra-inspector_118)"
"(if(eq? extra-inspector34_0 unsafe-undefined)"
"(module-binding-extra-inspector b_108)"
" extra-inspector34_0)))"
"(let-values(((extra-nominal-bindings_119)"
"(if(eq? extra-nominal-bindings35_0 unsafe-undefined)"
"(module-binding-extra-nominal-bindings b_108)"
" extra-nominal-bindings35_0)))"
"(let-values()"
"(let-values(((module53_121) module_109)"
"((phase54_122) phase_110)"
"((sym55_123) sym_111)"
"((nominal-module56_124) nominal-module_112)"
"((nominal-phase57_125) nominal-phase_113)"
"((nominal-sym58_126) nominal-sym_114)"
"((nominal-require-phase59_127) nominal-require-phase_115)"
"((frame-id60_128) frame-id_116)"
"((free=id61_129) free=id_117)"
"((extra-inspector62_130) extra-inspector_118)"
"((extra-nominal-bindings63_131) extra-nominal-bindings_119))"
"(make-module-binding22.1"
" extra-inspector62_130"
" extra-nominal-bindings63_131"
" frame-id60_128"
" free=id61_129"
" nominal-module56_124"
" nominal-phase57_125"
" nominal-require-phase59_127"
" nominal-sym58_126"
" unsafe-undefined"
" module53_121"
" phase54_122"
" sym55_123))))))))))))))))))"
"(define-values"
"(module-binding?)"
"(lambda(b_0)"
"(begin"
"(let-values(((or-part_207)(simple-module-binding? b_0)))"
"(if or-part_207 or-part_207(full-module-binding? b_0))))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding51.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector"
" full-module-binding-extra-nominal-bindings)"
"(let-values(((struct:_208 make-_209 ?_210 -ref_211 -set!_212)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 9"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(b_0 ser-push!_0 state_0)"
"(let-values(((simplified-b_271)"
"(if(full-binding-frame-id b_0)"
"(let-values(((b65_273) b_0)((temp66_274) #f))"
"(module-binding-update48.1"
" unsafe-undefined"
" unsafe-undefined"
" temp66_274"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" b65_273))"
" b_0)))"
"(if(full-module-binding? simplified-b_271)"
"(let-values()"
"(begin"
"(ser-push!_0 'tag '#:module-binding)"
"(ser-push!_0(full-module-binding-module b_0))"
"(ser-push!_0(full-module-binding-sym b_0))"
"(ser-push!_0(full-module-binding-phase b_0))"
"(ser-push!_0(full-module-binding-nominal-module b_0))"
"(ser-push!_0(full-module-binding-nominal-phase b_0))"
"(ser-push!_0(full-module-binding-nominal-sym b_0))"
"(ser-push!_0(full-module-binding-nominal-require-phase b_0))"
"(ser-push!_0(full-binding-free=id b_0))"
"(if(full-module-binding-extra-inspector b_0)"
"(ser-push!_0 'tag '#:inspector)"
"(ser-push!_0 #f))"
"(ser-push!_0(full-module-binding-extra-nominal-bindings b_0))))"
"(let-values()(ser-push!_0 simplified-b_271)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'full-module-binding)))))"
"(values"
" struct:_208"
" make-_209"
" ?_210"
"(make-struct-field-accessor -ref_211 0 'module)"
"(make-struct-field-accessor -ref_211 1 'phase)"
"(make-struct-field-accessor -ref_211 2 'sym)"
"(make-struct-field-accessor -ref_211 3 'nominal-module)"
"(make-struct-field-accessor -ref_211 4 'nominal-phase)"
"(make-struct-field-accessor -ref_211 5 'nominal-sym)"
"(make-struct-field-accessor -ref_211 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_211 7 'extra-inspector)"
"(make-struct-field-accessor -ref_211 8 'extra-nominal-bindings))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding52.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym"
" simple-module-binding-nominal-module)"
"(let-values(((struct:_275 make-_276 ?_277 -ref_278 -set!_279)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(b_0 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:simple-module-binding)"
"(ser-push!_0(simple-module-binding-module b_0))"
"(ser-push!_0(simple-module-binding-sym b_0))"
"(ser-push!_0(simple-module-binding-phase b_0))"
"(ser-push!_0(simple-module-binding-nominal-module b_0))))))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'simple-module-binding)))))"
"(values"
" struct:_275"
" make-_276"
" ?_277"
"(make-struct-field-accessor -ref_278 0 'module)"
"(make-struct-field-accessor -ref_278 1 'phase)"
"(make-struct-field-accessor -ref_278 2 'sym)"
"(make-struct-field-accessor -ref_278 3 'nominal-module))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_0"
" sym_0"
" phase_0"
" nominal-module_0"
" nominal-phase_0"
" nominal-sym_0"
" nominal-require-phase_0"
" free=id_0"
" extra-inspector_0"
" extra-nominal-bindings_0)"
"(begin"
"(let-values(((module68_324) module_0)"
"((phase69_325) phase_0)"
"((sym70_326) sym_0)"
"((nominal-module71_327) nominal-module_0)"
"((nominal-phase72_328) nominal-phase_0)"
"((nominal-sym73_329) nominal-sym_0)"
"((nominal-require-phase74_330) nominal-require-phase_0)"
"((free=id75_331) free=id_0)"
"((extra-inspector76_332) extra-inspector_0)"
"((extra-nominal-bindings77_333) extra-nominal-bindings_0))"
"(make-module-binding22.1"
" extra-inspector76_332"
" extra-nominal-bindings77_333"
" #f"
" free=id75_331"
" nominal-module71_327"
" nominal-phase72_328"
" nominal-require-phase74_330"
" nominal-sym73_329"
" unsafe-undefined"
" module68_324"
" phase69_325"
" sym70_326)))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_0 sym_0 phase_0 nominal-module_0)"
"(begin(simple-module-binding52.1 module_0 phase_0 sym_0 nominal-module_0))))"
"(define-values"
"(module-binding-module)"
"(lambda(b_0)"
"(begin(if(simple-module-binding? b_0)(simple-module-binding-module b_0)(full-module-binding-module b_0)))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_0)"
"(begin(if(simple-module-binding? b_0)(simple-module-binding-phase b_0)(full-module-binding-phase b_0)))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_0)"
"(begin(if(simple-module-binding? b_0)(simple-module-binding-sym b_0)(full-module-binding-sym b_0)))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_0)"
"(begin"
"(if(simple-module-binding? b_0)"
"(simple-module-binding-nominal-module b_0)"
"(full-module-binding-nominal-module b_0)))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_0)"
"(begin"
"(if(simple-module-binding? b_0)(simple-module-binding-phase b_0)(full-module-binding-nominal-phase b_0)))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_0)"
"(begin(if(simple-module-binding? b_0)(simple-module-binding-sym b_0)(full-module-binding-nominal-sym b_0)))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_0)(begin(if(simple-module-binding? b_0) 0(full-module-binding-nominal-require-phase b_0)))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_0)(begin(if(simple-module-binding? b_0) #f(full-module-binding-extra-inspector b_0)))))"
"(define-values"
"(module-binding-extra-nominal-bindings)"
"(lambda(b_0)(begin(if(simple-module-binding? b_0) null(full-module-binding-extra-nominal-bindings b_0)))))"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-syms/serialize"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_40 make-_41 ?_42 -ref_43 -set!_44)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(twbb_0 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:table-with-bulk-bindings)"
"(ser-push!_0(table-with-bulk-bindings-syms/serialize twbb_0))"
"(ser-push!_0(table-with-bulk-bindings-bulk-bindings twbb_0))))))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table-with-bulk-bindings)))))"
"(values"
" struct:_40"
" make-_41"
" ?_42"
"(make-struct-field-accessor -ref_43 0 'syms)"
"(make-struct-field-accessor -ref_43 1 'syms/serialize)"
"(make-struct-field-accessor -ref_43 2 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_0 bulk-bindings_0)(begin(table-with-bulk-bindings1.1 syms_0 syms_0 bulk-bindings_0))))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_75 make-_76 ?_77 -ref_78 -set!_79)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"                      (cons prop:reach-scopes (lambda (sms_0 reach_0) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_0 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:bulk-binding-at)"
"(ser-push!_0(bulk-binding-at-scopes bba_0))"
"(ser-push!_0(bulk-binding-at-bulk bba_0))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))))"
"(values"
" struct:_75"
" make-_76"
" ?_77"
"(make-struct-field-accessor -ref_78 0 'scopes)"
"(make-struct-field-accessor -ref_78 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_0 bulk_0)(begin(bulk-binding-at2.1 scopes_0 bulk_0))))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_107 make-_108 ?_109 -ref_110 -set!_111)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))))"
"(values"
" struct:_107"
" make-_108"
" ?_109"
"(make-struct-field-accessor -ref_110 0 'get-symbols)"
"(make-struct-field-accessor -ref_110 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_0 s_0 extra-shifts_0)"
"(begin"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_0))"
" b_0"
"(append extra-shifts_0(if s_0(syntax-mpi-shifts s_0) null))))))"
"(define-values(bulk-binding-create)(lambda(b_0)(begin(bulk-binding-class-create(bulk-binding-ref b_0)))))"
"(define-values(binding-table-empty?)(lambda(bt_0)(begin(if(hash? bt_0)(zero?(hash-count bt_0)) #f))))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_0 scopes_0 sym_0 binding_0 just-for-nominal?_0)"
"(begin"
"(if(hash? bt_0)"
"(let-values()(hash-set bt_0 sym_0(hash-set(hash-ref bt_0 sym_0 '#hash()) scopes_0 binding_0)))"
"(let-values()"
"(let-values(((new-syms_142)"
"(binding-table-add"
"(table-with-bulk-bindings-syms bt_0)"
" scopes_0"
" sym_0"
" binding_0"
" just-for-nominal?_0)))"
"(let-values(((new-syms/serialize_143)"
"(if just-for-nominal?_0"
"(let-values()(table-with-bulk-bindings-syms/serialize bt_0))"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_0)"
"(table-with-bulk-bindings-syms/serialize bt_0))"
"(let-values() new-syms_142)"
"(let-values()"
"(binding-table-add"
"(table-with-bulk-bindings-syms/serialize bt_0)"
" scopes_0"
" sym_0"
" binding_0"
" #f))))))"
"(let-values(((the-struct_144) bt_0))"
"(if(table-with-bulk-bindings? the-struct_144)"
"(let-values(((syms32_145) new-syms_142)((syms/serialize33_146) new-syms/serialize_143))"
"(table-with-bulk-bindings1.1"
" syms32_145"
" syms/serialize33_146"
"(table-with-bulk-bindings-bulk-bindings the-struct_144)))"
"                  (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_144))))))))))"
"(define-values"
"(prop:implicitly-reachable implicitly-reachable? implicitly-reachable-ref)"
"(make-struct-type-property 'implicitly-reachable))"
"(define-values"
"(binding-table-add-bulk9.1)"
"(lambda(shadow-except4_0 bt6_0 scopes7_0 bulk8_0)"
"(begin"
" 'binding-table-add-bulk9"
"(let-values(((bt_151) bt6_0))"
"(let-values(((scopes_152) scopes7_0))"
"(let-values(((bulk_153) bulk8_0))"
"(let-values(((shadow-except_154) shadow-except4_0))"
"(let-values()"
"(if(table-with-bulk-bindings? bt_151)"
"(let-values()"
"(let-values(((new-syms_155)"
"(let-values(((temp34_158)(table-with-bulk-bindings-syms bt_151))"
"((scopes35_159) scopes_152)"
"((bulk36_160) bulk_153)"
"((shadow-except37_161) shadow-except_154))"
"(remove-matching-bindings17.1"
" shadow-except37_161"
" temp34_158"
" scopes35_159"
" bulk36_160))))"
"(let-values(((new-syms/serialize_156)"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_151)"
"(table-with-bulk-bindings-syms/serialize bt_151))"
" new-syms_155"
"(let-values(((temp38_163)(table-with-bulk-bindings-syms/serialize bt_151))"
"((scopes39_164) scopes_152)"
"((bulk40_165) bulk_153)"
"((shadow-except41_166) shadow-except_154))"
"(remove-matching-bindings17.1"
" shadow-except41_166"
" temp38_163"
" scopes39_164"
" bulk40_165)))))"
"(table-with-bulk-bindings1.1"
" new-syms_155"
" new-syms/serialize_156"
"(cons"
"(bulk-binding-at2.1 scopes_152 bulk_153)"
"(table-with-bulk-bindings-bulk-bindings bt_151))))))"
"(let-values()"
"(let-values(((temp42_167)(table-with-bulk-bindings1.1 bt_151 bt_151 null))"
"((scopes43_168) scopes_152)"
"((bulk44_169) bulk_153))"
"(binding-table-add-bulk9.1 #f temp42_167 scopes43_168 bulk44_169))))))))))))"
"(define-values"
"(remove-matching-bindings17.1)"
"(lambda(except12_0 syms14_0 scopes15_0 bulk16_0)"
"(begin"
" 'remove-matching-bindings17"
"(let-values(((syms_202) syms14_0))"
"(let-values(((scopes_203) scopes15_0))"
"(let-values(((bulk_204) bulk16_0))"
"(let-values(((except_205) except12_0))"
"(let-values()"
"(let-values(((bulk-symbols_206)(bulk-binding-symbols bulk_204 #f null)))"
"(if(<(hash-count syms_202)(hash-count bulk-symbols_206))"
"(let-values()"
"(let-values(((ht_207) syms_202))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_207)))"
"((letrec-values(((for-loop_208)"
"(lambda(syms_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_211 sym-bindings_212)"
"(unsafe-immutable-hash-iterate-key+value ht_207 i_0)))"
"(let-values(((syms_213)"
"(let-values(((syms_214) syms_0))"
"(let-values(((syms_215)"
"(let-values()"
"(if(hash-ref"
" bulk-symbols_206"
" sym_211"
" #f)"
"(let-values(((syms45_217)"
" syms_214)"
"((sym46_218) sym_211)"
"((sym-bindings47_219)"
" sym-bindings_212)"
"((scopes48_220)"
" scopes_203)"
"((except49_221)"
" except_205))"
"(remove-matching-binding26.1"
" except49_221"
" syms45_217"
" sym46_218"
" sym-bindings47_219"
" scopes48_220))"
" syms_214))))"
"(values syms_215)))))"
"(if(not #f)"
"(for-loop_208"
" syms_213"
"(unsafe-immutable-hash-iterate-next ht_207 i_0))"
" syms_213)))"
" syms_0)))))"
" for-loop_208)"
" syms_202"
"(unsafe-immutable-hash-iterate-first ht_207)))))"
"(let-values()"
"(let-values(((ht_222) bulk-symbols_206))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_222)))"
"((letrec-values(((for-loop_223)"
"(lambda(syms_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_226)"
"(unsafe-immutable-hash-iterate-key ht_222 i_0)))"
"(let-values(((syms_227)"
"(let-values(((syms_228) syms_0))"
"(let-values(((syms_229)"
"(let-values()"
"(let-values(((sym-bindings_230)"
"(hash-ref"
" syms_228"
" sym_226"
" #f)))"
"(if sym-bindings_230"
"(let-values(((syms50_232)"
" syms_228)"
"((sym51_233)"
" sym_226)"
"((sym-bindings52_234)"
" sym-bindings_230)"
"((scopes53_235)"
" scopes_203)"
"((except54_236)"
" except_205))"
"(remove-matching-binding26.1"
" except54_236"
" syms50_232"
" sym51_233"
" sym-bindings52_234"
" scopes53_235))"
" syms_228)))))"
"(values syms_229)))))"
"(if(not #f)"
"(for-loop_223"
" syms_227"
"(unsafe-immutable-hash-iterate-next ht_222 i_0))"
" syms_227)))"
" syms_0)))))"
" for-loop_223)"
" syms_202"
"(unsafe-immutable-hash-iterate-first ht_222)))))))))))))))"
"(define-values"
"(remove-matching-binding26.1)"
"(lambda(except20_0 syms22_0 sym23_0 sym-bindings24_0 scopes25_0)"
"(begin"
" 'remove-matching-binding26"
"(let-values(((syms_266) syms22_0))"
"(let-values(((sym_267) sym23_0))"
"(let-values(((sym-bindings_268) sym-bindings24_0))"
"(let-values(((scopes_269) scopes25_0))"
"(let-values(((except_270) except20_0))"
"(let-values()"
"(if(if except_270"
"(let-values(((b_271)(hash-ref sym-bindings_268 scopes_269 #f)))"
"(if(module-binding? b_271)(eq? except_270(module-binding-module b_271)) #f))"
" #f)"
"(let-values() syms_266)"
"(let-values()(hash-set syms_266 sym_267(hash-remove sym-bindings_268 scopes_269)))))))))))))"
"(define-values"
"(next-state-in-full-binding-table)"
"(lambda(sym-ht_0 sym-i_0)"
"(begin"
"(if sym-i_0"
"(let-values(((ht_290)(hash-iterate-value sym-ht_0 sym-i_0)))"
"(let-values(((i_291)(hash-iterate-first ht_290)))"
"(if i_291"
"(cons(vector sym-i_0(hash-iterate-key sym-ht_0 sym-i_0) ht_290) i_291)"
"(next-state-in-full-binding-table sym-ht_0(hash-iterate-next sym-ht_0 sym-i_0)))))"
" '(#f . #f)))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_0 scs_0 s_0 extra-shifts_0)"
"(begin"
"(let-values(((ht_296 bulk-bindings_297)"
"(if(hash? table_0)"
"(values table_0 null)"
"(values"
"(table-with-bulk-bindings-syms table_0)"
"(table-with-bulk-bindings-bulk-bindings table_0)))))"
"(set-union"
"(let-values(((ht_298) ht_296))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_298)))"
"((letrec-values(((for-loop_299)"
"(lambda(table_1 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_302 at-sym_303)(hash-iterate-key+value ht_298 i_0)))"
"(let-values(((table_304)"
"(let-values(((table_305) table_1))"
"(if(let-values(((ht_306) at-sym_303))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_306)))"
"((letrec-values(((for-loop_307)"
"(lambda(result_0 i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((an-scs_310)"
"(hash-iterate-key"
" ht_306"
" i_1)))"
"(let-values(((result_311)"
"(let-values()"
"(let-values(((result_313)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_310"
" scs_0)))))"
"(values"
" result_313)))))"
"(if(if(not"
"((lambda x_0"
" result_311)"
" an-scs_310))"
"(not #f)"
" #f)"
"(for-loop_307"
" result_311"
"(hash-iterate-next"
" ht_306"
" i_1))"
" result_311)))"
" result_0)))))"
" for-loop_307)"
" #f"
"(hash-iterate-first ht_306))))"
"(let-values(((table_315) table_305))"
"(let-values(((table_316)"
"(let-values()"
"(let-values(((key_317 val_318)"
"(let-values()"
"(values"
"(let-values() sym_302)"
" #t))))"
"(hash-set table_315 key_317 val_318)))))"
"(values table_316)))"
" table_305))))"
"(if(not #f)"
"(for-loop_299 table_304(hash-iterate-next ht_298 i_0))"
" table_304)))"
" table_1)))))"
" for-loop_299)"
" '#hasheq()"
"(hash-iterate-first ht_298))))"
"(let-values(((lst_319) bulk-bindings_297))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_319)))"
"((letrec-values(((for-loop_320)"
"(lambda(table_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((bba_323)(unsafe-car lst_0))((rest_324)(unsafe-cdr lst_0)))"
"(let-values(((table_325)"
"(let-values(((table_326) table_1))"
"(if(subset?(bulk-binding-at-scopes bba_323) scs_0)"
"(let-values(((ht_327)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_323)"
" s_0"
" extra-shifts_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_327)))"
"((letrec-values(((for-loop_328)"
"(lambda(table_2 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_331)"
"(hash-iterate-key"
" ht_327"
" i_0)))"
"(let-values(((table_332)"
"(let-values(((table_333)"
" table_2))"
"(let-values(((table_334)"
"(let-values()"
"(let-values(((key_335"
" val_336)"
"(let-values()"
"(values"
"(let-values()"
" sym_331)"
" #t))))"
"(hash-set"
" table_333"
" key_335"
" val_336)))))"
"(values"
" table_334)))))"
"(if(not #f)"
"(for-loop_328"
" table_332"
"(hash-iterate-next"
" ht_327"
" i_0))"
" table_332)))"
" table_2)))))"
" for-loop_328)"
" table_326"
"(hash-iterate-first ht_327))))"
" table_326))))"
"(if(not #f)(for-loop_320 table_325 rest_324) table_325)))"
" table_1)))))"
" for-loop_320)"
" '#hasheq()"
" lst_319))))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_0 state_0)"
"(begin"
"(let-values(((or-part_339)(hash-ref(serialize-state-bindings-intern state_0) bt_0 #f)))"
"(if or-part_339"
" or-part_339"
"(let-values(((reachable-scopes_340)(serialize-state-reachable-scopes state_0)))"
"(let-values(((new-syms_341)"
"(let-values(((ht_344)(if(hash? bt_0) bt_0(table-with-bulk-bindings-syms/serialize bt_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_344)))"
"((letrec-values(((for-loop_345)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_348 bindings-for-sym_349)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_344"
" i_0)))"
"(let-values(((table_350)"
"(let-values(((new-bindings-for-sym_351)"
"(let-values(((ht_352)"
" bindings-for-sym_349))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash"
" ht_352)))"
"((letrec-values(((for-loop_353)"
"(lambda(table_1"
" i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((scopes_356"
" binding_357)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_352"
" i_1)))"
"(let-values(((table_358)"
"(let-values(((table_359)"
" table_1))"
"(if(subset?"
" scopes_356"
" reachable-scopes_340)"
"(let-values(((table_360)"
" table_359))"
"(let-values(((table_361)"
"(let-values()"
"(let-values(((key_362"
" val_363)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_356"
" state_0)"
" binding_357))))"
"(hash-set"
" table_360"
" key_362"
" val_363)))))"
"(values"
" table_361)))"
" table_359))))"
"(if(not"
" #f)"
"(for-loop_353"
" table_358"
"(unsafe-immutable-hash-iterate-next"
" ht_352"
" i_1))"
" table_358)))"
" table_1)))))"
" for-loop_353)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_352))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_364)"
"(lambda(table_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_366)"
"(let-values(((table_367)"
" table_1))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_351))"
"(let-values(((table_368)"
" table_367))"
"(let-values(((table_369)"
"(let-values()"
"(let-values(((key_370"
" val_371)"
"(let-values()"
"(values"
" sym_348"
" new-bindings-for-sym_351))))"
"(hash-set"
" table_368"
" key_370"
" val_371)))))"
"(values"
" table_369)))"
" table_367))))"
" table_366))))))"
" for-loop_364)"
" table_0)))))"
"(if(not #f)"
"(for-loop_345"
" table_350"
"(unsafe-immutable-hash-iterate-next ht_344 i_0))"
" table_350)))"
" table_0)))))"
" for-loop_345)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_344))))))"
"(let-values(((new-bulk-bindings_342)"
"(if(hash? bt_0)"
" null"
"(reverse$1"
"(let-values(((lst_372)(table-with-bulk-bindings-bulk-bindings bt_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_372)))"
"((letrec-values(((for-loop_373)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((bba_376)(unsafe-car lst_0))"
"((rest_377)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_378)"
"(let-values(((fold-var_379) fold-var_0))"
"(if(subset?"
"(bulk-binding-at-scopes bba_376)"
" reachable-scopes_340)"
"(let-values(((fold-var_380)"
" fold-var_379))"
"(let-values(((fold-var_381)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_382)"
" bba_376))"
"(if(bulk-binding-at?"
" the-struct_382)"
"(let-values(((scopes55_383)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_376)"
" state_0)))"
"(bulk-binding-at2.1"
" scopes55_383"
"(bulk-binding-at-bulk"
" the-struct_382)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                         \"bulk-binding-at?\""
" the-struct_382))))"
" fold-var_380))))"
"(values fold-var_381)))"
" fold-var_379))))"
"(if(not #f)"
"(for-loop_373 fold-var_378 rest_377)"
" fold-var_378)))"
" fold-var_0)))))"
" for-loop_373)"
" null"
" lst_372)))))))"
"(let-values(((new-bt_343)"
"(if(pair? new-bulk-bindings_342)"
"(table-with-bulk-bindings1.1 new-syms_341 new-syms_341 new-bulk-bindings_342)"
" new-syms_341)))"
"(begin(hash-set!(serialize-state-bulk-bindings-intern state_0) bt_0 new-bt_343) new-bt_343))))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_0 get-reachable-scopes_0 reach_0 register-trigger_0)"
"(begin"
"(begin"
"(let-values(((ht_388)(if(hash? bt_0) bt_0(table-with-bulk-bindings-syms/serialize bt_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_388)))"
"((letrec-values(((for-loop_389)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_391 bindings-for-sym_392)"
"(unsafe-immutable-hash-iterate-key+value ht_388 i_0)))"
"(let-values((()"
"(let-values(((ht_393) bindings-for-sym_392))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_393)))"
"((letrec-values(((for-loop_394)"
"(lambda(i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((scopes_396 binding_397)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_393"
" i_1)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((v_398)"
"(if(binding-reach-scopes?"
" binding_397)"
"((binding-reach-scopes-ref"
" binding_397)"
" binding_397)"
" #f)))"
"(scopes-register-reachable"
" scopes_396"
" v_398"
" get-reachable-scopes_0"
" reach_0"
" register-trigger_0)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_394"
"(unsafe-immutable-hash-iterate-next"
" ht_393"
" i_1))"
"(values))))"
"(values))))))"
" for-loop_394)"
"(unsafe-immutable-hash-iterate-first ht_393))))))"
"(if(not #f)"
"(for-loop_389(unsafe-immutable-hash-iterate-next ht_388 i_0))"
"(values))))"
"(values))))))"
" for-loop_389)"
"(unsafe-immutable-hash-iterate-first ht_388))))"
"(void)"
"(if(table-with-bulk-bindings? bt_0)"
"(let-values()"
"(begin"
"(let-values(((lst_399)(table-with-bulk-bindings-bulk-bindings bt_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_399)))"
"((letrec-values(((for-loop_400)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((bba_402)(unsafe-car lst_0))((rest_403)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
"(bulk-binding-at-scopes bba_402)"
" #f"
" get-reachable-scopes_0"
" reach_0"
" register-trigger_0))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_400 rest_403)(values))))"
"(values))))))"
" for-loop_400)"
" lst_399)))"
"(void)))"
"(void))))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_0 v_0 get-reachable-scopes_0 reach_0 register-trigger_0)"
"(begin"
"(let-values(((reachable-scopes_409)(get-reachable-scopes_0)))"
"(if(subset? scopes_0 reachable-scopes_409)"
"(let-values()(reach_0 v_0))"
"(let-values()"
"(let-values(((pending-scopes_410)"
"(let-values(((ht_412) scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_412)))"
"((letrec-values(((for-loop_413)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_416)"
"(unsafe-immutable-hash-iterate-key ht_412 i_0)))"
"(let-values(((table_417)"
"(let-values(((table_418) table_0))"
"(if(let-values(((or-part_419)"
"(set-member?"
" reachable-scopes_409"
" sc_416)))"
"(if or-part_419"
" or-part_419"
"(implicitly-reachable? sc_416)))"
" table_418"
"(let-values(((table_420) table_418))"
"(let-values(((table_421)"
"(let-values()"
"(let-values(((key_422"
" val_423)"
"(let-values()"
"(values"
"(let-values()"
" sc_416)"
" #t))))"
"(hash-set"
" table_420"
" key_422"
" val_423)))))"
"(values table_421)))))))"
"(if(not #f)"
"(for-loop_413"
" table_417"
"(unsafe-immutable-hash-iterate-next ht_412 i_0))"
" table_417)))"
" table_0)))))"
" for-loop_413)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_412))))))"
"(let-values(((check-trigger_411)"
"(lambda(reach_1)"
"(begin"
" 'check-trigger"
"(if(zero?(hash-count pending-scopes_410))"
"(let-values()"
"(begin"
"(reach_1 v_0)"
"(let-values(((ht_425) scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_425)))"
"((letrec-values(((for-loop_426)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_428)"
"(unsafe-immutable-hash-iterate-key"
" ht_425"
" i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(implicitly-reachable?"
" sc_428)"
"(let-values()"
"(reach_1"
" sc_428))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_426"
"(unsafe-immutable-hash-iterate-next"
" ht_425"
" i_0))"
"(values))))"
"(values))))))"
" for-loop_426)"
"(unsafe-immutable-hash-iterate-first ht_425))))"
"(void)))"
"(void))))))"
"(begin"
"(let-values(((ht_429) pending-scopes_410))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_429)))"
"((letrec-values(((for-loop_430)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_432)(unsafe-immutable-hash-iterate-key ht_429 i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_0"
" sc_432"
"(lambda(reach_1)"
"(begin"
"(set! pending-scopes_410"
"(hash-remove"
" pending-scopes_410"
" sc_432))"
"(check-trigger_411 reach_1)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_430(unsafe-immutable-hash-iterate-next ht_429 i_0))"
"(values))))"
"(values))))))"
" for-loop_430)"
"(unsafe-immutable-hash-iterate-first ht_429))))"
"(void)"
"(check-trigger_411 reach_0))))))))))"
"(define-values"
"(syntax-property$1)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((s_0 key_0)"
"(begin"
" 'syntax-property"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_0)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_0)))"
"(values))))"
"(let-values(((v_4)(hash-ref(syntax-props s_0) key_0 #f)))(plain-property-value v_4)))))"
"((s_0 key_0 val_0)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_0)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_0)))"
"(values))))"
"(let-values(((pval_8)(if(eq? key_0 'paren-shape)(preserved-property-value1.1 val_0) val_0)))"
"(let-values(((the-struct_9) s_0))"
"(if(syntax?$1 the-struct_9)"
"(let-values(((props2_10)(hash-set(syntax-props s_0) key_0 pval_8)))"
"(syntax1.1"
"(syntax-content the-struct_9)"
"(syntax-scopes the-struct_9)"
"(syntax-shifted-multi-scopes the-struct_9)"
"(syntax-scope-propagations+tamper the-struct_9)"
"(syntax-mpi-shifts the-struct_9)"
"(syntax-srcloc the-struct_9)"
" props2_10"
"(syntax-inspector the-struct_9)))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_9))))))"
"((s_0 key_0 val_0 preserved?_0)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_0)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_0"
"(let-values()"
"(if(if(symbol? key_0)(symbol-interned? key_0) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                                   \"key for a perserved property must be an interned symbol\""
"                                   \"given key\""
" key_0"
"                                   \"given value\""
" val_0))))"
"(void))"
"(values))))"
"(let-values(((pval_15)(if preserved?_0(preserved-property-value1.1 val_0) val_0)))"
"(let-values(((the-struct_16) s_0))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((props3_17)(hash-set(syntax-props s_0) key_0 pval_15)))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
"(syntax-shifted-multi-scopes the-struct_16)"
"(syntax-scope-propagations+tamper the-struct_16)"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-srcloc the-struct_16)"
" props3_17"
"(syntax-inspector the-struct_16)))"
"                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_16)))))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_0 key_0)"
"(begin"
" 'syntax-property-preserved?"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-property-preserved? \"syntax?\" s_0)))"
"(if(if(symbol? key_0)(symbol-interned? key_0) #f)"
"(void)"
"(let-values()"
"                (raise-argument-error 'syntax-property-preserved? \"(and/c symbol? symbol-interned?)\" key_0)))"
"(preserved-property-value?(hash-ref(syntax-props s_0) key_0 #f))))))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_0)"
"(begin"
" 'syntax-property-symbol-keys"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_0)))"
"(reverse$1"
"(let-values(((ht_23)(syntax-props s_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_23)))"
"((letrec-values(((for-loop_24)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_27 v_28)(unsafe-immutable-hash-iterate-key+value ht_23 i_0)))"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30) fold-var_0))"
"(if(if(symbol? k_27)(symbol-interned? k_27) #f)"
"(let-values(((fold-var_31) fold-var_30))"
"(let-values(((fold-var_32)"
"(let-values()"
"(cons"
"(let-values() k_27)"
" fold-var_31))))"
"(values fold-var_32)))"
" fold-var_30))))"
"(if(not #f)"
"(for-loop_24 fold-var_29(unsafe-immutable-hash-iterate-next ht_23 i_0))"
" fold-var_29)))"
" fold-var_0)))))"
" for-loop_24)"
" null"
"(unsafe-immutable-hash-iterate-first ht_23)))))))))))"
"(define-values"
"(1/syntax-property-remove)"
"(lambda(s_0 key_0)"
"(begin"
" 'syntax-property-remove"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-property-remove \"syntax?\" s_0)))"
"(if(hash-ref(syntax-props s_0) key_0 #f)"
"(let-values(((the-struct_36) s_0))"
"(if(syntax?$1 the-struct_36)"
"(let-values(((props7_37)(hash-remove(syntax-props s_0) key_0)))"
"(syntax1.1"
"(syntax-content the-struct_36)"
"(syntax-scopes the-struct_36)"
"(syntax-shifted-multi-scopes the-struct_36)"
"(syntax-scope-propagations+tamper the-struct_36)"
"(syntax-mpi-shifts the-struct_36)"
"(syntax-srcloc the-struct_36)"
" props7_37"
"(syntax-inspector the-struct_36)))"
"                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_36)))"
" s_0)))))))"
"(define-values"
"(taint-content)"
"(lambda(d_0)"
"(begin"
"(let-values(((s_11) d_0)"
"((f_12)(lambda(tail?_0 x_0)(begin 'f x_0)))"
"((s->_13)"
"(lambda(sub-s_0)"
"(begin"
" 's->"
"(if(tamper-tainted?(syntax-tamper sub-s_0))"
"(let-values() sub-s_0)"
"(let-values()"
"(let-values(((stx_18) sub-s_0))"
"(let-values(((the-struct_19) stx_18))"
"(if(syntax?$1 the-struct_19)"
"(let-values(((scope-propagations+tamper5_20)"
"(let-values(((t_21)"
"(tamper-tainted-for-content(syntax-content sub-s_0)))"
"((p_22)(syntax-scope-propagations+tamper stx_18)))"
"(if(tamper? p_22)"
" t_21"
"((propagation-set-tamper-ref p_22) p_22 t_21)))))"
"(syntax1.1"
"(syntax-content the-struct_19)"
"(syntax-scopes the-struct_19)"
"(syntax-shifted-multi-scopes the-struct_19)"
" scope-propagations+tamper5_20"
"(syntax-mpi-shifts the-struct_19)"
"(syntax-srcloc the-struct_19)"
"(syntax-props the-struct_19)"
"(syntax-inspector the-struct_19)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_19)))))))))"
"((seen_14) #f))"
"(let-values(((s_23) s_11)"
"((f_24) f_12)"
"((gf_25)"
"(lambda(tail?_0 v_0)"
"(begin"
" 'gf"
"(if(syntax?$1 v_0)(let-values()(s->_13 v_0))(let-values()(f_12 tail?_0 v_0))))))"
"((seen_26) seen_14))"
"((letrec-values(((loop_29)"
"(lambda(tail?_0 s_0 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_33)(fx+ 1 prev-depth_0)))"
"(if(if seen_26(fx> depth_33 32) #f)"
"(let-values()"
"(datum-map-slow tail?_0 s_0(lambda(tail?_1 s_1)(gf_25 tail?_1 s_1)) seen_26))"
"(if(null? s_0)"
"(let-values()(f_24 tail?_0 s_0))"
"(if(pair? s_0)"
"(let-values()"
"(f_24"
" tail?_0"
"(cons(loop_29 #f(car s_0) depth_33)(loop_29 #t(cdr s_0) depth_33))))"
"(if(symbol? s_0)"
"(let-values()(f_24 #f s_0))"
"(if(boolean? s_0)"
"(let-values()(f_24 #f s_0))"
"(if(number? s_0)"
"(let-values()(f_24 #f s_0))"
"(if(let-values(((or-part_36)(vector? s_0)))"
"(if or-part_36"
" or-part_36"
"(let-values(((or-part_37)(box? s_0)))"
"(if or-part_37"
" or-part_37"
"(let-values(((or-part_38)(prefab-struct-key s_0)))"
"(if or-part_38 or-part_38(hash? s_0)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_0"
"(lambda(tail?_1 s_1)(gf_25 tail?_1 s_1))"
" seen_26))"
"(let-values()(gf_25 #f s_0))))))))))))))"
" loop_29)"
" #f"
" s_23"
" 0))))))"
"(define-values(syntax-tainted?$1)(lambda(s_0)(begin 'syntax-tainted?(tamper-tainted?(syntax-tamper s_0)))))"
"(define-values(syntax-clean?)(lambda(s_0)(begin(tamper-clean?(syntax-tamper s_0)))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_0 insp_0)"
"(begin"
" 'syntax-arm"
"(let-values(((t_45)(syntax-tamper s_0)))"
"(if(tamper-tainted? t_45)"
"(let-values() s_0)"
"(if(if t_45"
"(let-values(((or-part_46)(set-member? t_45 insp_0)))"
"(if or-part_46"
" or-part_46"
"(let-values(((ht_47) t_45))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_47)))"
"((letrec-values(((for-loop_48)"
"(lambda(result_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((already-insp_51)"
"(unsafe-immutable-hash-iterate-key ht_47 i_0)))"
"(let-values(((result_52)"
"(let-values()"
"(let-values(((result_54)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_51"
" insp_0)))))"
"(values result_54)))))"
"(if(if(not((lambda x_0 result_52) already-insp_51))(not #f) #f)"
"(for-loop_48"
" result_52"
"(unsafe-immutable-hash-iterate-next ht_47 i_0))"
" result_52)))"
" result_0)))))"
" for-loop_48)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_47))))))"
" #f)"
"(let-values() s_0)"
"(let-values()"
"(let-values(((stx_56) s_0))"
"(let-values(((the-struct_57) stx_56))"
"(if(syntax?$1 the-struct_57)"
"(let-values(((scope-propagations+tamper6_58)"
"(let-values(((t_59)(set-add(if t_45(remove-inferior t_45 insp_0)(seteq)) insp_0))"
"((p_60)(syntax-scope-propagations+tamper stx_56)))"
"(if(tamper? p_60) t_59((propagation-set-tamper-ref p_60) p_60 t_59)))))"
"(syntax1.1"
"(syntax-content the-struct_57)"
"(syntax-scopes the-struct_57)"
"(syntax-shifted-multi-scopes the-struct_57)"
" scope-propagations+tamper6_58"
"(syntax-mpi-shifts the-struct_57)"
"(syntax-srcloc the-struct_57)"
"(syntax-props the-struct_57)"
"(syntax-inspector the-struct_57)))"
"                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_57)))))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_0 insp_0)"
"(begin"
"(let-values(((ht_63) t_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_63)))"
"((letrec-values(((for-loop_64)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((already-insp_67)(unsafe-immutable-hash-iterate-key ht_63 i_0)))"
"(let-values(((table_68)"
"(let-values(((table_69) table_0))"
"(if(inspector-superior-or-same? insp_0 already-insp_67)"
" table_69"
"(let-values(((table_70) table_69))"
"(let-values(((table_71)"
"(let-values()"
"(let-values(((key_72 val_73)"
"(let-values()"
"(values"
"(let-values() already-insp_67)"
" #t))))"
"(hash-set table_70 key_72 val_73)))))"
"(values table_71)))))))"
"(if(not #f)"
"(for-loop_64 table_68(unsafe-immutable-hash-iterate-next ht_63 i_0))"
" table_68)))"
" table_0)))))"
" for-loop_64)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_63)))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm3_74)"
"(lambda(s2_0 insp1_0)"
"(begin"
" 'syntax-disarm3"
"(let-values(((s_77) s2_0))"
"(let-values(((insp_78) insp1_0))"
"(let-values()"
"(let-values(((t_79)(syntax-tamper s_77)))"
"(if(not(tamper-armed? t_79))"
"(let-values() s_77)"
"(if(not insp_78)"
"(let-values()"
"(let-values(((stx_80) s_77))"
"(let-values(((the-struct_81) stx_80))"
"(if(syntax?$1 the-struct_81)"
"(let-values(((scope-propagations+tamper7_82)"
"(let-values(((t_83) #f)"
"((p_84)(syntax-scope-propagations+tamper stx_80)))"
"(if(tamper? p_84)"
" t_83"
"((propagation-set-tamper-ref p_84) p_84 t_83)))))"
"(syntax1.1"
"(syntax-content the-struct_81)"
"(syntax-scopes the-struct_81)"
"(syntax-shifted-multi-scopes the-struct_81)"
" scope-propagations+tamper7_82"
"(syntax-mpi-shifts the-struct_81)"
"(syntax-srcloc the-struct_81)"
"(syntax-props the-struct_81)"
"(syntax-inspector the-struct_81)))"
"                                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_81)))))"
"(let-values()"
"(let-values(((new-t_85)(remove-inferior t_79 insp_78)))"
"(let-values(((stx_86) s_77))"
"(let-values(((the-struct_87) stx_86))"
"(if(syntax?$1 the-struct_87)"
"(let-values(((scope-propagations+tamper8_88)"
"(let-values(((t_89)"
"(if(not(set-empty? new-t_85)) new-t_85 #f))"
"((p_90)(syntax-scope-propagations+tamper stx_86)))"
"(if(tamper? p_90)"
" t_89"
"((propagation-set-tamper-ref p_90) p_90 t_89)))))"
"(syntax1.1"
"(syntax-content the-struct_87)"
"(syntax-scopes the-struct_87)"
"(syntax-shifted-multi-scopes the-struct_87)"
" scope-propagations+tamper8_88"
"(syntax-mpi-shifts the-struct_87)"
"(syntax-srcloc the-struct_87)"
"(syntax-props the-struct_87)"
"(syntax-inspector the-struct_87)))"
"                                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_87))))))))))))))))"
"(case-lambda"
"((s_0)(begin 'syntax-disarm(syntax-disarm3_74 s_0 #f)))"
"((s_0 insp1_0)(syntax-disarm3_74 s_0 insp1_0)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_0 from-s_0)"
"(begin"
" 'syntax-rearm"
"(let-values(((t_96)(syntax-tamper s_0)))"
"(if(tamper-tainted? t_96)"
"(let-values() s_0)"
"(let-values()"
"(let-values(((from-t_97)(syntax-tamper from-s_0)))"
"(if(tamper-clean? from-t_97)"
"(let-values() s_0)"
"(if(tamper-tainted? from-t_97)"
"(let-values()"
"(let-values(((stx_98) s_0))"
"(let-values(((the-struct_99) stx_98))"
"(if(syntax?$1 the-struct_99)"
"(let-values(((scope-propagations+tamper9_100)"
"(let-values(((t_101)(tamper-tainted-for-content(syntax-content s_0)))"
"((p_102)(syntax-scope-propagations+tamper stx_98)))"
"(if(tamper? p_102) t_101((propagation-set-tamper-ref p_102) p_102 t_101)))))"
"(syntax1.1"
"(syntax-content the-struct_99)"
"(syntax-scopes the-struct_99)"
"(syntax-shifted-multi-scopes the-struct_99)"
" scope-propagations+tamper9_100"
"(syntax-mpi-shifts the-struct_99)"
"(syntax-srcloc the-struct_99)"
"(syntax-props the-struct_99)"
"(syntax-inspector the-struct_99)))"
"                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_99)))))"
"(if(tamper-clean? t_96)"
"(let-values()"
"(let-values(((stx_103) s_0))"
"(let-values(((the-struct_104) stx_103))"
"(if(syntax?$1 the-struct_104)"
"(let-values(((scope-propagations+tamper10_105)"
"(let-values(((t_106) from-t_97)"
"((p_107)(syntax-scope-propagations+tamper stx_103)))"
"(if(tamper? p_107)"
" t_106"
"((propagation-set-tamper-ref p_107) p_107 t_106)))))"
"(syntax1.1"
"(syntax-content the-struct_104)"
"(syntax-scopes the-struct_104)"
"(syntax-shifted-multi-scopes the-struct_104)"
" scope-propagations+tamper10_105"
"(syntax-mpi-shifts the-struct_104)"
"(syntax-srcloc the-struct_104)"
"(syntax-props the-struct_104)"
"(syntax-inspector the-struct_104)))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_104)))))"
"(let-values()"
"(let-values(((stx_108) s_0))"
"(let-values(((the-struct_109) stx_108))"
"(if(syntax?$1 the-struct_109)"
"(let-values(((scope-propagations+tamper11_110)"
"(let-values(((t_111)"
"(let-values(((ht_113) from-t_97))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_113)))"
"((letrec-values(((for-loop_114)"
"(lambda(t_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((from-i_117)"
"(unsafe-immutable-hash-iterate-key"
" ht_113"
" i_0)))"
"(let-values(((t_118)"
"(let-values(((t_119)"
" t_0))"
"(let-values(((t_120)"
"(let-values()"
"(if(set-member?"
" t_119"
" from-i_117)"
"(let-values()"
" t_119)"
"(if(any-superior?"
" t_119"
" from-i_117)"
"(let-values()"
" t_119)"
"(let-values()"
"(set-add"
"(remove-inferior"
" t_119"
" from-i_117)"
" from-i_117)))))))"
"(values"
" t_120)))))"
"(if(not #f)"
"(for-loop_114"
" t_118"
"(unsafe-immutable-hash-iterate-next"
" ht_113"
" i_0))"
" t_118)))"
" t_0)))))"
" for-loop_114)"
" t_96"
"(unsafe-immutable-hash-iterate-first ht_113)))))"
"((p_112)(syntax-scope-propagations+tamper stx_108)))"
"(if(tamper? p_112)"
" t_111"
"((propagation-set-tamper-ref p_112) p_112 t_111)))))"
"(syntax1.1"
"(syntax-content the-struct_109)"
"(syntax-scopes the-struct_109)"
"(syntax-shifted-multi-scopes the-struct_109)"
" scope-propagations+tamper11_110"
"(syntax-mpi-shifts the-struct_109)"
"(syntax-srcloc the-struct_109)"
"(syntax-props the-struct_109)"
"(syntax-inspector the-struct_109)))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_109)))))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_0)"
"(begin"
" 'syntax-taint"
"(if(tamper-tainted?(syntax-tamper s_0))"
" s_0"
"(let-values(((stx_122) s_0))"
"(let-values(((the-struct_123) stx_122))"
"(if(syntax?$1 the-struct_123)"
"(let-values(((scope-propagations+tamper12_124)"
"(let-values(((t_125)(tamper-tainted-for-content(syntax-content s_0)))"
"((p_126)(syntax-scope-propagations+tamper stx_122)))"
"(if(tamper? p_126) t_125((propagation-set-tamper-ref p_126) p_126 t_125)))))"
"(syntax1.1"
"(syntax-content the-struct_123)"
"(syntax-scopes the-struct_123)"
"(syntax-shifted-multi-scopes the-struct_123)"
" scope-propagations+tamper12_124"
"(syntax-mpi-shifts the-struct_123)"
"(syntax-srcloc the-struct_123)"
"(syntax-props the-struct_123)"
"(syntax-inspector the-struct_123)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_123))))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_0 from-i_0)"
"(begin"
"(let-values(((ht_129) t_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_129)))"
"((letrec-values(((for-loop_130)"
"(lambda(result_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((i_133)(unsafe-immutable-hash-iterate-key ht_129 i_0)))"
"(let-values(((result_134)"
"(let-values()"
"(let-values(((result_136)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_133 from-i_0)))))"
"(values result_136)))))"
"(if(if(not((lambda x_0 result_134) i_133))(not #f) #f)"
"(for-loop_130 result_134(unsafe-immutable-hash-iterate-next ht_129 i_0))"
" result_134)))"
" result_0)))))"
" for-loop_130)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_129)))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_0 i_0)"
"(begin"
"(let-values(((or-part_140)(eq? sup-i_0 i_0)))(if or-part_140 or-part_140(inspector-superior? sup-i_0 i_0))))))"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_0)(begin(if(fallback? smss_0)(car(fallback-search-list smss_0)) smss_0))))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_0)"
"(begin"
"(let-values(((l_23)(cdr(fallback-search-list smss_0))))"
"(if(null?(cdr l_23))(car l_23)(fallback1.1 l_23))))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_0 smss/maybe-fallback_0)"
"(begin"
"(fallback1.1"
"(cons"
" smss_0"
"(if(fallback? smss/maybe-fallback_0)"
"(fallback-search-list smss/maybe-fallback_0)"
"(list smss/maybe-fallback_0)))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_0 f_0)"
"(begin"
"(if(fallback? smss_0)"
"(let-values(((l_28)(fallback-search-list smss_0)))(fallback1.1(cons(f_0(car l_28))(cdr l_28))))"
"(f_0 smss_0)))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_0 f_0)"
"(begin"
"(if(fallback? smss_0)"
"(fallback1.1"
"(reverse$1"
"(let-values(((lst_31)(fallback-search-list smss_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_31)))"
"((letrec-values(((for-loop_32)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((smss_35)(unsafe-car lst_0))((rest_36)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_37)"
"(let-values(((fold-var_38) fold-var_0))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()(f_0 smss_35))"
" fold-var_38))))"
"(values fold-var_39)))))"
"(if(not #f)(for-loop_32 fold-var_37 rest_36) fold-var_37)))"
" fold-var_0)))))"
" for-loop_32)"
" null"
" lst_31)))))"
"(f_0 smss_0)))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_0)(begin(if(fallback? smss_0)(fallback-search-list smss_0)(list smss_0)))))"
"(define-values(cache)(box(make-weak-box #f)))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_0)"
"(begin"
"(let-values(((c_17)(weak-box-value(unbox* cache))))"
"(begin(if c_17(let-values()(hash-remove! c_17 sym_0))(void))(set-box*! shifted-cache #f)))))"
"(()"
"(let-values(((c_18)(weak-box-value(unbox* cache))))"
"(begin(if c_18(let-values()(hash-clear! c_18))(void))(set-box*! shifted-cache #f))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scs entry-smss entry-phase entry-binding)"
"(let-values(((struct:_19 make-_20 ?_21 -ref_22 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'entry"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'entry)))))"
"(values"
" struct:_19"
" make-_20"
" ?_21"
"(make-struct-field-accessor -ref_22 0 'scs)"
"(make-struct-field-accessor -ref_22 1 'smss)"
"(make-struct-field-accessor -ref_22 2 'phase)"
"(make-struct-field-accessor -ref_22 3 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_0 phase_0 scs_0 smss_0)"
"(begin"
"(let-values(((c_58)(weak-box-value(unbox* cache))))"
"(if c_58"
"(let-values(((v_59)(hash-ref c_58 sym_0 #f)))"
"(if v_59"
"(if(eqv? phase_0(entry-phase v_59))"
"(if(set=? scs_0(entry-scs v_59))(if(set=? smss_0(entry-smss v_59))(entry-binding v_59) #f) #f)"
" #f)"
" #f))"
" #f)))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_0 phase_0 scs_0 smss_0 b_0)"
"(begin"
"(let-values(((wb_65)(unbox* cache)))"
"(let-values(((c_66)(weak-box-value wb_65)))"
"(if(not c_66)"
"(let-values()"
"(begin"
"(box-cas! cache wb_65(make-weak-box(make-hasheq)))"
"(resolve-cache-set! sym_0 phase_0 scs_0 smss_0 b_0)))"
"(let-values()(hash-set! c_66 sym_0(entry1.1 scs_0 smss_0 phase_0 b_0)))))))))"
"(define-values(SHIFTED-CACHE-SIZE) 16)"
"(define-values(shifted-cache)(box #f))"
"(define-values(shifted-cache-pos) 0)"
"(define-values"
"(struct:shifted-entry shifted-entry2.1 shifted-entry? shifted-entry-s shifted-entry-phase shifted-entry-binding)"
"(let-values(((struct:_67 make-_68 ?_69 -ref_70 -set!_71)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-entry"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'shifted-entry)))))"
"(values"
" struct:_67"
" make-_68"
" ?_69"
"(make-struct-field-accessor -ref_70 0 's)"
"(make-struct-field-accessor -ref_70 1 'phase)"
"(make-struct-field-accessor -ref_70 2 'binding))))"
"(define-values"
"(shifted-cache-vector)"
"(lambda()"
"(begin"
"(let-values(((wb_97)(unbox* shifted-cache)))"
"(let-values(((c1_98)(if wb_97(weak-box-value wb_97) #f)))"
"(if c1_98"
"((lambda(vec_0) vec_0) c1_98)"
"(let-values()"
"(let-values(((vec_100)(make-vector SHIFTED-CACHE-SIZE #f)))"
"(begin(set-box*! shifted-cache(make-weak-box vec_100)) vec_100)))))))))"
"(define-values"
"(resolve+shift-cache-get)"
"(lambda(s_0 phase_0)"
"(begin"
"(let-values(((vec_103)(shifted-cache-vector)))"
"(let-values(((vec_104 len_105)"
"(let-values(((vec_106) vec_103))"
"(begin(check-vector vec_106)(values vec_106(unsafe-vector-length vec_106))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_107)"
"(lambda(result_0 pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_105)"
"(let-values(((e_110)(unsafe-vector-ref vec_104 pos_0)))"
"(let-values(((result_111)"
"(let-values()"
"(let-values(((result_113)"
"(let-values()"
"(let-values()"
"(if e_110"
"(if(eq? s_0(shifted-entry-s e_110))"
"(if(eqv?"
" phase_0"
"(shifted-entry-phase e_110))"
"(shifted-entry-binding e_110)"
" #f)"
" #f)"
" #f)))))"
"(values result_113)))))"
"(if(if(not((lambda x_0 result_111) e_110))(not #f) #f)"
"(for-loop_107 result_111(unsafe-fx+ 1 pos_0))"
" result_111)))"
" result_0)))))"
" for-loop_107)"
" #f"
" 0)))))))"
"(define-values"
"(resolve+shift-cache-set!)"
"(lambda(s_0 phase_0 b_0)"
"(begin"
"(let-values(((vec_118)(shifted-cache-vector)))"
"(let-values(((p_119) shifted-cache-pos))"
"(begin"
"(vector*-set! vec_118 p_119(shifted-entry2.1 s_0 phase_0 b_0))"
"(set! shifted-cache-pos(fxand(fx+ 1 p_119)(fx- SHIFTED-CACHE-SIZE 1)))))))))"
"(define-values(NUM-CACHE-SLOTS) 8)"
"(define-values(cached-sets)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-sets-pos) 0)"
"(define-values(cached-hashes)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-hashes-pos) 0)"
"(define-values"
"(cache-or-reuse-set)"
"(lambda(s_0)"
"(begin"
"(let-values(((vec_121)"
"(let-values(((or-part_122)(weak-box-value cached-sets)))"
"(if or-part_122"
" or-part_122"
"(let-values(((vec_123)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-sets(make-weak-box vec_123)) vec_123))))))"
"(let-values(((or-part_124)"
"(let-values(((vec_125 len_126)"
"(let-values(((vec_127) vec_121))"
"(begin(check-vector vec_127)(values vec_127(unsafe-vector-length vec_127))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_128)"
"(lambda(result_0 pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_126)"
"(let-values(((s2_131)(unsafe-vector-ref vec_125 pos_0)))"
"(let-values(((result_132)"
"(let-values()"
"(let-values(((result_134)"
"(let-values()"
"(let-values()"
"(if s2_131"
"(if(set=? s_0 s2_131)"
" s2_131"
" #f)"
" #f)))))"
"(values result_134)))))"
"(if(if(not((lambda x_0 result_132) s2_131))(not #f) #f)"
"(for-loop_128 result_132(unsafe-fx+ 1 pos_0))"
" result_132)))"
" result_0)))))"
" for-loop_128)"
" #f"
" 0)))))"
"(if or-part_124"
" or-part_124"
"(begin"
"(vector*-set! vec_121 cached-sets-pos s_0)"
"(set! cached-sets-pos(fxand(fx+ 1 cached-sets-pos)(fx- NUM-CACHE-SLOTS 1)))"
" s_0)))))))"
"(define-values"
"(cache-or-reuse-hash)"
"(lambda(s_0)"
"(begin"
"(let-values(((vec_137)"
"(let-values(((or-part_138)(weak-box-value cached-hashes)))"
"(if or-part_138"
" or-part_138"
"(let-values(((vec_139)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-hashes(make-weak-box vec_139)) vec_139))))))"
"(let-values(((or-part_140)"
"(let-values(((vec_141 len_142)"
"(let-values(((vec_143) vec_137))"
"(begin(check-vector vec_143)(values vec_143(unsafe-vector-length vec_143))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_144)"
"(lambda(result_0 pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_142)"
"(let-values(((s2_147)(unsafe-vector-ref vec_141 pos_0)))"
"(let-values(((result_148)"
"(let-values()"
"(let-values(((result_150)"
"(let-values()"
"(let-values()"
"(if s2_147"
"(if(equal? s_0 s2_147)"
" s2_147"
" #f)"
" #f)))))"
"(values result_150)))))"
"(if(if(not((lambda x_0 result_148) s2_147))(not #f) #f)"
"(for-loop_144 result_148(unsafe-fx+ 1 pos_0))"
" result_148)))"
" result_0)))))"
" for-loop_144)"
" #f"
" 0)))))"
"(if or-part_140"
" or-part_140"
"(begin"
"(vector*-set! vec_137 cached-hashes-pos s_0)"
"(set! cached-hashes-pos(fxand(fx+ 1 cached-hashes-pos)(fx- NUM-CACHE-SLOTS 1)))"
" s_0)))))))"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_14 make-_15 ?_16 -ref_17 -set!_18)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_0 get-reachable-scopes_0 reach_0 register-trigger_0)"
"(binding-table-register-reachable"
"(scope-binding-table s_0)"
" get-reachable-scopes_0"
" reach_0"
" register-trigger_0)))"
"(cons prop:reach-scopes(lambda(s_0 reach_0)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_0 ser-push!_0 state_0)"
"(if(binding-table-empty?(scope-binding-table s_0))"
"(let-values()(ser-push!_0 'tag #f))"
"(let-values()"
"(begin"
"(ser-push!_0 'tag '#:scope-fill!)"
"(ser-push!_0(binding-table-prune-to-reachable(scope-binding-table s_0) state_0)))))))"
"(cons"
" prop:serialize"
"(lambda(s_0 ser-push!_0 state_0)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_0) s_0)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_0 top-level-common-scope)"
"(let-values()(ser-push!_0 'tag '#:scope))"
"(let-values()(begin(ser-push!_0 'tag '#:scope+kind)(ser-push!_0(scope-kind s_0))))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_0 port_0 mode_0)"
"(begin"
"                           (write-string \"#<scope:\" port_0)"
"(display(scope-id sc_0) port_0)"
"                           (write-string \":\" port_0)"
"(display(scope-kind sc_0) port_0)"
"                           (write-string \">\" port_0)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))))"
"(values"
" struct:_14"
" make-_15"
" ?_16"
"(make-struct-field-accessor -ref_17 0 'id)"
"(make-struct-field-accessor -ref_17 1 'kind)"
"(make-struct-field-accessor -ref_17 2 'binding-table)"
"(make-struct-field-mutator -set!_18 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(()(begin top-level-common-scope))"
"((kind_0)(scope1.1(new-deserialize-scope-id!) kind_0 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_0 bt_0)(begin(set-scope-binding-table! s_0 bt_0))))"
"(define-values"
"(struct:interned-scope interned-scope2.1 interned-scope? interned-scope-key)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'interned-scope"
" struct:scope"
" 1"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(s_0 ser-push!_0 state_0)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_0) s_0)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(ser-push!_0 'tag '#:interned-scope)"
"(ser-push!_0(interned-scope-key s_0)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_0 port_0 mode_0)"
"(begin"
"                           (write-string \"#<scope:\" port_0)"
"(display(scope-id sc_0) port_0)"
"                           (write-string \":\" port_0)"
"(display(scope-kind sc_0) port_0)"
"                           (write-string \" \" port_0)"
"(display(interned-scope-key sc_0) port_0)"
"                           (write-string \">\" port_0)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'interned-scope)))))"
"(values struct:_62 make-_63 ?_64(make-struct-field-accessor -ref_65 0 'key))))"
"(define-values"
"(struct:multi-scope"
" multi-scope3.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_88 make-_89 ?_90 -ref_91 -set!_92)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:scope-with-bindings"
"(lambda(ms_0 get-reachable-scopes_0 reach_0 register-trigger_0)"
"(begin"
"(let-values(((ht_132)(multi-scope-scopes ms_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-values ht_132)))"
"((letrec-values(((for-loop_133)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_135)(hash-iterate-value ht_132 i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(binding-table-empty?"
"(scope-binding-table"
" sc_135))"
"(void)"
"(let-values()"
"(reach_0 sc_135))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_133(hash-iterate-next ht_132 i_0))"
"(values))))"
"(values))))))"
" for-loop_133)"
"(hash-iterate-first ht_132))))"
"(void))))"
"(cons prop:reach-scopes(lambda(s_0 reach_0)(void)))"
"(cons"
" prop:serialize"
"(lambda(ms_0 ser-push!_0 state_0)"
"(let-values((()(begin(ser-push!_0 'tag '#:multi-scope)(values))))"
"(let-values((()(begin(ser-push!_0(multi-scope-name ms_0))(values))))"
"(let-values(((multi-scope-tables_141)(serialize-state-multi-scope-tables state_0)))"
"(ser-push!_0"
"(let-values(((or-part_142)"
"(hash-ref multi-scope-tables_141(multi-scope-scopes ms_0) #f)))"
"(if or-part_142"
" or-part_142"
"(let-values(((ht_143)(make-hasheqv)))"
"(begin"
"(let-values(((ht_144)(multi-scope-scopes ms_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_144)))"
"((letrec-values(((for-loop_145)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_147 sc_148)"
"(hash-iterate-key+value ht_144 i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(set-member?"
"(serialize-state-reachable-scopes"
" state_0)"
" sc_148)"
"(let-values()"
"(hash-set!"
" ht_143"
" phase_147"
" sc_148))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_145(hash-iterate-next ht_144 i_0))"
"(values))))"
"(values))))))"
" for-loop_145)"
"(hash-iterate-first ht_144))))"
"(void)"
"(hash-set! multi-scope-tables_141(multi-scope-scopes ms_0) ht_143)"
" ht_143)))))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))))"
"(values"
" struct:_88"
" make-_89"
" ?_90"
"(make-struct-field-accessor -ref_91 0 'id)"
"(make-struct-field-accessor -ref_91 1 'name)"
"(make-struct-field-accessor -ref_91 2 'scopes)"
"(make-struct-field-accessor -ref_91 3 'shifted)"
"(make-struct-field-accessor -ref_91 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_0 scopes_0)"
"(begin(multi-scope3.1(new-deserialize-scope-id!) name_0 scopes_0(box(hasheqv))(box(hash))))))"
"(define-values"
"(struct:representative-scope"
" representative-scope4.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_151 make-_152 ?_153 -ref_154 -set!_155)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:implicitly-reachable #t)"
"(cons prop:reach-scopes(lambda(s_0 reach_0)(reach_0(representative-scope-owner s_0))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_0 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:representative-scope-fill!)"
"(ser-push!_0(binding-table-prune-to-reachable(scope-binding-table s_0) state_0))"
"(ser-push!_0(representative-scope-owner s_0)))))"
"(cons"
" prop:serialize"
"(lambda(s_0 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:representative-scope)"
"(ser-push!_0(scope-kind s_0))"
"(ser-push!_0(representative-scope-phase s_0)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_0 port_0 mode_0)"
"(begin"
"                           (write-string \"#<scope:\" port_0)"
"(display(scope-id sc_0) port_0)"
"(if(representative-scope-owner sc_0)"
"(let-values()"
"(begin"
"                                 (write-string \"=\" port_0)"
"(display(multi-scope-id(representative-scope-owner sc_0)) port_0)))"
"(void))"
"                           (write-string \"@\" port_0)"
"(display(representative-scope-phase sc_0) port_0)"
"                           (write-string \">\" port_0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))))"
"(values"
" struct:_151"
" make-_152"
" ?_153"
"(make-struct-field-accessor -ref_154 0 'owner)"
"(make-struct-field-accessor -ref_154 1 'phase)"
"(make-struct-field-mutator -set!_155 0 'owner)"
"(make-struct-field-mutator -set!_155 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_0 phase_0)"
"(begin(let-values(((v_189)(representative-scope4.1(new-deserialize-scope-id!) kind_0 #f #f phase_0))) v_189))))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_0 bt_0 owner_0)"
"(begin(begin(deserialize-scope-fill! s_0 bt_0)(set-representative-scope-owner! s_0 owner_0)))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope5.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_193 make-_194 ?_195 -ref_196 -set!_197)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:reach-scopes"
"(lambda(sms_0 reach_0)(reach_0(shifted-multi-scope-multi-scope sms_0))))"
"(cons"
" prop:serialize"
"(lambda(sms_0 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:shifted-multi-scope)"
"(ser-push!_0(shifted-multi-scope-phase sms_0))"
"(ser-push!_0(shifted-multi-scope-multi-scope sms_0)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_0 port_0 mode_0)"
"(begin"
"                           (write-string \"#<scope:\" port_0)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_0)) port_0)"
"                           (write-string \"@\" port_0)"
"(display(shifted-multi-scope-phase sms_0) port_0)"
"                           (write-string \">\" port_0)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))))"
"(values"
" struct:_193"
" make-_194"
" ?_195"
"(make-struct-field-accessor -ref_196 0 'phase)"
"(make-struct-field-accessor -ref_196 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_0 multi-scope_0)(begin(intern-shifted-multi-scope phase_0 multi-scope_0))))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_0 multi-scope_0)"
"(begin"
"(letrec-values(((transaction-loop_230)"
"(lambda(boxed-table_0 key_0 make_0)"
"(begin"
" 'transaction-loop"
"(let-values(((or-part_234)(hash-ref(unbox boxed-table_0) phase_0 #f)))"
"(if or-part_234"
" or-part_234"
"(let-values(((val_235)(make_0)))"
"(let-values(((current_236)(unbox boxed-table_0)))"
"(let-values(((next_237)(hash-set current_236 key_0 val_235)))"
"(if(box-cas! boxed-table_0 current_236 next_237)"
" val_235"
"(transaction-loop_230 boxed-table_0 key_0 make_0)))))))))))"
"(if(phase? phase_0)"
"(let-values()"
"(let-values(((or-part_238)(hash-ref(unbox(multi-scope-shifted multi-scope_0)) phase_0 #f)))"
"(if or-part_238"
" or-part_238"
"(transaction-loop_230"
"(multi-scope-shifted multi-scope_0)"
" phase_0"
"(lambda()(shifted-multi-scope5.1 phase_0 multi-scope_0))))))"
"(let-values()"
"(let-values(((or-part_239)(hash-ref(unbox(multi-scope-label-shifted multi-scope_0)) phase_0 #f)))"
"(if or-part_239"
" or-part_239"
"(transaction-loop_230"
"(multi-scope-label-shifted multi-scope_0)"
" phase_0"
"(lambda()(shifted-multi-scope5.1 phase_0 multi-scope_0)))))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase6.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_240 make-_241 ?_242 -ref_243 -set!_244)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase)))))"
"(values struct:_240 make-_241 ?_242(make-struct-field-accessor -ref_243 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(begin(set! id-counter(add1 id-counter)) id-counter))))"
"(define-values(new-deserialize-scope-id!)(lambda()(begin(-(new-scope-id!)))))"
"(define-values(deserialized-scope-id?)(lambda(scope-id_0)(begin(negative? scope-id_0))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_0)(begin(scope1.1(new-scope-id!) kind_0 empty-binding-table))))"
"(define-values(interned-scopes-table)(make-weak-hasheq))"
"(define-values"
"(make-interned-scope)"
"(lambda(sym_0)"
"(begin"
"(let-values(((make_263)"
"(lambda()"
"(begin"
" 'make"
"(make-ephemeron"
" sym_0"
"(interned-scope2.1(-(new-scope-id!)) 'interned empty-binding-table sym_0))))))"
"(call-as-atomic"
"(lambda()"
"(let-values(((or-part_264)(ephemeron-value(hash-ref! interned-scopes-table sym_0 make_263))))"
"(if or-part_264"
" or-part_264"
"(let-values(((new_265)(make_263)))"
"(begin(hash-set! interned-scopes-table sym_0 new_265)(ephemeron-value new_265)))))))))))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_266)"
"(lambda(name7_0)"
"(begin"
" 'new-multi-scope8"
"(let-values(((name_268) name7_0))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope3.1(new-scope-id!) name_268(make-hasheqv)(box(hasheqv))(box(hash))))))))))"
"(case-lambda(()(begin(new-multi-scope8_266 #f)))((name7_0)(new-multi-scope8_266 name7_0)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_0 phase_0)"
"(begin"
"(let-values(((or-part_272)(hash-ref(multi-scope-scopes ms_0) phase_0 #f)))"
"(if or-part_272"
" or-part_272"
"(let-values(((s_273)"
"(representative-scope4.1"
"(if(deserialized-scope-id?(multi-scope-id ms_0))(new-deserialize-scope-id!)(new-scope-id!))"
" 'module"
" empty-binding-table"
" ms_0"
" phase_0)))"
"(begin(hash-set!(multi-scope-scopes ms_0) phase_0 s_273) s_273)))))))"
"(define-values(scope>?)(lambda(sc1_0 sc2_0)(begin(>(scope-id sc1_0)(scope-id sc2_0)))))"
"(define-values(scope<?)(lambda(sc1_0 sc2_0)(begin(<(scope-id sc1_0)(scope-id sc2_0)))))"
"(define-values"
"(shifted-multi-scope<?)"
"(lambda(sms1_0 sms2_0)"
"(begin"
"(let-values(((ms1_280)(shifted-multi-scope-multi-scope sms1_0)))"
"(let-values(((ms2_281)(shifted-multi-scope-multi-scope sms2_0)))"
"(if(eq? ms1_280 ms2_281)"
"(let-values(((p1_282)(shifted-multi-scope-phase sms1_0))((p2_283)(shifted-multi-scope-phase sms2_0)))"
"(if(shifted-to-label-phase? p1_282)"
"(let-values()"
"(if(shifted-to-label-phase? p2_283)"
"(let-values()(phase<?(shifted-to-label-phase-from p1_282)(shifted-to-label-phase-from p2_283)))"
"(let-values() #f)))"
"(if(shifted-to-label-phase? p2_283)(let-values() #t)(let-values()(phase<? p1_282 p2_283)))))"
"(<(multi-scope-id ms1_280)(multi-scope-id ms2_281))))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_0)"
"(begin"
"(let-values(((prop_285)(syntax-scope-propagations+tamper s_0)))"
"(if(let-values(((or-part_286)(propagation? prop_285)))"
"(if or-part_286 or-part_286(tamper-needs-propagate? prop_285)))"
"(let-values(((new-content_287)"
"(let-values(((s_288)(syntax-content s_0))"
"((f_289)(lambda(tail?_0 x_0)(begin 'f x_0)))"
"((s->_290)"
"(lambda(sub-s_0)"
"(begin"
" 's->"
"(if(propagation? prop_285)"
"(let-values(((the-struct_295) sub-s_0))"
"(if(syntax?$1 the-struct_295)"
"(let-values(((scopes49_296)"
"(propagation-apply prop_285(syntax-scopes sub-s_0) s_0))"
"((shifted-multi-scopes50_297)"
"(propagation-apply-shifted"
" prop_285"
"(syntax-shifted-multi-scopes sub-s_0)"
" s_0))"
"((mpi-shifts51_298)"
"(propagation-apply-mpi-shifts"
" prop_285"
"(syntax-mpi-shifts sub-s_0)"
" s_0))"
"((inspector52_299)"
"(propagation-apply-inspector"
" prop_285"
"(syntax-inspector sub-s_0)))"
"((scope-propagations+tamper53_300)"
"(propagation-merge"
"(syntax-content sub-s_0)"
" prop_285"
"(syntax-scope-propagations+tamper sub-s_0)"
"(syntax-scopes sub-s_0)"
"(syntax-shifted-multi-scopes sub-s_0)"
"(syntax-mpi-shifts sub-s_0))))"
"(syntax1.1"
"(syntax-content the-struct_295)"
" scopes49_296"
" shifted-multi-scopes50_297"
" scope-propagations+tamper53_300"
" mpi-shifts51_298"
"(syntax-srcloc the-struct_295)"
"(syntax-props the-struct_295)"
" inspector52_299))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_295)))"
"(let-values(((stx_301) sub-s_0))"
"(let-values(((the-struct_302) stx_301))"
"(if(syntax?$1 the-struct_302)"
"(let-values(((scope-propagations+tamper54_303)"
"(let-values(((t_304)"
"(tamper-tainted-for-content"
"(syntax-content sub-s_0)))"
"((p_305)"
"(syntax-scope-propagations+tamper"
" stx_301)))"
"(if(tamper? p_305)"
" t_304"
"((propagation-set-tamper-ref p_305) p_305 t_304)))))"
"(syntax1.1"
"(syntax-content the-struct_302)"
"(syntax-scopes the-struct_302)"
"(syntax-shifted-multi-scopes the-struct_302)"
" scope-propagations+tamper54_303"
"(syntax-mpi-shifts the-struct_302)"
"(syntax-srcloc the-struct_302)"
"(syntax-props the-struct_302)"
"(syntax-inspector the-struct_302)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_302))))))))"
"((seen_291) #f))"
"(let-values(((s_306) s_288)"
"((f_307) f_289)"
"((gf_308)"
"(lambda(tail?_0 v_0)"
"(begin"
" 'gf"
"(if(syntax?$1 v_0)"
"(let-values()(s->_290 v_0))"
"(let-values()(f_289 tail?_0 v_0))))))"
"((seen_309) seen_291))"
"((letrec-values(((loop_312)"
"(lambda(tail?_0 s_1 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_316)(fx+ 1 prev-depth_0)))"
"(if(if seen_309(fx> depth_316 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_1"
"(lambda(tail?_1 s_2)(gf_308 tail?_1 s_2))"
" seen_309))"
"(if(null? s_1)"
"(let-values()(f_307 tail?_0 s_1))"
"(if(pair? s_1)"
"(let-values()"
"(f_307"
" tail?_0"
"(cons"
"(loop_312 #f(car s_1) depth_316)"
"(loop_312 #t(cdr s_1) depth_316))))"
"(if(symbol? s_1)"
"(let-values()(f_307 #f s_1))"
"(if(boolean? s_1)"
"(let-values()(f_307 #f s_1))"
"(if(number? s_1)"
"(let-values()(f_307 #f s_1))"
"(if(let-values(((or-part_319)(vector? s_1)))"
"(if or-part_319"
" or-part_319"
"(let-values(((or-part_320)(box? s_1)))"
"(if or-part_320"
" or-part_320"
"(let-values(((or-part_321)"
"(prefab-struct-key s_1)))"
"(if or-part_321"
" or-part_321"
"(hash? s_1)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_1"
"(lambda(tail?_1 s_2)(gf_308 tail?_1 s_2))"
" seen_309))"
"(let-values()(gf_308 #f s_1))))))))))))))"
" loop_312)"
" #f"
" s_306"
" 0)))))"
"(begin"
"(set-syntax-content! s_0 new-content_287)"
"(set-syntax-scope-propagations+tamper!"
" s_0"
"(tamper-propagated(if(propagation? prop_285)(propagation-tamper prop_285) prop_285)))"
" new-content_287))"
"(syntax-content s_0))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_0)"
"(begin"
" 'syntax-e"
"(let-values(((e_325)(syntax-content s_0)))"
"(if(symbol? e_325)"
"(let-values() e_325)"
"(let-values()"
"(let-values(((content_326)(syntax-e/no-taint s_0)))"
"(if(not(tamper-armed?(syntax-scope-propagations+tamper s_0)))"
"(let-values() content_326)"
"(if(datum-has-elements? content_326)"
"(let-values()(taint-content content_326))"
"(let-values() content_326))))))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_0)"
"(begin"
"(if(representative-scope? sc_0)"
"(intern-shifted-multi-scope(representative-scope-phase sc_0)(representative-scope-owner sc_0))"
" sc_0))))"
"(define-values"
"(add-scope)"
"(lambda(s_0 sc_0)"
"(begin"
"(let-values(((s_330) s_0)((sc_331)(generalize-scope sc_0))((op_332) set-add)((prop-op_333) propagation-add))"
"(if(shifted-multi-scope? sc_331)"
"(let-values(((the-struct_334) s_330))"
"(if(syntax?$1 the-struct_334)"
"(let-values(((shifted-multi-scopes55_335)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_330)"
"(lambda(smss_0)(op_332(fallback-first smss_0) sc_331))))"
"((scope-propagations+tamper56_336)"
"(if(datum-has-elements?(syntax-content s_330))"
"(prop-op_333"
"(syntax-scope-propagations+tamper s_330)"
" sc_331"
"(syntax-scopes s_330)"
"(syntax-shifted-multi-scopes s_330)"
"(syntax-mpi-shifts s_330))"
"(syntax-scope-propagations+tamper s_330))))"
"(syntax1.1"
"(syntax-content the-struct_334)"
"(syntax-scopes the-struct_334)"
" shifted-multi-scopes55_335"
" scope-propagations+tamper56_336"
"(syntax-mpi-shifts the-struct_334)"
"(syntax-srcloc the-struct_334)"
"(syntax-props the-struct_334)"
"(syntax-inspector the-struct_334)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_334)))"
"(let-values(((the-struct_338) s_330))"
"(if(syntax?$1 the-struct_338)"
"(let-values(((scopes57_339)(op_332(syntax-scopes s_330) sc_331))"
"((scope-propagations+tamper58_340)"
"(if(datum-has-elements?(syntax-content s_330))"
"(prop-op_333"
"(syntax-scope-propagations+tamper s_330)"
" sc_331"
"(syntax-scopes s_330)"
"(syntax-shifted-multi-scopes s_330)"
"(syntax-mpi-shifts s_330))"
"(syntax-scope-propagations+tamper s_330))))"
"(syntax1.1"
"(syntax-content the-struct_338)"
" scopes57_339"
"(syntax-shifted-multi-scopes the-struct_338)"
" scope-propagations+tamper58_340"
"(syntax-mpi-shifts the-struct_338)"
"(syntax-srcloc the-struct_338)"
"(syntax-props the-struct_338)"
"(syntax-inspector the-struct_338)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_338))))))))"
"(define-values"
"(add-scopes)"
"(lambda(s_0 scs_0)"
"(begin"
"(let-values(((lst_343) scs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_343)))"
"((letrec-values(((for-loop_344)"
"(lambda(s_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((sc_347)(unsafe-car lst_0))((rest_348)(unsafe-cdr lst_0)))"
"(let-values(((s_349)"
"(let-values(((s_350) s_1))"
"(let-values(((s_351)(let-values()(add-scope s_350 sc_347))))"
"(values s_351)))))"
"(if(not #f)(for-loop_344 s_349 rest_348) s_349)))"
" s_1)))))"
" for-loop_344)"
" s_0"
" lst_343))))))"
"(define-values"
"(remove-scope)"
"(lambda(s_0 sc_0)"
"(begin"
"(let-values(((s_354) s_0)"
"((sc_355)(generalize-scope sc_0))"
"((op_356) set-remove)"
"((prop-op_357) propagation-remove))"
"(if(shifted-multi-scope? sc_355)"
"(let-values(((the-struct_358) s_354))"
"(if(syntax?$1 the-struct_358)"
"(let-values(((shifted-multi-scopes59_359)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_354)"
"(lambda(smss_0)(op_356(fallback-first smss_0) sc_355))))"
"((scope-propagations+tamper60_360)"
"(if(datum-has-elements?(syntax-content s_354))"
"(prop-op_357"
"(syntax-scope-propagations+tamper s_354)"
" sc_355"
"(syntax-scopes s_354)"
"(syntax-shifted-multi-scopes s_354)"
"(syntax-mpi-shifts s_354))"
"(syntax-scope-propagations+tamper s_354))))"
"(syntax1.1"
"(syntax-content the-struct_358)"
"(syntax-scopes the-struct_358)"
" shifted-multi-scopes59_359"
" scope-propagations+tamper60_360"
"(syntax-mpi-shifts the-struct_358)"
"(syntax-srcloc the-struct_358)"
"(syntax-props the-struct_358)"
"(syntax-inspector the-struct_358)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_358)))"
"(let-values(((the-struct_362) s_354))"
"(if(syntax?$1 the-struct_362)"
"(let-values(((scopes61_363)(op_356(syntax-scopes s_354) sc_355))"
"((scope-propagations+tamper62_364)"
"(if(datum-has-elements?(syntax-content s_354))"
"(prop-op_357"
"(syntax-scope-propagations+tamper s_354)"
" sc_355"
"(syntax-scopes s_354)"
"(syntax-shifted-multi-scopes s_354)"
"(syntax-mpi-shifts s_354))"
"(syntax-scope-propagations+tamper s_354))))"
"(syntax1.1"
"(syntax-content the-struct_362)"
" scopes61_363"
"(syntax-shifted-multi-scopes the-struct_362)"
" scope-propagations+tamper62_364"
"(syntax-mpi-shifts the-struct_362)"
"(syntax-srcloc the-struct_362)"
"(syntax-props the-struct_362)"
"(syntax-inspector the-struct_362)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_362))))))))"
"(define-values"
"(remove-scopes)"
"(lambda(s_0 scs_0)"
"(begin"
"(let-values(((lst_367) scs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_367)))"
"((letrec-values(((for-loop_368)"
"(lambda(s_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((sc_371)(unsafe-car lst_0))((rest_372)(unsafe-cdr lst_0)))"
"(let-values(((s_373)"
"(let-values(((s_374) s_1))"
"(let-values(((s_375)(let-values()(remove-scope s_374 sc_371))))"
"(values s_375)))))"
"(if(not #f)(for-loop_368 s_373 rest_372) s_373)))"
" s_1)))))"
" for-loop_368)"
" s_0"
" lst_367))))))"
"(define-values(set-flip)(lambda(s_0 e_0)(begin(if(set-member? s_0 e_0)(set-remove s_0 e_0)(set-add s_0 e_0)))))"
"(define-values"
"(flip-scope)"
"(lambda(s_0 sc_0)"
"(begin"
"(let-values(((s_380) s_0)"
"((sc_381)(generalize-scope sc_0))"
"((op_382) set-flip)"
"((prop-op_383) propagation-flip))"
"(if(shifted-multi-scope? sc_381)"
"(let-values(((the-struct_384) s_380))"
"(if(syntax?$1 the-struct_384)"
"(let-values(((shifted-multi-scopes63_385)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_380)"
"(lambda(smss_0)(op_382(fallback-first smss_0) sc_381))))"
"((scope-propagations+tamper64_386)"
"(if(datum-has-elements?(syntax-content s_380))"
"(prop-op_383"
"(syntax-scope-propagations+tamper s_380)"
" sc_381"
"(syntax-scopes s_380)"
"(syntax-shifted-multi-scopes s_380)"
"(syntax-mpi-shifts s_380))"
"(syntax-scope-propagations+tamper s_380))))"
"(syntax1.1"
"(syntax-content the-struct_384)"
"(syntax-scopes the-struct_384)"
" shifted-multi-scopes63_385"
" scope-propagations+tamper64_386"
"(syntax-mpi-shifts the-struct_384)"
"(syntax-srcloc the-struct_384)"
"(syntax-props the-struct_384)"
"(syntax-inspector the-struct_384)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_384)))"
"(let-values(((the-struct_388) s_380))"
"(if(syntax?$1 the-struct_388)"
"(let-values(((scopes65_389)(op_382(syntax-scopes s_380) sc_381))"
"((scope-propagations+tamper66_390)"
"(if(datum-has-elements?(syntax-content s_380))"
"(prop-op_383"
"(syntax-scope-propagations+tamper s_380)"
" sc_381"
"(syntax-scopes s_380)"
"(syntax-shifted-multi-scopes s_380)"
"(syntax-mpi-shifts s_380))"
"(syntax-scope-propagations+tamper s_380))))"
"(syntax1.1"
"(syntax-content the-struct_388)"
" scopes65_389"
"(syntax-shifted-multi-scopes the-struct_388)"
" scope-propagations+tamper66_390"
"(syntax-mpi-shifts the-struct_388)"
"(syntax-srcloc the-struct_388)"
"(syntax-props the-struct_388)"
"(syntax-inspector the-struct_388)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_388))))))))"
"(define-values"
"(flip-scopes)"
"(lambda(s_0 scs_0)"
"(begin"
"(let-values(((lst_393) scs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_393)))"
"((letrec-values(((for-loop_394)"
"(lambda(s_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((sc_397)(unsafe-car lst_0))((rest_398)(unsafe-cdr lst_0)))"
"(let-values(((s_399)"
"(let-values(((s_400) s_1))"
"(let-values(((s_401)(let-values()(flip-scope s_400 sc_397))))"
"(values s_401)))))"
"(if(not #f)(for-loop_394 s_399 rest_398) s_399)))"
" s_1)))))"
" for-loop_394)"
" s_0"
" lst_393))))))"
"(define-values"
"(push-scope)"
"(lambda(s_0 sms_0)"
"(begin"
"(let-values(((smss/maybe-fallbacks67_404) #f))"
"(let-values(((prev-result_405) #f))"
"(let-values(((push_406)"
"(lambda(smss/maybe-fallbacks_0)"
"(begin"
" 'push"
"(if(eq? smss/maybe-fallbacks67_404 smss/maybe-fallbacks_0)"
"(let-values() prev-result_405)"
"(let-values()"
"(let-values(((r_408)"
"(let-values()"
"(let-values(((smss_409)(fallback-first smss/maybe-fallbacks_0)))"
"(if(set-empty? smss_409)"
"(let-values()(set-add smss_409 sms_0))"
"(if(set-member? smss_409 sms_0)"
"(let-values() smss/maybe-fallbacks_0)"
"(let-values()"
"(fallback-push"
"(set-add smss_409 sms_0)"
" smss/maybe-fallbacks_0))))))))"
"(begin"
"(set! smss/maybe-fallbacks67_404 smss/maybe-fallbacks_0)"
"(set! prev-result_405 r_408)"
" r_408))))))))"
"(let-values(((s_410) s_0)"
"((f_411)(lambda(tail?_0 x_0)(begin 'f x_0)))"
"((d->s_412)"
"(lambda(s_1 d_0)"
"(begin"
" 'd->s"
"(let-values(((the-struct_419) s_1))"
"(if(syntax?$1 the-struct_419)"
"(let-values(((content68_420) d_0)"
"((shifted-multi-scopes69_421)"
"(push_406(syntax-shifted-multi-scopes s_1))))"
"(syntax1.1"
" content68_420"
"(syntax-scopes the-struct_419)"
" shifted-multi-scopes69_421"
"(syntax-scope-propagations+tamper the-struct_419)"
"(syntax-mpi-shifts the-struct_419)"
"(syntax-srcloc the-struct_419)"
"(syntax-props the-struct_419)"
"(syntax-inspector the-struct_419)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_419))))))"
"((s-e_413) syntax-e/no-taint)"
"((seen_414) #f))"
"((letrec-values(((loop_422)"
"(lambda(s_1)"
"(begin"
" 'loop"
"(let-values(((s_424) s_1)"
"((f_425) f_411)"
"((gf_426)"
"(lambda(tail?_0 v_0)"
"(begin"
" 'gf"
"(if(syntax?$1 v_0)"
"(let-values()(d->s_412 v_0(loop_422(s-e_413 v_0))))"
"(let-values()(f_411 tail?_0 v_0))))))"
"((seen_427) seen_414))"
"((letrec-values(((loop_430)"
"(lambda(tail?_0 s_2 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_434)(fx+ 1 prev-depth_0)))"
"(if(if seen_427(fx> depth_434 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)(gf_426 tail?_1 s_3))"
" seen_427))"
"(if(null? s_2)"
"(let-values()(f_425 tail?_0 s_2))"
"(if(pair? s_2)"
"(let-values()"
"(f_425"
" tail?_0"
"(cons"
"(loop_430 #f(car s_2) depth_434)"
"(loop_430 #t(cdr s_2) depth_434))))"
"(if(symbol? s_2)"
"(let-values()(f_425 #f s_2))"
"(if(boolean? s_2)"
"(let-values()(f_425 #f s_2))"
"(if(number? s_2)"
"(let-values()(f_425 #f s_2))"
"(if(let-values(((or-part_437)"
"(vector? s_2)))"
"(if or-part_437"
" or-part_437"
"(let-values(((or-part_438)"
"(box? s_2)))"
"(if or-part_438"
" or-part_438"
"(let-values(((or-part_439)"
"(prefab-struct-key"
" s_2)))"
"(if or-part_439"
" or-part_439"
"(hash? s_2)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)"
"(gf_426 tail?_1 s_3))"
" seen_427))"
"(let-values()(gf_426 #f s_2))))))))))))))"
" loop_430)"
" #f"
" s_424"
" 0))))))"
" loop_422)"
" s_410))))))))"
"(define-values"
"(struct:propagation"
" propagation14.1"
" propagation?"
" propagation-prev-scs"
" propagation-prev-smss"
" propagation-scope-ops"
" propagation-prev-mss"
" propagation-add-mpi-shifts"
" propagation-inspector"
" propagation-tamper)"
"(let-values(((struct:_442 make-_443 ?_444 -ref_445 -set!_446)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 7"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:propagation-set-tamper(lambda(p_0 v_0)(propagation-set-tamper p_0 v_0)))"
"(cons prop:propagation-tamper(lambda(p_0)(propagation-tamper p_0)))"
"(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'propagation)))))"
"(values"
" struct:_442"
" make-_443"
" ?_444"
"(make-struct-field-accessor -ref_445 0 'prev-scs)"
"(make-struct-field-accessor -ref_445 1 'prev-smss)"
"(make-struct-field-accessor -ref_445 2 'scope-ops)"
"(make-struct-field-accessor -ref_445 3 'prev-mss)"
"(make-struct-field-accessor -ref_445 4 'add-mpi-shifts)"
"(make-struct-field-accessor -ref_445 5 'inspector)"
"(make-struct-field-accessor -ref_445 6 'tamper))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_0 sc_0 prev-scs_0 prev-smss_0 prev-mss_0)"
"(begin"
"(if(propagation? prop_0)"
"(let-values(((the-struct_500) prop_0))"
"(if(propagation? the-struct_500)"
"(let-values(((scope-ops71_501)(hash-set(propagation-scope-ops prop_0) sc_0 'add)))"
"(propagation14.1"
"(propagation-prev-scs the-struct_500)"
"(propagation-prev-smss the-struct_500)"
" scope-ops71_501"
"(propagation-prev-mss the-struct_500)"
"(propagation-add-mpi-shifts the-struct_500)"
"(propagation-inspector the-struct_500)"
"(propagation-tamper the-struct_500)))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_500)))"
"(propagation14.1 prev-scs_0 prev-smss_0(hasheq sc_0 'add) prev-mss_0 #f #f prop_0)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_0 sc_0 prev-scs_0 prev-smss_0 prev-mss_0)"
"(begin"
"(if(propagation? prop_0)"
"(let-values(((the-struct_507) prop_0))"
"(if(propagation? the-struct_507)"
"(let-values(((scope-ops72_508)(hash-set(propagation-scope-ops prop_0) sc_0 'remove)))"
"(propagation14.1"
"(propagation-prev-scs the-struct_507)"
"(propagation-prev-smss the-struct_507)"
" scope-ops72_508"
"(propagation-prev-mss the-struct_507)"
"(propagation-add-mpi-shifts the-struct_507)"
"(propagation-inspector the-struct_507)"
"(propagation-tamper the-struct_507)))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_507)))"
"(propagation14.1 prev-scs_0 prev-smss_0(hasheq sc_0 'remove) prev-mss_0 #f #f prop_0)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_0 sc_0 prev-scs_0 prev-smss_0 prev-mss_0)"
"(begin"
"(if(propagation? prop_0)"
"(let-values(((ops_514)(propagation-scope-ops prop_0)))"
"(let-values(((current-op_515)(hash-ref ops_514 sc_0 #f)))"
"(if(if(eq? current-op_515 'flip)"
"(if(= 1(hash-count ops_514))"
"(if(not(propagation-inspector prop_0))(not(propagation-add-mpi-shifts prop_0)) #f)"
" #f)"
" #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_516) prop_0))"
"(if(propagation? the-struct_516)"
"(let-values(((scope-ops73_517)"
"(if(eq? current-op_515 'flip)"
"(hash-remove ops_514 sc_0)"
"(hash-set"
" ops_514"
" sc_0"
"(let-values(((tmp_518) current-op_515))"
"(if(equal? tmp_518 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_518 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation14.1"
"(propagation-prev-scs the-struct_516)"
"(propagation-prev-smss the-struct_516)"
" scope-ops73_517"
"(propagation-prev-mss the-struct_516)"
"(propagation-add-mpi-shifts the-struct_516)"
"(propagation-inspector the-struct_516)"
"(propagation-tamper the-struct_516)))"
"                    (raise-argument-error 'struct-copy \"propagation?\" the-struct_516)))))))"
"(propagation14.1 prev-scs_0 prev-smss_0(hasheq sc_0 'flip) prev-mss_0 #f #f prop_0)))))"
"(define-values"
"(propagation-mpi-shift)"
"(lambda(prop_0 add_0 inspector_0 prev-scs_0 prev-smss_0 prev-mss_0)"
"(begin"
"(if(propagation? prop_0)"
"(let-values(((the-struct_525) prop_0))"
"(if(propagation? the-struct_525)"
"(let-values(((add-mpi-shifts74_526)"
"(let-values(((base-add_528)(propagation-add-mpi-shifts prop_0)))"
"(if(if add_0 base-add_528 #f)"
"(lambda(mss_0)(begin 'add-mpi-shifts74(add_0(base-add_528 mss_0))))"
"(let-values(((or-part_530) add_0))(if or-part_530 or-part_530 base-add_528)))))"
"((inspector75_527)"
"(let-values(((or-part_531)(propagation-inspector prop_0)))"
"(if or-part_531 or-part_531 inspector_0))))"
"(propagation14.1"
"(propagation-prev-scs the-struct_525)"
"(propagation-prev-smss the-struct_525)"
"(propagation-scope-ops the-struct_525)"
"(propagation-prev-mss the-struct_525)"
" add-mpi-shifts74_526"
" inspector75_527"
"(propagation-tamper the-struct_525)))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_525)))"
"(propagation14.1 prev-scs_0 prev-smss_0 '#hasheq() prev-mss_0 add_0 inspector_0 prop_0)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_0 scs_0 parent-s_0)"
"(begin"
"(if(eq?(propagation-prev-scs prop_0) scs_0)"
"(let-values()(syntax-scopes parent-s_0))"
"(let-values()"
"(let-values(((new-scs_535)"
"(let-values(((ht_536)(propagation-scope-ops prop_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_536)))"
"((letrec-values(((for-loop_537)"
"(lambda(scs_1 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_540 op_541)"
"(unsafe-immutable-hash-iterate-key+value ht_536 i_0)))"
"(let-values(((scs_542)"
"(let-values(((scs_543) scs_1))"
"(if(not(shifted-multi-scope? sc_540))"
"(let-values(((scs_544) scs_543))"
"(let-values(((scs_545)"
"(let-values()"
"(let-values(((tmp_546)"
" op_541))"
"(if(equal? tmp_546 'add)"
"(let-values()"
"(set-add"
" scs_544"
" sc_540))"
"(if(equal?"
" tmp_546"
" 'remove)"
"(let-values()"
"(set-remove"
" scs_544"
" sc_540))"
"(let-values()"
"(set-flip"
" scs_544"
" sc_540))))))))"
"(values scs_545)))"
" scs_543))))"
"(if(not #f)"
"(for-loop_537"
" scs_542"
"(unsafe-immutable-hash-iterate-next ht_536 i_0))"
" scs_542)))"
" scs_1)))))"
" for-loop_537)"
" scs_0"
"(unsafe-immutable-hash-iterate-first ht_536))))))"
"(if(set=? new-scs_535(syntax-scopes parent-s_0))"
"(syntax-scopes parent-s_0)"
"(cache-or-reuse-set new-scs_535))))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_0 smss_0 parent-s_0)"
"(begin"
"(if(eq?(propagation-prev-smss prop_0) smss_0)"
"(let-values()(syntax-shifted-multi-scopes parent-s_0))"
"(let-values()"
"(let-values(((new-smss_550)"
"(let-values(((ht_552)(propagation-scope-ops prop_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_552)))"
"((letrec-values(((for-loop_553)"
"(lambda(smss_1 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sms_556 op_557)"
"(unsafe-immutable-hash-iterate-key+value ht_552 i_0)))"
"(let-values(((smss_558)"
"(let-values(((smss_559) smss_1))"
"(if(shifted-multi-scope? sms_556)"
"(let-values(((smss_560) smss_559))"
"(let-values(((smss_561)"
"(let-values()"
"(fallback-update-first"
" smss_560"
"(lambda(smss_2)"
"(let-values(((tmp_563)"
" op_557))"
"(if(equal? tmp_563 'add)"
"(let-values()"
"(set-add"
" smss_2"
" sms_556))"
"(if(equal?"
" tmp_563"
" 'remove)"
"(let-values()"
"(set-remove"
" smss_2"
" sms_556))"
"(let-values()"
"(set-flip"
" smss_2"
" sms_556))))))))))"
"(values smss_561)))"
" smss_559))))"
"(if(not #f)"
"(for-loop_553"
" smss_558"
"(unsafe-immutable-hash-iterate-next ht_552 i_0))"
" smss_558)))"
" smss_1)))))"
" for-loop_553)"
" smss_0"
"(unsafe-immutable-hash-iterate-first ht_552))))))"
"(let-values(((parent-smss_551)(syntax-shifted-multi-scopes parent-s_0)))"
"(if(if(set? new-smss_550)(if(set? parent-smss_551)(set=? new-smss_550 parent-smss_551) #f) #f)"
" parent-smss_551"
"(cache-or-reuse-hash new-smss_550)))))))))"
"(define-values"
"(propagation-apply-mpi-shifts)"
"(lambda(prop_0 mss_0 parent-s_0)"
"(begin"
"(if(eq?(propagation-prev-mss prop_0) mss_0)"
"(let-values()(syntax-mpi-shifts parent-s_0))"
"(let-values()"
"(let-values(((add_567)(propagation-add-mpi-shifts prop_0)))(if add_567(add_567 mss_0) mss_0)))))))"
"(define-values"
"(propagation-apply-inspector)"
"(lambda(prop_0 i_0)"
"(begin(let-values(((or-part_570) i_0))(if or-part_570 or-part_570(propagation-inspector prop_0))))))"
"(define-values"
"(propagation-set-tamper)"
"(lambda(prop_0 t_0)"
"(begin"
"(if(propagation? prop_0)"
"(let-values(((the-struct_573) prop_0))"
"(if(propagation? the-struct_573)"
"(let-values(((tamper76_574) t_0))"
"(propagation14.1"
"(propagation-prev-scs the-struct_573)"
"(propagation-prev-smss the-struct_573)"
"(propagation-scope-ops the-struct_573)"
"(propagation-prev-mss the-struct_573)"
"(propagation-add-mpi-shifts the-struct_573)"
"(propagation-inspector the-struct_573)"
" tamper76_574))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_573)))"
" t_0))))"
"(define-values"
"(propagation-merge)"
"(lambda(content_0 prop_0 base-prop_0 prev-scs_0 prev-smss_0 prev-mss_0)"
"(begin"
"(if(not(datum-has-elements? content_0))"
"(let-values()(if(tamper-tainted?(propagation-tamper prop_0)) 'tainted base-prop_0))"
"(if(not(propagation? base-prop_0))"
"(let-values()"
"(if(if(eq?(propagation-prev-scs prop_0) prev-scs_0)"
"(if(eq?(propagation-prev-smss prop_0) prev-smss_0)"
"(if(eq?(propagation-prev-mss prop_0) prev-mss_0)(eq?(propagation-tamper prop_0) base-prop_0) #f)"
" #f)"
" #f)"
"(let-values() prop_0)"
"(let-values()"
"(propagation14.1"
" prev-scs_0"
" prev-smss_0"
"(propagation-scope-ops prop_0)"
" prev-mss_0"
"(propagation-add-mpi-shifts prop_0)"
"(propagation-inspector prop_0)"
"(if(tamper-tainted?(propagation-tamper prop_0)) 'tainted/need-propagate base-prop_0)))))"
"(let-values()"
"(let-values(((new-ops_581)"
"(let-values(((ht_585)(propagation-scope-ops prop_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_585)))"
"((letrec-values(((for-loop_586)"
"(lambda(ops_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_589 op_590)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_585"
" i_0)))"
"(let-values(((ops_591)"
"(let-values(((ops_592) ops_0))"
"(let-values(((ops_593)"
"(let-values()"
"(let-values(((tmp_594) op_590))"
"(if(equal? tmp_594 'add)"
"(let-values()"
"(hash-set"
" ops_592"
" sc_589"
" 'add))"
"(if(equal? tmp_594 'remove)"
"(let-values()"
"(hash-set"
" ops_592"
" sc_589"
" 'remove))"
"(let-values()"
"(let-values(((current-op_595)"
"(hash-ref"
" ops_592"
" sc_589"
" #f)))"
"(let-values(((tmp_596)"
" current-op_595))"
"(if(equal?"
" tmp_596"
" 'add)"
"(let-values()"
"(hash-set"
" ops_592"
" sc_589"
" 'remove))"
"(if(equal?"
" tmp_596"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_592"
" sc_589"
" 'add))"
"(if(equal?"
" tmp_596"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_592"
" sc_589))"
"(let-values()"
"(hash-set"
" ops_592"
" sc_589"
" 'flip))))))))))))))"
"(values ops_593)))))"
"(if(not #f)"
"(for-loop_586"
" ops_591"
"(unsafe-immutable-hash-iterate-next ht_585 i_0))"
" ops_591)))"
" ops_0)))))"
" for-loop_586)"
"(propagation-scope-ops base-prop_0)"
"(unsafe-immutable-hash-iterate-first ht_585))))))"
"(let-values(((add_582)(propagation-add-mpi-shifts prop_0)))"
"(let-values(((base-add_583)(propagation-add-mpi-shifts base-prop_0)))"
"(let-values(((new-tamper_584)"
"(if(let-values(((or-part_597)(tamper-tainted?(propagation-tamper prop_0))))"
"(if or-part_597 or-part_597(tamper-tainted?(propagation-tamper base-prop_0))))"
" 'tainted/need-propagate"
"(propagation-tamper base-prop_0))))"
"(if(if(zero?(hash-count new-ops_581))"
"(if(not add_582)"
"(if(not base-add_583)"
"(if(not(propagation-inspector prop_0))(not(propagation-inspector base-prop_0)) #f)"
" #f)"
" #f)"
" #f)"
" new-tamper_584"
"(let-values(((the-struct_598) base-prop_0))"
"(if(propagation? the-struct_598)"
"(let-values(((scope-ops77_599) new-ops_581)"
"((add-mpi-shifts78_600)"
"(if(if add_582 base-add_583 #f)"
"(lambda(mss_0)(begin 'add-mpi-shifts78(add_582(base-add_583 mss_0))))"
"(let-values(((or-part_604) add_582))"
"(if or-part_604 or-part_604 base-add_583))))"
"((inspector79_601)"
"(let-values(((or-part_605)(propagation-inspector base-prop_0)))"
"(if or-part_605 or-part_605(propagation-inspector prop_0))))"
"((tamper80_602) new-tamper_584))"
"(propagation14.1"
"(propagation-prev-scs the-struct_598)"
"(propagation-prev-smss the-struct_598)"
" scope-ops77_599"
"(propagation-prev-mss the-struct_598)"
" add-mpi-shifts78_600"
" inspector79_601"
" tamper80_602))"
"                          (raise-argument-error 'struct-copy \"propagation?\" the-struct_598))))))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_0 delta_0)"
"(begin"
"(if(zero-phase? delta_0)"
"(let-values() sms_0)"
"(if(label-phase? delta_0)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_0))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase6.1(phase- 0(shifted-multi-scope-phase sms_0)))"
"(shifted-multi-scope-multi-scope sms_0)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_0))"
"(let-values() sms_0)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_0(shifted-multi-scope-phase sms_0))"
"(shifted-multi-scope-multi-scope sms_0)))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_0 phase_0)"
"(begin"
" 'syntax-shift-phase-level"
"(if(eqv? phase_0 0)"
" s_0"
"(let-values()"
"(let-values(((smss81_610) #f))"
"(let-values(((prev-result_611) #f))"
"(let-values(((shift-all_612)"
"(lambda(smss_0)"
"(begin"
" 'shift-all"
"(if(eq? smss81_610 smss_0)"
"(let-values() prev-result_611)"
"(let-values()"
"(let-values(((r_614)"
"(let-values()"
"(fallback-map"
" smss_0"
"(lambda(smss_1)"
"(let-values(((ht_616) smss_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_616)))"
"((letrec-values(((for-loop_617)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sms_620)"
"(unsafe-immutable-hash-iterate-key"
" ht_616"
" i_0)))"
"(let-values(((table_621)"
"(let-values(((new-sms_622)"
"(shift-multi-scope"
" sms_620"
" phase_0)))"
"(begin"
" #t"
"((letrec-values(((for-loop_623)"
"(lambda(table_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_625)"
"(let-values(((table_626)"
" table_1))"
"(if new-sms_622"
"(let-values(((table_627)"
" table_626))"
"(let-values(((table_628)"
"(let-values()"
"(let-values(((key_629"
" val_630)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_622)"
" #t))))"
"(hash-set"
" table_627"
" key_629"
" val_630)))))"
"(values"
" table_628)))"
" table_626))))"
" table_625))))))"
" for-loop_623)"
" table_0)))))"
"(if(not #f)"
"(for-loop_617"
" table_621"
"(unsafe-immutable-hash-iterate-next"
" ht_616"
" i_0))"
" table_621)))"
" table_0)))))"
" for-loop_617)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_616)))))))))"
"(begin(set! smss81_610 smss_0)(set! prev-result_611 r_614) r_614))))))))"
"(let-values(((s_631) s_0)"
"((f_632)(lambda(tail?_0 d_0)(begin 'f d_0)))"
"((d->s_633)"
"(lambda(s_1 d_0)"
"(begin"
" 'd->s"
"(let-values(((the-struct_640) s_1))"
"(if(syntax?$1 the-struct_640)"
"(let-values(((content82_641) d_0)"
"((shifted-multi-scopes83_642)"
"(shift-all_612(syntax-shifted-multi-scopes s_1))))"
"(syntax1.1"
" content82_641"
"(syntax-scopes the-struct_640)"
" shifted-multi-scopes83_642"
"(syntax-scope-propagations+tamper the-struct_640)"
"(syntax-mpi-shifts the-struct_640)"
"(syntax-srcloc the-struct_640)"
"(syntax-props the-struct_640)"
"(syntax-inspector the-struct_640)))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_640))))))"
"((s-e_634) syntax-e/no-taint)"
"((seen_635) #f))"
"((letrec-values(((loop_643)"
"(lambda(s_1)"
"(begin"
" 'loop"
"(let-values(((s_645) s_1)"
"((f_646) f_632)"
"((gf_647)"
"(lambda(tail?_0 v_0)"
"(begin"
" 'gf"
"(if(syntax?$1 v_0)"
"(let-values()(d->s_633 v_0(loop_643(s-e_634 v_0))))"
"(let-values()(f_632 tail?_0 v_0))))))"
"((seen_648) seen_635))"
"((letrec-values(((loop_651)"
"(lambda(tail?_0 s_2 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_655)(fx+ 1 prev-depth_0)))"
"(if(if seen_648(fx> depth_655 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)(gf_647 tail?_1 s_3))"
" seen_648))"
"(if(null? s_2)"
"(let-values()(f_646 tail?_0 s_2))"
"(if(pair? s_2)"
"(let-values()"
"(f_646"
" tail?_0"
"(cons"
"(loop_651 #f(car s_2) depth_655)"
"(loop_651 #t(cdr s_2) depth_655))))"
"(if(symbol? s_2)"
"(let-values()(f_646 #f s_2))"
"(if(boolean? s_2)"
"(let-values()(f_646 #f s_2))"
"(if(number? s_2)"
"(let-values()(f_646 #f s_2))"
"(if(let-values(((or-part_658)"
"(vector? s_2)))"
"(if or-part_658"
" or-part_658"
"(let-values(((or-part_659)"
"(box? s_2)))"
"(if or-part_659"
" or-part_659"
"(let-values(((or-part_660)"
"(prefab-struct-key"
" s_2)))"
"(if or-part_660"
" or-part_660"
"(hash? s_2)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)"
"(gf_647 tail?_1 s_3))"
" seen_648))"
"(let-values()"
"(gf_647 #f s_2))))))))))))))"
" loop_651)"
" #f"
" s_645"
" 0))))))"
" loop_643)"
" s_631))))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_0 src-scopes_0 dest-scopes_0)"
"(begin"
"(if(equal? src-scopes_0 dest-scopes_0)"
" s_0"
"(let-values(((src-smss_666 src-scs_667)"
"(set-partition"
"(let-values(((ht_670) src-scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_670)))"
"((letrec-values(((for-loop_671)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_674)"
"(unsafe-immutable-hash-iterate-key ht_670 i_0)))"
"(let-values(((table_675)"
"(let-values(((table_676) table_0))"
"(let-values(((table_677)"
"(let-values()"
"(let-values(((key_678 val_679)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_674))"
" #t))))"
"(hash-set"
" table_676"
" key_678"
" val_679)))))"
"(values table_677)))))"
"(if(not #f)"
"(for-loop_671"
" table_675"
"(unsafe-immutable-hash-iterate-next ht_670 i_0))"
" table_675)))"
" table_0)))))"
" for-loop_671)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_670))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_668 dest-scs_669)"
"(set-partition"
"(let-values(((ht_680) dest-scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_680)))"
"((letrec-values(((for-loop_681)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_684)"
"(unsafe-immutable-hash-iterate-key ht_680 i_0)))"
"(let-values(((table_685)"
"(let-values(((table_686) table_0))"
"(let-values(((table_687)"
"(let-values()"
"(let-values(((key_688 val_689)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_684))"
" #t))))"
"(hash-set"
" table_686"
" key_688"
" val_689)))))"
"(values table_687)))))"
"(if(not #f)"
"(for-loop_681"
" table_685"
"(unsafe-immutable-hash-iterate-next ht_680 i_0))"
" table_685)))"
" table_0)))))"
" for-loop_681)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_680))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs84_690) #f))"
"(let-values(((prev-result_691) #f))"
"(let-values(((swap-scs_692)"
"(lambda(scs_0)"
"(begin"
" 'swap-scs"
"(if(eq? scs84_690 scs_0)"
"(let-values() prev-result_691)"
"(let-values()"
"(let-values(((r_697)"
"(let-values()"
"(if(subset? src-scs_667 scs_0)"
"(set-union(set-subtract scs_0 src-scs_667) dest-scs_669)"
" scs_0))))"
"(begin(set! scs84_690 scs_0)(set! prev-result_691 r_697) r_697))))))))"
"(let-values(((smss85_693) #f))"
"(let-values(((prev-result_694) #f))"
"(let-values(((swap-smss_695)"
"(lambda(smss_0)"
"(begin"
" 'swap-smss"
"(if(eq? smss85_693 smss_0)"
"(let-values() prev-result_694)"
"(let-values()"
"(let-values(((r_699)"
"(let-values()"
"(fallback-update-first"
" smss_0"
"(lambda(smss_1)"
"(if(subset? src-smss_666 smss_1)"
"(set-union"
"(set-subtract smss_1 src-smss_666)"
" dest-smss_668)"
" smss_1))))))"
"(begin(set! smss85_693 smss_0)(set! prev-result_694 r_699) r_699))))))))"
"(let-values(((s_701) s_0)"
"((f_702)(lambda(tail?_0 d_0)(begin 'f d_0)))"
"((d->s_703)"
"(lambda(s_1 d_0)"
"(begin"
" 'd->s"
"(let-values(((the-struct_710) s_1))"
"(if(syntax?$1 the-struct_710)"
"(let-values(((content86_711) d_0)"
"((scopes87_712)(swap-scs_692(syntax-scopes s_1)))"
"((shifted-multi-scopes88_713)"
"(swap-smss_695(syntax-shifted-multi-scopes s_1))))"
"(syntax1.1"
" content86_711"
" scopes87_712"
" shifted-multi-scopes88_713"
"(syntax-scope-propagations+tamper the-struct_710)"
"(syntax-mpi-shifts the-struct_710)"
"(syntax-srcloc the-struct_710)"
"(syntax-props the-struct_710)"
"(syntax-inspector the-struct_710)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_710))))))"
"((s-e_704) syntax-e/no-taint)"
"((seen_705) #f))"
"((letrec-values(((loop_714)"
"(lambda(s_1)"
"(begin"
" 'loop"
"(let-values(((s_716) s_1)"
"((f_717) f_702)"
"((gf_718)"
"(lambda(tail?_0 v_0)"
"(begin"
" 'gf"
"(if(syntax?$1 v_0)"
"(let-values()"
"(d->s_703 v_0(loop_714(s-e_704 v_0))))"
"(let-values()(f_702 tail?_0 v_0))))))"
"((seen_719) seen_705))"
"((letrec-values(((loop_722)"
"(lambda(tail?_0 s_2 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_726)(fx+ 1 prev-depth_0)))"
"(if(if seen_719(fx> depth_726 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)(gf_718 tail?_1 s_3))"
" seen_719))"
"(if(null? s_2)"
"(let-values()(f_717 tail?_0 s_2))"
"(if(pair? s_2)"
"(let-values()"
"(f_717"
" tail?_0"
"(cons"
"(loop_722 #f(car s_2) depth_726)"
"(loop_722 #t(cdr s_2) depth_726))))"
"(if(symbol? s_2)"
"(let-values()(f_717 #f s_2))"
"(if(boolean? s_2)"
"(let-values()(f_717 #f s_2))"
"(if(number? s_2)"
"(let-values()(f_717 #f s_2))"
"(if(let-values(((or-part_729)"
"(vector? s_2)))"
"(if or-part_729"
" or-part_729"
"(let-values(((or-part_730)"
"(box? s_2)))"
"(if or-part_730"
" or-part_730"
"(let-values(((or-part_731)"
"(prefab-struct-key"
" s_2)))"
"(if or-part_731"
" or-part_731"
"(hash? s_2)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)"
"(gf_718 tail?_1 s_3))"
" seen_719))"
"(let-values()"
"(gf_718 #f s_2))))))))))))))"
" loop_722)"
" #f"
" s_716"
" 0))))))"
" loop_714)"
" s_701)))))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_0 phase_0)(begin(scope-set-at-fallback s_0(fallback-first(syntax-shifted-multi-scopes s_0)) phase_0))))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_0 smss_0 phase_0)"
"(begin"
"(let-values(((ht_739) smss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_739)))"
"((letrec-values(((for-loop_740)"
"(lambda(scopes_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sms_743)(unsafe-immutable-hash-iterate-key ht_739 i_0)))"
"(let-values(((scopes_744)"
"(let-values(((scopes_745) scopes_0))"
"(if(let-values(((or-part_746)(label-phase? phase_0)))"
"(if or-part_746"
" or-part_746"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_743)))))"
"(let-values(((scopes_747) scopes_745))"
"(let-values(((scopes_748)"
"(let-values()"
"(set-add"
" scopes_747"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_743)"
"(let-values(((ph_749)"
"(shifted-multi-scope-phase"
" sms_743)))"
"(if(shifted-to-label-phase? ph_749)"
"(shifted-to-label-phase-from ph_749)"
"(phase- ph_749 phase_0))))))))"
"(values scopes_748)))"
" scopes_745))))"
"(if(not #f)"
"(for-loop_740 scopes_744(unsafe-immutable-hash-iterate-next ht_739 i_0))"
" scopes_744)))"
" scopes_0)))))"
" for-loop_740)"
"(syntax-scopes s_0)"
"(unsafe-immutable-hash-iterate-first ht_739)))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_0)"
"(begin"
"(begin"
"        (if (set-empty? scopes_0) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_751) scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_751)))"
"((letrec-values(((for-loop_752)"
"(lambda(max-sc_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_755)(unsafe-immutable-hash-iterate-key ht_751 i_0)))"
"(let-values(((max-sc_756)"
"(let-values(((max-sc_757) max-sc_0))"
"(let-values(((max-sc_758)"
"(let-values()"
"(if(scope>? sc_755 max-sc_757)"
" sc_755"
" max-sc_757))))"
"(values max-sc_758)))))"
"(if(not #f)"
"(for-loop_752 max-sc_756(unsafe-immutable-hash-iterate-next ht_751 i_0))"
" max-sc_756)))"
" max-sc_0)))))"
" for-loop_752)"
"(set-first scopes_0)"
"(unsafe-immutable-hash-iterate-first ht_751))))))))"
"(define-values"
"(add-binding-in-scopes!20.1)"
"(lambda(just-for-nominal?15_0 scopes17_0 sym18_0 binding19_0)"
"(begin"
" 'add-binding-in-scopes!20"
"(let-values(((scopes_763) scopes17_0))"
"(let-values(((sym_764) sym18_0))"
"(let-values(((binding_765) binding19_0))"
"(let-values(((just-for-nominal?_766) just-for-nominal?15_0))"
"(let-values()"
"(let-values(((max-sc_767)(find-max-scope scopes_763)))"
"(let-values(((bt_768)"
"(binding-table-add"
"(scope-binding-table max-sc_767)"
" scopes_763"
" sym_764"
" binding_765"
" just-for-nominal?_766)))"
"(begin(set-scope-binding-table! max-sc_767 bt_768)(clear-resolve-cache! sym_764))))))))))))"
"(define-values"
"(add-bulk-binding-in-scopes!27.1)"
"(lambda(shadow-except23_0 scopes25_0 bulk-binding26_0)"
"(begin"
" 'add-bulk-binding-in-scopes!27"
"(let-values(((scopes_792) scopes25_0))"
"(let-values(((bulk-binding_793) bulk-binding26_0))"
"(let-values(((shadow-except_794) shadow-except23_0))"
"(let-values()"
"(let-values(((max-sc_795)(find-max-scope scopes_792)))"
"(let-values(((bt_796)"
"(let-values(((temp89_798)(scope-binding-table max-sc_795))"
"((scopes90_799) scopes_792)"
"((bulk-binding91_800) bulk-binding_793)"
"((shadow-except92_801) shadow-except_794))"
"(binding-table-add-bulk9.1"
" shadow-except92_801"
" temp89_798"
" scopes90_799"
" bulk-binding91_800))))"
"(begin(set-scope-binding-table! max-sc_795 bt_796)(clear-resolve-cache!)))))))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_0)"
"(begin"
"(let-values(((ht_821)(syntax-scopes s_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_821)))"
"((letrec-values(((for-loop_822)"
"(lambda(result_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_825)(unsafe-immutable-hash-iterate-key ht_821 i_0)))"
"(let-values(((result_826)"
"(let-values()"
"(let-values(((result_828)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_825) 'macro)))))"
"(values result_828)))))"
"(if(if(not((lambda x_0 result_826) sc_825))(not #f) #f)"
"(for-loop_822 result_826(unsafe-immutable-hash-iterate-next ht_821 i_0))"
" result_826)))"
" result_0)))))"
" for-loop_822)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_821)))))))"
"(define-values"
"(resolve40.1)"
"(lambda(ambiguous-value30_0 exactly?31_0 extra-shifts33_0 get-scopes?32_0 s38_0 phase39_0)"
"(begin"
" 'resolve40"
"(let-values(((s_836) s38_0))"
"(let-values(((phase_837) phase39_0))"
"(let-values(((ambiguous-value_838) ambiguous-value30_0))"
"(let-values(((exactly?_839) exactly?31_0))"
"(let-values(((get-scopes?_840) get-scopes?32_0))"
"(let-values(((extra-shifts_841) extra-shifts33_0))"
"(let-values()"
"(let-values(((sym_842)(syntax-content s_836)))"
"((letrec-values(((fallback-loop_843)"
"(lambda(smss_0)"
"(begin"
" 'fallback-loop"
"(let-values(((c1_845)"
"(if(not exactly?_839)"
"(if(not get-scopes?_840)"
"(resolve-cache-get"
" sym_842"
" phase_837"
"(syntax-scopes s_836)"
"(fallback-first smss_0))"
" #f)"
" #f)))"
"(if c1_845"
"((lambda(b_0)"
"(if(eq? b_0 '#:none)"
"(let-values()"
"(if(fallback? smss_0)"
"(fallback-loop_843(fallback-rest smss_0))"
" #f))"
"(let-values() b_0)))"
" c1_845)"
"(let-values()"
"(let-values(((scopes_847)"
"(scope-set-at-fallback"
" s_836"
"(fallback-first smss_0)"
" phase_837)))"
"(let-values(((best-scopes_848 best-binding_849)"
"(let-values(((ht_850) scopes_847))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys ht_850)))"
"((letrec-values(((for-loop_851)"
"(lambda(best-scopes_0"
" best-binding_0"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_855)"
"(unsafe-immutable-hash-iterate-key"
" ht_850"
" i_0)))"
"(let-values(((best-scopes_856"
" best-binding_857)"
"(let-values(((ht_858"
" bulk-bindings_859)"
"(let-values(((table_862)"
"(scope-binding-table"
" sc_855)))"
"(if(hash?"
" table_862)"
"(values"
"(hash-ref"
" table_862"
" sym_842"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_862)"
" sym_842"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_862)))))"
"((s_860)"
" s_836)"
"((extra-shifts_861)"
" extra-shifts_841))"
"(begin"
" #t"
"((letrec-values(((for-loop_863)"
"(lambda(best-scopes_1"
" best-binding_1"
" i_1)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" i_1))"
"(let-values(((b-scopes_867)"
"(if(pair?"
" i_1)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_1)))"
"(let-values()"
"(hash-iterate-key"
" ht_858"
" i_1))))"
"((binding_868)"
"(if(pair?"
" i_1)"
"(let-values()"
"(let-values(((bulk_869)"
"(bulk-binding-at-bulk"
"(car"
" i_1))))"
"(let-values(((b-info_870)"
"(if(symbol-interned?"
" sym_842)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_869"
" s_860"
" extra-shifts_861)"
" sym_842"
" #f)"
" #f)))"
"(if b-info_870"
"((bulk-binding-create"
" bulk_869)"
" bulk_869"
" b-info_870"
" sym_842)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_858"
" i_1)))))"
"(let-values(((best-scopes_871"
" best-binding_872)"
"(let-values(((best-scopes_873)"
" best-scopes_1)"
"((best-binding_874)"
" best-binding_1))"
"(if(if b-scopes_867"
"(if binding_868"
"(subset?"
" b-scopes_867"
" scopes_847)"
" #f)"
" #f)"
"(let-values(((best-scopes_875)"
" best-scopes_873)"
"((best-binding_876)"
" best-binding_874))"
"(let-values(((best-scopes_877"
" best-binding_878)"
"(let-values()"
"(if(pair?"
" best-scopes_875)"
"(let-values()"
"(if(let-values(((lst_879)"
" best-scopes_875))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_879)))"
"((letrec-values(((for-loop_880)"
"(lambda(result_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((amb-scopes_883)"
"(unsafe-car"
" lst_0))"
"((rest_884)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((result_885)"
"(let-values()"
"(let-values(((result_887)"
"(let-values()"
"(let-values()"
"(subset?"
" amb-scopes_883"
" b-scopes_867)))))"
"(values"
" result_887)))))"
"(if(if(not"
"((lambda x_0"
"(not"
" result_885))"
" amb-scopes_883))"
"(not"
" #f)"
" #f)"
"(for-loop_880"
" result_885"
" rest_884)"
" result_885)))"
" result_0)))))"
" for-loop_880)"
" #t"
" lst_879)))"
"(let-values()"
"(values"
" b-scopes_867"
" binding_868))"
"(let-values()"
"(values"
"(cons"
" b-scopes_867"
" best-scopes_875)"
" #f))))"
"(if(not"
" best-scopes_875)"
"(let-values()"
"(values"
" b-scopes_867"
" binding_868))"
"(if(subset?"
" b-scopes_867"
" best-scopes_875)"
"(let-values()"
"(values"
" best-scopes_875"
" best-binding_876))"
"(if(subset?"
" best-scopes_875"
" b-scopes_867)"
"(let-values()"
"(values"
" b-scopes_867"
" binding_868))"
"(let-values()"
"(values"
"(list"
" best-scopes_875"
" b-scopes_867)"
" #f)))))))))"
"(values"
" best-scopes_877"
" best-binding_878)))"
"(values"
" best-scopes_873"
" best-binding_874)))))"
"(if(not"
" #f)"
"(for-loop_863"
" best-scopes_871"
" best-binding_872"
"(if(pair?"
" i_1)"
"(let-values()"
"(cdr"
" i_1))"
"(let-values()"
"(let-values(((or-part_889)"
"(hash-iterate-next"
" ht_858"
" i_1)))"
"(if or-part_889"
" or-part_889"
" bulk-bindings_859)))))"
"(values"
" best-scopes_871"
" best-binding_872))))"
"(values"
" best-scopes_1"
" best-binding_1))))))"
" for-loop_863)"
" best-scopes_0"
" best-binding_0"
"(let-values(((or-part_890)"
"(hash-iterate-first"
" ht_858)))"
"(if or-part_890"
" or-part_890"
" bulk-bindings_859)))))))"
"(if(not #f)"
"(for-loop_851"
" best-scopes_856"
" best-binding_857"
"(unsafe-immutable-hash-iterate-next"
" ht_850"
" i_0))"
"(values"
" best-scopes_856"
" best-binding_857))))"
"(values"
" best-scopes_0"
" best-binding_0))))))"
" for-loop_851)"
" #f"
" #f"
"(unsafe-immutable-hash-iterate-first ht_850))))))"
"(if(pair? best-scopes_848)"
"(let-values()"
"(if(fallback? smss_0)"
"(fallback-loop_843(fallback-rest smss_0))"
" ambiguous-value_838))"
"(if best-scopes_848"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_842"
" phase_837"
"(syntax-scopes s_836)"
"(fallback-first smss_0)"
" best-binding_849)"
"(if(let-values(((or-part_891)(not exactly?_839)))"
"(if or-part_891"
" or-part_891"
"(eqv?"
"(set-count scopes_847)"
"(set-count best-scopes_848))))"
"(if get-scopes?_840 best-scopes_848 best-binding_849)"
" #f)))"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_842"
" phase_837"
"(syntax-scopes s_836)"
"(fallback-first smss_0)"
" '#:none)"
"(if(fallback? smss_0)"
"(fallback-loop_843(fallback-rest smss_0))"
" #f))))))))))))))"
" fallback-loop_843)"
"(syntax-shifted-multi-scopes s_836)))))))))))))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_0 b_0 phase_0)"
"(begin"
" 'bound-identifier=?"
"(if(eq?(syntax-e$1 a_0)(syntax-e$1 b_0))"
"(equal?(syntax-scope-set a_0 phase_0)(syntax-scope-set b_0 phase_0))"
" #f))))"
"(define-values"
"(local-binding?)"
"(lambda(b_0)(begin(let-values(((or-part_2)(full-local-binding? b_0)))(if or-part_2 or-part_2(symbol? b_0))))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(b_0 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:local-binding)"
"(ser-push!_0(full-local-binding-key b_0))"
"(ser-push!_0(full-binding-free=id b_0))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_0 free=id_0)(begin(full-local-binding1.1 #f free=id_0 key_0))))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_0 free=id3_0 key6_0)"
"(begin"
" 'make-local-binding7"
"(let-values(((key_31) key6_0))"
"(let-values(((frame-id_32) frame-id2_0))"
"(let-values(((free=id_33) free=id3_0))"
"(let-values()"
"(if(if(not frame-id_32)(not free=id_33) #f)"
"(let-values() key_31)"
"(let-values()(full-local-binding1.1 frame-id_32 free=id_33 key_31))))))))))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_0 free=id12_0 key10_0 b16_0)"
"(begin"
" 'local-binding-update17"
"(let-values(((b_58) b16_0))"
"(let-values(((key_59)(if(eq? key10_0 unsafe-undefined)(local-binding-key b_58) key10_0)))"
"(let-values(((frame-id_60)(if(eq? frame-id11_0 unsafe-undefined)(binding-frame-id b_58) frame-id11_0)))"
"(let-values(((free=id_61)(if(eq? free=id12_0 unsafe-undefined)(binding-free=id b_58) free=id12_0)))"
"(let-values()"
"(let-values(((key21_63) key_59)((frame-id22_64) frame-id_60)((free=id23_65) free=id_61))"
"(make-local-binding7.1 frame-id22_64 free=id23_65 key21_63))))))))))"
"(define-values"
"(local-binding-key)"
"(lambda(b_0)(begin(if(full-local-binding? b_0)(full-local-binding-key b_0) b_0))))"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_0 info_0)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(exact-nonnegative-integer? v_0)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(identifier? v_0)))"
"(if or-part_5 or-part_5(if(procedure? v_0)(procedure-arity-includes? v_0 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_0)"
"(let-values()"
"(begin"
"(if(<= v_0(list-ref info_0 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_0"
"                                  \"initialized-field count\""
"(list-ref info_0 1))))"
"(if(member v_0(list-ref info_0 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_0)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_0 3)))"
"(if(identifier? v_0)"
"(let-values()(lambda(t_0) v_0))"
"(if(integer? v_0)"
"(let-values()"
"(lambda(t_0)"
"(let-values(((val_8)(ref_3 t_0 v_0)))(if(identifier? val_8) val_8(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_0)"
"(let-values(((id_10)(call-with-continuation-prompt(lambda()(v_0 t_0)))))"
"(begin"
"(if(identifier? id_10)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_10)))"
" id_10))))))))))))"
"(define-values"
"(struct:id-rename-transformer id-rename-transformer1.1 id-rename-transformer? id-rename-transformer-id)"
"(let-values(((struct:_11 make-_12 ?_13 -ref_14 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'id-rename-transformer)))))"
"(values struct:_11 make-_12 ?_13(make-struct-field-accessor -ref_14 0 'id))))"
"(define-values"
"(1/make-rename-transformer)"
"(lambda(id_0)"
"(begin"
" 'make-rename-transformer"
"(begin"
"(if(identifier? id_0)"
"(void)"
"          (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_0)))"
"(id-rename-transformer1.1 id_0)))))"
"(define-values"
"(1/rename-transformer-target)"
"(lambda(t_0)(begin 'rename-transformer-target((rename-transformer-value t_0) t_0))))"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_0 b_0 a-phase_0 b-phase_0)"
"(begin"
" 'free-identifier=?"
"(let-values(((ab_5)"
"(toplevel-as-symbol"
"(let-values(((a51_8) a_0)((a-phase52_9) a-phase_0)((temp53_10) #t))"
"(resolve+shift28.1 #f #f null unsafe-undefined temp53_10 a51_8 a-phase52_9)))))"
"(let-values(((bb_6)"
"(toplevel-as-symbol"
"(let-values(((b54_12) b_0)((b-phase55_13) b-phase_0)((temp56_14) #t))"
"(resolve+shift28.1 #f #f null unsafe-undefined temp56_14 b54_12 b-phase55_13)))))"
"(if(let-values(((or-part_15)(symbol? ab_5)))(if or-part_15 or-part_15(symbol? bb_6)))"
"(let-values()(eq? ab_5 bb_6))"
"(let-values()(same-binding? ab_5 bb_6))))))))"
"(define-values"
"(toplevel-as-symbol)"
"(lambda(b_0)"
"(begin"
"(if(if(module-binding? b_0)(top-level-module-path-index?(module-binding-module b_0)) #f)"
"(module-binding-sym b_0)"
" b_0))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_0 bb_0)"
"(begin"
"(if(module-binding? ab_0)"
"(let-values()"
"(if(module-binding? bb_0)"
"(if(eq?(module-binding-sym ab_0)(module-binding-sym bb_0))"
"(if(eqv?(module-binding-phase ab_0)(module-binding-phase bb_0))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_0))"
"(1/module-path-index-resolve(module-binding-module bb_0)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_0)"
"(let-values()(if(local-binding? bb_0)(eq?(local-binding-key ab_0)(local-binding-key bb_0)) #f))"
"          (let-values () (error \"bad binding\" ab_0)))))))"
"(define-values"
"(same-binding-nominals?)"
"(lambda(ab_0 bb_0)"
"(begin"
"(if(eq?"
"(1/module-path-index-resolve(module-binding-nominal-module ab_0))"
"(1/module-path-index-resolve(module-binding-nominal-module bb_0)))"
"(if(eqv?(module-binding-nominal-require-phase ab_0)(module-binding-nominal-require-phase bb_0))"
"(eqv?(module-binding-nominal-sym ab_0)(module-binding-nominal-sym bb_0))"
" #f)"
" #f))))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_0 phase_0)"
"(begin"
" 'identifier-binding-symbol"
"(let-values(((b_23)"
"(let-values(((id57_25) id_0)((phase58_26) phase_0)((temp59_27) #t))"
"(resolve+shift28.1 #f #f null unsafe-undefined temp59_27 id57_25 phase58_26))))"
"(if(symbol? b_23)"
"(let-values() b_23)"
"(if(module-binding? b_23)"
"(let-values()(module-binding-sym b_23))"
"(if(local-binding? b_23)(let-values()(local-binding-key b_23))(let-values()(syntax-e$1 id_0)))))))))"
"(define-values"
"(identifier-binding$1)"
"(let-values(((identifier-binding4_28)"
"(lambda(id2_0 phase3_0 top-level-symbol?1_0)"
"(begin"
" 'identifier-binding4"
"(let-values(((id_32) id2_0))"
"(let-values(((phase_33) phase3_0))"
"(let-values(((top-level-symbol?_34) top-level-symbol?1_0))"
"(let-values()"
"(let-values(((b_35)"
"(let-values(((id60_36) id_32)((phase61_37) phase_33))"
"(resolve+shift28.1 #f #f null unsafe-undefined #f id60_36 phase61_37))))"
"(if(module-binding? b_35)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_35))"
"(if top-level-symbol?_34(list(module-binding-nominal-sym b_35)) #f)"
"(list"
"(module-binding-module b_35)"
"(module-binding-sym b_35)"
"(module-binding-nominal-module b_35)"
"(module-binding-nominal-sym b_35)"
"(module-binding-phase b_35)"
"(module-binding-nominal-require-phase b_35)"
"(module-binding-nominal-phase b_35))))"
"(if(local-binding? b_35)(let-values() 'lexical)(let-values() #f))))))))))))"
"(case-lambda"
"((id_0 phase_0)(begin 'identifier-binding(identifier-binding4_28 id_0 phase_0 #f)))"
"((id_0 phase_0 top-level-symbol?1_0)(identifier-binding4_28 id_0 phase_0 top-level-symbol?1_0)))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_0 id_0 phase_0)"
"(begin"
"(if(1/rename-transformer? val_0)"
"(let-values()"
"(let-values(((free=id_46)(1/rename-transformer-target val_0)))"
"(if(syntax-property$1 free=id_46 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_47)"
"(let-values(((id65_49) id_0)((phase66_50) phase_0)((temp67_51) #t)((temp68_52) #t))"
"(resolve+shift28.1 #f temp67_51 null temp68_52 #f id65_49 phase66_50))))"
"(let-values(((temp62_53)(syntax-scope-set id_0 phase_0))"
"((temp63_54)(syntax-e$1 id_0))"
"((temp64_55)(binding-set-free=id b_47 free=id_46)))"
"(add-binding-in-scopes!20.1 #f temp62_53 temp63_54 temp64_55)))))))"
"(void)))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_0 free=id_0)"
"(begin"
"(if(module-binding? b_0)"
"(let-values()"
"(let-values(((b69_59) b_0)((free=id70_60) free=id_0))"
"(module-binding-update48.1"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" free=id70_60"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" b69_59)))"
"(if(local-binding? b_0)"
"(let-values()"
"(let-values(((b71_62) b_0)((free=id72_63) free=id_0))"
"(local-binding-update17.1 unsafe-undefined free=id72_63 unsafe-undefined b71_62)))"
"          (let-values () (error \"bad binding for free=id:\" b_0)))))))"
"(define-values"
"(struct:non-source-shift non-source-shift6.1 non-source-shift? non-source-shift-from non-source-shift-to)"
"(let-values(((struct:_64 make-_65 ?_66 -ref_67 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type 'non-source-shift #f 2 0 #f null 'prefab #f '(0 1) #f 'non-source-shift)))))"
"(values"
" struct:_64"
" make-_65"
" ?_66"
"(make-struct-field-accessor -ref_67 0 'from)"
"(make-struct-field-accessor -ref_67 1 'to))))"
"(define-values(shift-from)(lambda(s_0)(begin(if(pair? s_0)(car s_0)(non-source-shift-from s_0)))))"
"(define-values(shift-to)(lambda(s_0)(begin(if(pair? s_0)(cdr s_0)(non-source-shift-to s_0)))))"
"(define-values"
"(syntax-module-path-index-shift13.1)"
"(lambda(non-source?7_0 s10_0 from-mpi11_0 to-mpi12_0 inspector9_0)"
"(begin"
" 'syntax-module-path-index-shift13"
"(let-values(((s_96) s10_0))"
"(let-values(((from-mpi_97) from-mpi11_0))"
"(let-values(((to-mpi_98) to-mpi12_0))"
"(let-values(((inspector_99) inspector9_0))"
"(let-values(((non-source?_100) non-source?7_0))"
"(let-values()"
"(if(eq? from-mpi_97 to-mpi_98)"
"(let-values()(if inspector_99(syntax-set-inspector s_96 inspector_99) s_96))"
"(let-values()"
"(let-values(((shift_101)"
"(if non-source?_100"
"(non-source-shift6.1 from-mpi_97 to-mpi_98)"
"(cons from-mpi_97 to-mpi_98))))"
"(let-values(((the-struct_102) s_96))"
"(if(syntax?$1 the-struct_102)"
"(let-values(((mpi-shifts74_103)(shift-cons shift_101(syntax-mpi-shifts s_96)))"
"((inspector75_104)"
"(let-values(((or-part_106)(syntax-inspector s_96)))"
"(if or-part_106 or-part_106 inspector_99)))"
"((scope-propagations+tamper76_105)"
"(if(datum-has-elements?(syntax-content s_96))"
"(propagation-mpi-shift"
"(syntax-scope-propagations+tamper s_96)"
"(lambda(s_0)(shift-cons shift_101 s_0))"
" inspector_99"
"(syntax-scopes s_96)"
"(syntax-shifted-multi-scopes s_96)"
"(syntax-mpi-shifts s_96))"
"(syntax-scope-propagations+tamper s_96))))"
"(syntax1.1"
"(syntax-content the-struct_102)"
"(syntax-scopes the-struct_102)"
"(syntax-shifted-multi-scopes the-struct_102)"
" scope-propagations+tamper76_105"
" mpi-shifts74_103"
"(syntax-srcloc the-struct_102)"
"(syntax-props the-struct_102)"
" inspector75_104))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_102)))))))))))))))"
"(define-values"
"(shift-cons)"
"(lambda(shift_0 shifts_0)"
"(begin"
"(if(if(pair? shifts_0)(eq?(shift-from shift_0)(shift-from(car shifts_0))) #f)"
"(let-values() shifts_0)"
"(let-values()(cons shift_0 shifts_0))))))"
"(define-values"
"(resolve+shift28.1)"
"(lambda(ambiguous-value16_0 exactly?17_0 extra-shifts20_0 immediate?18_0 unbound-sym?19_0 s26_0 phase27_0)"
"(begin"
" 'resolve+shift28"
"(let-values(((s_148) s26_0))"
"(let-values(((phase_149) phase27_0))"
"(let-values(((ambiguous-value_150) ambiguous-value16_0))"
"(let-values(((exactly?_151) exactly?17_0))"
"(let-values(((immediate?_152)(if(eq? immediate?18_0 unsafe-undefined) exactly?_151 immediate?18_0)))"
"(let-values(((unbound-sym?_153) unbound-sym?19_0))"
"(let-values(((extra-shifts_154) extra-shifts20_0))"
"(let-values()"
"(let-values(((can-cache?_155)"
"(if(not exactly?_151)(if(not immediate?_152)(null? extra-shifts_154) #f) #f)))"
"(let-values(((c1_156)(if can-cache?_155(resolve+shift-cache-get s_148 phase_149) #f)))"
"(if c1_156"
"((lambda(b_0)(if(eq? b_0 '#:none)(if unbound-sym?_153(syntax-content s_148) #f) b_0))"
" c1_156)"
"(let-values()"
"(let-values(((immediate-b_158)"
"(let-values(((s77_161) s_148)"
"((phase78_162) phase_149)"
"((ambiguous-value79_163) ambiguous-value_150)"
"((exactly?80_164) exactly?_151)"
"((extra-shifts81_165) extra-shifts_154))"
"(resolve40.1"
" ambiguous-value79_163"
" exactly?80_164"
" extra-shifts81_165"
" #f"
" s77_161"
" phase78_162))))"
"(let-values(((b_159)"
"(if(if immediate-b_158"
"(if(not immediate?_152)(binding-free=id immediate-b_158) #f)"
" #f)"
"(let-values(((temp82_167)(binding-free=id immediate-b_158))"
"((phase83_168) phase_149)"
"((temp84_169)"
"(append extra-shifts_154(syntax-mpi-shifts s_148)))"
"((ambiguous-value85_170) ambiguous-value_150)"
"((exactly?86_171) exactly?_151)"
"((unbound-sym?87_172) unbound-sym?_153))"
"(resolve+shift28.1"
" ambiguous-value85_170"
" exactly?86_171"
" temp84_169"
" unsafe-undefined"
" unbound-sym?87_172"
" temp82_167"
" phase83_168))"
" immediate-b_158)))"
"(if(module-binding? b_159)"
"(let-values()"
"(let-values(((mpi-shifts_173)(syntax-mpi-shifts s_148)))"
"(if(null? mpi-shifts_173)"
"(let-values() b_159)"
"(let-values()"
"(let-values(((mod_174)(module-binding-module b_159)))"
"(let-values(((shifted-mod_175)"
"(apply-syntax-shifts mod_174 mpi-shifts_173)))"
"(let-values(((nominal-mod_176)(module-binding-nominal-module b_159)))"
"(let-values(((shifted-nominal-mod_177)"
"(if(eq? mod_174 nominal-mod_176)"
" shifted-mod_175"
"(apply-syntax-shifts"
" nominal-mod_176"
" mpi-shifts_173))))"
"(let-values(((result-b_178)"
"(if(if(eq? mod_174 shifted-mod_175)"
"(if(eq?"
" nominal-mod_176"
" shifted-nominal-mod_177)"
"(if(not(binding-free=id b_159))"
"(null?"
"(module-binding-extra-nominal-bindings"
" b_159))"
" #f)"
" #f)"
" #f)"
" b_159"
"(let-values(((b88_180) b_159)"
"((shifted-mod89_181) shifted-mod_175)"
"((shifted-nominal-mod90_182)"
" shifted-nominal-mod_177)"
"((temp91_183)"
"(if(binding-free=id b_159)"
"(let-values(((temp93_185)"
"(binding-free=id"
" b_159))"
"((s94_186) s_148))"
"(syntax-transfer-shifts36.1"
" #f"
" temp93_185"
" s94_186"
" #f))"
" #f))"
"((temp92_184)"
"(reverse$1"
"(let-values(((lst_187)"
"(module-binding-extra-nominal-bindings"
" b_159)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_187)))"
"((letrec-values(((for-loop_188)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((b_191)"
"(unsafe-car"
" lst_0))"
"((rest_192)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_193)"
"(let-values(((fold-var_194)"
" fold-var_0))"
"(let-values(((fold-var_195)"
"(let-values()"
"(cons"
"(let-values()"
"(apply-syntax-shifts-to-binding"
" b_191"
" mpi-shifts_173))"
" fold-var_194))))"
"(values"
" fold-var_195)))))"
"(if(not"
" #f)"
"(for-loop_188"
" fold-var_193"
" rest_192)"
" fold-var_193)))"
" fold-var_0)))))"
" for-loop_188)"
" null"
" lst_187))))))"
"(module-binding-update48.1"
" unsafe-undefined"
" temp92_184"
" unsafe-undefined"
" temp91_183"
" shifted-mod89_181"
" shifted-nominal-mod90_182"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" b88_180)))))"
"(begin"
"(if can-cache?_155"
"(let-values()"
"(resolve+shift-cache-set! s_148 phase_149 result-b_178))"
"(void))"
" result-b_178))))))))))"
"(let-values()"
"(begin"
"(if can-cache?_155"
"(let-values()"
"(resolve+shift-cache-set!"
" s_148"
" phase_149"
"(let-values(((or-part_196) b_159))(if or-part_196 or-part_196 '#:none))))"
"(void))"
"(let-values(((or-part_197) b_159))"
"(if or-part_197"
" or-part_197"
"(if unbound-sym?_153(syntax-content s_148) #f)))))))))))))))))))))))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_0 shifts_0)"
"(begin"
"(if(null? shifts_0)"
"(let-values() mpi_0)"
"(let-values()"
"(let-values(((shifted-mpi_241)(apply-syntax-shifts mpi_0(cdr shifts_0))))"
"(let-values(((shift_242)(car shifts_0)))"
"(module-path-index-shift shifted-mpi_241(shift-from shift_242)(shift-to shift_242)))))))))"
"(define-values"
"(apply-syntax-shifts-to-binding)"
"(lambda(b_0 shifts_0)"
"(begin"
"(if(null? shifts_0)"
"(let-values() b_0)"
"(let-values()"
"(let-values(((shifted-b_245)(apply-syntax-shifts-to-binding b_0(cdr shifts_0))))"
"(let-values(((shift_246)(car shifts_0)))"
"(binding-module-path-index-shift shifted-b_245(shift-from shift_246)(shift-to shift_246)))))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_0 from-mpi_0 to-mpi_0)"
"(begin"
"(if(module-binding? b_0)"
"(let-values()"
"(let-values(((b95_253) b_0)"
"((temp96_254)(module-path-index-shift(module-binding-module b_0) from-mpi_0 to-mpi_0))"
"((temp97_255)(module-path-index-shift(module-binding-nominal-module b_0) from-mpi_0 to-mpi_0))"
"((temp98_256)"
"(reverse$1"
"(let-values(((lst_257)(module-binding-extra-nominal-bindings b_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_257)))"
"((letrec-values(((for-loop_258)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((b_261)(unsafe-car lst_0))"
"((rest_262)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_263)"
"(let-values(((fold-var_264) fold-var_0))"
"(let-values(((fold-var_265)"
"(let-values()"
"(cons"
"(let-values()"
"(binding-module-path-index-shift"
" b_261"
" from-mpi_0"
" to-mpi_0))"
" fold-var_264))))"
"(values fold-var_265)))))"
"(if(not #f)"
"(for-loop_258 fold-var_263 rest_262)"
" fold-var_263)))"
" fold-var_0)))))"
" for-loop_258)"
" null"
" lst_257))))))"
"(module-binding-update48.1"
" unsafe-undefined"
" temp98_256"
" unsafe-undefined"
" unsafe-undefined"
" temp96_254"
" temp97_255"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" b95_253)))"
"(let-values() b_0)))))"
"(define-values"
"(syntax-transfer-shifts36.1)"
"(lambda(non-source?31_0 to-s34_0 from-s35_0 inspector33_0)"
"(begin"
" 'syntax-transfer-shifts36"
"(let-values(((to-s_270) to-s34_0))"
"(let-values(((from-s_271) from-s35_0))"
"(let-values(((inspector_272) inspector33_0))"
"(let-values(((non-source?_273) non-source?31_0))"
"(let-values()"
"(let-values(((to-s99_275) to-s_270)"
"((temp100_276)(syntax-mpi-shifts from-s_271))"
"((inspector101_277) inspector_272)"
"((non-source?102_278) non-source?_273))"
"(syntax-add-shifts44.1 non-source?102_278 to-s99_275 temp100_276 inspector101_277))))))))))"
"(define-values"
"(syntax-add-shifts44.1)"
"(lambda(non-source?39_0 to-s42_0 shifts43_0 inspector41_0)"
"(begin"
" 'syntax-add-shifts44"
"(let-values(((to-s_309) to-s42_0))"
"(let-values(((shifts_310) shifts43_0))"
"(let-values(((inspector_311) inspector41_0))"
"(let-values(((non-source?_312) non-source?39_0))"
"(let-values()"
"(if(if(null? shifts_310) inspector_311 #f)"
"(let-values()(syntax-set-inspector to-s_309 inspector_311))"
"(let-values()"
"(let-values(((lst_313)(reverse$1 shifts_310))((start_314) 0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_313)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_314)))"
"((letrec-values(((for-loop_315)"
"(lambda(s_0 lst_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0) #t #f)"
"(let-values(((shift_319)(unsafe-car lst_0))"
"((rest_320)(unsafe-cdr lst_0))"
"((i_321) pos_0))"
"(let-values(((s_322)"
"(let-values(((s_323) s_0))"
"(let-values(((s_324)"
"(let-values()"
"(let-values(((s103_326) s_323)"
"((temp104_327)"
"(shift-from shift_319))"
"((temp105_328)"
"(shift-to shift_319))"
"((temp106_329)"
"(if(zero? i_321)"
" inspector_311"
" #f))"
"((non-source?107_330)"
" non-source?_312))"
"(syntax-module-path-index-shift13.1"
" non-source?107_330"
" s103_326"
" temp104_327"
" temp105_328"
" temp106_329)))))"
"(values s_324)))))"
"(if(not #f)(for-loop_315 s_322 rest_320(+ pos_0 1)) s_322)))"
" s_0)))))"
" for-loop_315)"
" to-s_309"
" lst_313"
" start_314)))))))))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_0 insp_0)"
"(begin"
"(let-values(((the-struct_359) s_0))"
"(if(syntax?$1 the-struct_359)"
"(let-values(((inspector108_360)"
"(let-values(((or-part_362)(syntax-inspector s_0)))(if or-part_362 or-part_362 insp_0)))"
"((scope-propagations+tamper109_361)"
"(if(datum-has-elements?(syntax-content s_0))"
"(propagation-mpi-shift"
"(syntax-scope-propagations+tamper s_0)"
" #f"
" insp_0"
"(syntax-scopes s_0)"
"(syntax-shifted-multi-scopes s_0)"
"(syntax-mpi-shifts s_0))"
"(syntax-scope-propagations+tamper s_0))))"
"(syntax1.1"
"(syntax-content the-struct_359)"
"(syntax-scopes the-struct_359)"
"(syntax-shifted-multi-scopes the-struct_359)"
" scope-propagations+tamper109_361"
"(syntax-mpi-shifts the-struct_359)"
"(syntax-srcloc the-struct_359)"
"(syntax-props the-struct_359)"
" inspector108_360))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_359))))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module49_363)"
"(lambda(s48_0 source?47_0)"
"(begin"
" 'syntax-source-module49"
"(let-values(((s_366) s48_0))"
"(let-values(((source?_367) source?47_0))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_366)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_366)))"
"(let-values(((lst_368)(reverse$1(syntax-mpi-shifts s_366))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_368)))"
"((letrec-values(((for-loop_369)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((shift_372)(unsafe-car lst_0))"
"((rest_373)(unsafe-cdr lst_0)))"
"(let-values(((result_374)"
"(let-values(((result_375) result_0))"
"(if(non-source-shift? shift_372)"
" result_375"
"(let-values()"
"(let-values(((result_377)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_378)"
"(car"
" shift_372)))"
"(let-values(((path_379"
" base_380)"
"(1/module-path-index-split"
" from-mpi_378)))"
"(if(not path_379)"
"(if(module-path-index-resolved"
" from-mpi_378)"
"(let-values(((mpi_381)"
"(apply-syntax-shifts"
" from-mpi_378"
"(syntax-mpi-shifts"
" s_366))))"
"(if source?_367"
"(1/resolved-module-path-name"
"(1/module-path-index-resolve"
" mpi_381"
" #f))"
" mpi_381))"
" #f)"
" #f)))))))"
"(values result_377)))))))"
"(if(if(not((lambda x_0 result_374) shift_372))"
"(not #f)"
" #f)"
"(for-loop_369 result_374 rest_373)"
" result_374)))"
" result_0)))))"
" for-loop_369)"
" #f"
" lst_368)))))))))))"
"(case-lambda"
"((s_0)(begin 'syntax-source-module(syntax-source-module49_363 s_0 #f)))"
"((s_0 source?47_0)(syntax-source-module49_363 s_0 source?47_0)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_0)"
"(begin"
" 'identifier-prune-to-source-module"
"(begin"
"(if(identifier? id_0)"
"(void)"
"          (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_0)))"
"(let-values(((the-struct_387)(datum->syntax$1 #f(syntax-e$1 id_0) id_0 id_0)))"
"(if(syntax?$1 the-struct_387)"
"(let-values(((mpi-shifts110_388)(syntax-mpi-shifts id_0)))"
"(syntax1.1"
"(syntax-content the-struct_387)"
"(syntax-scopes the-struct_387)"
"(syntax-shifted-multi-scopes the-struct_387)"
"(syntax-scope-propagations+tamper the-struct_387)"
" mpi-shifts110_388"
"(syntax-srcloc the-struct_387)"
"(syntax-props the-struct_387)"
"(syntax-inspector the-struct_387)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_387)))))))"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'provided"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(p_0 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:provided)"
"(ser-push!_0(provided-binding p_0))"
"(ser-push!_0(provided-protected? p_0))"
"(ser-push!_0(provided-syntax? p_0))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'provided)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'binding)"
"(make-struct-field-accessor -ref_4 1 'protected?)"
"(make-struct-field-accessor -ref_4 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_0)(begin(if(provided? v_0)(provided-binding v_0) v_0))))"
"(define-values(provided-as-protected?)(lambda(v_0)(begin(if(provided? v_0)(provided-protected? v_0) #f))))"
"(define-values(provided-as-transformer?)(lambda(v_0)(begin(if(provided? v_0)(provided-syntax? v_0) #f))))"
"(define-values"
"(deserialize-provided)"
"(lambda(binding_0 protected?_0 syntax?_0)(begin(provided1.1 binding_0 protected?_0 syntax?_0))))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_0 phase-shift4_0 provide-phase-level3_0 self1_0 binding/p9_0 sym10_0)"
"(begin"
" 'provide-binding-to-require-binding11"
"(let-values(((binding/p_18) binding/p9_0))"
"(let-values(((sym_19) sym10_0))"
"(let-values(((self_20) self1_0))"
"(let-values(((mpi_21) mpi2_0))"
"(let-values(((provide-phase-level_22) provide-phase-level3_0))"
"(let-values(((phase-shift_23) phase-shift4_0))"
"(let-values()"
"(let-values(((binding_24)(provided-as-binding binding/p_18)))"
"(let-values(((from-mod_25)(module-binding-module binding_24)))"
"(let-values(((binding17_27) binding_24)"
"((temp18_28)(module-path-index-shift from-mod_25 self_20 mpi_21))"
"((mpi19_29) mpi_21)"
"((provide-phase-level20_30) provide-phase-level_22)"
"((sym21_31) sym_19)"
"((phase-shift22_32) phase-shift_23)"
"((temp23_33) #f)"
"((temp24_34)"
"(if(not(provided-as-protected? binding/p_18))"
"(module-binding-extra-inspector binding_24)"
" #f))"
"((null25_35) null))"
"(module-binding-update48.1"
" temp24_34"
" null25_35"
" temp23_33"
" unsafe-undefined"
" temp18_28"
" mpi19_29"
" provide-phase-level20_30"
" phase-shift22_32"
" sym21_31"
" unsafe-undefined"
" unsafe-undefined"
" binding17_27))))))))))))))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-prefix"
" bulk-binding-excepts"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_60 make-_61 ?_62 -ref_63 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_0 ser-push!_0 reachable-scopes_0)"
"(begin"
"(ser-push!_0 'tag '#:bulk-binding)"
"(ser-push!_0(bulk-binding-prefix b_0))"
"(ser-push!_0(bulk-binding-excepts b_0))"
"(ser-push!_0(bulk-binding-mpi b_0))"
"(ser-push!_0(bulk-binding-provide-phase-level b_0))"
"(ser-push!_0(bulk-binding-phase-shift b_0))"
"(ser-push!_0 'tag '#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_0 mpi-shifts_0)"
"(let-values(((or-part_120)(bulk-binding-provides b_0)))"
"(if or-part_120"
" or-part_120"
"(let-values(((mod-name_121)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_0) mpi-shifts_0))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-bulk-binding-registry b_0)"
"(void)"
"(let-values()"
"(error"
"                                                     \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_121)))"
"(values))))"
"(let-values(((table_122)"
"(bulk-binding-registry-table(bulk-binding-bulk-binding-registry b_0))))"
"(let-values(((bulk-provide_123)(hash-ref table_122 mod-name_121 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_123"
"(void)"
"(let-values()"
"(error"
"                                                           \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_121)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self!"
" b_0"
"(bulk-provide-self bulk-provide_123))"
"(values))))"
"(let-values(((provides_124)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_123)"
"(bulk-binding-provide-phase-level b_0))))"
"(let-values(((excepts_125)(bulk-binding-excepts b_0)))"
"(let-values(((prefix_126)(bulk-binding-prefix b_0)))"
"(let-values(((adjusted-provides_127)"
"(if(let-values(((or-part_128) prefix_126))"
"(if or-part_128"
" or-part_128"
"(positive?(hash-count excepts_125))))"
"(let-values()"
"(bulk-provides-add-prefix-remove-exceptions"
" provides_124"
" prefix_126"
" excepts_125))"
"(let-values() provides_124))))"
"(begin"
"(set-bulk-binding-provides! b_0 adjusted-provides_127)"
" adjusted-provides_127))))))))))))))"
"(lambda(b_0 binding_0 sym_0)"
"(let-values(((binding27_133) binding_0)"
"((temp28_134)"
"(if(bulk-binding-prefix b_0)"
"(string->symbol"
"(substring"
"(symbol->string sym_0)"
"(string-length(symbol->string(bulk-binding-prefix b_0)))))"
" sym_0))"
"((temp29_135)(bulk-binding-self b_0))"
"((temp30_136)(bulk-binding-mpi b_0))"
"((temp31_137)(bulk-binding-provide-phase-level b_0))"
"((temp32_138)(bulk-binding-phase-shift b_0)))"
"(provide-binding-to-require-binding11.1"
" temp30_136"
" temp32_138"
" temp31_137"
" temp29_135"
" binding27_133"
" temp28_134))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'bulk-binding)))))"
"(values"
" struct:_60"
" make-_61"
" ?_62"
"(make-struct-field-accessor -ref_63 0 'provides)"
"(make-struct-field-accessor -ref_63 1 'prefix)"
"(make-struct-field-accessor -ref_63 2 'excepts)"
"(make-struct-field-accessor -ref_63 3 'self)"
"(make-struct-field-accessor -ref_63 4 'mpi)"
"(make-struct-field-accessor -ref_63 5 'provide-phase-level)"
"(make-struct-field-accessor -ref_63 6 'phase-shift)"
"(make-struct-field-accessor -ref_63 7 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_64 0 'provides)"
"(make-struct-field-mutator -set!_64 3 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(prefix_0 excepts_0 mpi_0 provide-phase-level_0 phase-shift_0 bulk-binding-registry_0)"
"(begin"
"(bulk-binding14.1 #f prefix_0 excepts_0 #f mpi_0 provide-phase-level_0 phase-shift_0 bulk-binding-registry_0))))"
"(define-values"
"(bulk-provides-add-prefix-remove-exceptions)"
"(lambda(provides_0 prefix_0 excepts_0)"
"(begin"
"(let-values(((ht_148) provides_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_148)))"
"((letrec-values(((for-loop_149)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_152 val_153)(hash-iterate-key+value ht_148 i_0)))"
"(let-values(((table_154)"
"(let-values(((table_155) table_0))"
"(if(hash-ref excepts_0 sym_152 #f)"
" table_155"
"(let-values(((table_156) table_155))"
"(if(symbol-interned? sym_152)"
"(let-values(((table_157) table_156))"
"(let-values(((table_158)"
"(let-values()"
"(let-values(((key_159 val_160)"
"(let-values()"
"(values"
"(if prefix_0"
"(string->symbol"
"(format"
"                                                                                                 \"~a~a\""
" prefix_0"
" sym_152))"
" sym_152)"
" val_153))))"
"(hash-set table_157 key_159 val_160)))))"
"(values table_158)))"
" table_156))))))"
"(if(not #f)(for-loop_149 table_154(hash-iterate-next ht_148 i_0)) table_154)))"
" table_0)))))"
" for-loop_149)"
" '#hash()"
"(hash-iterate-first ht_148)))))))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_161 make-_162 ?_163 -ref_164 -set!_165)"
"(let-values()"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))))"
"(values"
" struct:_161"
" make-_162"
" ?_163"
"(make-struct-field-accessor -ref_164 0 'self)"
"(make-struct-field-accessor -ref_164 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_186 make-_187 ?_188 -ref_189 -set!_190)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))))"
"(values struct:_186 make-_187 ?_188(make-struct-field-accessor -ref_189 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(begin(bulk-binding-registry16.1(make-hasheq)))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_0 mod-name_0 self_0 provides_0)"
"(begin"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_0)"
" mod-name_0"
"(bulk-provide15.1 self_0 provides_0)))))"
"(define-values"
"(registered-bulk-provide?)"
"(lambda(bulk-binding-registry_0 mod-name_0)"
"(begin(if(hash-ref(bulk-binding-registry-table bulk-binding-registry_0) mod-name_0 #f) #t #f))))"
"(define-values(generate-lift-key)(lambda()(begin(gensym 'lift))))"
"(define-values"
"(struct:root-expand-context/outer"
" root-expand-context/outer1.1"
" root-expand-context/outer?"
" root-expand-context/outer-inner"
" root-expand-context/outer-post-expansion"
" root-expand-context/outer-use-site-scopes"
" root-expand-context/outer-frame-id)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'root-expand-context/outer)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'inner)"
"(make-struct-field-accessor -ref_9 1 'post-expansion)"
"(make-struct-field-accessor -ref_9 2 'use-site-scopes)"
"(make-struct-field-accessor -ref_9 3 'frame-id))))"
"(define-values"
"(struct:root-expand-context/inner"
" root-expand-context/inner2.1"
" root-expand-context/inner?"
" root-expand-context/inner-self-mpi"
" root-expand-context/inner-module-scopes"
" root-expand-context/inner-top-level-bind-scope"
" root-expand-context/inner-all-scopes-stx"
" root-expand-context/inner-defined-syms"
" root-expand-context/inner-counter"
" root-expand-context/inner-lift-key)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context/inner"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'root-expand-context/inner)))))"
"(values"
" struct:_41"
" make-_42"
" ?_43"
"(make-struct-field-accessor -ref_44 0 'self-mpi)"
"(make-struct-field-accessor -ref_44 1 'module-scopes)"
"(make-struct-field-accessor -ref_44 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_44 3 'all-scopes-stx)"
"(make-struct-field-accessor -ref_44 4 'defined-syms)"
"(make-struct-field-accessor -ref_44 5 'counter)"
"(make-struct-field-accessor -ref_44 6 'lift-key))))"
"(define-values"
"(root-expand-context/make)"
"(lambda(self-mpi_0"
" module-scopes_0"
" post-expansion_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" use-site-scopes_0"
" defined-syms_0"
" frame-id_0"
" counter_0"
" lift-key_0)"
"(begin"
"(root-expand-context/outer1.1"
"(root-expand-context/inner2.1"
" self-mpi_0"
" module-scopes_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" defined-syms_0"
" counter_0"
" lift-key_0)"
" post-expansion_0"
" use-site-scopes_0"
" frame-id_0))))"
"(define-values"
"(root-expand-context-post-expansion)"
"(lambda(v_0)(begin(root-expand-context/outer-post-expansion v_0))))"
"(define-values"
"(root-expand-context-use-site-scopes)"
"(lambda(v_0)(begin(root-expand-context/outer-use-site-scopes v_0))))"
"(define-values(root-expand-context-frame-id)(lambda(v_0)(begin(root-expand-context/outer-frame-id v_0))))"
"(define-values"
"(root-expand-context-self-mpi)"
"(lambda(v_0)(begin(root-expand-context/inner-self-mpi(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(root-expand-context-module-scopes)"
"(lambda(v_0)(begin(root-expand-context/inner-module-scopes(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(root-expand-context-top-level-bind-scope)"
"(lambda(v_0)(begin(root-expand-context/inner-top-level-bind-scope(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(root-expand-context-all-scopes-stx)"
"(lambda(v_0)(begin(root-expand-context/inner-all-scopes-stx(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(root-expand-context-defined-syms)"
"(lambda(v_0)(begin(root-expand-context/inner-defined-syms(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(root-expand-context-counter)"
"(lambda(v_0)(begin(root-expand-context/inner-counter(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(root-expand-context-lift-key)"
"(lambda(v_0)(begin(root-expand-context/inner-lift-key(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(make-root-expand-context13.1)"
"(lambda(all-scopes-stx7_0 initial-scopes4_0 outside-scope5_0 post-expansion-scope6_0 self-mpi3_0)"
"(begin"
" 'make-root-expand-context13"
"(let-values(((self-mpi_119) self-mpi3_0))"
"(let-values(((initial-scopes_120) initial-scopes4_0))"
"(let-values(((outside-scope_121)"
"(if(eq? outside-scope5_0 unsafe-undefined) top-level-common-scope outside-scope5_0)))"
"(let-values(((post-expansion-scope_122)"
"(if(eq? post-expansion-scope6_0 unsafe-undefined)"
"(new-multi-scope 'top-level)"
" post-expansion-scope6_0)))"
"(let-values(((all-scopes-stx_123) all-scopes-stx7_0))"
"(let-values()"
"(let-values(((module-scopes_124)"
"(list* post-expansion-scope_122 outside-scope_121 initial-scopes_120)))"
"(root-expand-context/make"
" self-mpi_119"
" module-scopes_124"
" post-expansion-scope_122"
"(new-scope 'module)"
"(let-values(((or-part_125) all-scopes-stx_123))"
"(if or-part_125 or-part_125(add-scopes empty-syntax module-scopes_124)))"
"(box null)"
"(make-hasheqv)"
"                     (string->uninterned-symbol \"root-frame\")"
"(box 0)"
"(generate-lift-key))))))))))))"
"(define-values"
"(apply-post-expansion)"
"(lambda(pe_0 s_0)"
"(begin"
"(if(not pe_0)"
"(let-values() s_0)"
"(if(shifted-multi-scope? pe_0)"
"(let-values()(push-scope s_0 pe_0))"
"(if(pair? pe_0)"
"(let-values()"
"(let-values(((temp18_151)(push-scope s_0(car pe_0)))((temp19_152)(cdr pe_0)))"
"(syntax-add-shifts44.1 #f temp18_151 temp19_152 #f)))"
"(let-values()(pe_0 s_0))))))))"
"(define-values"
"(post-expansion-scope)"
"(lambda(pe_0)"
"(begin"
"(if(shifted-multi-scope? pe_0)"
"(let-values() pe_0)"
"(if(pair? pe_0)"
"(let-values()(car pe_0))"
"          (let-values () (error 'post-expansion-scope \"internal error: cannot extract scope from ~s\" pe_0)))))))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_0 orig-self_0 new-self_0)"
"(begin"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_0))"
"(apply-post-expansion(root-expand-context-post-expansion ctx_0) empty-syntax)"
"(let-values(((temp20_157)(root-expand-context-all-scopes-stx ctx_0))"
"((orig-self21_158) orig-self_0)"
"((new-self22_159) new-self_0))"
"(syntax-module-path-index-shift13.1 #f temp20_157 orig-self21_158 new-self22_159 #f))"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_0)))"
"(let-values(((ht_160)(root-expand-context-defined-syms ctx_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_160)))"
"((letrec-values(((for-loop_161)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_164 ht_165)(hash-iterate-key+value ht_160 i_0)))"
"(let-values(((table_166)"
"(let-values(((table_167) table_0))"
"(let-values(((table_168)"
"(let-values()"
"(let-values(((key_169 val_170)"
"(let-values()"
"(values phase_164 ht_165))))"
"(hash-set table_167 key_169 val_170)))))"
"(values table_168)))))"
"(if(not #f)"
"(for-loop_161 table_166(hash-iterate-next ht_160 i_0))"
" table_166)))"
" table_0)))))"
" for-loop_161)"
" '#hasheqv()"
"(hash-iterate-first ht_160))))"
"(root-expand-context-frame-id ctx_0)"
"(unbox(root-expand-context-counter ctx_0)))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_0 self_0)"
"(begin"
"(let-values(((vec_173)(if(syntax?$1 vec-s_0)(syntax-e$1 vec-s_0) #f)))"
"(begin"
"(if(if(vector? vec_173)"
"(if(=(vector-length vec_173) 7)"
"(if(syntax?$1(vector-ref vec_173 0))"
"(if(syntax-with-one-scope?(vector-ref vec_173 1))"
"(if(syntax?$1(vector-ref vec_173 2))"
"(if(syntax?$1(vector-ref vec_173 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_173 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_173 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_173 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"            (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_0)))"
"(root-expand-context/make"
" self_0"
"(extract-scope-list(vector-ref vec_173 0))"
"(cons(extract-scope(vector-ref vec_173 1))(extract-shifts(vector-ref vec_173 1)))"
"(new-scope 'module)"
"(vector-ref vec_173 2)"
"(box(extract-scope-list(vector-ref vec_173 3)))"
"(unpack-defined-syms(vector-ref vec_173 4))"
"(syntax-e$1(vector-ref vec_173 5))"
"(box(syntax-e$1(vector-ref vec_173 6)))"
"(generate-lift-key)))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_0)"
"(begin"
"(let-values(((ht_175) v_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_175)))"
"((letrec-values(((for-loop_176)"
"(lambda(result_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_179 ht-s_180)(hash-iterate-key+value ht_175 i_0)))"
"(let-values(((result_181)"
"(let-values()"
"(let-values(((result_183)"
"(let-values()"
"(let-values()"
"(if(phase? phase_179)"
"(if(hash?(syntax-e$1 ht-s_180))"
"(let-values(((ht_184)(syntax-e$1 ht-s_180)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_184)))"
"((letrec-values(((for-loop_185)"
"(lambda(result_1 i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((sym_188"
" id_189)"
"(hash-iterate-key+value"
" ht_184"
" i_1)))"
"(let-values(((result_190)"
"(let-values()"
"(let-values(((result_192)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_188)"
"(identifier?"
" id_189)"
" #f)))))"
"(values"
" result_192)))))"
"(if(if(not"
"((lambda x_0"
"(not"
" result_190))"
" sym_188"
" id_189))"
"(not #f)"
" #f)"
"(for-loop_185"
" result_190"
"(hash-iterate-next"
" ht_184"
" i_1))"
" result_190)))"
" result_1)))))"
" for-loop_185)"
" #t"
"(hash-iterate-first ht_184))))"
" #f)"
" #f)))))"
"(values result_183)))))"
"(if(if(not((lambda x_0(not result_181)) phase_179 ht-s_180))(not #f) #f)"
"(for-loop_176 result_181(hash-iterate-next ht_175 i_0))"
" result_181)))"
" result_0)))))"
" for-loop_176)"
" #t"
"(hash-iterate-first ht_175)))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_0)(begin(map2 generalize-scope(set->list(syntax-scope-set stx_0 0))))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_0)(begin(if(syntax?$1 stx_0)(= 1(set-count(syntax-scope-set stx_0 0))) #f))))"
"(define-values"
"(extract-scope)"
"(lambda(stx_0)(begin(let-values(((s_198)(syntax-scope-set stx_0 0)))(generalize-scope(set-first s_198))))))"
"(define-values(extract-shifts)(lambda(stx_0)(begin(syntax-mpi-shifts stx_0))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_0)"
"(begin"
"(hash-copy"
"(let-values(((ht_201)(syntax-e$1 v_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_201)))"
"((letrec-values(((for-loop_202)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_205 ht-s_206)(hash-iterate-key+value ht_201 i_0)))"
"(let-values(((table_207)"
"(let-values(((table_208) table_0))"
"(let-values(((table_209)"
"(let-values()"
"(let-values(((key_210 val_211)"
"(let-values()"
"(values"
" phase_205"
"(hash-copy"
"(let-values(((ht_212)"
"(syntax-e$1"
" ht-s_206)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_212)))"
"((letrec-values(((for-loop_213)"
"(lambda(table_1"
" i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((sym_216"
" id_217)"
"(hash-iterate-key+value"
" ht_212"
" i_1)))"
"(let-values(((table_218)"
"(let-values(((table_219)"
" table_1))"
"(let-values(((table_220)"
"(let-values()"
"(let-values(((key_221"
" val_222)"
"(let-values()"
"(values"
" sym_216"
" id_217))))"
"(hash-set"
" table_219"
" key_221"
" val_222)))))"
"(values"
" table_220)))))"
"(if(not"
" #f)"
"(for-loop_213"
" table_218"
"(hash-iterate-next"
" ht_212"
" i_1))"
" table_218)))"
" table_1)))))"
" for-loop_213)"
" '#hash()"
"(hash-iterate-first"
" ht_212)))))))))"
"(hash-set table_208 key_210 val_211)))))"
"(values table_209)))))"
"(if(not #f)(for-loop_202 table_207(hash-iterate-next ht_201 i_0)) table_207)))"
" table_0)))))"
" for-loop_202)"
" '#hasheqv()"
"(hash-iterate-first ht_201))))))))"
"(define-values(1/primitive-table) primitive-table)"
"(define-values(1/primitive->compiled-position) primitive->compiled-position)"
"(define-values(1/compiled-position->primitive) compiled-position->primitive)"
"(define-values(1/primitive-in-category?) primitive-in-category?)"
"(define-values(1/linklet?) linklet?)"
"(define-values(1/compile-linklet) compile-linklet)"
"(define-values(1/recompile-linklet) recompile-linklet)"
"(define-values(1/eval-linklet) eval-linklet)"
"(define-values(1/read-compiled-linklet) read-compiled-linklet)"
"(define-values(1/instantiate-linklet) instantiate-linklet)"
"(define-values(1/linklet-import-variables) linklet-import-variables)"
"(define-values(1/linklet-export-variables) linklet-export-variables)"
"(define-values(1/instance?) instance?)"
"(define-values(1/make-instance) make-instance)"
"(define-values(1/instance-name) instance-name)"
"(define-values(1/instance-data) instance-data)"
"(define-values(1/instance-variable-names) instance-variable-names)"
"(define-values(1/instance-variable-value) instance-variable-value)"
"(define-values(1/instance-set-variable-value!) instance-set-variable-value!)"
"(define-values(1/instance-unset-variable!) instance-unset-variable!)"
"(define-values(1/linklet-directory?) linklet-directory?)"
"(define-values(1/hash->linklet-directory) hash->linklet-directory)"
"(define-values(1/linklet-directory->hash) linklet-directory->hash)"
"(define-values(1/linklet-bundle?) linklet-bundle?)"
"(define-values(1/hash->linklet-bundle) hash->linklet-bundle)"
"(define-values(1/linklet-bundle->hash) linklet-bundle->hash)"
"(define-values(1/variable-reference?) variable-reference?)"
"(define-values(1/variable-reference->instance) variable-reference->instance)"
"(define-values(1/variable-reference-constant?) variable-reference-constant?)"
"(define-values(1/variable-reference-from-unsafe?) variable-reference-from-unsafe?)"
"(void"
"(if 1/variable-reference-constant?"
"(void)"
"    (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'declarations)"
"(make-struct-field-accessor -ref_4 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(begin(module-registry1.1(make-hasheq)(box #f)))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_0 proc_0)"
"(begin"
"(let-values(((lock-box_28)(module-registry-lock-box r_0)))"
"((letrec-values(((loop_29)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((v_30)(unbox lock-box_28)))"
"(if(let-values(((or-part_31)(not v_30)))"
"(if or-part_31 or-part_31(sync/timeout 0(car v_30)(cdr v_30))))"
"(let-values()"
"(let-values(((sema_32)(make-semaphore)))"
"(let-values(((lock_33)(cons(semaphore-peek-evt sema_32)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_28 v_30 lock_33)"
"(let-values()(begin(proc_0) void))"
"(let-values()(lambda()(loop_29)))))"
"(lambda()(semaphore-post sema_32)))))))"
"(if(eq?(current-thread)(cdr v_30))"
"(let-values()(proc_0))"
"(let-values()(begin(sync(car v_30)(cdr v_30))(loop_29))))))))))"
" loop_29))))))"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" namespace-module-registry$1"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:custom-write"
"(lambda(ns_0 port_0 mode_0)"
"                         (let-values ((() (begin (write-string \"#<namespace\" port_0) (values))))"
"(let-values(((n_94)(namespace-source-name ns_0)))"
"(let-values((()"
"(begin"
"(if n_94"
"                                               (let-values () (fprintf port_0 \":~a\" (namespace->name ns_0)))"
"(void))"
"(values))))"
"(let-values(((0-phase_95)(namespace-0-phase ns_0)))"
"(let-values(((phase-level_96)(phase-(namespace-phase ns_0) 0-phase_95)))"
"(begin"
"(if(zero-phase? phase-level_96)"
"(void)"
"                                       (let-values () (fprintf port_0 \":~s\" phase-level_96)))"
"(if(zero-phase? 0-phase_95)"
"(void)"
"(let-values()"
"                                         (fprintf port_0 \"~a~s\" (if (positive? 0-phase_95) \"+\" \"\") 0-phase_95)))"
"                                     (write-string \">\" port_0))))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'mpi)"
"(make-struct-field-accessor -ref_4 1 'source-name)"
"(make-struct-field-accessor -ref_4 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_4 3 'phase)"
"(make-struct-field-accessor -ref_4 4 '0-phase)"
"(make-struct-field-accessor -ref_4 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_4 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_4 7 'module-registry)"
"(make-struct-field-accessor -ref_4 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_4 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_4 10 'root-namespace)"
"(make-struct-field-accessor -ref_4 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_4 12 'inspector)"
"(make-struct-field-accessor -ref_4 13 'available-module-instances)"
"(make-struct-field-accessor -ref_4 14 'module-instances)"
"(make-struct-field-mutator -set!_5 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_97 make-_98 ?_99 -ref_100 -set!_101)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'definitions"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'definitions)))))"
"(values"
" struct:_97"
" make-_98"
" ?_99"
"(make-struct-field-accessor -ref_100 0 'variables)"
"(make-struct-field-accessor -ref_100 1 'transformers))))"
"(define-values(make-namespace)(lambda()(begin(let-values()(new-namespace8.1 #t unsafe-undefined #f)))))"
"(define-values"
"(new-namespace8.1)"
"(lambda(register?4_0 root-expand-ctx3_0 share-from-ns7_0)"
"(begin"
" 'new-namespace8"
"(let-values(((share-from-ns_125) share-from-ns7_0))"
"(let-values(((root-expand-ctx_126)"
"(if(eq? root-expand-ctx3_0 unsafe-undefined)"
"(let-values(((top-level-module-path-index20_128) top-level-module-path-index))"
"(make-root-expand-context13.1"
" #f"
" null"
" unsafe-undefined"
" unsafe-undefined"
" top-level-module-path-index20_128))"
" root-expand-ctx3_0)))"
"(let-values(((register?_129) register?4_0))"
"(let-values()"
"(let-values(((phase_130)(if share-from-ns_125(namespace-phase share-from-ns_125) 0)))"
"(let-values(((ns_131)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_126)"
" phase_130"
" phase_130"
"(make-small-hasheqv)"
"(make-small-hasheqv)"
"(if share-from-ns_125"
"(namespace-module-registry$1 share-from-ns_125)"
"(make-module-registry))"
"(if share-from-ns_125"
"(namespace-bulk-binding-registry share-from-ns_125)"
"(make-bulk-binding-registry))"
"(make-small-hasheq)"
"(if share-from-ns_125"
"(let-values(((or-part_132)(namespace-root-namespace share-from-ns_125)))"
"(if or-part_132 or-part_132 share-from-ns_125))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_125"
"(namespace-available-module-instances share-from-ns_125)"
"(make-hasheqv))"
"(if share-from-ns_125(namespace-module-instances share-from-ns_125)(make-hasheqv)))))"
"(begin"
"(if register?_129"
"(let-values()(small-hash-set!(namespace-phase-to-namespace ns_131) phase_130 ns_131))"
"(void))"
" ns_131))))))))))"
"(define-values"
"(1/current-namespace)"
"(make-parameter"
"(make-namespace)"
"(lambda(v_0)"
"(begin"
"       (if (1/namespace? v_0) (void) (let-values () (raise-argument-error 'current-namespace \"namespace?\" v_0)))"
" v_0))))"
"(define-values"
"(namespace-get-root-expand-ctx)"
"(lambda(ns_0)(begin(force(unbox(namespace-root-expand-ctx ns_0))))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_0 root-ctx_0)(begin(set-box!(namespace-root-expand-ctx ns_0) root-ctx_0))))"
"(define-values"
"(namespace-self-mpi)"
"(lambda(ns_0)(begin(root-expand-context-self-mpi(namespace-get-root-expand-ctx ns_0)))))"
"(define-values"
"(namespace->module)"
"(lambda(ns_0 name_0)"
"(begin"
"(let-values(((or-part_162)(small-hash-ref(namespace-submodule-declarations ns_0) name_0 #f)))"
"(if or-part_162"
" or-part_162"
"(hash-ref(module-registry-declarations(namespace-module-registry$1 ns_0)) name_0 #f))))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_0 phase_0)"
"(begin"
"(let-values(((or-part_165)(small-hash-ref(namespace-phase-to-namespace ns_0) phase_0 #f)))"
"(if or-part_165"
" or-part_165"
"(let-values(((p-ns_166)"
"(let-values(((the-struct_167) ns_0))"
"(if(1/namespace? the-struct_167)"
"(let-values(((phase21_168) phase_0))"
"(namespace1.1"
"(namespace-mpi the-struct_167)"
"(namespace-source-name the-struct_167)"
"(namespace-root-expand-ctx the-struct_167)"
" phase21_168"
"(namespace-0-phase the-struct_167)"
"(namespace-phase-to-namespace the-struct_167)"
"(namespace-phase-level-to-definitions the-struct_167)"
"(namespace-module-registry$1 the-struct_167)"
"(namespace-bulk-binding-registry the-struct_167)"
"(namespace-submodule-declarations the-struct_167)"
"(namespace-root-namespace the-struct_167)"
"(namespace-declaration-inspector the-struct_167)"
"(namespace-inspector the-struct_167)"
"(namespace-available-module-instances the-struct_167)"
"(namespace-module-instances the-struct_167)))"
"                            (raise-argument-error 'struct-copy \"namespace?\" the-struct_167)))))"
"(begin(small-hash-set!(namespace-phase-to-namespace ns_0) phase_0 p-ns_166) p-ns_166)))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_0)"
"(begin"
"(let-values(((n_170)(namespace-source-name ns_0)))"
"(let-values(((s_171)"
"(if(not n_170)"
"(let-values() 'top-level)"
"(if(symbol? n_170)"
"                          (let-values () (format \"'~s\" n_170))"
"                          (let-values () (string-append \"\\\"\" (path->string n_170) \"\\\"\"))))))"
"(let-values(((r_172)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_0)))))"
"            (if (pair? r_172) (string-append \"(submod \" s_171 \" \" (substring (format \"~s\" (cdr r_172)) 1)) s_171)))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_0 phase-level_0)"
"(begin"
"(let-values(((d_175)(small-hash-ref(namespace-phase-level-to-definitions ns_0) phase-level_0 #f)))"
"(let-values(((or-part_176) d_175))"
"(if or-part_176"
" or-part_176"
"(let-values()"
"(let-values(((p-ns_177)"
"(namespace->namespace-at-phase ns_0(phase+(namespace-0-phase ns_0) phase-level_0))))"
"(let-values(((d_178)"
"(definitions2.1(1/make-instance(namespace->name p-ns_177) p-ns_177)(make-hasheq))))"
"(begin"
"(small-hash-set!(namespace-phase-level-to-definitions ns_0) phase-level_0 d_178)"
" d_178))))))))))"
"(define-values"
"(namespace-set-variable!)"
"(let-values(((namespace-set-variable!16_179)"
"(lambda(ns12_0 phase-level13_0 name14_0 val15_0 as-constant?11_0)"
"(begin"
" 'namespace-set-variable!16"
"(let-values(((ns_185) ns12_0))"
"(let-values(((phase-level_186) phase-level13_0))"
"(let-values(((name_187) name14_0))"
"(let-values(((val_188) val15_0))"
"(let-values(((as-constant?_189) as-constant?11_0))"
"(let-values()"
"(let-values(((d_190)(namespace->definitions ns_185 phase-level_186)))"
"(1/instance-set-variable-value!"
"(definitions-variables d_190)"
" name_187"
" val_188"
"(if as-constant?_189 'constant #f)))))))))))))"
"(case-lambda"
"((ns_0 phase-level_0 name_0 val_0)(begin(namespace-set-variable!16_179 ns_0 phase-level_0 name_0 val_0 #f)))"
"((ns_0 phase-level_0 name_0 val_0 as-constant?11_0)"
"(namespace-set-variable!16_179 ns_0 phase-level_0 name_0 val_0 as-constant?11_0)))))"
"(define-values"
"(namespace-set-consistent!)"
"(lambda(ns_0 phase-level_0 name_0 val_0)"
"(begin"
"(let-values(((d_204)(namespace->definitions ns_0 phase-level_0)))"
"(1/instance-set-variable-value!(definitions-variables d_204) name_0 val_0 'consistent)))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_0 phase-level_0 name_0)"
"(begin"
"(let-values(((d_208)(namespace->definitions ns_0 phase-level_0)))"
"(1/instance-unset-variable!(definitions-variables d_208) name_0)))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_0 phase-level_0 name_0 val_0)"
"(begin"
"(let-values(((d_213)(namespace->definitions ns_0(add1 phase-level_0))))"
"(hash-set!(definitions-transformers d_213) name_0 val_0)))))"
"(define-values"
"(namespace-unset-transformer!)"
"(lambda(ns_0 phase-level_0 name_0)"
"(begin"
"(let-values(((d_217)(namespace->definitions ns_0(add1 phase-level_0))))"
"(hash-remove!(definitions-transformers d_217) name_0)))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_0 phase-level_0 name_0 fail-k_0)"
"(begin"
"(let-values(((d_222)(namespace->definitions ns_0 phase-level_0)))"
"(1/instance-variable-value(definitions-variables d_222) name_0 fail-k_0)))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_0 phase-level_0 name_0 fail-k_0)"
"(begin"
"(let-values(((d_227)(namespace->definitions ns_0(add1 phase-level_0))))"
"(hash-ref(definitions-transformers d_227) name_0 fail-k_0)))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_0 phase-shift_0)(begin(definitions-variables(namespace->definitions ns_0 phase-shift_0)))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_0 b-ns_0)"
"(begin"
"(eq?"
"(small-hash-ref(namespace-phase-level-to-definitions a-ns_0) 0 'no-a)"
"(small-hash-ref(namespace-phase-level-to-definitions b-ns_0) 0 'no-b)))))"
"(define-values(original-property-sym)(gensym 'original))"
"(define-values"
"(syntax->list$1)"
"(lambda(s_0)"
"(begin"
" 'syntax->list"
"(let-values(((l_2)"
"((letrec-values(((loop_3)"
"(lambda(s_1)"
"(begin"
" 'loop"
"(if(pair? s_1)"
"(let-values()(cons(car s_1)(loop_3(cdr s_1))))"
"(if(syntax?$1 s_1)"
"(let-values()(loop_3(syntax-e$1 s_1)))"
"(let-values() s_1)))))))"
" loop_3)"
" s_0)))"
"(if(list? l_2) l_2 #f)))))"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin4_1)"
"(lambda(new-stx2_0 old-stx3_0 id1_0)"
"(begin"
" 'syntax-track-origin4"
"(let-values(((new-stx_5) new-stx2_0))"
"(let-values(((old-stx_6) old-stx3_0))"
"(let-values(((id_7)"
"(if(eq? id1_0 unsafe-undefined)"
"(if(identifier? old-stx_6)"
" old-stx_6"
"(let-values(((v_8)(syntax-e/no-taint old-stx_6)))"
"(if(pair? v_8)(car v_8) #f)))"
" id1_0)))"
"(let-values()"
"(let-values(((old-props_9)(syntax-props old-stx_6)))"
"(if(zero?(hash-count old-props_9))"
"(let-values()"
"(if id_7"
"(syntax-property$1"
" new-stx_5"
" 'origin"
"(cons id_7(hash-ref(syntax-props new-stx_5) 'origin null)))"
" new-stx_5))"
"(let-values()"
"(let-values(((new-props_10)(syntax-props new-stx_5)))"
"(if(zero?(hash-count new-props_10))"
"(let-values()"
"(if id_7"
"(let-values()"
"(let-values(((old-origin_11)"
"(plain-property-value"
"(hash-ref old-props_9 'origin missing$1))))"
"(let-values(((origin_12)"
"(if(eq? old-origin_11 missing$1)"
"(list id_7)"
"(cons id_7 old-origin_11))))"
"(let-values(((the-struct_13) new-stx_5))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((props6_14)(hash-set old-props_9 'origin origin_12)))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-scope-propagations+tamper the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
"(syntax-srcloc the-struct_13)"
" props6_14"
"(syntax-inspector the-struct_13)))"
"                                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))))"
"(let-values()"
"(let-values(((the-struct_15) new-stx_5))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((props7_16) old-props_9))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-scope-propagations+tamper the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-srcloc the-struct_15)"
" props7_16"
"(syntax-inspector the-struct_15)))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_15))))))"
"(let-values()"
"(let-values(((old-props-with-origin_17)"
"(if id_7"
"(hash-set"
" old-props_9"
" 'origin"
"(cons id_7(hash-ref old-props_9 'origin null)))"
" old-props_9)))"
"(let-values(((updated-props_18)"
"(if(<"
"(hash-count old-props-with-origin_17)"
"(hash-count new-props_10))"
"(let-values()"
"(let-values(((ht_19) old-props-with-origin_17))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(new-props_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_23 v_24)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_19"
" i_0)))"
"(let-values(((new-props_25)"
"(let-values(((new-props_26)"
" new-props_0))"
"(let-values(((new-props_27)"
"(let-values()"
"(let-values(((new-v_28)"
"(hash-ref"
" new-props_26"
" k_23"
" missing$1)))"
"(hash-set"
" new-props_26"
" k_23"
"(if(eq?"
" new-v_28"
" missing$1)"
" v_24"
"(cons/preserve"
" new-v_28"
" v_24)))))))"
"(values"
" new-props_27)))))"
"(if(not #f)"
"(for-loop_20"
" new-props_25"
"(unsafe-immutable-hash-iterate-next"
" ht_19"
" i_0))"
" new-props_25)))"
" new-props_0)))))"
" for-loop_20)"
" new-props_10"
"(unsafe-immutable-hash-iterate-first ht_19)))))"
"(let-values()"
"(let-values(((ht_29) new-props_10))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_29)))"
"((letrec-values(((for-loop_30)"
"(lambda(old-props_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_33 v_34)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_29"
" i_0)))"
"(let-values(((old-props_35)"
"(let-values(((old-props_36)"
" old-props_0))"
"(let-values(((old-props_37)"
"(let-values()"
"(let-values(((old-v_38)"
"(hash-ref"
" old-props_36"
" k_33"
" missing$1)))"
"(hash-set"
" old-props_36"
" k_33"
"(if(eq?"
" old-v_38"
" missing$1)"
" v_34"
"(cons/preserve"
" v_34"
" old-v_38)))))))"
"(values"
" old-props_37)))))"
"(if(not #f)"
"(for-loop_30"
" old-props_35"
"(unsafe-immutable-hash-iterate-next"
" ht_29"
" i_0))"
" old-props_35)))"
" old-props_0)))))"
" for-loop_30)"
" old-props-with-origin_17"
"(unsafe-immutable-hash-iterate-first ht_29))))))))"
"(let-values(((the-struct_39) new-stx_5))"
"(if(syntax?$1 the-struct_39)"
"(let-values(((props8_40) updated-props_18))"
"(syntax1.1"
"(syntax-content the-struct_39)"
"(syntax-scopes the-struct_39)"
"(syntax-shifted-multi-scopes the-struct_39)"
"(syntax-scope-propagations+tamper the-struct_39)"
"(syntax-mpi-shifts the-struct_39)"
"(syntax-srcloc the-struct_39)"
" props8_40"
"(syntax-inspector the-struct_39)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"syntax?\""
" the-struct_39)))))))))))))))))))"
"(case-lambda"
"((new-stx_0 old-stx_0)(begin 'syntax-track-origin(syntax-track-origin4_1 new-stx_0 old-stx_0 unsafe-undefined)))"
"((new-stx_0 old-stx_0 id1_0)(syntax-track-origin4_1 new-stx_0 old-stx_0 id1_0)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_0 b_0)"
"(begin"
"(if(let-values(((or-part_48)(preserved-property-value? a_0)))"
"(if or-part_48 or-part_48(preserved-property-value? b_0)))"
"(preserved-property-value1.1(cons(plain-property-value a_0)(plain-property-value b_0)))"
"(cons a_0 b_0)))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_0 new-stx_0)"
"(begin"
"(let-values(((lst_51) old-stxes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_51)))"
"((letrec-values(((for-loop_52)"
"(lambda(new-stx_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((old-stx_55)(unsafe-car lst_0))((rest_56)(unsafe-cdr lst_0)))"
"(let-values(((new-stx_57)"
"(let-values(((new-stx_58) new-stx_1))"
"(let-values(((new-stx_59)"
"(let-values()"
"(syntax-track-origin$1 new-stx_58 old-stx_55))))"
"(values new-stx_59)))))"
"(if(not #f)(for-loop_52 new-stx_57 rest_56) new-stx_57)))"
" new-stx_1)))))"
" for-loop_52)"
" new-stx_0"
" lst_51))))))"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax$1 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_3 make-_4 ?_5 -ref_6 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:exn:srclocs"
"(lambda(e_0)(filter values(map2 syntax-srcloc(1/exn:fail:syntax-exprs e_0))))))"
" #f"
" #f"
" '(0)"
"(lambda(str_0 cm_0 exprs_0 info_0)"
"(begin"
"(if(if(list? exprs_0)(andmap2 syntax?$1 exprs_0) #f)"
"(void)"
"                           (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_0)))"
"(values str_0 cm_0 exprs_0)))"
" 'exn:fail:syntax)))))"
"(values struct:_3 make-_4 ?_5(make-struct-field-accessor -ref_6 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_28 make-_29 ?_30 -ref_31 -set!_32)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))))"
"(values struct:_28 make-_29 ?_30)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error7_43)"
"(lambda(given-name5_0 message6_0 expr1_0 sub-expr2_0 extra-sources3_0 message-suffix4_0)"
"(begin"
" 'raise-syntax-error7"
"(let-values(((given-name_50) given-name5_0))"
"(let-values(((message_51) message6_0))"
"(let-values(((expr_52) expr1_0))"
"(let-values(((sub-expr_53) sub-expr2_0))"
"(let-values(((extra-sources_54) extra-sources3_0))"
"(let-values(((message-suffix_55) message-suffix4_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(do-raise-syntax-error"
" 'raise-syntax-error"
" make-exn:fail:syntax$1"
" given-name_50"
" message_51"
" expr_52"
" sub-expr_53"
" extra-sources_54"
" message-suffix_55))))))))))))))"
"(case-lambda"
"((given-name_0 message_0)"
"      (begin 'raise-syntax-error (raise-syntax-error7_43 given-name_0 message_0 #f #f null \"\")))"
"((given-name_0 message_0 expr_0 sub-expr_0 extra-sources_0 message-suffix4_0)"
"(raise-syntax-error7_43 given-name_0 message_0 expr_0 sub-expr_0 extra-sources_0 message-suffix4_0))"
"((given-name_0 message_0 expr_0 sub-expr_0 extra-sources3_0)"
"      (raise-syntax-error7_43 given-name_0 message_0 expr_0 sub-expr_0 extra-sources3_0 \"\"))"
"((given-name_0 message_0 expr_0 sub-expr2_0)"
"      (raise-syntax-error7_43 given-name_0 message_0 expr_0 sub-expr2_0 null \"\"))"
"     ((given-name_0 message_0 expr1_0) (raise-syntax-error7_43 given-name_0 message_0 expr1_0 #f null \"\")))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error15_77)"
"(lambda(given-name13_0 message14_0 expr9_0 sub-expr10_0 extra-sources11_0 message-suffix12_0)"
"(begin"
" 'raise-unbound-syntax-error15"
"(let-values(((given-name_84) given-name13_0))"
"(let-values(((message_85) message14_0))"
"(let-values(((expr_86) expr9_0))"
"(let-values(((sub-expr_87) sub-expr10_0))"
"(let-values(((extra-sources_88) extra-sources11_0))"
"(let-values(((message-suffix_89) message-suffix12_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(do-raise-syntax-error"
" 'raise-unbound-syntax-error"
" make-exn:fail:syntax:unbound$1"
" given-name_84"
" message_85"
" expr_86"
" sub-expr_87"
" extra-sources_88"
" message-suffix_89))))))))))))))"
"(case-lambda"
"     ((given-name_0 message_0) (begin (raise-unbound-syntax-error15_77 given-name_0 message_0 #f #f null \"\")))"
"((given-name_0 message_0 expr_0 sub-expr_0 extra-sources_0 message-suffix12_0)"
"(raise-unbound-syntax-error15_77 given-name_0 message_0 expr_0 sub-expr_0 extra-sources_0 message-suffix12_0))"
"((given-name_0 message_0 expr_0 sub-expr_0 extra-sources11_0)"
"      (raise-unbound-syntax-error15_77 given-name_0 message_0 expr_0 sub-expr_0 extra-sources11_0 \"\"))"
"((given-name_0 message_0 expr_0 sub-expr10_0)"
"      (raise-unbound-syntax-error15_77 given-name_0 message_0 expr_0 sub-expr10_0 null \"\"))"
"     ((given-name_0 message_0 expr9_0) (raise-unbound-syntax-error15_77 given-name_0 message_0 expr9_0 #f null \"\")))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(who_0 exn:fail:syntax_0 given-name_0 message_0 expr_0 sub-expr_0 extra-sources_0 message-suffix_0)"
"(begin"
"(let-values((()"
"(begin"
"(if((lambda(x_0)"
"(let-values(((or-part_125)(not x_0)))(if or-part_125 or-part_125(symbol? x_0))))"
" given-name_0)"
"(void)"
"                        (let-values () (raise-argument-error who_0 \"(or/c symbol? #f)\" given-name_0)))"
"(values))))"
"(let-values((()"
"(begin"
"                        (if (string? message_0) (void) (let-values () (raise-argument-error who_0 \"string?\" message_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_0)(andmap2 syntax?$1 extra-sources_0) #f)"
"(void)"
"                            (let-values () (raise-argument-error who_0 \"(listof syntax?)\" extra-sources_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_0)"
"(void)"
"                              (let-values () (raise-argument-error who_0 \"string?\" message-suffix_0)))"
"(values))))"
"(let-values(((name_119)"
"(format"
"                             \"~a\""
"(let-values(((or-part_126) given-name_0))"
"(if or-part_126"
" or-part_126"
"(let-values(((or-part_127)(extract-form-name expr_0)))"
"(if or-part_127 or-part_127 '?)))))))"
"(let-values(((unbound-message_120)"
"(let-values(((ids_128)(current-previously-unbound)))"
"(let-values(((or-part_129)"
"(if(pair? ids_128)"
"(format"
"                                                 \"\\n  after encountering unbound identifier~a (which is possibly the real problem):~a\""
"                                                 (if (null? (cdr ids_128)) \"\" \"s\")"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_130) ids_128))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_130)))"
"((letrec-values(((for-loop_131)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_134)"
"(unsafe-car lst_0))"
"((rest_135)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_136)"
"(let-values(((fold-var_137)"
" fold-var_0))"
"(let-values(((fold-var_138)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
"                                                                                                                     \"\\n   ~s\""
"(syntax-e$1"
" id_134)))"
" fold-var_137))))"
"(values"
" fold-var_138)))))"
"(if(not #f)"
"(for-loop_131"
" fold-var_136"
" rest_135)"
" fold-var_136)))"
" fold-var_0)))))"
" for-loop_131)"
" null"
" lst_130))))))"
" #f)))"
"                                  (if or-part_129 or-part_129 \"\")))))"
"(let-values(((at-message_121)"
"(let-values(((or-part_139)"
"(if sub-expr_0"
"(if(error-print-source-location)"
"(format"
"                                                   \"\\n  at: ~.s\""
"(syntax->datum$1(datum->syntax$1 #f sub-expr_0)))"
" #f)"
" #f)))"
"                                  (if or-part_139 or-part_139 \"\"))))"
"(let-values(((in-message_122)"
"(let-values(((or-part_140)"
"(if expr_0"
"(if(error-print-source-location)"
"                                                    (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_0)))"
" #f)"
" #f)))"
"                                    (if or-part_140 or-part_140 \"\"))))"
"(let-values(((src-loc-str_123)"
"(let-values(((or-part_141)"
"(if(error-print-source-location)"
"(let-values(((or-part_142)(extract-source-location sub-expr_0)))"
"(if or-part_142 or-part_142(extract-source-location expr_0)))"
" #f)))"
"                                      (if or-part_141 or-part_141 \"\"))))"
"(raise"
"(exn:fail:syntax_0"
"(string-append"
" src-loc-str_123"
" name_119"
"                           \": \""
" message_0"
" unbound-message_120"
" at-message_121"
" in-message_122"
" message-suffix_0)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_143) sub-expr_0))(if or-part_143 or-part_143 expr_0))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_144) sub-expr_0))(if or-part_144 or-part_144 expr_0)))"
" extra-sources_0)"
" extra-sources_0))))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_0)"
"(begin"
"(if(syntax?$1 s_0)"
"(let-values()"
"(let-values(((e_146)(syntax-e$1 s_0)))"
"(if(symbol? e_146)"
"(let-values() e_146)"
"(if(if(pair? e_146)(identifier?(car e_146)) #f)"
"(let-values()(syntax-e$1(car e_146)))"
"(let-values() #f)))))"
"(let-values() #f)))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_0)"
"(begin"
"(if(syntax?$1 s_0)"
"(if(syntax-srcloc s_0)"
"          (let-values (((str_148) (srcloc->string (syntax-srcloc s_0)))) (if str_148 (string-append str_148 \": \") #f))"
" #f)"
" #f))))"
"(define-values(current-previously-unbound)(lambda()(begin #f)))"
"(define-values(set-current-previously-unbound!)(lambda(proc_0)(begin(set! current-previously-unbound proc_0))))"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-use"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_0 b_0 eql?_0)"
"(let-values(((a-mod_29)(module-use-module a_0)))"
"(let-values(((b-mod_30)(module-use-module b_0)))"
"(if(eql?_0 a-mod_29 b-mod_30)"
"(if(eql?_0(module-use-phase a_0)(module-use-phase b_0))"
"(let-values(((a-path_31 a-base_32)(1/module-path-index-split a-mod_29))"
"((b-path_33 b-base_34)(1/module-path-index-split b-mod_30)))"
"(let-values(((or-part_35) a-path_31))"
"(if or-part_35"
" or-part_35"
"(let-values(((or-part_36) b-path_33))"
"(if or-part_36"
" or-part_36"
"(eq?"
"(module-path-index-resolved a-mod_29)"
"(module-path-index-resolved b-mod_30)))))))"
" #f)"
" #f))))"
"(lambda(a_0 hash-code_0)"
"(+(hash-code_0(module-use-module a_0))(hash-code_0(module-use-phase a_0))))"
"(lambda(a_0 hash-code_0)"
"(+(hash-code_0(module-use-module a_0))(hash-code_0(module-use-phase a_0)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-use)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'module)"
"(make-struct-field-accessor -ref_4 1 'phase))))"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-phase-level-linklet-info-callback"
" module-force-bulk-binding"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-is-predefined?"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 20"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)"
" #f"
" 'module)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'source-name)"
"(make-struct-field-accessor -ref_24 1 'self)"
"(make-struct-field-accessor -ref_24 2 'requires)"
"(make-struct-field-accessor -ref_24 3 'provides)"
"(make-struct-field-accessor -ref_24 4 'access)"
"(make-struct-field-accessor -ref_24 5 'language-info)"
"(make-struct-field-accessor -ref_24 6 'min-phase-level)"
"(make-struct-field-accessor -ref_24 7 'max-phase-level)"
"(make-struct-field-accessor -ref_24 8 'phase-level-linklet-info-callback)"
"(make-struct-field-accessor -ref_24 9 'force-bulk-binding)"
"(make-struct-field-accessor -ref_24 10 'prepare-instance)"
"(make-struct-field-accessor -ref_24 11 'instantiate-phase)"
"(make-struct-field-accessor -ref_24 12 'primitive?)"
"(make-struct-field-accessor -ref_24 13 'is-predefined?)"
"(make-struct-field-accessor -ref_24 14 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_24 15 'no-protected?)"
"(make-struct-field-accessor -ref_24 16 'inspector)"
"(make-struct-field-accessor -ref_24 17 'submodule-names)"
"(make-struct-field-accessor -ref_24 18 'supermodule-name)"
"(make-struct-field-accessor -ref_24 19 'get-all-variables)"
"(make-struct-field-mutator -set!_25 4 'access))))"
"(define-values"
"(struct:module-linklet-info"
" module-linklet-info2.1"
" module-linklet-info?"
" module-linklet-info-linklet-or-instance"
" module-linklet-info-module-uses"
" module-linklet-info-self"
" module-linklet-info-inspector"
" module-linklet-info-extra-inspector"
" module-linklet-info-extra-inspectorsss)"
"(let-values(((struct:_136 make-_137 ?_138 -ref_139 -set!_140)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-linklet-info"
" #f"
" 6"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'module-linklet-info)))))"
"(values"
" struct:_136"
" make-_137"
" ?_138"
"(make-struct-field-accessor -ref_139 0 'linklet-or-instance)"
"(make-struct-field-accessor -ref_139 1 'module-uses)"
"(make-struct-field-accessor -ref_139 2 'self)"
"(make-struct-field-accessor -ref_139 3 'inspector)"
"(make-struct-field-accessor -ref_139 4 'extra-inspector)"
"(make-struct-field-accessor -ref_139 5 'extra-inspectorsss))))"
"(define-values"
"(make-module39.1)"
"(lambda(cross-phase-persistent?16_0"
" force-bulk-binding-callback10_0"
" get-all-variables20_0"
" instantiate-phase-callback9_0"
" language-info13_0"
" max-phase-level8_0"
" min-phase-level7_0"
" no-protected?17_0"
" phase-level-linklet-info-callback12_0"
" predefined?15_0"
" prepare-instance-callback11_0"
" primitive?14_0"
" provides6_0"
" requires5_0"
" self4_0"
" source-name3_0"
" submodule-names18_0"
" supermodule-name19_0)"
"(begin"
" 'make-module39"
"(let-values(((source-name_201) source-name3_0))"
"(let-values(((self_202) self4_0))"
"(let-values(((requires_203) requires5_0))"
"(let-values(((provides_204) provides6_0))"
"(let-values(((min-phase-level_205) min-phase-level7_0))"
"(let-values(((max-phase-level_206) max-phase-level8_0))"
"(let-values(((instantiate-phase_207) instantiate-phase-callback9_0))"
"(let-values(((force-bulk-binding_208)"
"(if(eq? force-bulk-binding-callback10_0 unsafe-undefined)"
" void"
" force-bulk-binding-callback10_0)))"
"(let-values(((prepare-instance_209)"
"(if(eq? prepare-instance-callback11_0 unsafe-undefined)"
" void"
" prepare-instance-callback11_0)))"
"(let-values(((phase-level-linklet-info-callback_210)"
"(if(eq? phase-level-linklet-info-callback12_0 unsafe-undefined)"
"(lambda(phase-level_0 ns_0 insp_0)"
"(begin 'phase-level-linklet-info-callback #f))"
" phase-level-linklet-info-callback12_0)))"
"(let-values(((language-info_214) language-info13_0))"
"(let-values(((primitive?_215) primitive?14_0))"
"(let-values(((predefined?_216) predefined?15_0))"
"(let-values(((cross-phase-persistent?_217)"
"(if(eq? cross-phase-persistent?16_0 unsafe-undefined)"
" primitive?_215"
" cross-phase-persistent?16_0)))"
"(let-values(((no-protected?_218) no-protected?17_0))"
"(let-values(((submodule-names_219) submodule-names18_0))"
"(let-values(((supermodule-name_220) supermodule-name19_0))"
"(let-values(((get-all-variables_221)"
"(if(eq? get-all-variables20_0 unsafe-undefined)"
"(lambda()(begin 'get-all-variables null))"
" get-all-variables20_0)))"
"(let-values()"
"(module1.1"
" source-name_201"
" self_202"
"(unresolve-requires requires_203)"
" provides_204"
" #f"
" language-info_214"
" min-phase-level_205"
" max-phase-level_206"
" phase-level-linklet-info-callback_210"
" force-bulk-binding_208"
" prepare-instance_209"
" instantiate-phase_207"
" primitive?_215"
" predefined?_216"
" cross-phase-persistent?_217"
" no-protected?_218"
"(current-code-inspector)"
" submodule-names_219"
" supermodule-name_220"
" get-all-variables_221)))))))))))))))))))))))"
"(define-values"
"(struct:module-instance"
" module-instance42.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_295 make-_296 ?_297 -ref_298 -set!_299)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))))"
"(values"
" struct:_295"
" make-_296"
" ?_297"
"(make-struct-field-accessor -ref_298 0 'namespace)"
"(make-struct-field-accessor -ref_298 1 'module)"
"(make-struct-field-accessor -ref_298 2 'shifted-requires)"
"(make-struct-field-accessor -ref_298 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_298 4 'made-available?)"
"(make-struct-field-accessor -ref_298 5 'attached?)"
"(make-struct-field-accessor -ref_298 6 'data-box)"
"(make-struct-field-mutator -set!_299 2 'shifted-requires)"
"(make-struct-field-mutator -set!_299 4 'made-available?)"
"(make-struct-field-mutator -set!_299 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_0 m_0)(begin(module-instance42.1 m-ns_0 m_0 #f(make-small-hasheqv) #f #f(box #f)))))"
"(define-values"
"(make-module-namespace50.1)"
"(lambda(for-submodule?45_0 mpi43_0 root-expand-context44_0 ns49_0)"
"(begin"
" 'make-module-namespace50"
"(let-values(((ns_355) ns49_0))"
"(let-values(((name-mpi_356) mpi43_0))"
"(let-values(((root-expand-ctx_357) root-expand-context44_0))"
"(let-values(((for-submodule?_358) for-submodule?45_0))"
"(let-values()"
"(let-values(((phase_359) 0))"
"(let-values(((name_360)(1/module-path-index-resolve name-mpi_356)))"
"(let-values(((m-ns_361)"
"(let-values(((the-struct_363)"
"(let-values(((ns158_365) ns_355)"
"((root-expand-ctx159_366) root-expand-ctx_357)"
"((temp160_367) #f))"
"(new-namespace8.1 temp160_367 root-expand-ctx159_366 ns158_365))))"
"(if(1/namespace? the-struct_363)"
"(let-values(((mpi150_368) name-mpi_356)"
"((source-name151_369)(resolved-module-path-root-name name_360))"
"((phase152_370) phase_359)"
"((0-phase153_371) phase_359)"
"((submodule-declarations154_372)"
"(if for-submodule?_358"
"(namespace-submodule-declarations ns_355)"
"(make-small-hasheq)))"
"((available-module-instances155_373)(make-hasheqv))"
"((module-instances156_374)(make-hasheqv))"
"((declaration-inspector157_375)(current-code-inspector)))"
"(namespace1.1"
" mpi150_368"
" source-name151_369"
"(namespace-root-expand-ctx the-struct_363)"
" phase152_370"
" 0-phase153_371"
"(namespace-phase-to-namespace the-struct_363)"
"(namespace-phase-level-to-definitions the-struct_363)"
"(namespace-module-registry$1 the-struct_363)"
"(namespace-bulk-binding-registry the-struct_363)"
" submodule-declarations154_372"
"(namespace-root-namespace the-struct_363)"
" declaration-inspector157_375"
"(namespace-inspector the-struct_363)"
" available-module-instances155_373"
" module-instances156_374))"
"                                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_363)))))"
"(let-values((()"
"(begin"
"(small-hash-set!(namespace-phase-to-namespace m-ns_361) phase_359 m-ns_361)"
"(values))))"
"(let-values(((at-phase_362)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_361) phase_359 at-phase_362)"
"(hash-set! at-phase_362 name_360(make-module-instance m-ns_361 #f))"
" m-ns_361))))))))))))))"
"(define-values"
"(declare-module!58.1)"
"(lambda(with-submodules?53_0 ns55_0 m56_0 mod-name57_0)"
"(begin"
" 'declare-module!58"
"(let-values(((ns_398) ns55_0))"
"(let-values(((m_399) m56_0))"
"(let-values(((mod-name_400) mod-name57_0))"
"(let-values(((with-submodules?_401) with-submodules?53_0))"
"(let-values()"
"(let-values(((prior-m_402)"
"(if with-submodules?_401"
"(hash-ref"
"(module-registry-declarations(namespace-module-registry$1 ns_398))"
" mod-name_400"
" #f)"
" #f)))"
"(let-values(((prior-mi_403)"
"(if prior-m_402"
"(if(not(eq? m_399 prior-m_402))"
"(let-values(((ns161_404) ns_398)"
"((mod-name162_405) mod-name_400)"
"((temp163_406)(namespace-phase ns_398)))"
"(namespace->module-instance70.1"
" #f"
" #f"
" unsafe-undefined"
" ns161_404"
" mod-name162_405"
" temp163_406))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_402(not(eq? m_399 prior-m_402)) #f)"
"(let-values()(check-redeclaration-ok prior-m_402 prior-mi_403 mod-name_400))"
"(void))"
"(if with-submodules?_401"
"(hash-set!"
"(module-registry-declarations(namespace-module-registry$1 ns_398))"
" mod-name_400"
" m_399)"
"(small-hash-set!(namespace-submodule-declarations ns_398) mod-name_400 m_399))"
"(if with-submodules?_401"
"(let-values()"
"(begin"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_398)"
" mod-name_400"
"(module-self m_399)"
"(module-provides m_399))"
"((1/current-module-name-resolver) mod-name_400 #f)))"
"(void))"
"(if prior-mi_403"
"(let-values()"
"(let-values(((m-ns_407)(module-instance-namespace prior-mi_403)))"
"(let-values(((states_408)(module-instance-phase-level-to-state prior-mi_403)))"
"(let-values(((phase_409)(namespace-phase ns_398)))"
"(let-values(((visit?_410)"
"(eq? 'started(small-hash-ref states_408(add1 phase_409) #f))))"
"(let-values(((run?_411)(eq? 'started(small-hash-ref states_408 phase_409 #f))))"
"(let-values(((at-phase_412)"
"(hash-ref(namespace-module-instances ns_398) phase_409)))"
"(begin"
"(hash-set! at-phase_412 mod-name_400(make-module-instance m-ns_407 m_399))"
"(if visit?_410"
"(let-values()"
"(let-values(((ns164_413) ns_398)"
"((temp165_414)(namespace-mpi m-ns_407))"
"((phase166_415) phase_409))"
"(namespace-module-visit!104.1"
" unsafe-undefined"
" ns164_413"
" temp165_414"
" phase166_415)))"
"(void))"
"(if run?_411"
"(let-values()"
"(let-values(((ns167_416) ns_398)"
"((temp168_417)(namespace-mpi m-ns_407))"
"((phase169_418) phase_409))"
"(namespace-module-instantiate!96.1"
" #t"
" unsafe-undefined"
" unsafe-undefined"
" #f"
" ns167_416"
" temp168_417"
" phase169_418)))"
"(void))))))))))"
"(void)))))))))))))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_0 prior-mi_0 mod-name_0)"
"(begin"
"(begin"
"(if(module-cross-phase-persistent? prior-m_0)"
"(let-values()"
"            (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_0))"
"(void))"
"(if(if prior-mi_0"
"(let-values(((or-part_442)(module-instance-attached? prior-mi_0)))"
"(if or-part_442"
" or-part_442"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_0))))))"
" #f)"
"(let-values()"
"            (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_0))"
"(void))))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_0 mod-name_0) (begin (raise-arguments-error who_0 \"unknown module\" \"module name\" mod-name_0))))"
"(define-values"
"(namespace->module-linklet-info)"
"(lambda(ns_0 name_0 phase-level_0)"
"(begin"
"(let-values(((m_448)(namespace->module ns_0 name_0)))"
"(if m_448((module-phase-level-linklet-info-callback m_448) phase-level_0 ns_0(module-inspector m_448)) #f)))))"
"(define-values"
"(namespace->module-instance70.1)"
"(lambda(check-available-at-phase-level62_0"
" complain-on-failure?61_0"
" unavailable-callback63_0"
" ns67_0"
" name68_0"
" 0-phase69_0)"
"(begin"
" 'namespace->module-instance70"
"(let-values(((ns_455) ns67_0))"
"(let-values(((name_456) name68_0))"
"(let-values(((0-phase_457) 0-phase69_0))"
"(let-values(((complain-on-failure?_458) complain-on-failure?61_0))"
"(let-values(((check-available-at-phase-level_459) check-available-at-phase-level62_0))"
"(let-values(((unavailable-callback_460)"
"(if(eq? unavailable-callback63_0 unsafe-undefined) void unavailable-callback63_0)))"
"(let-values()"
"(let-values(((mi_461)"
"(let-values(((or-part_462)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_455) 0-phase_457 '#hasheq())"
" name_456"
" #f)))"
"(if or-part_462"
" or-part_462"
"(let-values(((or-part_463)"
"(let-values(((c-ns_464)"
"(let-values(((or-part_465)"
"(namespace-root-namespace ns_455)))"
"(if or-part_465 or-part_465 ns_455))))"
"(hash-ref(namespace-module-instances c-ns_464) name_456 #f))))"
"(if or-part_463"
" or-part_463"
"(if complain-on-failure?_458"
"                                            (error \"no module instance found:\" name_456 0-phase_457)"
" #f)))))))"
"(if(if mi_461 check-available-at-phase-level_459 #f)"
"(check-availablilty mi_461 check-available-at-phase-level_459 unavailable-callback_460)"
" mi_461))))))))))))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_0 name_0 0-phase_0 m_0 existing-m-ns_0)"
"(begin"
"(let-values(((m-ns_503)"
"(let-values(((the-struct_505) ns_0))"
"(if(1/namespace? the-struct_505)"
"(let-values(((mpi170_506)(namespace-mpi existing-m-ns_0))"
"((source-name171_507)(namespace-source-name existing-m-ns_0))"
"((root-expand-ctx172_508)"
"(box(unbox(namespace-root-expand-ctx existing-m-ns_0))))"
"((phase173_509)(namespace-phase existing-m-ns_0))"
"((0-phase174_510)(namespace-0-phase existing-m-ns_0))"
"((phase-to-namespace175_511)(make-small-hasheqv))"
"((phase-level-to-definitions176_512)"
"(if(module-cross-phase-persistent? m_0)"
"(namespace-phase-level-to-definitions existing-m-ns_0)"
"(make-small-hasheqv)))"
"((declaration-inspector177_513)(module-inspector m_0))"
"((inspector178_514)(namespace-inspector existing-m-ns_0)))"
"(namespace1.1"
" mpi170_506"
" source-name171_507"
" root-expand-ctx172_508"
" phase173_509"
" 0-phase174_510"
" phase-to-namespace175_511"
" phase-level-to-definitions176_512"
"(namespace-module-registry$1 the-struct_505)"
"(namespace-bulk-binding-registry the-struct_505)"
"(namespace-submodule-declarations the-struct_505)"
"(namespace-root-namespace the-struct_505)"
" declaration-inspector177_513"
" inspector178_514"
"(namespace-available-module-instances the-struct_505)"
"(namespace-module-instances the-struct_505)))"
"                        (raise-argument-error 'struct-copy \"namespace?\" the-struct_505)))))"
"(let-values(((mi_504)(make-module-instance m-ns_503 m_0)))"
"(if(module-cross-phase-persistent? m_0)"
"(let-values()"
"(begin"
"(small-hash-set!(namespace-phase-to-namespace m-ns_503) 0 m-ns_503)"
"(small-hash-set!"
"(namespace-phase-level-to-definitions m-ns_503)"
" 0"
"(namespace->definitions existing-m-ns_0 0))"
"(small-hash-set!(namespace-phase-to-namespace m-ns_503) 1(namespace->namespace-at-phase m-ns_503 1))"
"(small-hash-set!"
"(namespace-phase-level-to-definitions m-ns_503)"
" 1"
"(namespace->definitions existing-m-ns_0 1))"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_515)(namespace-root-namespace ns_0)))(if or-part_515 or-part_515 ns_0)))"
" name_0"
" mi_504)"
"(small-hash-set!(module-instance-phase-level-to-state mi_504) 0 'started)))"
"(let-values()"
"(let-values((()"
"(begin"
"(small-hash-set!(namespace-phase-to-namespace m-ns_503) 0-phase_0 m-ns_503)"
"(values))))"
"(let-values((()"
"(begin"
"(small-hash-set!"
"(namespace-phase-level-to-definitions m-ns_503)"
" 0"
"(namespace->definitions existing-m-ns_0 0))"
"(values))))"
"(let-values((()"
"(begin"
"(small-hash-set!(module-instance-phase-level-to-state mi_504) 0 'started)"
"(values))))"
"(let-values(((at-phase_516)"
"(let-values(((or-part_517)"
"(hash-ref(namespace-module-instances ns_0) 0-phase_0 #f)))"
"(if or-part_517"
" or-part_517"
"(let-values(((at-phase_518)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_0) 0-phase_0 at-phase_518)"
" at-phase_518))))))"
"(hash-set! at-phase_516 name_0 mi_504))))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_0 name_0 0-phase_0 m_0 mpi_0)"
"(begin"
"(let-values(((m-ns_524)"
"(let-values(((the-struct_526) ns_0))"
"(if(1/namespace? the-struct_526)"
"(let-values(((mpi179_527) mpi_0)"
"((source-name180_528)"
"(let-values(((or-part_536)(module-source-name m_0)))"
"(if or-part_536"
" or-part_536"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_0)))))"
"((root-expand-ctx181_529)(box #f))"
"((phase182_530) 0-phase_0)"
"((0-phase183_531) 0-phase_0)"
"((phase-to-namespace184_532)(make-small-hasheqv))"
"((phase-level-to-definitions185_533)(make-small-hasheqv))"
"((declaration-inspector186_534)(module-inspector m_0))"
"((inspector187_535)(make-inspector(module-inspector m_0))))"
"(namespace1.1"
" mpi179_527"
" source-name180_528"
" root-expand-ctx181_529"
" phase182_530"
" 0-phase183_531"
" phase-to-namespace184_532"
" phase-level-to-definitions185_533"
"(namespace-module-registry$1 the-struct_526)"
"(namespace-bulk-binding-registry the-struct_526)"
"(namespace-submodule-declarations the-struct_526)"
"(namespace-root-namespace the-struct_526)"
" declaration-inspector186_534"
" inspector187_535"
"(namespace-available-module-instances the-struct_526)"
"(namespace-module-instances the-struct_526)))"
"                        (raise-argument-error 'struct-copy \"namespace?\" the-struct_526)))))"
"(let-values((()(begin(small-hash-set!(namespace-phase-to-namespace m-ns_524) 0-phase_0 m-ns_524)(values))))"
"(let-values(((mi_525)(make-module-instance m-ns_524 m_0)))"
"(begin"
"(if(module-cross-phase-persistent? m_0)"
"(hash-set!(namespace-module-instances ns_0) name_0 mi_525)"
"(let-values(((at-phase_537)"
"(let-values(((or-part_538)(hash-ref(namespace-module-instances ns_0) 0-phase_0 #f)))"
"(if or-part_538"
" or-part_538"
"(let-values(((at-phase_539)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_0) 0-phase_0 at-phase_539)"
" at-phase_539))))))"
"(hash-set! at-phase_537 name_0 mi_525)))"
" mi_525)))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_0 check-available-at-phase-level_0 unavailable-callback_0)"
"(begin"
"(let-values(((m_543)(module-instance-module mi_0)))"
"(if(if m_543"
"(if(<="
"(module-min-phase-level m_543)"
"(add1 check-available-at-phase-level_0)"
"(module-max-phase-level m_543))"
"(not"
"(small-hash-ref"
"(module-instance-phase-level-to-state mi_0)"
"(add1 check-available-at-phase-level_0)"
" #f))"
" #f)"
" #f)"
"(unavailable-callback_0 mi_0)"
" mi_0)))))"
"(define-values"
"(namespace->module-namespace82.1)"
"(lambda(check-available-at-phase-level74_0"
" complain-on-failure?73_0"
" unavailable-callback75_0"
" ns79_0"
" name80_0"
" 0-phase81_0)"
"(begin"
" 'namespace->module-namespace82"
"(let-values(((ns_550) ns79_0))"
"(let-values(((name_551) name80_0))"
"(let-values(((0-phase_552) 0-phase81_0))"
"(let-values(((complain-on-failure?_553) complain-on-failure?73_0))"
"(let-values(((check-available-at-phase-level_554) check-available-at-phase-level74_0))"
"(let-values(((unavailable-callback_555)"
"(if(eq? unavailable-callback75_0 unsafe-undefined) void unavailable-callback75_0)))"
"(let-values()"
"(let-values(((mi_556)"
"(let-values(((ns188_558) ns_550)"
"((name189_559) name_551)"
"((0-phase190_560) 0-phase_552)"
"((complain-on-failure?191_561) complain-on-failure?_553)"
"((check-available-at-phase-level192_562)"
" check-available-at-phase-level_554)"
"((unavailable-callback193_563) unavailable-callback_555))"
"(namespace->module-instance70.1"
" check-available-at-phase-level192_562"
" complain-on-failure?191_561"
" unavailable-callback193_563"
" ns188_558"
" name189_559"
" 0-phase190_560))))"
"(if mi_556(module-instance-namespace mi_556) #f))))))))))))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_0 mod-name_0 phase_0)"
"(begin"
"(let-values(((mi_599)"
"(let-values(((ns194_600) ns_0)((mod-name195_601) mod-name_0)((phase196_602) phase_0))"
"(namespace->module-instance70.1 #f #f unsafe-undefined ns194_600 mod-name195_601 phase196_602))))"
"(set-module-instance-attached?! mi_599 #t)))))"
"(define-values"
"(module-force-bulk-binding!)"
"(lambda(m_0 ns_0)(begin((module-force-bulk-binding m_0)(namespace-bulk-binding-registry ns_0)))))"
"(define-values"
"(namespace-module-instantiate!96.1)"
"(lambda(otherwise-available?87_0 run-phase85_0 seen88_0 skip-run?86_0 ns93_0 mpi94_0 instance-phase95_0)"
"(begin"
" 'namespace-module-instantiate!96"
"(let-values(((ns_612) ns93_0))"
"(let-values(((mpi_613) mpi94_0))"
"(let-values(((instance-phase_614) instance-phase95_0))"
"(let-values(((run-phase_615)"
"(if(eq? run-phase85_0 unsafe-undefined)(namespace-phase ns_612) run-phase85_0)))"
"(let-values(((skip-run?_616) skip-run?86_0))"
"(let-values(((otherwise-available?_617) otherwise-available?87_0))"
"(let-values(((seen_618)(if(eq? seen88_0 unsafe-undefined) '#hasheq() seen88_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_613)"
"(void)"
"                                        (let-values () (error \"not a module path index:\" mpi_613)))"
"(values))))"
"(let-values(((name_619)(let-values()(1/module-path-index-resolve mpi_613 #t))))"
"(let-values(((m_620)(namespace->module ns_612 name_619)))"
"(let-values((()"
"(begin"
"(if m_620"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_619)))"
"(values))))"
"(let-values(((instantiate!_621)"
"(lambda(instance-phase_0 run-phase_0 ns_0)"
"(begin"
" 'instantiate!"
"(let-values(((mi_625)"
"(let-values(((or-part_626)"
"(let-values(((ns203_627) ns_0)"
"((name204_628) name_619)"
"((instance-phase205_629)"
" instance-phase_0))"
"(namespace->module-instance70.1"
" #f"
" #f"
" unsafe-undefined"
" ns203_627"
" name204_628"
" instance-phase205_629))))"
"(if or-part_626"
" or-part_626"
"(namespace-create-module-instance!"
" ns_0"
" name_619"
" instance-phase_0"
" m_620"
" mpi_613)))))"
"(let-values(((mi197_631) mi_625)"
"((ns198_632) ns_0)"
"((run-phase199_633) run-phase_0)"
"((skip-run?200_634) skip-run?_616)"
"((otherwise-available?201_635) otherwise-available?_617)"
"((seen202_636) seen_618))"
"(run-module-instance!125.1"
" otherwise-available?201_635"
" run-phase199_633"
" seen202_636"
" skip-run?200_634"
" mi197_631"
" ns198_632)))))))"
"(if(module-cross-phase-persistent? m_620)"
"(let-values()"
"(instantiate!_621"
" 0"
" 0"
"(let-values(((or-part_637)(namespace-root-namespace ns_612)))"
"(if or-part_637 or-part_637 ns_612))))"
"(let-values()"
"(instantiate!_621 instance-phase_614 run-phase_615 ns_612)))))))))))))))))))"
"(define-values"
"(namespace-module-visit!104.1)"
"(lambda(visit-phase99_0 ns101_0 mpi102_0 instance-phase103_0)"
"(begin"
" 'namespace-module-visit!104"
"(let-values(((ns_680) ns101_0))"
"(let-values(((mpi_681) mpi102_0))"
"(let-values(((instance-phase_682) instance-phase103_0))"
"(let-values(((visit-phase_683)"
"(if(eq? visit-phase99_0 unsafe-undefined)(namespace-phase ns_680) visit-phase99_0)))"
"(let-values()"
"(let-values(((ns206_685) ns_680)"
"((mpi207_686) mpi_681)"
"((instance-phase208_687) instance-phase_682)"
"((temp209_688)(add1 visit-phase_683)))"
"(namespace-module-instantiate!96.1"
" #t"
" temp209_688"
" unsafe-undefined"
" #f"
" ns206_685"
" mpi207_686"
" instance-phase208_687))))))))))"
"(define-values"
"(namespace-module-make-available!112.1)"
"(lambda(visit-phase107_0 ns109_0 mpi110_0 instance-phase111_0)"
"(begin"
" 'namespace-module-make-available!112"
"(let-values(((ns_713) ns109_0))"
"(let-values(((mpi_714) mpi110_0))"
"(let-values(((instance-phase_715) instance-phase111_0))"
"(let-values(((visit-phase_716)"
"(if(eq? visit-phase107_0 unsafe-undefined)(namespace-phase ns_713) visit-phase107_0)))"
"(let-values()"
"(let-values(((ns210_718) ns_713)"
"((mpi211_719) mpi_714)"
"((instance-phase212_720) instance-phase_715)"
"((temp213_721)(add1 visit-phase_716))"
"((temp214_722) #t))"
"(namespace-module-instantiate!96.1"
" #t"
" temp213_721"
" unsafe-undefined"
" temp214_722"
" ns210_718"
" mpi211_719"
" instance-phase212_720))))))))))"
"(define-values"
"(run-module-instance!125.1)"
"(lambda(otherwise-available?117_0 run-phase115_0 seen118_0 skip-run?116_0 mi123_0 ns124_0)"
"(begin"
" 'run-module-instance!125"
"(let-values(((mi_755) mi123_0))"
"(let-values(((ns_756) ns124_0))"
"(let-values(((run-phase_757) run-phase115_0))"
"(let-values(((skip-run?_758) skip-run?116_0))"
"(let-values(((otherwise-available?_759) otherwise-available?117_0))"
"(let-values(((seen_760)(if(eq? seen118_0 unsafe-undefined) '#hasheq() seen118_0)))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_761)(module-instance-namespace mi_755)))"
"(let-values(((instance-phase_762)(namespace-0-phase m-ns_761)))"
"(let-values(((run-phase-level_763)(phase- run-phase_757 instance-phase_762)))"
"(if(if(let-values(((or-part_764) skip-run?_758))"
"(if or-part_764"
" or-part_764"
"(eq?"
" 'started"
"(small-hash-ref"
"(module-instance-phase-level-to-state mi_755)"
" run-phase-level_763"
" #f))))"
"(let-values(((or-part_765)(not otherwise-available?_759)))"
"(if or-part_765 or-part_765(module-instance-made-available? mi_755)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_766)(module-instance-module mi_755)))"
"(let-values((()"
"(begin"
"(if m_766"
"(void)"
"(let-values()"
"(error"
" 'require"
"                                                       \"import cycle detected; trying to run module being expanded\")))"
"(values))))"
"(let-values(((mpi_767)(namespace-mpi m-ns_761)))"
"(let-values(((phase-shift_768) instance-phase_762))"
"(let-values(((bulk-binding-registry_769)"
"(namespace-bulk-binding-registry m-ns_761)))"
"(begin"
"(if(hash-ref seen_760 mi_755 #f)"
"(let-values()"
"                                                (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_755)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_755"
"(reverse$1"
"(let-values(((lst_770)(module-requires m_766)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_770)))"
"((letrec-values(((for-loop_771)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((phase+mpis_774)"
"(unsafe-car lst_0))"
"((rest_775)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_776)"
"(let-values(((fold-var_777)"
" fold-var_0))"
"(let-values(((fold-var_778)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_774)"
"(reverse$1"
"(let-values(((lst_779)"
"(cdr"
" phase+mpis_774)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_779)))"
"((letrec-values(((for-loop_780)"
"(lambda(fold-var_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((req-mpi_783)"
"(unsafe-car"
" lst_1))"
"((rest_784)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_785)"
"(let-values(((fold-var_786)"
" fold-var_1))"
"(let-values(((fold-var_787)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" req-mpi_783"
"(module-self"
" m_766)"
" mpi_767))"
" fold-var_786))))"
"(values"
" fold-var_787)))))"
"(if(not"
" #f)"
"(for-loop_780"
" fold-var_785"
" rest_784)"
" fold-var_785)))"
" fold-var_1)))))"
" for-loop_780)"
" null"
" lst_779))))))"
" fold-var_777))))"
"(values"
" fold-var_778)))))"
"(if(not #f)"
"(for-loop_771 fold-var_776 rest_775)"
" fold-var_776)))"
" fold-var_0)))))"
" for-loop_771)"
" null"
" lst_770)))))))"
"(let-values(((lst_788)(module-instance-shifted-requires mi_755)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_788)))"
"((letrec-values(((for-loop_789)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((phase+mpis_791)"
"(unsafe-car lst_0))"
"((rest_792)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_793)"
"(car"
" phase+mpis_791)))"
"(begin"
"(let-values(((lst_794)"
"(cdr"
" phase+mpis_791)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_794)))"
"((letrec-values(((for-loop_795)"
"(lambda(lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((req-mpi_797)"
"(unsafe-car"
" lst_1))"
"((rest_798)"
"(unsafe-cdr"
" lst_1)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ns215_800)"
" ns_756)"
"((req-mpi216_801)"
" req-mpi_797)"
"((temp217_802)"
"(phase+"
" instance-phase_762"
" req-phase_793))"
"((run-phase218_803)"
" run-phase_757)"
"((skip-run?219_804)"
" skip-run?_758)"
"((otherwise-available?220_805)"
" otherwise-available?_759)"
"((temp221_806)"
"(hash-set"
" seen_760"
" mi_755"
" #t)))"
"(namespace-module-instantiate!96.1"
" otherwise-available?220_805"
" run-phase218_803"
" temp221_806"
" skip-run?219_804"
" ns215_800"
" req-mpi216_801"
" temp217_802)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_795"
" rest_798)"
"(values))))"
"(values))))))"
" for-loop_795)"
" lst_794)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_789 rest_792)"
"(values))))"
"(values))))))"
" for-loop_789)"
" lst_788)))"
"(void)"
"(if(label-phase? instance-phase_762)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((start_807)(module-max-phase-level m_766))"
"((end_808)(sub1(module-min-phase-level m_766)))"
"((inc_809) -1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_807 end_808 inc_809)))"
"((letrec-values(((for-loop_810)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(> pos_0 end_808)"
"(let-values(((phase-level_812) pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_813)"
"(phase+"
" phase-level_812"
" phase-shift_768)))"
"(if(if(not"
" skip-run?_758)"
"(eqv?"
" phase_813"
" run-phase_757)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(small-hash-ref"
"(module-instance-phase-level-to-state"
" mi_755)"
" phase-level_812"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(small-hash-set!"
"(module-instance-phase-level-to-state"
" mi_755)"
" phase-level_812"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_761"
" phase-level_812))"
"(values))))"
"(let-values(((p-ns_814)"
"(namespace->namespace-at-phase"
" m-ns_761"
" phase_813)))"
"(let-values(((insp_815)"
"(module-inspector"
" m_766)))"
"(let-values(((data-box_816)"
"(module-instance-data-box"
" mi_755)))"
"(let-values(((prep_817)"
"(module-prepare-instance"
" m_766)))"
"(let-values(((go_818)"
"(module-instantiate-phase"
" m_766)))"
"(begin"
"(prep_817"
" data-box_816"
" p-ns_814"
" phase-shift_768"
" mpi_767"
" bulk-binding-registry_769"
" insp_815)"
"(go_818"
" data-box_816"
" p-ns_814"
" phase-shift_768"
" phase-level_812"
" mpi_767"
" bulk-binding-registry_769"
" insp_815))))))))))))"
"(if(if otherwise-available?_759"
"(if(not"
"(negative?"
" run-phase_757))"
"(not"
"(small-hash-ref"
"(module-instance-phase-level-to-state"
" mi_755)"
" phase-level_812"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_756)"
" phase_813"
"(lambda(l_0)"
"(cons"
" mi_755"
" l_0))"
" null)"
"(small-hash-set!"
"(module-instance-phase-level-to-state"
" mi_755)"
" phase-level_812"
" 'available)))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_810(+ pos_0 inc_809))"
"(values))))"
"(values))))))"
" for-loop_810)"
" start_807)))"
"(void))))"
"(if otherwise-available?_759"
"(let-values()(set-module-instance-made-available?! mi_755 #t))"
"(void))"
"(if skip-run?_758"
"(void)"
"(let-values()"
"(small-hash-set!"
"(module-instance-phase-level-to-state mi_755)"
" run-phase-level_763"
" 'started)))))))))))))))))))))))))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!130_841)"
"(lambda(ns129_0 run-phase128_0)"
"(begin"
" 'namespace-visit-available-modules!130"
"(let-values(((ns_844) ns129_0))"
"(let-values(((run-phase_845)"
"(if(eq? run-phase128_0 unsafe-undefined)(namespace-phase ns_844) run-phase128_0)))"
"(let-values()(namespace-run-available-modules! ns_844(add1 run-phase_845)))))))))"
"(case-lambda"
"((ns_0)(begin(namespace-visit-available-modules!130_841 ns_0 unsafe-undefined)))"
"((ns_0 run-phase128_0)(namespace-visit-available-modules!130_841 ns_0 run-phase128_0)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!134_849)"
"(lambda(ns133_0 run-phase132_0)"
"(begin"
" 'namespace-run-available-modules!134"
"(let-values(((ns_852) ns133_0))"
"(let-values(((run-phase_853)"
"(if(eq? run-phase132_0 unsafe-undefined)(namespace-phase ns_852) run-phase132_0)))"
"(let-values()"
"(registry-call-with-lock"
"(namespace-module-registry$1 ns_852)"
"(lambda()"
"((letrec-values(((loop_854)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((mis_855)"
"(hash-ref"
"(namespace-available-module-instances ns_852)"
" run-phase_853"
" null)))"
"(if(null? mis_855)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_852)"
" run-phase_853"
" null)"
"(let-values(((lst_856)(reverse$1 mis_855)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_856)))"
"((letrec-values(((for-loop_857)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((mi_859)"
"(unsafe-car lst_0))"
"((rest_860)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mi222_862)"
" mi_859)"
"((ns223_863)"
" ns_852)"
"((run-phase224_864)"
" run-phase_853)"
"((temp225_865)"
" #f)"
"((temp226_866)"
" #f))"
"(run-module-instance!125.1"
" temp226_866"
" run-phase224_864"
" unsafe-undefined"
" temp225_865"
" mi222_862"
" ns223_863)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_857 rest_860)"
"(values))))"
"(values))))))"
" for-loop_857)"
" lst_856)))"
"(void)"
"(loop_854)))))))))"
" loop_854)))))))))))"
"(case-lambda"
"((ns_0)(begin(namespace-run-available-modules!134_849 ns_0 unsafe-undefined)))"
"((ns_0 run-phase132_0)(namespace-run-available-modules!134_849 ns_0 run-phase132_0)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_0 name_0)"
"(begin"
"(let-values(((mi_872)(hash-ref(namespace-module-instances ns_0)(1/make-resolved-module-path name_0))))"
"(let-values(((mi227_874) mi_872)((ns228_875) ns_0)((temp229_876) 1)((temp230_877) #f)((temp231_878) #t))"
"(run-module-instance!125.1 temp231_878 temp229_876 unsafe-undefined temp230_877 mi227_874 ns228_875))))))"
"(define-values"
"(namespace-module-use->module+linklet-instances144.1)"
"(lambda(phase-shift138_0 shift-from136_0 shift-to137_0 ns142_0 mu143_0)"
"(begin"
" 'namespace-module-use->module+linklet-instances144"
"(let-values(((ns_890) ns142_0))"
"(let-values(((mu_891) mu143_0))"
"(let-values(((shift-from_892) shift-from136_0))"
"(let-values(((shift-to_893) shift-to137_0))"
"(let-values(((phase-shift_894) phase-shift138_0))"
"(let-values()"
"(let-values(((mod_895)(module-use-module mu_891)))"
"(let-values(((mi_896)"
"(let-values(((ns232_900) ns_890)"
"((temp233_901)"
"(1/module-path-index-resolve"
"(if shift-from_892"
"(module-path-index-shift mod_895 shift-from_892 shift-to_893)"
" mod_895)))"
"((phase-shift234_902) phase-shift_894)"
"((temp235_903) #t))"
"(namespace->module-instance70.1"
" #f"
" temp235_903"
" unsafe-undefined"
" ns232_900"
" temp233_901"
" phase-shift234_902))))"
"(let-values(((m-ns_897)(module-instance-namespace mi_896)))"
"(let-values(((d_898)"
"(small-hash-ref"
"(namespace-phase-level-to-definitions m-ns_897)"
"(module-use-phase mu_891)"
" #f)))"
"(if d_898"
"(values mi_896(definitions-variables d_898))"
"(error"
" 'eval"
"(string-append"
"                              \"namespace mismatch: phase level not found;\\n\""
"                              \"  module: ~a\\n\""
"                              \"  phase level: ~a\\n\""
"                              \"  found phase levels: ~a\")"
" mod_895"
"(module-use-phase mu_891)"
"(small-hash-keys(namespace-phase-level-to-definitions m-ns_897)))))))))))))))))"
"(define-values"
"(unresolve-requires)"
"(lambda(requires_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_924) requires_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_924)))"
"((letrec-values(((for-loop_925)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((phase+mpis_928)(unsafe-car lst_0))((rest_929)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_930)"
"(let-values(((fold-var_931) fold-var_0))"
"(let-values(((fold-var_932)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car phase+mpis_928)"
"(reverse$1"
"(let-values(((lst_933)(cdr phase+mpis_928)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_933)))"
"((letrec-values(((for-loop_934)"
"(lambda(fold-var_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair? lst_1)"
"(let-values(((req-mpi_937)"
"(unsafe-car"
" lst_1))"
"((rest_938)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_939)"
"(let-values(((fold-var_940)"
" fold-var_1))"
"(let-values(((fold-var_941)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-unresolve"
" req-mpi_937))"
" fold-var_940))))"
"(values"
" fold-var_941)))))"
"(if(not #f)"
"(for-loop_934"
" fold-var_939"
" rest_938)"
" fold-var_939)))"
" fold-var_1)))))"
" for-loop_934)"
" null"
" lst_933))))))"
" fold-var_931))))"
"(values fold-var_932)))))"
"(if(not #f)(for-loop_925 fold-var_930 rest_929) fold-var_930)))"
" fold-var_0)))))"
" for-loop_925)"
" null"
" lst_924)))))))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_0)"
"(begin"
"(let-values(((access_943)"
"(let-values(((ht_944)(module-provides m_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_944)))"
"((letrec-values(((for-loop_945)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_948 at-phase_949)"
"(hash-iterate-key+value ht_944 i_0)))"
"(let-values(((table_950)"
"(let-values(((table_951) table_0))"
"(let-values(((table_952)"
"(let-values()"
"(let-values(((key_953 val_954)"
"(let-values()"
"(values"
" phase_948"
"(let-values(((ht_955)"
" at-phase_949))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_955)))"
"((letrec-values(((for-loop_956)"
"(lambda(table_1"
" i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((sym_959"
" binding/p_960)"
"(hash-iterate-key+value"
" ht_955"
" i_1)))"
"(let-values(((table_961)"
"(let-values(((table_962)"
" table_1))"
"(let-values(((table_963)"
"(let-values()"
"(let-values(((key_964"
" val_965)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_960))"
"(if(provided-as-protected?"
" binding/p_960)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_962"
" key_964"
" val_965)))))"
"(values"
" table_963)))))"
"(if(not"
" #f)"
"(for-loop_956"
" table_961"
"(hash-iterate-next"
" ht_955"
" i_1))"
" table_961)))"
" table_1)))))"
" for-loop_956)"
" '#hash()"
"(hash-iterate-first"
" ht_955))))))))"
"(hash-set"
" table_951"
" key_953"
" val_954)))))"
"(values table_952)))))"
"(if(not #f)"
"(for-loop_945 table_950(hash-iterate-next ht_944 i_0))"
" table_950)))"
" table_0)))))"
" for-loop_945)"
" '#hasheqv()"
"(hash-iterate-first ht_944))))))"
"(begin(set-module-access! m_0 access_943) access_943)))))"
"(define-values"
"(binding->module-instance)"
"(lambda(b_0 ns_0 phase_0 id_0)"
"(begin"
"(let-values(((at-phase_5)(phase- phase_0(module-binding-phase b_0))))"
"(let-values(((mi_6)"
"(let-values(((ns1_8) ns_0)"
"((temp2_9)(1/module-path-index-resolve(module-binding-module b_0)))"
"((at-phase3_10) at-phase_5)"
"((temp4_11)(module-binding-phase b_0))"
"((temp5_12)(lambda(mi_0) 'unavailable)))"
"(namespace->module-instance70.1 temp4_11 #f temp5_12 ns1_8 temp2_9 at-phase3_10))))"
"(begin"
"(if(eq? mi_6 'unavailable)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                   \"module mismatch;\\n\""
"                   \" attempted to use a module that is not available\\n\""
"                   \"  possible cause:\\n\""
"                   \"   using (dynamic-require .... #f)\\n\""
"                   \"   but need (dynamic-require .... 0)\\n\""
"                   \"  module: ~s\\n\""
"                   \"  phase: ~s\")"
"(module-binding-module b_0)"
"(phase+ at-phase_5(module-binding-phase b_0)))"
" id_0))"
"(void))"
"(if mi_6"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                  \"namespace mismatch; cannot locate module instance\\n\""
"                  \"  module: ~s\\n\""
"                  \"  use phase: ~a\\n\""
"                  \"  definition phase: ~a\\n\""
"                  \"  for identifier: ~s\")"
"(module-binding-module b_0)"
" phase_0"
"(module-binding-phase b_0)"
" id_0)))"
" mi_6))))))"
"(define-values"
"(check-access)"
"(lambda(b_0 mi_0 id_0 in-s_0 what_0)"
"(begin"
"(let-values(((m_6)(module-instance-module mi_0)))"
"(if(if m_6(not(module-no-protected? m_6)) #f)"
"(let-values()"
"(let-values(((access_7)"
"(let-values(((or-part_9)(module-access m_6)))"
"(if or-part_9 or-part_9(module-compute-access! m_6)))))"
"(let-values(((a_8)"
"(hash-ref"
"(hash-ref access_7(module-binding-phase b_0) '#hasheq())"
"(module-binding-sym b_0)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_8 'unexported)))(if or-part_10 or-part_10(eq? a_8 'protected)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_11)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_0)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_0)))))"
"(if or-part_11"
" or-part_11"
"(if(module-binding-extra-inspector b_0)"
"(inspector-superior?"
"(module-binding-extra-inspector b_0)"
"(namespace-inspector(module-instance-namespace mi_0)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_13)"
"(let-values(((c-id_14)"
"(let-values(((or-part_15) in-s_0))"
"(if or-part_15 or-part_15(module-binding-sym b_0)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_14)(syntax-content c-id_14) c-id_14)"
"(syntax-content id_0)))"
" c-id_14"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                              \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_8"
" what_0"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_0))))"
" complain-id_13"
" id_0"
" null))))"
" #t))"
"(let-values() #f)))))"
"(let-values() #f))))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_0 phase_0 ns_0)"
"(begin"
"((letrec-values(((loop_19)"
"(lambda(id_1 in-s_0)"
"(begin"
" 'loop"
"(let-values(((b_22)"
"(let-values(((id1_24) id_1)((phase2_25) phase_0)((temp3_26) #t))"
"(resolve+shift28.1 #f #f null temp3_26 #f id1_24 phase2_25))))"
"(let-values(((c1_27)(binding-free=id b_22)))"
"(if c1_27"
"((lambda(next-id_0)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_22)"
"(not"
"(top-level-module-path-index?(module-binding-module b_22)))"
" #f)"
"(let-values()"
"(let-values(((mi_30)"
"(binding->module-instance"
" b_22"
" ns_0"
" phase_0"
" id_1)))"
"                                                           (check-access b_22 mi_30 id_1 in-s_0 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_29)"
"(loop_19"
" next-id_0"
"(let-values(((or-part_31) in-s_0))"
"(if or-part_31 or-part_31 id_1)))))"
"(if(not next-b_29)"
"(let-values() b_22)"
"(if(if(module-binding? next-b_29)"
"(if(not(module-binding-extra-inspector next-b_29))"
"(syntax-inspector id_1)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((next-b4_33) next-b_29)"
"((temp5_34)(syntax-inspector id_1)))"
"(module-binding-update48.1"
" temp5_34"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" next-b4_33)))"
"(let-values() next-b_29))))))"
" c1_27)"
"(let-values() b_22))))))))"
" loop_19)"
" id_0"
" #f))))"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_0 info_0)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)"
"(if(procedure? v_0)"
"(let-values(((or-part_5)(procedure-arity-includes? v_0 1)))"
"(if or-part_5 or-part_5(procedure-arity-includes? v_0 2)))"
" #f)))"
"(if or-part_4 or-part_4(exact-nonnegative-integer? v_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_0)"
"(let-values()"
"(begin"
"(if(<= v_0(list-ref info_0 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_0"
"                                  \"initialized-field count\""
"(list-ref info_0 1))))"
"(if(member v_0(list-ref info_0 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_0)))))"
"(void))"
"(values))))"
"(let-values(((ref_3)(list-ref info_0 3)))"
"(if(integer? v_0)"
"(let-values()"
"(lambda(t_0)"
"(let-values(((p_7)(ref_3 t_0 v_0)))"
"(if(if(procedure? p_7)(procedure-arity-includes? p_7 1) #f)"
" p_7"
"                     (lambda (s_0) (error \"bad syntax:\" s_0))))))"
"(let-values()(lambda(t_0) v_0)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_10 set!-transformer1_11 set!-transformer?_12 set!-transformer-proc_13)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))))"
"(values struct:_15 make-_16 ?_17(make-struct-field-accessor -ref_18 0 'proc)))))"
"(lambda(proc_0)"
"(begin"
" 'make-set!-transformer"
"(begin"
"(if(if(procedure? proc_0)(procedure-arity-includes? proc_0 1) #f)"
"(void)"
"              (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_0)))"
"(set!-transformer1_11 proc_0)))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_0)"
"(begin"
" 'set!-transformer-procedure"
"(let-values(((v_37)((set!-transformer-value t_0) t_0)))"
"(if(procedure-arity-includes? v_37 1) v_37(lambda(s_0)(v_37 t_0 s_0)))))))"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_0 key_0 val_0)(begin(hash-set env_0 key_0 val_0))))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_0)"
"(begin(let-values(((or-part_10)(eq? t_0 variable)))(if or-part_10 or-part_10(local-variable? t_0))))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_11 make-_12 ?_13 -ref_14 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'local-variable"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'local-variable)))))"
"(values struct:_11 make-_12 ?_13(make-struct-field-accessor -ref_14 0 'id))))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_0 id4_0 t5_0)"
"(begin"
" 'substitute-variable6"
"(let-values(((id_40) id4_0))"
"(let-values(((t_41) t5_0))"
"(let-values(((no-stops?_42) no-stops?2_0))"
"(let-values()"
"(if(if no-stops?_42(local-variable? t_41) #f)"
"(let-values(((bind-id_43)(local-variable-id t_41)))"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 bind-id_43)(syntax-e$1 bind-id_43) id_40 id_40)"
" id_40))"
" id_40))))))))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_0)"
"(begin"
"(let-values(((or-part_58)(procedure? t_0)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)(1/set!-transformer? t_0)))"
"(if or-part_59 or-part_59(1/rename-transformer? t_0))))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_0)"
"(begin"
"(if(1/set!-transformer? t_0)"
"(let-values()(1/set!-transformer-procedure t_0))"
"(if(1/rename-transformer? t_0)(let-values()(lambda(s_0) s_0))(let-values() t_0))))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_62 make-_63 ?_64 -ref_65 -set!_66)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'core-form"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '(0 1)"
" #f"
" 'core-form)))))"
"(values"
" struct:_62"
" make-_63"
" ?_64"
"(make-struct-field-accessor -ref_65 0 'expander)"
"(make-struct-field-accessor -ref_65 1 'name))))"
"(define-values"
"(add-binding!17.1)"
"(lambda(in10_0 just-for-nominal?11_0 id14_0 binding15_0 phase16_0)"
"(begin"
" 'add-binding!17"
"(let-values(((id_92) id14_0))"
"(let-values(((binding_93) binding15_0))"
"(let-values(((phase_94) phase16_0))"
"(let-values(((in-s_95) in10_0))"
"(let-values(((just-for-nominal?_96) just-for-nominal?11_0))"
"(let-values()"
"(begin"
"(check-id-taint id_92 in-s_95)"
"(let-values(((temp55_98)(syntax-scope-set id_92 phase_94))"
"((temp56_99)(syntax-e$1 id_92))"
"((binding57_100) binding_93)"
"((just-for-nominal?58_101) just-for-nominal?_96))"
"(add-binding-in-scopes!20.1 just-for-nominal?58_101 temp55_98 temp56_99 binding57_100))))))))))))"
"(define-values"
"(add-bulk-binding!27.1)"
"(lambda(in20_0 shadow-except21_0 s24_0 binding25_0 phase26_0)"
"(begin"
" 'add-bulk-binding!27"
"(let-values(((s_133) s24_0))"
"(let-values(((binding_134) binding25_0))"
"(let-values(((phase_135) phase26_0))"
"(let-values(((in-s_136) in20_0))"
"(let-values(((shadow-except_137) shadow-except21_0))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_133)"
"                      (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_136 s_133))"
"(void))"
"(let-values(((temp59_139)(syntax-scope-set s_133 phase_135))"
"((binding60_140) binding_134)"
"((shadow-except61_141) shadow-except_137))"
"(add-bulk-binding-in-scopes!27.1 shadow-except61_141 temp59_139 binding60_140))))))))))))"
"(define-values"
"(add-local-binding!37.1)"
"(lambda(frame-id30_0 in31_0 id34_0 phase35_0 counter36_0)"
"(begin"
" 'add-local-binding!37"
"(let-values(((id_173) id34_0))"
"(let-values(((phase_174) phase35_0))"
"(let-values(((counter_175) counter36_0))"
"(let-values(((frame-id_176) frame-id30_0))"
"(let-values(((in-s_177) in31_0))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_173 in-s_177)(values))))"
"(let-values((()(begin(set-box! counter_175(add1(unbox counter_175)))(values))))"
"(let-values(((key_178)"
"(string->uninterned-symbol"
"                                     (format \"~a_~a\" (syntax-e$1 id_173) (unbox counter_175)))))"
"(begin"
"(let-values(((temp62_179)(syntax-scope-set id_173 phase_174))"
"((temp63_180)(syntax-e$1 id_173))"
"((temp64_181)"
"(let-values(((key65_183) key_178)((frame-id66_184) frame-id_176))"
"(make-local-binding7.1 frame-id66_184 #f key65_183))))"
"(add-binding-in-scopes!20.1 #f temp62_179 temp63_180 temp64_181))"
" key_178)))))))))))))"
"(define-values"
"(check-id-taint)"
"(lambda(id_0 in-s_0)"
"(begin"
"(if(syntax-tainted?$1 id_0)"
"        (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_0 id_0))"
"(void)))))"
"(define-values"
"(binding-lookup50.1)"
"(lambda(in40_0 out-of-context-as-variable?41_0 b44_0 env45_0 lift-envs46_0 ns47_0 phase48_0 id49_0)"
"(begin"
" 'binding-lookup50"
"(let-values(((b_221) b44_0))"
"(let-values(((env_222) env45_0))"
"(let-values(((lift-envs_223) lift-envs46_0))"
"(let-values(((ns_224) ns47_0))"
"(let-values(((phase_225) phase48_0))"
"(let-values(((id_226) id49_0))"
"(let-values(((in-s_227) in40_0))"
"(let-values(((out-of-context-as-variable?_228) out-of-context-as-variable?41_0))"
"(let-values()"
"(if(module-binding? b_221)"
"(let-values()"
"(let-values(((top-level?_229)"
"(top-level-module-path-index?(module-binding-module b_221))))"
"(let-values(((mi_230)"
"(if(not top-level?_229)"
"(binding->module-instance b_221 ns_224 phase_225 id_226)"
" #f)))"
"(let-values(((m_231)(if mi_230(module-instance-module mi_230) #f)))"
"(let-values(((primitive?_232)(if m_231(module-primitive? m_231) #f)))"
"(let-values(((m-ns_233)"
"(if top-level?_229"
" ns_224"
"(if mi_230(module-instance-namespace mi_230) #f))))"
"(let-values((()(begin(check-taint id_226)(values))))"
"(let-values(((t_234)"
"(namespace-get-transformer"
" m-ns_233"
"(module-binding-phase b_221)"
"(module-binding-sym b_221)"
" variable)))"
"(let-values(((protected?_235)"
"(if mi_230"
"(check-access"
" b_221"
" mi_230"
" id_226"
" in-s_227"
"                                                           (if (variable? t_234) \"variable\" \"transformer\"))"
" #f)))"
"(let-values(((insp_236)"
"(if mi_230"
"(if(module-instance-module mi_230)"
"(module-inspector(module-instance-module mi_230))"
" #f)"
" #f)))"
"(values t_234 primitive?_232 insp_236 protected?_235)))))))))))"
"(if(local-binding? b_221)"
"(let-values()"
"(let-values(((t_237)(hash-ref env_222(local-binding-key b_221) missing)))"
"(if(eq? t_237 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_238)"
"(let-values(((lst_239) lift-envs_223))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_239)))"
"((letrec-values(((for-loop_240)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((lift-env_243)"
"(unsafe-car lst_0))"
"((rest_244)"
"(unsafe-cdr lst_0)))"
"(let-values(((result_245)"
"(let-values()"
"(let-values(((result_247)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_243)"
"(local-binding-key"
" b_221)"
" #f)))))"
"(values"
" result_247)))))"
"(if(if(not"
"((lambda x_0 result_245)"
" lift-env_243))"
"(not #f)"
" #f)"
"(for-loop_240 result_245 rest_244)"
" result_245)))"
" result_0)))))"
" for-loop_240)"
" #f"
" lst_239)))))"
"(if or-part_238"
" or-part_238"
"(if out-of-context-as-variable?_228"
" variable"
"                                           (error \"identifier used out of context:\" id_226))))"
" #f"
" #f"
" #f))"
"(let-values()(begin(check-taint id_226)(values t_237 #f #f #f))))))"
"                            (let-values () (error \"internal error: unknown binding for lookup:\" b_221))))))))))))))))"
"(define-values"
"(check-taint)"
"(lambda(id_0)"
"(begin"
"(if(syntax-tainted?$1 id_0)"
"        (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_0))"
"(void)))))"
"(define-values(cons-ish)(lambda(a_0 b_0)(begin(if(null? b_0) a_0(cons a_0 b_0)))))"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_0)"
"(begin"
" 'to-syntax-list"
"(if(list? s_0)"
"(let-values() s_0)"
"(if(pair? s_0)"
"(let-values()(let-values(((r_303)(to-syntax-list.1(cdr s_0))))(if r_303(cons(car s_0) r_303) #f)))"
"(if(syntax?$1 s_0)(let-values()(to-syntax-list.1(syntax-e$1 s_0)))(let-values() #f)))))))"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(id-cache-0)(make-hasheq))"
"(define-values(id-cache-1)(make-hasheq))"
"(define-values"
"(core-id)"
"(lambda(sym_0 phase_0)"
"(begin"
"(if(eqv? phase_0 0)"
"(let-values()"
"(let-values(((or-part_18)(hash-ref id-cache-0 sym_0 #f)))"
"(if or-part_18"
" or-part_18"
"(let-values(((s_19)(datum->syntax$1 core-stx sym_0)))(begin(hash-set! id-cache-0 sym_0 s_19) s_19)))))"
"(if(eq? phase_0 1)"
"(let-values()"
"(let-values(((or-part_20)(hash-ref id-cache-1 sym_0 #f)))"
"(if or-part_20"
" or-part_20"
"(let-values(((s_21)(datum->syntax$1(syntax-shift-phase-level$1 core-stx 1) sym_0)))"
"(begin(hash-set! id-cache-1 sym_0 s_21) s_21)))))"
"(let-values()(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_0) sym_0)))))))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!*)"
"(lambda(sym_0 proc_0)"
"(begin(begin(add-core-binding! sym_0)(set! core-forms(hash-set core-forms sym_0 proc_0))))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_0 val_0)"
"(begin(begin(add-core-binding! sym_0)(set! core-primitives(hash-set core-primitives sym_0 val_0))))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_0)"
"(begin"
"(let-values(((temp1_27)(datum->syntax$1 core-stx sym_0))"
"((temp2_28)"
"(let-values(((core-mpi4_30) core-mpi)((temp5_31) 0)((sym6_32) sym_0))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" core-mpi4_30"
" temp5_31"
" sym6_32)))"
"((temp3_29) 0))"
"(add-binding!17.1 #f #f temp1_27 temp2_28 temp3_29)))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_0)"
"(begin"
"(let-values(((ns7_34) ns_0)"
"((temp8_35)"
"(let-values(((temp10_38) #t)"
"((temp11_39) #t)"
"((temp12_40) #t)"
"((core-mpi13_41) core-mpi)"
"((temp14_42)"
"(hasheqv"
" 0"
"(let-values(((lst_45)(list core-primitives core-forms))((lst_46) '(#f #t)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_45)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(table_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((syms_51)(unsafe-car lst_0))"
"((rest_52)(unsafe-cdr lst_0))"
"((syntax?_53)(unsafe-car lst_1))"
"((rest_54)(unsafe-cdr lst_1)))"
"(let-values(((table_55)"
"(let-values(((table_56) table_0))"
"(let-values(((ht_57) syms_51))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-keys ht_57)))"
"((letrec-values(((for-loop_58)"
"(lambda(table_1"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_61)"
"(hash-iterate-key"
" ht_57"
" i_0)))"
"(let-values(((table_62)"
"(let-values(((table_63)"
" table_1))"
"(let-values(((table_64)"
"(let-values()"
"(let-values(((key_65"
" val_66)"
"(let-values()"
"(let-values(((b_67)"
"(let-values(((core-mpi17_68)"
" core-mpi)"
"((temp18_69)"
" 0)"
"((sym19_70)"
" sym_61))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" core-mpi17_68"
" temp18_69"
" sym19_70))))"
"(values"
" sym_61"
"(if syntax?_53"
"(provided1.1"
" b_67"
" #f"
" #t)"
" b_67))))))"
"(hash-set"
" table_63"
" key_65"
" val_66)))))"
"(values"
" table_64)))))"
"(if(not"
" #f)"
"(for-loop_58"
" table_62"
"(hash-iterate-next"
" ht_57"
" i_0))"
" table_62)))"
" table_1)))))"
" for-loop_58)"
" table_56"
"(hash-iterate-first ht_57)))))))"
"(if(not #f)"
"(for-loop_47 table_55 rest_52 rest_54)"
" table_55)))"
" table_0)))))"
" for-loop_47)"
" '#hasheq()"
" lst_45"
" lst_46)))))"
"((temp15_43)"
"(lambda(phase-level_0 ns_1 insp_0)"
"(if(zero? phase-level_0)"
"(let-values(((ns_74)"
"(let-values(((ns20_75) ns_1)"
"((core-module-name21_76) core-module-name)"
"((temp22_77) 0))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" ns20_75"
" core-module-name21_76"
" temp22_77))))"
"(if ns_74"
"(module-linklet-info2.1(namespace->instance ns_74 0) #f core-mpi #f #f #f)"
" #f))"
" #f)))"
"((temp16_44)"
"(lambda(data-box_0 ns_1 phase_0 phase-level_0 self_0 bulk-binding-registry_0 insp_0)"
"(let-values(((tmp_85) phase-level_0))"
"(if(equal? tmp_85 0)"
"(let-values()"
"(begin"
"(let-values(((ht_86) core-primitives))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_86)))"
"((letrec-values(((for-loop_87)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_89 val_90)"
"(hash-iterate-key+value"
" ht_86"
" i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-consistent!"
" ns_1"
" 0"
" sym_89"
" val_90))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_87"
"(hash-iterate-next ht_86 i_0))"
"(values))))"
"(values))))))"
" for-loop_87)"
"(hash-iterate-first ht_86))))"
"(void)"
"(let-values(((ht_91) core-forms))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_91)))"
"((letrec-values(((for-loop_92)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_94 proc_95)"
"(hash-iterate-key+value"
" ht_91"
" i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_1"
" 0"
" sym_94"
"(if(procedure-arity-includes?"
" proc_95"
" 2)"
"(core-form9.1"
" proc_95"
" sym_94)"
" proc_95)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_92"
"(hash-iterate-next ht_91 i_0))"
"(values))))"
"(values))))))"
" for-loop_92)"
"(hash-iterate-first ht_91))))"
"(void)))"
"(let-values()(void)))))))"
"(make-module39.1"
" temp10_38"
" unsafe-undefined"
" unsafe-undefined"
" temp16_44"
" #f"
" 0"
" 0"
" temp11_39"
" temp15_43"
" temp12_40"
" unsafe-undefined"
" #f"
" temp14_42"
" null"
" core-mpi13_41"
" #f"
" null"
" #f)))"
"((core-module-name9_36) core-module-name))"
"(declare-module!58.1 #t ns7_34 temp8_35 core-module-name9_36)))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_0 phase_0)"
"(begin"
"(let-values(((ok?_98 id23_99 _24_100)"
"(let-values(((s_114) s_0))"
"(if(let-values(((s_115)(if(syntax?$1 s_114)(syntax-e$1 s_114) s_114)))"
"(if(pair? s_115)"
"(if(let-values(((s_116)(car s_115)))"
"(let-values(((or-part_117)(if(syntax?$1 s_116)(symbol?(syntax-e$1 s_116)) #f)))"
"(if or-part_117 or-part_117(symbol? s_116))))"
"(let-values(((s_118)(cdr s_115))) #t)"
" #f)"
" #f))"
"(let-values()"
"(let-values(((id23_120 _24_121)"
"(let-values(((s_122)(if(syntax?$1 s_114)(syntax-e$1 s_114) s_114)))"
"(let-values(((id25_123)(let-values(((s_125)(car s_122))) s_125))"
"((_26_124)(let-values(((s_126)(cdr s_122))) s_126)))"
"(values id25_123 _26_124)))))"
"(values #t id23_120 _24_121)))"
"(values #f #f #f)))))"
"(if ok?_98"
"(let-values(((b_127)"
"(let-values(((temp27_128) id23_99)((phase28_129) phase_0))"
"(resolve+shift28.1 #f #f null unsafe-undefined #f temp27_128 phase28_129))))"
"(if(module-binding? b_127)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_127)))"
"(module-binding-sym b_127)"
" #f)"
" #f))"
" #f)))))"
"(define-values"
"(free-id-set)"
"(lambda(phase_0 ids_0)"
"(begin"
"(let-values(((lst_3) ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(ht_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_7)(unsafe-car lst_0))((rest_8)(unsafe-cdr lst_0)))"
"(let-values(((ht_9)"
"(let-values(((ht_10) ht_0))"
"(let-values(((ht_11)"
"(let-values()"
"(let-values(((sym_12)"
"(identifier-binding-symbol$1"
" id_7"
" phase_0)))"
"(hash-set"
" ht_10"
" sym_12"
"(cons-ish id_7(hash-ref ht_10 sym_12 null)))))))"
"(values ht_11)))))"
"(if(not #f)(for-loop_4 ht_9 rest_8) ht_9)))"
" ht_0)))))"
" for-loop_4)"
" '#hasheq()"
" lst_3))))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values(free-id-set-empty?)(lambda(fs_0)(begin(eq? fs_0 empty-free-id-set))))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_0 phase_0 given-id_0)"
"(begin"
"(if(free-id-set-empty? fs_0)"
" #f"
"(let-values(((lst_17)(hash-ref fs_0(identifier-binding-symbol$1 given-id_0 phase_0) null)))"
"(begin"
"(void)"
"((letrec-values(((for-loop_18)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(not(null? lst_0))"
"(let-values(((id_21)(if(pair? lst_0)(car lst_0) lst_0))"
"((rest_22)(if(pair? lst_0)(cdr lst_0) null)))"
"(let-values(((result_23)"
"(let-values()"
"(let-values(((result_25)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_21"
" given-id_0"
" phase_0"
" phase_0)))))"
"(values result_25)))))"
"(if(if(not((lambda x_0 result_23) id_21))(not #f) #f)"
"(for-loop_18 result_23 rest_22)"
" result_23)))"
" result_0)))))"
" for-loop_18)"
" #f"
" lst_17)))))))"
"(define-values"
"(free-id-set-empty-or-just-module*?)"
"(lambda(fs_0 phase_0)"
"(begin"
"(let-values(((c_29)(hash-count fs_0)))"
"(let-values(((or-part_30)(zero? c_29)))"
"(if or-part_30"
" or-part_30"
"(if(= 1 c_29)"
"(let-values(((p-core-stx_31)(syntax-shift-phase-level$1 core-stx phase_0)))"
"(let-values(((mod-star-stx_32)(datum->syntax$1 p-core-stx_31 'module*)))"
"(free-identifier=?$1(car(hash-values fs_0)) mod-star-stx_32 phase_0 phase_0)))"
" #f)))))))"
"(define-values"
"(struct:expand-context/outer"
" expand-context/outer1.1"
" expand-context/outer?"
" expand-context/outer-context"
" expand-context/outer-env"
" expand-context/outer-scopes"
" expand-context/outer-def-ctx-scopes"
" expand-context/outer-binding-layer"
" expand-context/outer-reference-records"
" expand-context/outer-only-immediate?"
" expand-context/outer-need-eventually-defined"
" expand-context/outer-current-introduction-scopes"
" expand-context/outer-current-use-scopes"
" expand-context/outer-name)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context/outer"
" 11"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'expand-context/outer)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'context)"
"(make-struct-field-accessor -ref_9 1 'env)"
"(make-struct-field-accessor -ref_9 2 'scopes)"
"(make-struct-field-accessor -ref_9 3 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_9 4 'binding-layer)"
"(make-struct-field-accessor -ref_9 5 'reference-records)"
"(make-struct-field-accessor -ref_9 6 'only-immediate?)"
"(make-struct-field-accessor -ref_9 7 'need-eventually-defined)"
"(make-struct-field-accessor -ref_9 8 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_9 9 'current-use-scopes)"
"(make-struct-field-accessor -ref_9 10 'name))))"
"(define-values"
"(struct:expand-context/inner"
" expand-context/inner2.1"
" expand-context/inner?"
" expand-context/inner-to-parsed?"
" expand-context/inner-phase"
" expand-context/inner-namespace"
" expand-context/inner-just-once?"
" expand-context/inner-module-begin-k"
" expand-context/inner-allow-unbound?"
" expand-context/inner-in-local-expand?"
" expand-context/inner-keep-#%expression?"
" expand-context/inner-stops"
" expand-context/inner-declared-submodule-names"
" expand-context/inner-lifts"
" expand-context/inner-lift-envs"
" expand-context/inner-module-lifts"
" expand-context/inner-require-lifts"
" expand-context/inner-to-module-lifts"
" expand-context/inner-requires+provides"
" expand-context/inner-observer"
" expand-context/inner-for-serializable?"
" expand-context/inner-should-not-encounter-macros?)"
"(let-values(((struct:_76 make-_77 ?_78 -ref_79 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context/inner"
" struct:root-expand-context/inner"
" 19"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)"
" #f"
" 'expand-context/inner)))))"
"(values"
" struct:_76"
" make-_77"
" ?_78"
"(make-struct-field-accessor -ref_79 0 'to-parsed?)"
"(make-struct-field-accessor -ref_79 1 'phase)"
"(make-struct-field-accessor -ref_79 2 'namespace)"
"(make-struct-field-accessor -ref_79 3 'just-once?)"
"(make-struct-field-accessor -ref_79 4 'module-begin-k)"
"(make-struct-field-accessor -ref_79 5 'allow-unbound?)"
"(make-struct-field-accessor -ref_79 6 'in-local-expand?)"
"(make-struct-field-accessor -ref_79 7 'keep-#%expression?)"
"(make-struct-field-accessor -ref_79 8 'stops)"
"(make-struct-field-accessor -ref_79 9 'declared-submodule-names)"
"(make-struct-field-accessor -ref_79 10 'lifts)"
"(make-struct-field-accessor -ref_79 11 'lift-envs)"
"(make-struct-field-accessor -ref_79 12 'module-lifts)"
"(make-struct-field-accessor -ref_79 13 'require-lifts)"
"(make-struct-field-accessor -ref_79 14 'to-module-lifts)"
"(make-struct-field-accessor -ref_79 15 'requires+provides)"
"(make-struct-field-accessor -ref_79 16 'observer)"
"(make-struct-field-accessor -ref_79 17 'for-serializable?)"
"(make-struct-field-accessor -ref_79 18 'should-not-encounter-macros?))))"
"(define-values"
"(expand-context/make)"
"(lambda(self-mpi_0"
" module-scopes_0"
" post-expansion_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" use-site-scopes_0"
" defined-syms_0"
" frame-id_0"
" counter_0"
" lift-key_0"
" to-parsed?_0"
" context_0"
" phase_0"
" namespace_0"
" env_0"
" scopes_0"
" def-ctx-scopes_0"
" binding-layer_0"
" reference-records_0"
" only-immediate?_0"
" just-once?_0"
" module-begin-k_0"
" need-eventually-defined_0"
" allow-unbound?_0"
" in-local-expand?_0"
" keep-#%expression?_0"
" stops_0"
" current-introduction-scopes_0"
" current-use-scopes_0"
" declared-submodule-names_0"
" lifts_0"
" lift-envs_0"
" module-lifts_0"
" require-lifts_0"
" to-module-lifts_0"
" requires+provides_0"
" name_0"
" observer_0"
" for-serializable?_0"
" should-not-encounter-macros?_0)"
"(begin"
"(expand-context/outer1.1"
"(expand-context/inner2.1"
" self-mpi_0"
" module-scopes_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" defined-syms_0"
" counter_0"
" lift-key_0"
" to-parsed?_0"
" phase_0"
" namespace_0"
" just-once?_0"
" module-begin-k_0"
" allow-unbound?_0"
" in-local-expand?_0"
" keep-#%expression?_0"
" stops_0"
" declared-submodule-names_0"
" lifts_0"
" lift-envs_0"
" module-lifts_0"
" require-lifts_0"
" to-module-lifts_0"
" requires+provides_0"
" observer_0"
" for-serializable?_0"
" should-not-encounter-macros?_0)"
" post-expansion_0"
" use-site-scopes_0"
" frame-id_0"
" context_0"
" env_0"
" scopes_0"
" def-ctx-scopes_0"
" binding-layer_0"
" reference-records_0"
" only-immediate?_0"
" need-eventually-defined_0"
" current-introduction-scopes_0"
" current-use-scopes_0"
" name_0))))"
"(define-values(expand-context-context)(lambda(v_0)(begin(expand-context/outer-context v_0))))"
"(define-values(expand-context-env)(lambda(v_0)(begin(expand-context/outer-env v_0))))"
"(define-values(expand-context-scopes)(lambda(v_0)(begin(expand-context/outer-scopes v_0))))"
"(define-values(expand-context-def-ctx-scopes)(lambda(v_0)(begin(expand-context/outer-def-ctx-scopes v_0))))"
"(define-values(expand-context-binding-layer)(lambda(v_0)(begin(expand-context/outer-binding-layer v_0))))"
"(define-values(expand-context-reference-records)(lambda(v_0)(begin(expand-context/outer-reference-records v_0))))"
"(define-values(expand-context-only-immediate?)(lambda(v_0)(begin(expand-context/outer-only-immediate? v_0))))"
"(define-values"
"(expand-context-need-eventually-defined)"
"(lambda(v_0)(begin(expand-context/outer-need-eventually-defined v_0))))"
"(define-values"
"(expand-context-current-introduction-scopes)"
"(lambda(v_0)(begin(expand-context/outer-current-introduction-scopes v_0))))"
"(define-values"
"(expand-context-current-use-scopes)"
"(lambda(v_0)(begin(expand-context/outer-current-use-scopes v_0))))"
"(define-values(expand-context-name)(lambda(v_0)(begin(expand-context/outer-name v_0))))"
"(define-values"
"(expand-context-to-parsed?)"
"(lambda(v_0)(begin(expand-context/inner-to-parsed?(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-phase)"
"(lambda(v_0)(begin(expand-context/inner-phase(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-namespace)"
"(lambda(v_0)(begin(expand-context/inner-namespace(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-just-once?)"
"(lambda(v_0)(begin(expand-context/inner-just-once?(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-module-begin-k)"
"(lambda(v_0)(begin(expand-context/inner-module-begin-k(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-allow-unbound?)"
"(lambda(v_0)(begin(expand-context/inner-allow-unbound?(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-in-local-expand?)"
"(lambda(v_0)(begin(expand-context/inner-in-local-expand?(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-keep-#%expression?)"
"(lambda(v_0)(begin(expand-context/inner-keep-#%expression?(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-stops)"
"(lambda(v_0)(begin(expand-context/inner-stops(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-declared-submodule-names)"
"(lambda(v_0)(begin(expand-context/inner-declared-submodule-names(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-lifts)"
"(lambda(v_0)(begin(expand-context/inner-lifts(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-lift-envs)"
"(lambda(v_0)(begin(expand-context/inner-lift-envs(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-module-lifts)"
"(lambda(v_0)(begin(expand-context/inner-module-lifts(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-require-lifts)"
"(lambda(v_0)(begin(expand-context/inner-require-lifts(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-to-module-lifts)"
"(lambda(v_0)(begin(expand-context/inner-to-module-lifts(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-requires+provides)"
"(lambda(v_0)(begin(expand-context/inner-requires+provides(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-observer)"
"(lambda(v_0)(begin(expand-context/inner-observer(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-for-serializable?)"
"(lambda(v_0)(begin(expand-context/inner-for-serializable?(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(expand-context-should-not-encounter-macros?)"
"(lambda(v_0)(begin(expand-context/inner-should-not-encounter-macros?(root-expand-context/outer-inner v_0)))))"
"(define-values"
"(make-expand-context10.1)"
"(lambda(for-serializable?4_0 observer5_0 to-parsed?3_0 ns9_0)"
"(begin"
" 'make-expand-context10"
"(let-values(((ns_261) ns9_0))"
"(let-values(((to-parsed?_262) to-parsed?3_0))"
"(let-values(((for-serializable?_263) for-serializable?4_0))"
"(let-values(((observer_264) observer5_0))"
"(let-values()"
"(let-values(((root-ctx_265)(namespace-get-root-expand-ctx ns_261)))"
"(expand-context/make"
"(root-expand-context-self-mpi root-ctx_265)"
"(root-expand-context-module-scopes root-ctx_265)"
"(root-expand-context-post-expansion root-ctx_265)"
"(root-expand-context-top-level-bind-scope root-ctx_265)"
"(root-expand-context-all-scopes-stx root-ctx_265)"
"(root-expand-context-use-site-scopes root-ctx_265)"
"(root-expand-context-defined-syms root-ctx_265)"
"(root-expand-context-frame-id root-ctx_265)"
"(root-expand-context-counter root-ctx_265)"
"(root-expand-context-lift-key root-ctx_265)"
" to-parsed?_262"
" 'top-level"
"(namespace-phase ns_261)"
" ns_261"
" empty-env"
" null"
" #f"
"(root-expand-context-frame-id root-ctx_265)"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" #f"
" empty-free-id-set"
" null"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
" observer_264"
" for-serializable?_263"
" #f))))))))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_0 root-ctx_0)"
"(begin"
"(let-values(((v_294) ctx_0))"
"(let-values(((the-struct_295) v_294))"
"(if(expand-context/outer? the-struct_295)"
"(let-values(((post-expansion27_296)(root-expand-context-post-expansion root-ctx_0))"
"((use-site-scopes28_297)(root-expand-context-use-site-scopes root-ctx_0))"
"((frame-id29_298)(root-expand-context-frame-id root-ctx_0))"
"((binding-layer30_299)(root-expand-context-frame-id root-ctx_0))"
"((inner31_300)"
"(let-values(((the-struct_301)(root-expand-context/outer-inner v_294)))"
"(if(expand-context/inner? the-struct_301)"
"(let-values(((self-mpi32_302)(root-expand-context-self-mpi root-ctx_0))"
"((module-scopes33_303)(root-expand-context-module-scopes root-ctx_0))"
"((top-level-bind-scope34_304)"
"(root-expand-context-top-level-bind-scope root-ctx_0))"
"((all-scopes-stx35_305)(root-expand-context-all-scopes-stx root-ctx_0))"
"((defined-syms36_306)(root-expand-context-defined-syms root-ctx_0))"
"((counter37_307)(root-expand-context-counter root-ctx_0))"
"((lift-key38_308)(root-expand-context-lift-key root-ctx_0)))"
"(expand-context/inner2.1"
" self-mpi32_302"
" module-scopes33_303"
" top-level-bind-scope34_304"
" all-scopes-stx35_305"
" defined-syms36_306"
" counter37_307"
" lift-key38_308"
"(expand-context/inner-to-parsed? the-struct_301)"
"(expand-context/inner-phase the-struct_301)"
"(expand-context/inner-namespace the-struct_301)"
"(expand-context/inner-just-once? the-struct_301)"
"(expand-context/inner-module-begin-k the-struct_301)"
"(expand-context/inner-allow-unbound? the-struct_301)"
"(expand-context/inner-in-local-expand? the-struct_301)"
"(expand-context/inner-keep-#%expression? the-struct_301)"
"(expand-context/inner-stops the-struct_301)"
"(expand-context/inner-declared-submodule-names the-struct_301)"
"(expand-context/inner-lifts the-struct_301)"
"(expand-context/inner-lift-envs the-struct_301)"
"(expand-context/inner-module-lifts the-struct_301)"
"(expand-context/inner-require-lifts the-struct_301)"
"(expand-context/inner-to-module-lifts the-struct_301)"
"(expand-context/inner-requires+provides the-struct_301)"
"(expand-context/inner-observer the-struct_301)"
"(expand-context/inner-for-serializable? the-struct_301)"
"(expand-context/inner-should-not-encounter-macros? the-struct_301)))"
"                              (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_301)))))"
"(expand-context/outer1.1"
" inner31_300"
" post-expansion27_296"
" use-site-scopes28_297"
" frame-id29_298"
"(expand-context/outer-context the-struct_295)"
"(expand-context/outer-env the-struct_295)"
"(expand-context/outer-scopes the-struct_295)"
"(expand-context/outer-def-ctx-scopes the-struct_295)"
" binding-layer30_299"
"(expand-context/outer-reference-records the-struct_295)"
"(expand-context/outer-only-immediate? the-struct_295)"
"(expand-context/outer-need-eventually-defined the-struct_295)"
"(expand-context/outer-current-introduction-scopes the-struct_295)"
"(expand-context/outer-current-use-scopes the-struct_295)"
"(expand-context/outer-name the-struct_295)))"
"            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_295)))))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context16.1)"
"(lambda(fail-ok?13_0 who15_0)"
"(begin"
" 'get-current-expand-context16"
"(let-values(((who_311) who15_0))"
"(let-values(((fail-ok?_312) fail-ok?13_0))"
"(let-values()"
"(let-values(((or-part_313)(force(current-expand-context))))"
"(if or-part_313"
" or-part_313"
"                (if fail-ok?_312 #f (raise-arguments-error who_311 \"not currently expanding\"))))))))))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_0)"
"(begin"
"(if(let-values(((or-part_331)(not v_0)))"
"(if or-part_331 or-part_331(if(procedure? v_0)(procedure-arity-includes? v_0 2) #f)))"
"(void)"
"         (let-values () (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_0)))"
" v_0))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_0)"
"(begin"
"(if(if(eq? 'expression(expand-context-context ctx_0))(not(expand-context-name ctx_0)) #f)"
"(let-values() ctx_0)"
"(let-values()"
"(let-values(((v_333) ctx_0))"
"(let-values(((the-struct_334) v_333))"
"(if(expand-context/outer? the-struct_334)"
"(let-values(((context39_335) 'expression)"
"((name40_336) #f)"
"((post-expansion41_337) #f)"
"((inner42_338)(root-expand-context/outer-inner v_333)))"
"(expand-context/outer1.1"
" inner42_338"
" post-expansion41_337"
"(root-expand-context/outer-use-site-scopes the-struct_334)"
"(root-expand-context/outer-frame-id the-struct_334)"
" context39_335"
"(expand-context/outer-env the-struct_334)"
"(expand-context/outer-scopes the-struct_334)"
"(expand-context/outer-def-ctx-scopes the-struct_334)"
"(expand-context/outer-binding-layer the-struct_334)"
"(expand-context/outer-reference-records the-struct_334)"
"(expand-context/outer-only-immediate? the-struct_334)"
"(expand-context/outer-need-eventually-defined the-struct_334)"
"(expand-context/outer-current-introduction-scopes the-struct_334)"
"(expand-context/outer-current-use-scopes the-struct_334)"
" name40_336))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_334)))))))))"
"(define-values"
"(as-begin-expression-context)"
"(lambda(ctx_0)"
"(begin"
"(if(not(expand-context-name ctx_0))"
"(let-values() ctx_0)"
"(let-values()"
"(let-values(((v_340) ctx_0))"
"(let-values(((the-struct_341) v_340))"
"(if(expand-context/outer? the-struct_341)"
"(let-values(((name43_342) #f)((inner44_343)(root-expand-context/outer-inner v_340)))"
"(expand-context/outer1.1"
" inner44_343"
"(root-expand-context/outer-post-expansion the-struct_341)"
"(root-expand-context/outer-use-site-scopes the-struct_341)"
"(root-expand-context/outer-frame-id the-struct_341)"
"(expand-context/outer-context the-struct_341)"
"(expand-context/outer-env the-struct_341)"
"(expand-context/outer-scopes the-struct_341)"
"(expand-context/outer-def-ctx-scopes the-struct_341)"
"(expand-context/outer-binding-layer the-struct_341)"
"(expand-context/outer-reference-records the-struct_341)"
"(expand-context/outer-only-immediate? the-struct_341)"
"(expand-context/outer-need-eventually-defined the-struct_341)"
"(expand-context/outer-current-introduction-scopes the-struct_341)"
"(expand-context/outer-current-use-scopes the-struct_341)"
" name43_342))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_341)))))))))"
"(define-values"
"(as-tail-context22.1)"
"(lambda(wrt19_0 ctx21_0)"
"(begin"
" 'as-tail-context22"
"(let-values(((ctx_350) ctx21_0))"
"(let-values(((wrt-ctx_351) wrt19_0))"
"(let-values()"
"(if(expand-context-name wrt-ctx_351)"
"(let-values()"
"(let-values(((v_352) ctx_350))"
"(let-values(((the-struct_353) v_352))"
"(if(expand-context/outer? the-struct_353)"
"(let-values(((name45_354)(expand-context-name wrt-ctx_351))"
"((inner46_355)(root-expand-context/outer-inner v_352)))"
"(expand-context/outer1.1"
" inner46_355"
"(root-expand-context/outer-post-expansion the-struct_353)"
"(root-expand-context/outer-use-site-scopes the-struct_353)"
"(root-expand-context/outer-frame-id the-struct_353)"
"(expand-context/outer-context the-struct_353)"
"(expand-context/outer-env the-struct_353)"
"(expand-context/outer-scopes the-struct_353)"
"(expand-context/outer-def-ctx-scopes the-struct_353)"
"(expand-context/outer-binding-layer the-struct_353)"
"(expand-context/outer-reference-records the-struct_353)"
"(expand-context/outer-only-immediate? the-struct_353)"
"(expand-context/outer-need-eventually-defined the-struct_353)"
"(expand-context/outer-current-introduction-scopes the-struct_353)"
"(expand-context/outer-current-use-scopes the-struct_353)"
" name45_354))"
"                      (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_353)))))"
"(let-values() ctx_350))))))))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_0 ids_0)"
"(begin"
"(if(if(pair? ids_0)(null?(cdr ids_0)) #f)"
"(let-values()"
"(let-values(((v_368) ctx_0))"
"(let-values(((the-struct_369) v_368))"
"(if(expand-context/outer? the-struct_369)"
"(let-values(((name47_370)(car ids_0))((inner48_371)(root-expand-context/outer-inner v_368)))"
"(expand-context/outer1.1"
" inner48_371"
"(root-expand-context/outer-post-expansion the-struct_369)"
"(root-expand-context/outer-use-site-scopes the-struct_369)"
"(root-expand-context/outer-frame-id the-struct_369)"
"(expand-context/outer-context the-struct_369)"
"(expand-context/outer-env the-struct_369)"
"(expand-context/outer-scopes the-struct_369)"
"(expand-context/outer-def-ctx-scopes the-struct_369)"
"(expand-context/outer-binding-layer the-struct_369)"
"(expand-context/outer-reference-records the-struct_369)"
"(expand-context/outer-only-immediate? the-struct_369)"
"(expand-context/outer-need-eventually-defined the-struct_369)"
"(expand-context/outer-current-introduction-scopes the-struct_369)"
"(expand-context/outer-current-use-scopes the-struct_369)"
" name47_370))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_369)))))"
"(let-values() ctx_0)))))"
"(define-values"
"(as-to-parsed-context)"
"(lambda(ctx_0)"
"(begin"
"(let-values(((v_373) ctx_0))"
"(let-values(((the-struct_374) v_373))"
"(if(expand-context/outer? the-struct_374)"
"(let-values(((inner49_375)"
"(let-values(((the-struct_376)(root-expand-context/outer-inner v_373)))"
"(if(expand-context/inner? the-struct_376)"
"(let-values(((to-parsed?50_377) #t)"
"((observer51_378) #f)"
"((should-not-encounter-macros?52_379) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_376)"
"(root-expand-context/inner-module-scopes the-struct_376)"
"(root-expand-context/inner-top-level-bind-scope the-struct_376)"
"(root-expand-context/inner-all-scopes-stx the-struct_376)"
"(root-expand-context/inner-defined-syms the-struct_376)"
"(root-expand-context/inner-counter the-struct_376)"
"(root-expand-context/inner-lift-key the-struct_376)"
" to-parsed?50_377"
"(expand-context/inner-phase the-struct_376)"
"(expand-context/inner-namespace the-struct_376)"
"(expand-context/inner-just-once? the-struct_376)"
"(expand-context/inner-module-begin-k the-struct_376)"
"(expand-context/inner-allow-unbound? the-struct_376)"
"(expand-context/inner-in-local-expand? the-struct_376)"
"(expand-context/inner-keep-#%expression? the-struct_376)"
"(expand-context/inner-stops the-struct_376)"
"(expand-context/inner-declared-submodule-names the-struct_376)"
"(expand-context/inner-lifts the-struct_376)"
"(expand-context/inner-lift-envs the-struct_376)"
"(expand-context/inner-module-lifts the-struct_376)"
"(expand-context/inner-require-lifts the-struct_376)"
"(expand-context/inner-to-module-lifts the-struct_376)"
"(expand-context/inner-requires+provides the-struct_376)"
" observer51_378"
"(expand-context/inner-for-serializable? the-struct_376)"
" should-not-encounter-macros?52_379))"
"                              (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_376)))))"
"(expand-context/outer1.1"
" inner49_375"
"(root-expand-context/outer-post-expansion the-struct_374)"
"(root-expand-context/outer-use-site-scopes the-struct_374)"
"(root-expand-context/outer-frame-id the-struct_374)"
"(expand-context/outer-context the-struct_374)"
"(expand-context/outer-env the-struct_374)"
"(expand-context/outer-scopes the-struct_374)"
"(expand-context/outer-def-ctx-scopes the-struct_374)"
"(expand-context/outer-binding-layer the-struct_374)"
"(expand-context/outer-reference-records the-struct_374)"
"(expand-context/outer-only-immediate? the-struct_374)"
"(expand-context/outer-need-eventually-defined the-struct_374)"
"(expand-context/outer-current-introduction-scopes the-struct_374)"
"(expand-context/outer-current-use-scopes the-struct_374)"
"(expand-context/outer-name the-struct_374)))"
"            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_374)))))))"
"(call-with-values"
"(lambda()"
"(set-current-previously-unbound!"
"(lambda()"
"(let-values(((ctx_380)(current-expand-context)))"
"(let-values(((phase-to-ids_381)(if ctx_380(expand-context-need-eventually-defined ctx_380) #f)))"
"(if phase-to-ids_381(hash-ref phase-to-ids_381(expand-context-phase ctx_380) null) #f))))))"
" print-values)"
"(define-values"
"(taint-dispatch)"
"(lambda(s_0 proc_0 phase_0)"
"(begin"
"((letrec-values(((loop_4)"
"(lambda(s_1 mode_0)"
"(begin"
" 'loop"
"(let-values(((tmp_7) mode_0))"
"(if(equal? tmp_7 'none)"
"(let-values() s_1)"
"(if(equal? tmp_7 'opaque)"
"(let-values()(proc_0 s_1))"
"(if(equal? tmp_7 'transparent)"
"(let-values()"
"(let-values(((c_8)"
"(let-values(((s_9)"
"(let-values(((or-part_13)(syntax->list$1 s_1)))"
"(if or-part_13 or-part_13(syntax-e$1 s_1))))"
"((f_10)(lambda(tail?_0 d_0)(begin 'f d_0)))"
"((s->_11)"
"(lambda(s_2)"
"(begin"
" 's->"
"(loop_4 s_2(syntax-taint-mode-property s_2)))))"
"((seen_12) #f))"
"(let-values(((s_17) s_9)"
"((f_18) f_10)"
"((gf_19)"
"(lambda(tail?_0 v_0)"
"(begin"
" 'gf"
"(if(syntax?$1 v_0)"
"(let-values()(s->_11 v_0))"
"(let-values()(f_10 tail?_0 v_0))))))"
"((seen_20) seen_12))"
"((letrec-values(((loop_23)"
"(lambda(tail?_0 s_2 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_27)"
"(fx+ 1 prev-depth_0)))"
"(if(if seen_20(fx> depth_27 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)"
"(gf_19 tail?_1 s_3))"
" seen_20))"
"(if(null? s_2)"
"(let-values()(f_18 tail?_0 s_2))"
"(if(pair? s_2)"
"(let-values()"
"(f_18"
" tail?_0"
"(cons"
"(loop_23"
" #f"
"(car s_2)"
" depth_27)"
"(loop_23"
" #t"
"(cdr s_2)"
" depth_27))))"
"(if(symbol? s_2)"
"(let-values()(f_18 #f s_2))"
"(if(boolean? s_2)"
"(let-values()(f_18 #f s_2))"
"(if(number? s_2)"
"(let-values()"
"(f_18 #f s_2))"
"(if(let-values(((or-part_30)"
"(vector?"
" s_2)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)"
"(box?"
" s_2)))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)"
"(prefab-struct-key"
" s_2)))"
"(if or-part_32"
" or-part_32"
"(hash?"
" s_2)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)"
"(gf_19 tail?_1 s_3))"
" seen_20))"
"(let-values()"
"(gf_19"
" #f"
" s_2))))))))))))))"
" loop_23)"
" #f"
" s_17"
" 0)))))"
"(datum->syntax$1"
" #f"
" c_8"
" s_1"
"(if(syntax-any-macro-scopes? s_1)"
"(1/syntax-property-remove s_1 original-property-sym)"
" s_1))))"
"(if(equal? tmp_7 'transparent-binding)"
"(let-values()"
"(let-values(((c_35)(syntax-e$1 s_1)))"
"(if(pair? c_35)"
"(let-values()"
"(let-values(((cd_36)(cdr c_35)))"
"(if(let-values(((or-part_37)(pair? cd_36)))"
"(if or-part_37"
" or-part_37"
"(if(syntax?$1 cd_36)(pair?(syntax-e$1 cd_36)) #f)))"
"(let-values()"
"(let-values(((d_38)"
"(if(syntax?$1 cd_36)(syntax-e$1 cd_36) cd_36)))"
"(datum->syntax$1"
" #f"
"(cons"
"(loop_4(car c_35)(syntax-taint-mode-property(car c_35)))"
"(cons"
"(loop_4(car d_38) 'transparent)"
"(let-values(((s_39)"
"(let-values(((or-part_43)"
"(syntax->list$1(cdr d_38))))"
"(if or-part_43 or-part_43(cdr d_38))))"
"((f_40)(lambda(tail?_0 d_0)(begin 'f d_0)))"
"((s->_41)"
"(lambda(s_2)"
"(begin"
" 's->"
"(loop_4"
" s_2"
"(syntax-taint-mode-property s_2)))))"
"((seen_42) #f))"
"(let-values(((s_47) s_39)"
"((f_48) f_40)"
"((gf_49)"
"(lambda(tail?_0 v_0)"
"(begin"
" 'gf"
"(if(syntax?$1 v_0)"
"(let-values()(s->_41 v_0))"
"(let-values()(f_40 tail?_0 v_0))))))"
"((seen_50) seen_42))"
"((letrec-values(((loop_53)"
"(lambda(tail?_0 s_2 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_57)"
"(fx+ 1 prev-depth_0)))"
"(if(if seen_50"
"(fx> depth_57 32)"
" #f)"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1 s_3)"
"(gf_49 tail?_1 s_3))"
" seen_50))"
"(if(null? s_2)"
"(let-values()"
"(f_48 tail?_0 s_2))"
"(if(pair? s_2)"
"(let-values()"
"(f_48"
" tail?_0"
"(cons"
"(loop_53"
" #f"
"(car s_2)"
" depth_57)"
"(loop_53"
" #t"
"(cdr s_2)"
" depth_57))))"
"(if(symbol? s_2)"
"(let-values()"
"(f_48 #f s_2))"
"(if(boolean? s_2)"
"(let-values()"
"(f_48 #f s_2))"
"(if(number? s_2)"
"(let-values()"
"(f_48 #f s_2))"
"(if(let-values(((or-part_60)"
"(vector?"
" s_2)))"
"(if or-part_60"
" or-part_60"
"(let-values(((or-part_61)"
"(box?"
" s_2)))"
"(if or-part_61"
" or-part_61"
"(let-values(((or-part_62)"
"(prefab-struct-key"
" s_2)))"
"(if or-part_62"
" or-part_62"
"(hash?"
" s_2)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_0"
" s_2"
"(lambda(tail?_1"
" s_3)"
"(gf_49"
" tail?_1"
" s_3))"
" seen_50))"
"(let-values()"
"(gf_49"
" #f"
" s_2))))))))))))))"
" loop_53)"
" #f"
" s_47"
" 0)))))"
" s_1"
"(if(syntax-any-macro-scopes? s_1)"
"(1/syntax-property-remove s_1 original-property-sym)"
" s_1))))"
"(let-values()(loop_4 s_1 'transparent)))))"
"(let-values()(loop_4 s_1 'transparent)))))"
"(let-values()"
"(let-values(((c_65)(syntax-e$1 s_1)))"
"(let-values(((tmp_66)(core-form-sym c_65 phase_0)))"
"(if(if(equal? tmp_66 'begin)"
" #t"
"(if(equal? tmp_66 'begin-for-syntax)"
" #t"
"(equal? tmp_66 '#%module-begin)))"
"(let-values()(loop_4 s_1 'transparent))"
"(if(if(equal? tmp_66 'define-values)"
" #t"
"(equal? tmp_66 'define-syntaxes))"
"(let-values()(loop_4 s_1 'transparent-binding))"
"(let-values()(loop_4 s_1 'opaque))))))))))))))))"
" loop_4)"
" s_0"
"(syntax-taint-mode-property s_0)))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_0)"
"(begin"
"(let-values(((or-part_68)(syntax-property$1 s_0 'taint-mode)))"
"(if or-part_68 or-part_68(syntax-property$1 s_0 'certify-mode))))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_0)(begin(1/syntax-property-remove(1/syntax-property-remove s_0 'taint-mode) 'certify-mode))))"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_0 phase_0 all-bindings?_0)"
"(begin"
" 'syntax-debug-info"
"(let-values(((hts_4)"
"(reverse$1"
"(let-values(((lst_6)(fallback->list(syntax-shifted-multi-scopes s_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((smss_10)(unsafe-car lst_0))"
"((rest_11)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_12)"
"(let-values(((fold-var_13) fold-var_0))"
"(let-values(((fold-var_14)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_15)"
"(if(identifier?"
" s_0)"
"(hasheq"
" 'name"
"(syntax-e$1 s_0))"
" '#hasheq())))"
"(let-values(((s-scs_16)"
"(scope-set-at-fallback"
" s_0"
" smss_10"
" phase_0)))"
"(let-values(((context_17)"
"(scope-set->context"
" s-scs_16)))"
"(let-values(((context-ht_18)"
"(hash-set"
" init-ht_15"
" 'context"
" context_17)))"
"(let-values(((sym_19)"
"(syntax-e$1"
" s_0)))"
"(let-values(((classify-binding_20)"
"(lambda(b_0)"
"(begin"
" 'classify-binding"
"(if(local-binding?"
" b_0)"
" 'local"
" 'module)))))"
"(let-values(((extract-binding_21)"
"(lambda(b_0)"
"(begin"
" 'extract-binding"
"(if(local-binding?"
" b_0)"
"(local-binding-key"
" b_0)"
"(vector"
"(module-binding-sym"
" b_0)"
"(module-binding-module"
" b_0)"
"(module-binding-phase"
" b_0)))))))"
"(let-values(((bindings_22)"
"(append"
"(if(identifier?"
" s_0)"
"(let-values()"
"(let-values(((bindings_25"
" covered-scopess_26)"
"(let-values(((ht_27)"
" s-scs_16))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys"
" ht_27)))"
"((letrec-values(((for-loop_28)"
"(lambda(bindings_0"
" covered-scope-sets_0"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_32)"
"(unsafe-immutable-hash-iterate-key"
" ht_27"
" i_0)))"
"(let-values(((bindings_33"
" covered-scope-sets_34)"
"(let-values(((ht_35"
" bulk-bindings_36)"
"(let-values(((table_39)"
"(scope-binding-table"
" sc_32)))"
"(if(hash?"
" table_39)"
"(values"
"(hash-ref"
" table_39"
" sym_19"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_39)"
" sym_19"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_39)))))"
"((s_37)"
" s_0)"
"((extra-shifts_38)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_40)"
"(lambda(bindings_1"
" covered-scope-sets_1"
" i_1)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" i_1))"
"(let-values(((scs_44)"
"(if(pair?"
" i_1)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_1)))"
"(let-values()"
"(hash-iterate-key"
" ht_35"
" i_1))))"
"((b_45)"
"(if(pair?"
" i_1)"
"(let-values()"
"(let-values(((bulk_46)"
"(bulk-binding-at-bulk"
"(car"
" i_1))))"
"(let-values(((b-info_47)"
"(if(symbol-interned?"
" sym_19)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_46"
" s_37"
" extra-shifts_38)"
" sym_19"
" #f)"
" #f)))"
"(if b-info_47"
"((bulk-binding-create"
" bulk_46)"
" bulk_46"
" b-info_47"
" sym_19)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_35"
" i_1)))))"
"(let-values(((bindings_48"
" covered-scope-sets_49)"
"(let-values(((bindings_50)"
" bindings_1)"
"((covered-scope-sets_51)"
" covered-scope-sets_1))"
"(if(if scs_44"
"(if b_45"
"(not"
"(set-member?"
" covered-scope-sets_51"
" scs_44))"
" #f)"
" #f)"
"(let-values(((bindings_52)"
" bindings_50)"
"((covered-scope-sets_53)"
" covered-scope-sets_51))"
"(let-values(((bindings_54"
" covered-scope-sets_55)"
"(let-values()"
"(values"
"(cons"
"(hasheq"
" 'name"
"(syntax-e$1"
" s_0)"
" 'context"
"(scope-set->context"
" scs_44)"
" 'match?"
"(subset?"
" scs_44"
" s-scs_16)"
"(classify-binding_20"
" b_45)"
"(extract-binding_21"
" b_45))"
" bindings_52)"
"(set-add"
" covered-scope-sets_53"
" scs_44)))))"
"(values"
" bindings_54"
" covered-scope-sets_55)))"
"(values"
" bindings_50"
" covered-scope-sets_51)))))"
"(if(not"
" #f)"
"(for-loop_40"
" bindings_48"
" covered-scope-sets_49"
"(if(pair?"
" i_1)"
"(let-values()"
"(cdr"
" i_1))"
"(let-values()"
"(let-values(((or-part_56)"
"(hash-iterate-next"
" ht_35"
" i_1)))"
"(if or-part_56"
" or-part_56"
" bulk-bindings_36)))))"
"(values"
" bindings_48"
" covered-scope-sets_49))))"
"(values"
" bindings_1"
" covered-scope-sets_1))))))"
" for-loop_40)"
" bindings_0"
" covered-scope-sets_0"
"(let-values(((or-part_57)"
"(hash-iterate-first"
" ht_35)))"
"(if or-part_57"
" or-part_57"
" bulk-bindings_36)))))))"
"(if(not"
" #f)"
"(for-loop_28"
" bindings_33"
" covered-scope-sets_34"
"(unsafe-immutable-hash-iterate-next"
" ht_27"
" i_0))"
"(values"
" bindings_33"
" covered-scope-sets_34))))"
"(values"
" bindings_0"
" covered-scope-sets_0))))))"
" for-loop_28)"
" null"
"(set)"
"(unsafe-immutable-hash-iterate-first"
" ht_27))))))"
" bindings_25))"
"(let-values()"
" null))"
"(if all-bindings?_0"
"(let-values()"
"(reverse$1"
"(let-values(((ht_58)"
" s-scs_16))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys"
" ht_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(fold-var_1"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_62)"
"(unsafe-immutable-hash-iterate-key"
" ht_58"
" i_0)))"
"(let-values(((fold-var_63)"
"(let-values(((sym-ht_64)"
"(let-values(((table_65)"
"(scope-binding-table"
" sc_62)))"
"(if(hash?"
" table_65)"
" table_65"
"(table-with-bulk-bindings-syms"
" table_65)))))"
"(begin"
" #t"
"((letrec-values(((for-loop_66)"
"(lambda(fold-var_2"
" state_0)"
"(begin"
" 'for-loop"
"(if(car"
" state_0)"
"(let-values(((o-sym_69)"
"(vector-ref"
"(car"
" state_0)"
" 1))"
"((scs_70)"
"(hash-iterate-key"
"(vector-ref"
"(car"
" state_0)"
" 2)"
"(cdr"
" state_0)))"
"((b_71)"
"(hash-iterate-value"
"(vector-ref"
"(car"
" state_0)"
" 2)"
"(cdr"
" state_0))))"
"(let-values(((fold-var_72)"
"(let-values(((fold-var_73)"
" fold-var_2))"
"(if(eq?"
" o-sym_69"
" sym_19)"
" fold-var_73"
"(let-values(((fold-var_74)"
" fold-var_73))"
"(let-values(((fold-var_75)"
"(let-values()"
"(cons"
"(let-values()"
"(hasheq"
" 'name"
" o-sym_69"
" 'context"
"(scope-set->context"
" scs_70)"
" 'match?"
" #f"
"(classify-binding_20"
" b_71)"
"(extract-binding_21"
" b_71)))"
" fold-var_74))))"
"(values"
" fold-var_75)))))))"
"(if(not"
" #f)"
"(for-loop_66"
" fold-var_72"
"(let-values(((ht_76)"
"(vector-ref"
"(car"
" state_0)"
" 2)))"
"(let-values(((i_77)"
"(hash-iterate-next"
" ht_76"
"(cdr"
" state_0))))"
"(if i_77"
"(cons"
"(car"
" state_0)"
" i_77)"
"(next-state-in-full-binding-table"
" sym-ht_64"
"(hash-iterate-next"
" sym-ht_64"
"(vector-ref"
"(car"
" state_0)"
" 0)))))))"
" fold-var_72)))"
" fold-var_2)))))"
" for-loop_66)"
" fold-var_1"
"((letrec-values(((loop_78)"
"(lambda(sym-i_0)"
"(begin"
" 'loop"
"(if sym-i_0"
"(next-state-in-full-binding-table"
" sym-ht_64"
" sym-i_0)"
" '(#f"
" ."
" #f))))))"
" loop_78)"
"(hash-iterate-first"
" sym-ht_64)))))))"
"(if(not"
" #f)"
"(for-loop_59"
" fold-var_63"
"(unsafe-immutable-hash-iterate-next"
" ht_58"
" i_0))"
" fold-var_63)))"
" fold-var_1)))))"
" for-loop_59)"
" null"
"(unsafe-immutable-hash-iterate-first"
" ht_58))))))"
"(let-values()"
" null)))))"
"(if(null?"
" bindings_22)"
" context-ht_18"
"(hash-set"
" context-ht_18"
" 'bindings"
" bindings_22)))))))))))"
" fold-var_13))))"
"(values fold-var_14)))))"
"(if(not #f)(for-loop_7 fold-var_12 rest_11) fold-var_12)))"
" fold-var_0)))))"
" for-loop_7)"
" null"
" lst_6))))))"
"(let-values(((ht_5)(car hts_4)))(if(null?(cdr hts_4)) ht_5(hash-set ht_5 'fallbacks(cdr hts_4))))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_0)"
"(begin"
"(let-values(((temp1_82)"
"(reverse$1"
"(let-values(((ht_85) scs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_85)))"
"((letrec-values(((for-loop_86)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_89)(unsafe-immutable-hash-iterate-key ht_85 i_0)))"
"(let-values(((fold-var_90)"
"(let-values(((fold-var_91) fold-var_0))"
"(let-values(((fold-var_92)"
"(let-values()"
"(cons"
"(let-values()"
"(if(interned-scope? sc_89)"
"(let-values()"
"(vector"
"(scope-id sc_89)"
"(scope-kind sc_89)"
"(interned-scope-key sc_89)))"
"(if(representative-scope?"
" sc_89)"
"(let-values()"
"(vector"
"(scope-id sc_89)"
"(scope-kind sc_89)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_89))))"
"(let-values()"
"(vector"
"(scope-id sc_89)"
"(scope-kind sc_89))))))"
" fold-var_91))))"
"(values fold-var_92)))))"
"(if(not #f)"
"(for-loop_86"
" fold-var_90"
"(unsafe-immutable-hash-iterate-next ht_85 i_0))"
" fold-var_90)))"
" fold-var_0)))))"
" for-loop_86)"
" null"
"(unsafe-immutable-hash-iterate-first ht_85))))))"
"((<2_83) <)"
"((temp3_84)(lambda(v_0)(vector-ref v_0 0))))"
"(sort7.1 #f temp3_84 temp1_82 <2_83)))))"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_0 ctx_0)"
"(begin"
"(raise-syntax-error$1"
" #f"
"       \"identifier's binding is ambiguous\""
" id_0"
" #f"
" null"
"(syntax-debug-info-string id_0 ctx_0)))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_0 ctx_0)"
"(begin"
"(let-values(((info_5)(syntax-debug-info$1 s_0(expand-context-phase ctx_0) #f)))"
"(if(not"
"(let-values(((or-part_6)(pair?(hash-ref info_5 'bindings null))))"
"(if or-part_6"
" or-part_6"
"(let-values(((lst_7)(hash-ref info_5 'fallbacks null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((fb-info_11)(unsafe-car lst_0))"
"((rest_12)(unsafe-cdr lst_0)))"
"(let-values(((result_13)"
"(let-values()"
"(let-values(((result_15)"
"(let-values()"
"(let-values()"
"(pair?"
"(hash-ref"
" fb-info_11"
" 'bindings"
" null))))))"
"(values result_15)))))"
"(if(if(not((lambda x_0 result_13) fb-info_11))(not #f) #f)"
"(for-loop_8 result_13 rest_12)"
" result_13)))"
" result_0)))))"
" for-loop_8)"
" #f"
" lst_7))))))"
"          (let-values () \"\")"
"(let-values()"
"(let-values(((relevant-scope-sets_17)"
"((letrec-values(((loop_19)"
"(lambda(info_0 layer_0)"
"(begin"
" 'loop"
"(apply"
" append"
"(cons"
"(hash-ref info_0 'context)"
"(reverse$1"
"(let-values(((lst_22)(hash-ref info_0 'bindings null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_22)))"
"((letrec-values(((for-loop_23)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((b_26)(unsafe-car lst_0))"
"((rest_27)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_28)"
"(let-values(((fold-var_29)"
" fold-var_0))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" b_26"
" 'context))"
" fold-var_29))))"
"(values"
" fold-var_30)))))"
"(if(not #f)"
"(for-loop_23 fold-var_28 rest_27)"
" fold-var_28)))"
" fold-var_0)))))"
" for-loop_23)"
" null"
" lst_22)))))"
"(let-values(((fallbacks_31)(hash-ref info_0 'fallbacks null)))"
"(reverse$1"
"(let-values(((lst_32) fallbacks_31)((start_33)(add1 layer_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_32)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(fold-var_0 lst_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0) #t #f)"
"(let-values(((fallback_38)"
"(unsafe-car lst_0))"
"((rest_39)"
"(unsafe-cdr lst_0))"
"((layer_40) pos_0))"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_0))"
"(let-values(((fold-var_43)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_19"
" fallback_38"
" layer_40))"
" fold-var_42))))"
"(values"
" fold-var_43)))))"
"(if(not #f)"
"(for-loop_34"
" fold-var_41"
" rest_39"
"(+ pos_0 1))"
" fold-var_41)))"
" fold-var_0)))))"
" for-loop_34)"
" null"
" lst_32"
" start_33))))))))))"
" loop_19)"
" info_5"
" 0)))"
"(let-values(((common-scopes_18)"
"(if(null? relevant-scope-sets_17)"
"(set)"
"(let-values(((lst_44) relevant-scope-sets_17))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_44)))"
"((letrec-values(((for-loop_45)"
"(lambda(s_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((l_48)(unsafe-car lst_0))"
"((rest_49)(unsafe-cdr lst_0)))"
"(let-values(((s_50)"
"(let-values(((s_51) s_1))"
"(let-values(((s_52)"
"(let-values()"
"(set-intersect"
" s_51"
"(list->set l_48)))))"
"(values s_52)))))"
"(if(not #f)(for-loop_45 s_50 rest_49) s_50)))"
" s_1)))))"
" for-loop_45)"
"(list->set(car relevant-scope-sets_17))"
" lst_44))))))"
"(string-append"
"((letrec-values(((loop_53)"
"(lambda(info_0 layer_0)"
"(begin"
" 'loop"
"(string-append"
"                                        \"\\n  context\""
"(layer->string layer_0)"
"                                        \"...:\""
"(describe-context(hash-ref info_0 'context) common-scopes_18)"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_56)"
"(let-values(((temp1_57)(hash-ref info_0 'bindings null))"
"((temp2_58)"
"(lambda(a_0 b_0)"
"(begin"
" 'temp2"
"(if(hash-ref a_0 'match? #f)"
"(not(hash-ref b_0 'match? #f))"
" #f)))))"
"(sort7.1 #f #f temp1_57 temp2_58))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_56)))"
"((letrec-values(((for-loop_61)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((b_64)(unsafe-car lst_0))"
"((rest_65)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_66)"
"(let-values(((fold-var_67)"
" fold-var_0))"
"(let-values(((fold-var_68)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                                            \"\\n  \""
"(if(hash-ref"
" b_64"
" 'match?"
" #f)"
"                                                                                                              \"matching\""
"                                                                                                              \"other\")"
"                                                                                                            \" binding\""
"(layer->string"
" layer_0)"
"                                                                                                            \"...:\""
"                                                                                                            \"\\n   \""
"(if(hash-ref"
" b_64"
" 'local"
" #f)"
"                                                                                                              \"local\""
"(format"
"                                                                                                               \"~a\""
"(hash-ref"
" b_64"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_64"
" 'context)"
" common-scopes_18)))"
" fold-var_67))))"
"(values fold-var_68)))))"
"(if(not #f)"
"(for-loop_61 fold-var_66 rest_65)"
" fold-var_66)))"
" fold-var_0)))))"
" for-loop_61)"
" null"
" lst_56)))))"
"(let-values(((fallbacks_69)(hash-ref info_0 'fallbacks null)))"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_70) fallbacks_69)((start_71)(add1 layer_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_70)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_71)))"
"((letrec-values(((for-loop_72)"
"(lambda(fold-var_0 lst_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0) #t #f)"
"(let-values(((fallback_76)(unsafe-car lst_0))"
"((rest_77)(unsafe-cdr lst_0))"
"((layer_78) pos_0))"
"(let-values(((fold-var_79)"
"(let-values(((fold-var_80)"
" fold-var_0))"
"(let-values(((fold-var_81)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_53"
" fallback_76"
" layer_78))"
" fold-var_80))))"
"(values fold-var_81)))))"
"(if(not #f)"
"(for-loop_72"
" fold-var_79"
" rest_77"
"(+ pos_0 1))"
" fold-var_79)))"
" fold-var_0)))))"
" for-loop_72)"
" null"
" lst_70"
" start_71)))))))))))"
" loop_53)"
" info_5"
" 0)"
"(if(set-empty? common-scopes_18)"
"                   \"\""
"(string-append"
"                    \"\\n  common scopes...:\""
"(describe-context"
"(reverse$1"
"(let-values(((lst_82)(hash-ref info_5 'context)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_82)))"
"((letrec-values(((for-loop_83)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_86)(unsafe-car lst_0))"
"((rest_87)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_88)"
"(let-values(((fold-var_89) fold-var_0))"
"(if(set-member? common-scopes_18 s_86)"
"(let-values(((fold-var_90) fold-var_89))"
"(let-values(((fold-var_91)"
"(let-values()"
"(cons"
"(let-values() s_86)"
" fold-var_90))))"
"(values fold-var_91)))"
" fold-var_89))))"
"(if(not #f)(for-loop_83 fold-var_88 rest_87) fold-var_88)))"
" fold-var_0)))))"
" for-loop_83)"
" null"
" lst_82))))"
"(set)))))))))))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_0 common-scopes_0)"
"(begin"
"(let-values(((strs_94)"
"((letrec-values(((loop_95)"
"(lambda(strs_0 scopes_1)"
"(begin"
" 'loop"
"(if(null? scopes_1)"
"(let-values()(reverse$1 strs_0))"
"(let-values()"
"                                              (let-values (((str_98) (format \" ~a\" (car scopes_1))))"
"(if(if(pair? strs_0)"
"(<(+(string-length str_98)(string-length(car strs_0))) 72)"
" #f)"
"(loop_95"
"(cons(string-append(car strs_0) str_98)(cdr strs_0))"
"(cdr scopes_1))"
"(loop_95(cons str_98 strs_0)(cdr scopes_1))))))))))"
" loop_95)"
" null"
"(if(set-empty? common-scopes_0)"
" scopes_0"
"(append"
"(reverse$1"
"(let-values(((lst_99) scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_99)))"
"((letrec-values(((for-loop_100)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_103)(unsafe-car lst_0))"
"((rest_104)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_105)"
"(let-values(((fold-var_106) fold-var_0))"
"(if(not(set-member? common-scopes_0 s_103))"
"(let-values(((fold-var_107) fold-var_106))"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"(let-values() s_103)"
" fold-var_107))))"
"(values fold-var_108)))"
" fold-var_106))))"
"(if(not #f)"
"(for-loop_100 fold-var_105 rest_104)"
" fold-var_105)))"
" fold-var_0)))))"
" for-loop_100)"
" null"
" lst_99))))"
"                        (list \"[common scopes]\"))))))"
"(if(null? strs_94)"
"          (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_109) strs_94))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_109)))"
"((letrec-values(((for-loop_110)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((str_113)(unsafe-car lst_0))((rest_114)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_115)"
"(let-values(((fold-var_116) fold-var_0))"
"(let-values(((fold-var_117)"
"(let-values()"
"(cons"
"(let-values()"
"                                                                               (string-append \"\\n  \" str_113))"
" fold-var_116))))"
"(values fold-var_117)))))"
"(if(not #f)(for-loop_110 fold-var_115 rest_114) fold-var_115)))"
" fold-var_0)))))"
" for-loop_110)"
" null"
" lst_109)))))))))))"
" (define-values (layer->string) (lambda (layer_0) (begin (if (zero? layer_0) \"\" (format \" at layer ~a\" layer_0)))))"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_0 sym_0 trigger-id_0 ctx_0)"
"(begin"
"(let-values(((phase_5)(expand-context-phase ctx_0)))"
"(let-values(((what_6)"
"(let-values(((tmp_9) sym_0))"
"(if(equal? tmp_9 '#%app)"
"                          (let-values () \"function application\")"
"(if(equal? tmp_9 '#%datum)"
"                            (let-values () \"literal data\")"
"(if(equal? tmp_9 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_0)"
"                                  \"reference to a top-level identifier\""
"                                  \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_7)"
"(if trigger-id_0"
"(not"
"(let-values(((trigger-id1_10) trigger-id_0)((phase2_11) phase_5))"
"(resolve40.1 #f #f null #f trigger-id1_10 phase2_11)))"
" #f)))"
"(let-values(((unbound-form_8)"
"(if unbound?_7(if(not(eq?(syntax-e$1 s_0)(syntax-e$1 trigger-id_0))) s_0 #f) #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_7"
"                  \"unbound identifier;\\n also, no ~a syntax transformer is bound~a\""
"                  (string-append what_6 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_0"
"(let-values(((tmp_12) phase_5))"
"(if(equal? tmp_12 0)"
"                    (let-values () \"\")"
"(if(equal? tmp_12 1)"
"                      (let-values () \" in the transformer phase\")"
"                      (let-values () (format \" at phase ~a\" phase_5))))))"
"(if unbound?_7(let-values(((or-part_13) unbound-form_8))(if or-part_13 or-part_13 trigger-id_0)) #f)"
"(if unbound?_7(if unbound-form_8 trigger-id_0 #f) s_0)"
" null"
"               (if unbound?_7 (syntax-debug-info-string trigger-id_0 ctx_0) \"\")))))))))"
"(define-values(make-check-no-duplicate-table)(lambda()(begin '#hasheq())))"
"(define-values"
"(check-no-duplicate-ids7.1)"
"(lambda(what1_0 ids4_0 phase5_0 s6_0 ht3_0)"
"(begin"
" 'check-no-duplicate-ids7"
"(let-values(((ids_6) ids4_0))"
"(let-values(((phase_7) phase5_0))"
"(let-values(((s_8) s6_0))"
"(let-values(((ht_9)(if(eq? ht3_0 unsafe-undefined)(make-check-no-duplicate-table) ht3_0)))"
"              (let-values (((what_10) (if (eq? what1_0 unsafe-undefined) \"binding name\" what1_0)))"
"(let-values()"
"((letrec-values(((loop_11)"
"(lambda(v_0 ht_0)"
"(begin"
" 'loop"
"(if(identifier? v_0)"
"(let-values()"
"(let-values(((l_14)(hash-ref ht_0(syntax-e$1 v_0) null)))"
"(begin"
"(let-values(((lst_15) l_14))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_18)(unsafe-car lst_0))"
"((rest_19)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_18"
" v_0"
" phase_7)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                        \"duplicate \""
" what_10)"
" s_8"
" v_0))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_16 rest_19)"
"(values))))"
"(values))))))"
" for-loop_16)"
" lst_15)))"
"(void)"
"(hash-set ht_0(syntax-e$1 v_0)(cons v_0 l_14)))))"
"(if(pair? v_0)"
"(let-values()(loop_11(cdr v_0)(loop_11(car v_0) ht_0)))"
"(let-values() ht_0)))))))"
" loop_11)"
" ids_6"
" ht_9))))))))))"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_0 ctx_0)"
"(begin"
"(let-values(((use-sites_3)(root-expand-context-use-site-scopes ctx_0)))"
"(if(if use-sites_3(pair?(unbox use-sites_3)) #f)"
"(if(syntax?$1 s_0)"
"(remove-scopes s_0(unbox use-sites_3))"
"(reverse$1"
"(let-values(((lst_4) s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_8)(unsafe-car lst_0))((rest_9)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_10)"
"(let-values(((fold-var_11) fold-var_0))"
"(let-values(((fold-var_12)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_8(unbox use-sites_3)))"
" fold-var_11))))"
"(values fold-var_12)))))"
"(if(not #f)(for-loop_5 fold-var_10 rest_9) fold-var_10)))"
" fold-var_0)))))"
" for-loop_5)"
" null"
" lst_4)))))"
" s_0)))))"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'namespace)"
"(make-struct-field-accessor -ref_4 1 'phase)"
"(make-struct-field-accessor -ref_4 2 'self)"
"(make-struct-field-accessor -ref_4 3 'module-self)"
"(make-struct-field-accessor -ref_4 4 'full-module-name)"
"(make-struct-field-accessor -ref_4 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_4 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_0 lazy-syntax-literals?7_0 module-self5_0 namespace2_0 phase3_0 self4_0)"
"(begin"
" 'make-compile-context14"
"(let-values(((namespace_57)(if(eq? namespace2_0 unsafe-undefined)(1/current-namespace) namespace2_0)))"
"(let-values(((phase_58)(if(eq? phase3_0 unsafe-undefined)(namespace-phase namespace_57) phase3_0)))"
"(let-values(((self_59)(if(eq? self4_0 unsafe-undefined)(namespace-self-mpi namespace_57) self4_0)))"
"(let-values(((module-self_60) module-self5_0))"
"(let-values(((full-module-name_61) full-module-name6_0))"
"(let-values(((lazy-syntax-literals?_62)"
"(if(eq? lazy-syntax-literals?7_0 unsafe-undefined)"
"(if module-self_60 #t #f)"
" lazy-syntax-literals?7_0)))"
"(let-values()"
"(begin"
"(if(if module-self_60(not full-module-name_61) #f)"
"                        (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_57"
" phase_58"
" self_59"
" module-self_60"
" full-module-name_61"
" lazy-syntax-literals?_62"
" #f))))))))))))"
"(define-values"
"(struct:mpi-intern-table mpi-intern-table1.1 mpi-intern-table? mpi-intern-table-normal mpi-intern-table-fast)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'mpi-intern-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'mpi-intern-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'normal)"
"(make-struct-field-accessor -ref_4 1 'fast))))"
"(define-values"
"(make-module-path-index-intern-table)"
"(lambda()(begin(mpi-intern-table1.1(make-hash)(make-hasheq)))))"
"(define-values"
"(intern-module-path-index!)"
"(lambda(t_0 mpi_0)"
"(begin"
"(let-values(((or-part_28)(hash-ref(mpi-intern-table-fast t_0) mpi_0 #f)))"
"(if or-part_28"
" or-part_28"
"(let-values(((name_29 base_30)(1/module-path-index-split mpi_0)))"
"(if(not name_29)"
"(let-values()(begin(hash-set!(mpi-intern-table-fast t_0) mpi_0 mpi_0) mpi_0))"
"(let-values()"
"(let-values(((interned-base_31)(if base_30(intern-module-path-index! t_0 base_30) #f)))"
"(let-values(((at-name_32)"
"(let-values(((or-part_34)(hash-ref(mpi-intern-table-normal t_0) name_29 #f)))"
"(if or-part_34"
" or-part_34"
"(let-values(((at-name_35)(make-hasheq)))"
"(begin"
"(hash-set!(mpi-intern-table-normal t_0) name_29 at-name_35)"
" at-name_35))))))"
"(let-values(((i-mpi_33)"
"(let-values(((or-part_36)(hash-ref at-name_32 interned-base_31 #f)))"
"(if or-part_36"
" or-part_36"
"(let-values(((mpi_37)"
"(if(eq? base_30 interned-base_31)"
" mpi_0"
"(let-values(((the-struct_38) mpi_0))"
"(if(1/module-path-index? the-struct_38)"
"(let-values(((base3_39) interned-base_31))"
"(module-path-index2.1"
"(module-path-index-path the-struct_38)"
" base3_39"
"(module-path-index-resolved the-struct_38)"
"(module-path-index-shift-cache the-struct_38)))"
"(raise-argument-error"
" 'struct-copy"
"                                                           \"module-path-index?\""
" the-struct_38))))))"
"(begin(hash-set! at-name_32 interned-base_31 mpi_37) mpi_37))))))"
"(begin(hash-set!(mpi-intern-table-fast t_0) mpi_0 i-mpi_33) i-mpi_33))))))))))))"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_0)(begin(hash-set! built-in-symbols s_0 #t))))"
"(define-values(built-in-symbol?)(lambda(s_0)(begin(hash-ref built-in-symbols s_0 #f))))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_0)"
"(begin"
"      (let-values (((built-in-s_4) (string->symbol (format \".~s\" s_0))))"
"(begin(register-built-in-symbol! built-in-s_4) built-in-s_4)))))"
"(void"
"(begin"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference))"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?"
" variable-reference-from-unsafe?))"
"(for-each2"
" register-built-in-symbol!"
" '(let letrec* define"
" or"
" and"
" pariah"
" variable-set!"
" variable-ref"
" variable-ref/no-check"
" make-instance-variable-reference"
" annotation?"
" annotation-expression"
" #%app"
" #%call-with-values"
" make-pthread-parameter))))"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literals-id)(make-built-in-symbol! 'syntax-literals))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values"
"(struct:module-path-index-table"
" module-path-index-table1.1"
" module-path-index-table?"
" module-path-index-table-positions"
" module-path-index-table-intern)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index-table)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'positions)"
"(make-struct-field-accessor -ref_4 1 'intern))))"
"(define-values"
"(make-module-path-index-table)"
"(lambda()(begin(module-path-index-table1.1(make-hasheq)(make-module-path-index-intern-table)))))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_0 mpi_0)"
"(begin"
"(let-values(((pos_28)(add-module-path-index!/pos mpis_0 mpi_0)))"
"(if pos_28(list 'unsafe-vector*-ref mpi-vector-id pos_28) #f)))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_0 mpi_0)"
"(begin"
"(if(not mpi_0)"
"(let-values() #f)"
"(if mpi_0"
"(let-values()"
"(let-values(((mpi_31)(intern-module-path-index!(module-path-index-table-intern mpis_0) mpi_0))"
"((positions_32)(module-path-index-table-positions mpis_0)))"
"(let-values(((or-part_33)(hash-ref positions_32 mpi_31 #f)))"
"(if or-part_33"
" or-part_33"
"(let-values(((pos_34)(hash-count positions_32)))"
"(begin(hash-set! positions_32 mpi_31 pos_34) pos_34))))))"
"(void))))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_0)"
"(begin"
"(let-values(((unique-list_36)"
"(lambda(v_0)"
"(begin"
" 'unique-list"
"(if(pair? v_0)"
"(reverse$1"
"(let-values(((lst_43) v_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_43)))"
"((letrec-values(((for-loop_44)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((i_47)(unsafe-car lst_0))"
"((rest_48)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_49)"
"(let-values(((fold-var_50) fold-var_0))"
"(let-values(((fold-var_51)"
"(let-values()"
"(cons"
"(let-values() i_47)"
" fold-var_50))))"
"(values fold-var_51)))))"
"(if(not #f)(for-loop_44 fold-var_49 rest_48) fold-var_49)))"
" fold-var_0)))))"
" for-loop_44)"
" null"
" lst_43))))"
" v_0)))))"
"(let-values(((positions_37)(module-path-index-table-positions mpis_0)))"
"(let-values(((gen-order_38)(make-hasheqv)))"
"(let-values(((rev-positions_39)"
"(let-values(((ht_52) positions_37))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_52)))"
"((letrec-values(((for-loop_53)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_56 v_57)(hash-iterate-key+value ht_52 i_0)))"
"(let-values(((table_58)"
"(let-values(((table_59) table_0))"
"(let-values(((table_60)"
"(let-values()"
"(let-values(((key_61 val_62)"
"(let-values()"
"(values"
" v_57"
" k_56))))"
"(hash-set"
" table_59"
" key_61"
" val_62)))))"
"(values table_60)))))"
"(if(not #f)"
"(for-loop_53 table_58(hash-iterate-next ht_52 i_0))"
" table_58)))"
" table_0)))))"
" for-loop_53)"
" '#hasheqv()"
"(hash-iterate-first ht_52))))))"
"(let-values((()"
"(begin"
"(let-values(((start_63) 0)((end_64)(hash-count rev-positions_39))((inc_65) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_63 end_64 inc_65)))"
"((letrec-values(((for-loop_66)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_64)"
"(let-values(((i_68) pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_69)"
"(hash-ref"
" rev-positions_39"
" i_68)))"
"((letrec-values(((loop_70)"
"(lambda(mpi_0)"
"(begin"
" 'loop"
"(if(hash-ref"
" gen-order_38"
" mpi_0"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_72"
" base_73)"
"(1/module-path-index-split"
" mpi_0)))"
"(begin"
"(if base_73"
"(let-values()"
"(loop_70"
" base_73))"
"(void))"
"(hash-set!"
" gen-order_38"
" mpi_0"
"(hash-count"
" gen-order_38))))))))))"
" loop_70)"
" mpi_69)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_66(+ pos_0 inc_65))(values))))"
"(values))))))"
" for-loop_66)"
" start_63)))"
"(values))))"
"(let-values()"
"(let-values(((rev-gen-order_40)"
"(let-values(((ht_74) gen-order_38))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_74)))"
"((letrec-values(((for-loop_75)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_78 v_79)"
"(hash-iterate-key+value ht_74 i_0)))"
"(let-values(((table_80)"
"(let-values(((table_81) table_0))"
"(let-values(((table_82)"
"(let-values()"
"(let-values(((key_83"
" val_84)"
"(let-values()"
"(values"
" v_79"
" k_78))))"
"(hash-set"
" table_81"
" key_83"
" val_84)))))"
"(values table_82)))))"
"(if(not #f)"
"(for-loop_75 table_80(hash-iterate-next ht_74 i_0))"
" table_80)))"
" table_0)))))"
" for-loop_75)"
" '#hasheqv()"
"(hash-iterate-first ht_74))))))"
"(let-values(((gens_41)"
"(let-values(((len_85)(hash-count gen-order_38)))"
"(begin"
"(if(exact-nonnegative-integer? len_85)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_85)))"
"(let-values(((v_86)(make-vector len_85 0)))"
"(begin"
"(if(zero? len_85)"
"(void)"
"(let-values()"
"(let-values(((start_87) 0)"
"((end_88)(hash-count gen-order_38))"
"((inc_89) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_87 end_88 inc_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(i_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_88)"
"(let-values(((i_93) pos_0))"
"(let-values(((i_94)"
"(let-values(((i_95) i_0))"
"(let-values(((i_96)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_86"
" i_95"
"(let-values()"
"(let-values(((mpi_97)"
"(hash-ref"
" rev-gen-order_40"
" i_93)))"
"(let-values(((path_98"
" base_99)"
"(1/module-path-index-split"
" mpi_97)))"
"(if(top-level-module-path-index?"
" mpi_97)"
"(let-values()"
" 'top)"
"(if(not"
" path_98)"
"(let-values()"
"(box"
"(let-values(((or-part_100)"
"(unique-list_36"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_97)))))"
"(if or-part_100"
" or-part_100"
" 'self))))"
"(if(not"
" base_99)"
"(let-values()"
"(vector"
" path_98))"
"(if base_99"
"(let-values()"
"(vector"
" path_98"
"(hash-ref"
" gen-order_38"
" base_99)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_95)))))"
"(values i_96)))))"
"(if(if(not"
"((lambda x_0"
"(unsafe-fx= i_94 len_85))"
" i_93))"
"(not #f)"
" #f)"
"(for-loop_90 i_94(+ pos_0 inc_89))"
" i_94)))"
" i_0)))))"
" for-loop_90)"
" 0"
" start_87)))))"
" v_86))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_41)"
"(list"
" 'quote"
"(let-values(((vec_102 i_103)"
"(let-values(((start_104) 0)"
"((end_105)(hash-count rev-positions_39))"
"((inc_106) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_104 end_105 inc_106)))"
"((letrec-values(((for-loop_107)"
"(lambda(vec_0 i_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_105)"
"(let-values(((i_111) pos_0))"
"(let-values(((vec_112 i_113)"
"(let-values(((vec_114) vec_0)"
"((i_115) i_0))"
"(let-values(((vec_116 i_117)"
"(let-values()"
"(let-values(((new-vec_118)"
"(if(eq?"
" i_115"
"(unsafe-vector*-length"
" vec_114))"
"(grow-vector"
" vec_114)"
" vec_114)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_118"
" i_115"
"(let-values()"
"(hash-ref"
" gen-order_38"
"(hash-ref"
" rev-positions_39"
" i_111))))"
"(values"
" new-vec_118"
"(unsafe-fx+"
" i_115"
" 1)))))))"
"(values vec_116 i_117)))))"
"(if(not #f)"
"(for-loop_107 vec_112 i_113(+ pos_0 inc_106))"
"(values vec_112 i_113))))"
"(values vec_0 i_0))))))"
" for-loop_107)"
"(make-vector 16)"
" 0"
" start_104)))))"
"(shrink-vector vec_102 i_103)))))))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_0 order-vec_0)"
"(begin"
"(let-values(((gen_121)(make-vector(vector-length gen-vec_0) #f)))"
"(begin"
"(let-values(((vec_122 len_123)"
"(let-values(((vec_125) gen-vec_0))"
"(begin(check-vector vec_125)(values vec_125(unsafe-vector-length vec_125)))))"
"((start_124) 0))"
"(begin"
" #f"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_124)))"
"((letrec-values(((for-loop_126)"
"(lambda(pos_0 pos_1)"
"(begin"
" 'for-loop"
"(if(if(unsafe-fx< pos_0 len_123) #t #f)"
"(let-values(((d_129)(unsafe-vector-ref vec_122 pos_0))((i_130) pos_1))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_121"
" i_130"
"(if(eq? d_129 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_129)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_129)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector*-ref d_129 0)"
"(if(>(vector*-length d_129) 1)"
"(vector*-ref"
" gen_121"
"(vector*-ref d_129 1))"
" #f)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_126(unsafe-fx+ 1 pos_0)(+ pos_1 1))(values))))"
"(values))))))"
" for-loop_126)"
" 0"
" start_124)))"
"(void)"
"(let-values(((len_131)(vector-length order-vec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_131)"
"(void)"
"                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_131)))"
"(let-values(((v_132)(make-vector len_131 0)))"
"(begin"
"(if(zero? len_131)"
"(void)"
"(let-values()"
"(let-values(((vec_133 len_134)"
"(let-values(((vec_135) order-vec_0))"
"(begin(check-vector vec_135)(values vec_135(unsafe-vector-length vec_135))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_136)"
"(lambda(i_0 pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_134)"
"(let-values(((p_139)(unsafe-vector-ref vec_133 pos_0)))"
"(let-values(((i_140)"
"(let-values(((i_141) i_0))"
"(let-values(((i_142)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_132"
" i_141"
"(let-values()"
"(vector*-ref gen_121 p_139)))"
"(unsafe-fx+ 1 i_141)))))"
"(values i_142)))))"
"(if(if(not((lambda x_0(unsafe-fx= i_140 len_131)) p_139))"
"(not #f)"
" #f)"
"(for-loop_136 i_140(unsafe-fx+ 1 pos_0))"
" i_140)))"
" i_0)))))"
" for-loop_136)"
" 0"
" 0)))))"
" v_132)))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_0)"
"(begin"
"(let-values(((positions_145)(module-path-index-table-positions mpis_0)))"
"(let-values(((vec_146)(make-vector(hash-count positions_145) #f)))"
"(begin"
"(let-values(((ht_147) positions_145))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_147)))"
"((letrec-values(((for-loop_148)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((mpi_150 pos_151)(hash-iterate-key+value ht_147 i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_146 pos_151 mpi_150))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_148(hash-iterate-next ht_147 i_0))(values))))"
"(values))))))"
" for-loop_148)"
"(hash-iterate-first ht_147))))"
"(void)"
" vec_146))))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_0 mpis_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_164) mus_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_164)))"
"((letrec-values(((for-loop_165)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((mu_168)(unsafe-car lst_0))((rest_169)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_170)"
"(let-values(((fold-var_171) fold-var_0))"
"(let-values(((fold-var_172)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_0"
"(module-use-module mu_168))"
"(module-use-phase mu_168)))"
" fold-var_171))))"
"(values fold-var_172)))))"
"(if(not #f)(for-loop_165 fold-var_170 rest_169) fold-var_170)))"
" fold-var_0)))))"
" for-loop_165)"
" null"
" lst_164)))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_0)"
"(begin"
"(let-values(((or-part_174)(null? v_0)))"
"(if or-part_174"
" or-part_174"
"(let-values(((or-part_175)(boolean? v_0)))"
"(if or-part_175"
" or-part_175"
"(let-values(((or-part_176)"
"(if(fixnum? v_0)(if(< v_0(sub1(expt 2 30)))(> v_0(-(expt 2 30))) #f) #f)))"
"(if or-part_176"
" or-part_176"
"(let-values(((or-part_177)(symbol? v_0)))"
"(if or-part_177"
" or-part_177"
"(let-values(((or-part_178)(char? v_0)))(if or-part_178 or-part_178(keyword? v_0))))))))))))))"
"(define-values"
"(serialize-phase-to-link-module-uses)"
"(lambda(phase-to-link-module-uses_0 mpis_0)"
"(begin"
"(let-values(((phases-in-order_181)"
"(let-values(((temp10_182)(hash-keys phase-to-link-module-uses_0))((<11_183) <))"
"(sort7.1 #f #f temp10_182 <11_183))))"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(reverse$1"
"(let-values(((lst_184) phases-in-order_181))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_184)))"
"((letrec-values(((for-loop_185)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((phase_188)(unsafe-car lst_0))((rest_189)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_190)"
"(let-values(((fold-var_191) fold-var_0))"
"(let-values(((fold-var_192)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_188"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_0"
" phase_188)"
" mpis_0))))"
" fold-var_191))))"
"(values fold-var_192)))))"
"(if(not #f)(for-loop_185 fold-var_190 rest_189) fold-var_190)))"
" fold-var_0)))))"
" for-loop_185)"
" null"
" lst_184))))))))))"
"(define-values"
"(generate-deserialize6.1)"
"(lambda(syntax-support?2_0 v4_0 mpis5_0)"
"(begin"
" 'generate-deserialize6"
"(let-values(((v_196) v4_0))"
"(let-values(((mpis_197) mpis5_0))"
"(let-values(((syntax-support?_198) syntax-support?2_0))"
"(let-values()"
"(let-values(((reachable-scopes_199)(find-reachable-scopes v_196)))"
"(let-values(((state_200)(make-serialize-state reachable-scopes_199)))"
"(let-values(((mutables_201)(make-hasheq)))"
"(let-values(((objs_202)(make-hasheq)))"
"(let-values(((shares_203)(make-hasheq)))"
"(let-values(((obj-step_204) 0))"
"(let-values(((frontier_205) null))"
"(letrec-values(((add-frontier!_206)"
"(case-lambda"
"((v_0)(begin 'add-frontier!(set! frontier_205(cons v_0 frontier_205))))"
"((kind_0 v_0)(add-frontier!_206 v_0)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_228)"
"(lambda(v_0)"
"(begin"
" 'frontier-loop"
"(begin"
"((letrec-values(((loop_230)"
"(lambda(v_1)"
"(begin"
" 'loop"
"(if(let-values(((or-part_232)"
"(interned-literal?"
" v_1)))"
"(if or-part_232"
" or-part_232"
"(1/module-path-index?"
" v_1)))"
"(let-values()(void))"
"(if(hash-ref"
" objs_202"
" v_1"
" #f)"
"(let-values()"
"(if(hash-ref"
" mutables_201"
" v_1"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_203"
" v_1"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_1)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_201"
" v_1"
"(hash-count"
" mutables_201))"
"((serialize-fill!-ref"
" v_1)"
" v_1"
" add-frontier!_206"
" state_200)))"
"(if(serialize?"
" v_1)"
"(let-values()"
"((serialize-ref"
" v_1)"
" v_1"
"(case-lambda"
"((sub-v_0)"
"(loop_230"
" sub-v_0))"
"((kind_0"
" sub-v_0)"
"(loop_230"
" sub-v_0)))"
" state_200))"
"(if(pair? v_1)"
"(let-values()"
"(begin"
"(loop_230"
"(car"
" v_1))"
"(loop_230"
"(cdr"
" v_1))))"
"(if(vector?"
" v_1)"
"(let-values()"
"(if(let-values(((or-part_236)"
"(immutable?"
" v_1)))"
"(if or-part_236"
" or-part_236"
"(zero?"
"(vector-length"
" v_1))))"
"(begin"
"(let-values(((vec_237"
" len_238)"
"(let-values(((vec_239)"
" v_1))"
"(begin"
"(check-vector"
" vec_239)"
"(values"
" vec_239"
"(unsafe-vector-length"
" vec_239))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_240)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_0"
" len_238)"
"(let-values(((e_242)"
"(unsafe-vector-ref"
" vec_237"
" pos_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_230"
" e_242))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_240"
"(unsafe-fx+"
" 1"
" pos_0))"
"(values))))"
"(values))))))"
" for-loop_240)"
" 0)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_201"
" v_1"
"(hash-count"
" mutables_201))"
"(begin"
"(let-values(((vec_243"
" len_244)"
"(let-values(((vec_245)"
" v_1))"
"(begin"
"(check-vector"
" vec_245)"
"(values"
" vec_245"
"(unsafe-vector-length"
" vec_245))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_246)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_0"
" len_244)"
"(let-values(((e_248)"
"(unsafe-vector-ref"
" vec_243"
" pos_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_206"
" e_248))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_246"
"(unsafe-fx+"
" 1"
" pos_0))"
"(values))))"
"(values))))))"
" for-loop_246)"
" 0)))"
"(void)))))"
"(if(box?"
" v_1)"
"(let-values()"
"(if(immutable?"
" v_1)"
"(loop_230"
"(unbox"
" v_1))"
"(begin"
"(hash-set!"
" mutables_201"
" v_1"
"(hash-count"
" mutables_201))"
"(add-frontier!_206"
"(unbox"
" v_1)))))"
"(if(hash?"
" v_1)"
"(let-values()"
"(if(immutable?"
" v_1)"
"(begin"
"(let-values(((lst_249)"
"(sorted-hash-keys"
" v_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_249)))"
"((letrec-values(((for-loop_250)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((k_252)"
"(unsafe-car"
" lst_0))"
"((rest_253)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_230"
" k_252)"
"(loop_230"
"(hash-ref"
" v_1"
" k_252))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_250"
" rest_253)"
"(values))))"
"(values))))))"
" for-loop_250)"
" lst_249)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_201"
" v_1"
"(hash-count"
" mutables_201))"
"(begin"
"(let-values(((lst_254)"
"(sorted-hash-keys"
" v_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_254)))"
"((letrec-values(((for-loop_255)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((k_257)"
"(unsafe-car"
" lst_0))"
"((rest_258)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_206"
" k_257)"
"(add-frontier!_206"
"(hash-ref"
" v_1"
" k_257))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_255"
" rest_258)"
"(values))))"
"(values))))))"
" for-loop_255)"
" lst_254)))"
"(void)))))"
"(if(prefab-struct-key"
" v_1)"
"(let-values()"
"(begin"
"(let-values(((v*_259"
" start*_260"
" stop*_261"
" step*_262)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                     \"vector\""
"(lambda(x_0)"
"(vector?"
" x_0))"
"(lambda(x_0)"
"(unsafe-vector-length"
" x_0))"
"(struct->vector"
" v_1)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_265)"
"(lambda(idx_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_0"
" stop*_261)"
"(let-values(((e_267)"
"(unsafe-vector-ref"
" v*_259"
" idx_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_230"
" e_267))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_265"
"(unsafe-fx+"
" idx_0"
" 1))"
"(values))))"
"(values))))))"
" for-loop_265)"
" start*_260)))"
"(void)))"
"(if(srcloc?"
" v_1)"
"(let-values()"
"(if(path?"
"(srcloc-source"
" v_1))"
"(void)"
"(let-values()"
"(begin"
"(let-values(((v*_268"
" start*_269"
" stop*_270"
" step*_271)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                           \"vector\""
"(lambda(x_0)"
"(vector?"
" x_0))"
"(lambda(x_0)"
"(unsafe-vector-length"
" x_0))"
"(struct->vector"
" v_1)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_274)"
"(lambda(idx_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_0"
" stop*_270)"
"(let-values(((e_276)"
"(unsafe-vector-ref"
" v*_268"
" idx_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_230"
" e_276))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_274"
"(unsafe-fx+"
" idx_0"
" 1))"
"(values))))"
"(values))))))"
" for-loop_274)"
" start*_269)))"
"(void)))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_202"
" v_1"
" obj-step_204)"
"(set! obj-step_204"
"(add1"
" obj-step_204))))))))))"
" loop_230)"
" v_0)"
"(if(null? frontier_205)"
"(void)"
"(let-values()"
"(let-values(((l_277) frontier_205))"
"(begin"
"(set! frontier_205 null)"
"(let-values(((lst_278) l_277))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_278)))"
"((letrec-values(((for-loop_279)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((v_281)"
"(unsafe-car"
" lst_0))"
"((rest_282)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_228"
" v_281))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_279"
" rest_282)"
"(values))))"
"(values))))))"
" for-loop_279)"
" lst_278)))"
"(void))))))))))"
" frontier-loop_228)"
" v_196)"
"(values))))"
"(let-values(((num-mutables_207)(hash-count mutables_201)))"
"(let-values(((share-step-positions_208)"
"(let-values(((share-steps_283)"
"(reverse$1"
"(let-values(((ht_284) shares_203))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_284)))"
"((letrec-values(((for-loop_285)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((obj_288)"
"(hash-iterate-key"
" ht_284"
" i_0)))"
"(let-values(((fold-var_289)"
"(let-values(((fold-var_290)"
" fold-var_0))"
"(let-values(((fold-var_291)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" objs_202"
" obj_288))"
" fold-var_290))))"
"(values"
" fold-var_291)))))"
"(if(not #f)"
"(for-loop_285"
" fold-var_289"
"(hash-iterate-next"
" ht_284"
" i_0))"
" fold-var_289)))"
" fold-var_0)))))"
" for-loop_285)"
" null"
"(hash-iterate-first ht_284)))))))"
"(let-values(((lst_292)"
"(let-values(((share-steps12_294) share-steps_283)"
"((<13_295) <))"
"(sort7.1 #f #f share-steps12_294 <13_295)))"
"((start_293) num-mutables_207))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_292)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_293)))"
"((letrec-values(((for-loop_296)"
"(lambda(table_0 lst_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0) #t #f)"
"(let-values(((step_300)"
"(unsafe-car lst_0))"
"((rest_301)"
"(unsafe-cdr lst_0))"
"((pos_302) pos_0))"
"(let-values(((table_303)"
"(let-values(((table_304)"
" table_0))"
"(let-values(((table_305)"
"(let-values()"
"(let-values(((key_306"
" val_307)"
"(let-values()"
"(values"
" step_300"
" pos_302))))"
"(hash-set"
" table_304"
" key_306"
" val_307)))))"
"(values table_305)))))"
"(if(not #f)"
"(for-loop_296"
" table_303"
" rest_301"
"(+ pos_0 1))"
" table_303)))"
" table_0)))))"
" for-loop_296)"
" '#hasheqv()"
" lst_292"
" start_293))))))"
"(let-values(((stream_209) null))"
"(let-values(((stream-size_210) 0))"
"(let-values(((next-push-position_211)"
"(lambda()(begin 'next-push-position stream-size_210))))"
"(let-values(((quoted?_212)"
"(lambda(pos_0)"
"(begin"
" 'quoted?"
"(let-values(((v_309)"
"(list-ref"
" stream_209"
"(- stream-size_210(add1 pos_0)))))"
"(let-values(((or-part_310)(not(keyword? v_309))))"
"(if or-part_310 or-part_310(eq? '#:quote v_309))))))))"
"(let-values(((ser-reset!_213)"
"(lambda(pos_0)"
"(begin"
" 'ser-reset!"
"(begin"
"(set! stream_209"
"(list-tail stream_209(- stream-size_210 pos_0)))"
"(set! stream-size_210 pos_0))))))"
"(let-values(((reap-stream!_214)"
"(lambda()"
"(begin"
" 'reap-stream!"
"(begin0"
"(list->vector(reverse$1 stream_209))"
"(set! stream_209 null)"
"(set! stream-size_210 0))))))"
"(letrec-values(((ser-push!_215)"
"(case-lambda"
"((v_0)"
"(begin"
" 'ser-push!"
"(if(hash-ref shares_203 v_0 #f)"
"(let-values()"
"(let-values(((n_313)"
"(hash-ref"
" share-step-positions_208"
"(hash-ref objs_202 v_0))))"
"(begin"
"(ser-push!_215 'tag '#:ref)"
"(ser-push!_215 'exact n_313))))"
"(let-values(((c1_314)"
"(hash-ref mutables_201 v_0 #f)))"
"(if c1_314"
"((lambda(n_0)"
"(begin"
"(ser-push!_215 'tag '#:ref)"
"(ser-push!_215 'exact n_0)))"
" c1_314)"
"(let-values()"
"(ser-push-encoded!_216 v_0)))))))"
"((kind_0 v_0)"
"(let-values(((tmp_318) kind_0))"
"(if(equal? tmp_318 'exact)"
"(let-values()"
"(begin"
"(set! stream_209(cons v_0 stream_209))"
"(set! stream-size_210"
"(add1 stream-size_210))))"
"(if(equal? tmp_318 'tag)"
"(let-values()(ser-push!_215 'exact v_0))"
"(if(equal? tmp_318 'reference)"
"(let-values()"
"(if(hash-ref shares_203 v_0 #f)"
"(let-values()"
"(let-values(((n_319)"
"(hash-ref"
" share-step-positions_208"
"(hash-ref"
" objs_202"
" v_0))))"
"(ser-push!_215 'exact n_319)))"
"(let-values(((c2_320)"
"(hash-ref"
" mutables_201"
" v_0"
" #f)))"
"(if c2_320"
"((lambda(n_0)"
"(ser-push!_215 'exact n_0))"
" c2_320)"
"(let-values()"
"(ser-push!_215 v_0))))))"
"(let-values()(ser-push!_215 v_0)))))))))"
"((ser-push-encoded!_216)"
"(lambda(v_0)"
"(begin"
" 'ser-push-encoded!"
"(if(keyword? v_0)"
"(let-values()"
"(begin"
"(ser-push!_215 'tag '#:quote)"
"(ser-push!_215 'exact v_0)))"
"(if(1/module-path-index? v_0)"
"(let-values()"
"(begin"
"(ser-push!_215 'tag '#:mpi)"
"(ser-push!_215"
" 'exact"
"(add-module-path-index!/pos"
" mpis_197"
" v_0))))"
"(if(serialize? v_0)"
"(let-values()"
"((serialize-ref v_0)"
" v_0"
" ser-push!_215"
" state_200))"
"(if(if(list? v_0)"
"(if(pair? v_0)(pair?(cdr v_0)) #f)"
" #f)"
"(let-values()"
"(let-values(((start-pos_323)"
"(next-push-position_211)))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'tag"
" '#:list)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'exact"
"(length v_0))"
"(values))))"
"(let-values(((all-quoted?_324)"
"(let-values(((lst_325)"
" v_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_325)))"
"((letrec-values(((for-loop_326)"
"(lambda(all-quoted?_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((i_329)"
"(unsafe-car"
" lst_0))"
"((rest_330)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((all-quoted?_331)"
"(let-values(((all-quoted?_332)"
" all-quoted?_0))"
"(let-values(((all-quoted?_333)"
"(let-values()"
"(let-values(((i-pos_334)"
"(next-push-position_211)))"
"(begin"
"(ser-push!_215"
" i_329)"
"(if all-quoted?_332"
"(quoted?_212"
" i-pos_334)"
" #f))))))"
"(values"
" all-quoted?_333)))))"
"(if(not"
" #f)"
"(for-loop_326"
" all-quoted?_331"
" rest_330)"
" all-quoted?_331)))"
" all-quoted?_0)))))"
" for-loop_326)"
" #t"
" lst_325)))))"
"(if all-quoted?_324"
"(let-values()"
"(begin"
"(ser-reset!_213"
" start-pos_323)"
"(ser-push-optional-quote!_217)"
"(ser-push!_215"
" 'exact"
" v_0)))"
"(void)))))))"
"(if(pair? v_0)"
"(let-values()"
"(let-values(((start-pos_335)"
"(next-push-position_211)))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'tag"
" '#:cons)"
"(values))))"
"(let-values(((a-pos_336)"
"(next-push-position_211)))"
"(let-values((()"
"(begin"
"(ser-push!_215"
"(car v_0))"
"(values))))"
"(let-values(((d-pos_337)"
"(next-push-position_211)))"
"(begin"
"(ser-push!_215(cdr v_0))"
"(if(if(quoted?_212"
" a-pos_336)"
"(quoted?_212"
" d-pos_337)"
" #f)"
"(let-values()"
"(begin"
"(ser-reset!_213"
" start-pos_335)"
"(ser-push-optional-quote!_217)"
"(ser-push!_215"
" 'exact"
" v_0)))"
"(void)))))))))"
"(if(box? v_0)"
"(let-values()"
"(let-values(((start-pos_338)"
"(next-push-position_211)))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'tag"
" '#:box)"
"(values))))"
"(let-values(((v-pos_339)"
"(next-push-position_211)))"
"(begin"
"(ser-push!_215(unbox v_0))"
"(if(quoted?_212 v-pos_339)"
"(let-values()"
"(begin"
"(ser-reset!_213"
" start-pos_338)"
"(ser-push-optional-quote!_217)"
"(ser-push!_215"
" 'exact"
" v_0)))"
"(void)))))))"
"(if(vector? v_0)"
"(let-values()"
"(let-values(((start-pos_340)"
"(next-push-position_211)))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'tag"
" '#:vector)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'exact"
"(vector-length"
" v_0))"
"(values))))"
"(let-values(((all-quoted?_341)"
"(let-values(((vec_342"
" len_343)"
"(let-values(((vec_344)"
" v_0))"
"(begin"
"(check-vector"
" vec_344)"
"(values"
" vec_344"
"(unsafe-vector-length"
" vec_344))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_345)"
"(lambda(all-quoted?_0"
" pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_0"
" len_343)"
"(let-values(((i_348)"
"(unsafe-vector-ref"
" vec_342"
" pos_0)))"
"(let-values(((all-quoted?_349)"
"(let-values(((all-quoted?_350)"
" all-quoted?_0))"
"(let-values(((all-quoted?_351)"
"(let-values()"
"(let-values(((i-pos_352)"
"(next-push-position_211)))"
"(begin"
"(ser-push!_215"
" i_348)"
"(if all-quoted?_350"
"(quoted?_212"
" i-pos_352)"
" #f))))))"
"(values"
" all-quoted?_351)))))"
"(if(not"
" #f)"
"(for-loop_345"
" all-quoted?_349"
"(unsafe-fx+"
" 1"
" pos_0))"
" all-quoted?_349)))"
" all-quoted?_0)))))"
" for-loop_345)"
" #t"
" 0)))))"
"(if all-quoted?_341"
"(let-values()"
"(begin"
"(ser-reset!_213"
" start-pos_340)"
"(ser-push-optional-quote!_217)"
"(ser-push!_215"
" 'exact"
" v_0)))"
"(void)))))))"
"(if(hash? v_0)"
"(let-values()"
"(let-values(((start-pos_353)"
"(next-push-position_211)))"
"(let-values(((as-set?_354)"
"(let-values(((ht_357)"
" v_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-values"
" ht_357)))"
"((letrec-values(((for-loop_358)"
"(lambda(result_0"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((val_361)"
"(hash-iterate-value"
" ht_357"
" i_0)))"
"(let-values(((result_362)"
"(let-values()"
"(let-values(((result_364)"
"(let-values()"
"(let-values()"
"(eq?"
" val_361"
" #t)))))"
"(values"
" result_364)))))"
"(if(if(not"
"((lambda x_0"
"(not"
" result_362))"
" val_361))"
"(not"
" #f)"
" #f)"
"(for-loop_358"
" result_362"
"(hash-iterate-next"
" ht_357"
" i_0))"
" result_362)))"
" result_0)))))"
" for-loop_358)"
" #t"
"(hash-iterate-first"
" ht_357))))))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'tag"
"(if as-set?_354"
"(if(hash-eq?"
" v_0)"
"(let-values()"
" '#:seteq)"
"(if(hash-eqv?"
" v_0)"
"(let-values()"
" '#:seteqv)"
"(let-values()"
" '#:set)))"
"(if(hash-eq?"
" v_0)"
"(let-values()"
" '#:hasheq)"
"(if(hash-eqv?"
" v_0)"
"(let-values()"
" '#:hasheqv)"
"(let-values()"
" '#:hash)))))"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'exact"
"(hash-count"
" v_0))"
"(values))))"
"(let-values(((ks_355)"
"(sorted-hash-keys"
" v_0)))"
"(let-values(((all-quoted?_356)"
"(let-values(((lst_366)"
" ks_355))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_366)))"
"((letrec-values(((for-loop_367)"
"(lambda(all-quoted?_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((k_370)"
"(unsafe-car"
" lst_0))"
"((rest_371)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((all-quoted?_372)"
"(let-values(((all-quoted?_373)"
" all-quoted?_0))"
"(let-values(((all-quoted?_374)"
"(let-values()"
"(let-values(((k-pos_375)"
"(next-push-position_211)))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" k_370)"
"(values))))"
"(let-values(((v-pos_376)"
"(next-push-position_211)))"
"(begin"
"(if as-set?_354"
"(void)"
"(let-values()"
"(ser-push!_215"
"(hash-ref"
" v_0"
" k_370))))"
"(if all-quoted?_373"
"(if(quoted?_212"
" k-pos_375)"
"(let-values(((or-part_377)"
" as-set?_354))"
"(if or-part_377"
" or-part_377"
"(quoted?_212"
" v-pos_376)))"
" #f)"
" #f))))))))"
"(values"
" all-quoted?_374)))))"
"(if(not"
" #f)"
"(for-loop_367"
" all-quoted?_372"
" rest_371)"
" all-quoted?_372)))"
" all-quoted?_0)))))"
" for-loop_367)"
" #t"
" lst_366)))))"
"(if all-quoted?_356"
"(let-values()"
"(begin"
"(ser-reset!_213"
" start-pos_353)"
"(ser-push-optional-quote!_217)"
"(ser-push!_215"
" 'exact"
" v_0)))"
"(void)))))))))"
"(let-values(((c3_378)"
"(prefab-struct-key"
" v_0)))"
"(if c3_378"
"((lambda(k_0)"
"(let-values(((vec_380)"
"(struct->vector"
" v_0)))"
"(let-values(((start-pos_381)"
"(next-push-position_211)))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'tag"
" '#:prefab)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'exact"
" k_0)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'exact"
"(sub1"
"(vector-length"
" vec_380)))"
"(values))))"
"(let-values(((all-quoted?_382)"
"(let-values(((v*_383"
" start*_384"
" stop*_385"
" step*_386)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                   \"vector\""
"(lambda(x_0)"
"(vector?"
" x_0))"
"(lambda(x_0)"
"(unsafe-vector-length"
" x_0))"
" vec_380"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_389)"
"(lambda(all-quoted?_0"
" idx_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_0"
" stop*_385)"
"(let-values(((i_392)"
"(unsafe-vector-ref"
" v*_383"
" idx_0)))"
"(let-values(((all-quoted?_393)"
"(let-values(((all-quoted?_394)"
" all-quoted?_0))"
"(let-values(((all-quoted?_395)"
"(let-values()"
"(let-values(((i-pos_396)"
"(next-push-position_211)))"
"(begin"
"(ser-push!_215"
" i_392)"
"(if all-quoted?_394"
"(quoted?_212"
" i-pos_396)"
" #f))))))"
"(values"
" all-quoted?_395)))))"
"(if(not"
" #f)"
"(for-loop_389"
" all-quoted?_393"
"(unsafe-fx+"
" idx_0"
" 1))"
" all-quoted?_393)))"
" all-quoted?_0)))))"
" for-loop_389)"
" #t"
" start*_384)))))"
"(if all-quoted?_382"
"(let-values()"
"(begin"
"(ser-reset!_213"
" start-pos_381)"
"(ser-push-optional-quote!_217)"
"(ser-push!_215"
" 'exact"
" v_0)))"
"(void)))))))))"
" c3_378)"
"(if(srcloc? v_0)"
"(let-values()"
"(if(path?"
"(srcloc-source v_0))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_217)"
"(ser-push!_215"
" 'exact"
" v_0)))"
"(let-values()"
"(begin"
"(ser-push!_215"
" 'tag"
" '#:srcloc)"
"(ser-push!_215"
"(srcloc-source v_0))"
"(ser-push!_215"
"(srcloc-line v_0))"
"(ser-push!_215"
"(srcloc-column v_0))"
"(ser-push!_215"
"(srcloc-position"
" v_0))"
"(ser-push!_215"
"(srcloc-span"
" v_0))))))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_217)"
"(ser-push!_215"
" 'exact"
" v_0)))))))))))))))))"
"((ser-push-optional-quote!_217)"
"(lambda()(begin 'ser-push-optional-quote!(void)))))"
"(let-values(((ser-shell!_218)"
"(lambda(v_0)"
"(begin"
" 'ser-shell!"
"(if(serialize-fill!? v_0)"
"(let-values()"
"((serialize-ref v_0)"
" v_0"
" ser-push!_215"
" state_200))"
"(if(box? v_0)"
"(let-values()(ser-push!_215 'tag '#:box))"
"(if(vector? v_0)"
"(let-values()"
"(begin"
"(ser-push!_215 'tag '#:vector)"
"(ser-push!_215"
" 'exact"
"(vector-length v_0))))"
"(if(hash? v_0)"
"(let-values()"
"(ser-push!_215"
" 'tag"
"(if(hash-eq? v_0)"
"(let-values() '#:hasheq)"
"(if(hash-eqv? v_0)"
"(let-values() '#:hasheqv)"
"(let-values() '#:hash)))))"
"(let-values()"
"(error"
" 'ser-shell"
"                                                                               \"unknown mutable: ~e\""
" v_0))))))))))"
"(let-values(((ser-shell-fill!_219)"
"(lambda(v_0)"
"(begin"
" 'ser-shell-fill!"
"(if(serialize-fill!? v_0)"
"(let-values()"
"((serialize-fill!-ref v_0)"
" v_0"
" ser-push!_215"
" state_200))"
"(if(box? v_0)"
"(let-values()"
"(begin"
"(ser-push!_215 'tag '#:set-box!)"
"(ser-push!_215(unbox v_0))))"
"(if(vector? v_0)"
"(let-values()"
"(begin"
"(ser-push!_215 'tag '#:set-vector!)"
"(ser-push!_215"
" 'exact"
"(vector-length v_0))"
"(let-values(((vec_399 len_400)"
"(let-values(((vec_401)"
" v_0))"
"(begin"
"(check-vector vec_401)"
"(values"
" vec_401"
"(unsafe-vector-length"
" vec_401))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_402)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_0"
" len_400)"
"(let-values(((v_404)"
"(unsafe-vector-ref"
" vec_399"
" pos_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push!_215"
" v_404))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_402"
"(unsafe-fx+"
" 1"
" pos_0))"
"(values))))"
"(values))))))"
" for-loop_402)"
" 0)))"
"(void)))"
"(if(hash? v_0)"
"(let-values()"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'tag"
" '#:set-hash!)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_215"
" 'exact"
"(hash-count v_0))"
"(values))))"
"(let-values(((ks_405)"
"(sorted-hash-keys"
" v_0)))"
"(begin"
"(let-values(((lst_406) ks_405))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_406)))"
"((letrec-values(((for-loop_407)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((k_409)"
"(unsafe-car"
" lst_0))"
"((rest_410)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(ser-push!_215"
" k_409)"
"(ser-push!_215"
"(hash-ref"
" v_0"
" k_409))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_407"
" rest_410)"
"(values))))"
"(values))))))"
" for-loop_407)"
" lst_406)))"
"(void))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                                 \"unknown mutable: ~e\""
" v_0))))))))))"
"(let-values(((rev-mutables_220)"
"(let-values(((ht_411) mutables_201))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_411)))"
"((letrec-values(((for-loop_412)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_415"
" v_416)"
"(hash-iterate-key+value"
" ht_411"
" i_0)))"
"(let-values(((table_417)"
"(let-values(((table_418)"
" table_0))"
"(let-values(((table_419)"
"(let-values()"
"(let-values(((key_420"
" val_421)"
"(let-values()"
"(values"
" v_416"
" k_415))))"
"(hash-set"
" table_418"
" key_420"
" val_421)))))"
"(values"
" table_419)))))"
"(if(not #f)"
"(for-loop_412"
" table_417"
"(hash-iterate-next"
" ht_411"
" i_0))"
" table_417)))"
" table_0)))))"
" for-loop_412)"
" '#hasheqv()"
"(hash-iterate-first ht_411))))))"
"(let-values(((mutable-shell-bindings_221)"
"(begin"
"(begin"
"(let-values(((start_422) 0)"
"((end_423)"
"(hash-count mutables_201))"
"((inc_424) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range"
" start_422"
" end_423"
" inc_424)))"
"((letrec-values(((for-loop_425)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(<"
" pos_0"
" end_423)"
"(let-values(((i_427)"
" pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell!_218"
"(hash-ref"
" rev-mutables_220"
" i_427)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_425"
"(+"
" pos_0"
" inc_424))"
"(values))))"
"(values))))))"
" for-loop_425)"
" start_422)))"
"(void))"
"(reap-stream!_214))))"
"(let-values(((rev-shares_222)"
"(let-values(((ht_428) shares_203))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-keys ht_428)))"
"((letrec-values(((for-loop_429)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((obj_432)"
"(hash-iterate-key"
" ht_428"
" i_0)))"
"(let-values(((table_433)"
"(let-values(((table_434)"
" table_0))"
"(let-values(((table_435)"
"(let-values()"
"(let-values(((key_436"
" val_437)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_208"
"(hash-ref"
" objs_202"
" obj_432))"
" obj_432))))"
"(hash-set"
" table_434"
" key_436"
" val_437)))))"
"(values"
" table_435)))))"
"(if(not #f)"
"(for-loop_429"
" table_433"
"(hash-iterate-next"
" ht_428"
" i_0))"
" table_433)))"
" table_0)))))"
" for-loop_429)"
" '#hasheqv()"
"(hash-iterate-first ht_428))))))"
"(let-values(((shared-bindings_223)"
"(begin"
"(begin"
"(let-values(((start_438)"
" num-mutables_207)"
"((end_439)"
"(+"
" num-mutables_207"
"(hash-count shares_203)))"
"((inc_440) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range"
" start_438"
" end_439"
" inc_440)))"
"((letrec-values(((for-loop_441)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(<"
" pos_0"
" end_439)"
"(let-values(((i_443)"
" pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push-encoded!_216"
"(hash-ref"
" rev-shares_222"
" i_443)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_441"
"(+"
" pos_0"
" inc_440))"
"(values))))"
"(values))))))"
" for-loop_441)"
" start_438)))"
"(void))"
"(reap-stream!_214))))"
"(let-values(((mutable-fills_224)"
"(begin"
"(begin"
"(let-values(((start_444) 0)"
"((end_445)"
"(hash-count mutables_201))"
"((inc_446) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range"
" start_444"
" end_445"
" inc_446)))"
"((letrec-values(((for-loop_447)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(<"
" pos_0"
" end_445)"
"(let-values(((i_449)"
" pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell-fill!_219"
"(hash-ref"
" rev-mutables_220"
" i_449)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_447"
"(+"
" pos_0"
" inc_446))"
"(values))))"
"(values))))))"
" for-loop_447)"
" start_444)))"
"(void))"
"(reap-stream!_214))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_198 inspector-id #f)"
"(if syntax-support?_198 bulk-binding-registry-id #f)"
"(list 'quote(hash-count mutables_201))"
"(list 'quote mutable-shell-bindings_221)"
"(list 'quote(hash-count shares_203))"
"(list 'quote shared-bindings_223)"
"(list 'quote mutable-fills_224)"
"(list"
" 'quote"
"(begin"
"(ser-push!_215 v_196)"
"(reap-stream!_214))))))))))))))))))))))))))))))))))))"
"(define-values"
"(sorted-hash-keys)"
"(lambda(ht_0)"
"(begin"
"(let-values(((ks_468)(hash-keys ht_0)))"
"(if(null? ks_468)"
"(let-values() ks_468)"
"(if(null?(cdr ks_468))"
"(let-values() ks_468)"
"(if(andmap2 symbol? ks_468)"
"(let-values()"
"(let-values(((ks14_469) ks_468)((symbol<?15_470) symbol<?))(sort7.1 #f #f ks14_469 symbol<?15_470)))"
"(if(andmap2 scope? ks_468)"
"(let-values()"
"(let-values(((ks16_471) ks_468)((scope<?17_472) scope<?))(sort7.1 #f #f ks16_471 scope<?17_472)))"
"(if(andmap2 shifted-multi-scope? ks_468)"
"(let-values()"
"(let-values(((ks18_473) ks_468)((shifted-multi-scope<?19_474) shifted-multi-scope<?))"
"(sort7.1 #f #f ks18_473 shifted-multi-scope<?19_474)))"
"(if(andmap2 real? ks_468)"
"(let-values()(let-values(((ks20_475) ks_468)((<21_476) <))(sort7.1 #f #f ks20_475 <21_476)))"
"(let-values() ks_468)))))))))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" num-mutables_0"
" mutable-vec_0"
" num-shared_0"
" shared-vec_0"
" mutable-fill-vec_0"
" result-vec_0)"
"(begin"
"(let-values(((shared_486)(make-vector(+ num-mutables_0 num-shared_0) 'uninit)))"
"(let-values((()"
"(begin"
"(let-values(((start_489) 0)((end_490) num-mutables_0)((inc_491) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_489 end_490 inc_491)))"
"((letrec-values(((for-loop_492)"
"(lambda(pos_0 pos_1)"
"(begin"
" 'for-loop"
"(if(< pos_1 end_490)"
"(let-values(((i_495) pos_1))"
"(let-values(((pos_496)"
"(let-values(((pos_497) pos_0))"
"(let-values(((pos_498)"
"(let-values()"
"(let-values(((d_499 next-pos_500)"
"(decode-shell"
" mutable-vec_0"
" pos_497"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_486)))"
"(begin"
"(vector-set!"
" shared_486"
" i_495"
" d_499)"
" next-pos_500)))))"
"(values pos_498)))))"
"(if(not #f)(for-loop_492 pos_496(+ pos_1 inc_491)) pos_496)))"
" pos_0)))))"
" for-loop_492)"
" 0"
" start_489)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_501) num-mutables_0)"
"((end_502)(+ num-mutables_0 num-shared_0))"
"((inc_503) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_501 end_502 inc_503)))"
"((letrec-values(((for-loop_504)"
"(lambda(pos_0 pos_1)"
"(begin"
" 'for-loop"
"(if(< pos_1 end_502)"
"(let-values(((i_507) pos_1))"
"(let-values(((pos_508)"
"(let-values(((pos_509) pos_0))"
"(let-values(((pos_510)"
"(let-values()"
"(let-values(((d_511"
" next-pos_512)"
"(decode"
" shared-vec_0"
" pos_509"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_486)))"
"(begin"
"(vector-set!"
" shared_486"
" i_507"
" d_511)"
" next-pos_512)))))"
"(values pos_510)))))"
"(if(not #f)"
"(for-loop_504 pos_508(+ pos_1 inc_503))"
" pos_508)))"
" pos_0)))))"
" for-loop_504)"
" 0"
" start_501)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_513) 0)"
"((end_514) num-mutables_0)"
"((inc_515) 1)"
"((vec_516 len_517)"
"(let-values(((vec_518) shared_486))"
"(begin"
"(check-vector vec_518)"
"(values vec_518(unsafe-vector-length vec_518))))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_513 end_514 inc_515)))"
" #f"
"((letrec-values(((for-loop_519)"
"(lambda(pos_0 pos_1 pos_2)"
"(begin"
" 'for-loop"
"(if(if(< pos_1 end_514)(unsafe-fx< pos_2 len_517) #f)"
"(let-values(((v_524)(unsafe-vector-ref vec_516 pos_2)))"
"(let-values(((pos_525)"
"(let-values(((pos_526) pos_0))"
"(let-values(((pos_527)"
"(let-values()"
"(decode-fill!"
" v_524"
" mutable-fill-vec_0"
" pos_526"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_486))))"
"(values pos_527)))))"
"(if(not #f)"
"(for-loop_519"
" pos_525"
"(+ pos_1 inc_515)"
"(unsafe-fx+ 1 pos_2))"
" pos_525)))"
" pos_0)))))"
" for-loop_519)"
" 0"
" start_513"
" 0)))"
"(values))))"
"(let-values(((result_487 done-pos_488)"
"(decode result-vec_0 0 mpis_0 inspector_0 bulk-binding-registry_0 shared_486)))"
" result_487))))))))"
"(define-values"
"(decode-shell)"
"(lambda(vec_0 pos_0 mpis_0 inspector_0 bulk-binding-registry_0 shared_0)"
"(begin"
"(let-values(((tmp_534)(vector*-ref vec_0 pos_0)))"
"(if(equal? tmp_534 '#:box)"
"(let-values()(values(box #f)(add1 pos_0)))"
"(if(equal? tmp_534 '#:vector)"
"(let-values()(values(make-vector(vector*-ref vec_0(add1 pos_0)))(+ pos_0 2)))"
"(if(equal? tmp_534 '#:hash)"
"(let-values()(values(make-hasheq)(add1 pos_0)))"
"(if(equal? tmp_534 '#:hasheq)"
"(let-values()(values(make-hasheq)(add1 pos_0)))"
"(if(equal? tmp_534 '#:hasheqv)"
"(let-values()(values(make-hasheqv)(add1 pos_0)))"
"(let-values()(decode vec_0 pos_0 mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))))))))))"
"(define-values"
"(decode)"
"(lambda(vec_0 pos_0 mpis_0 inspector_0 bulk-binding-registry_0 shared_0)"
"(begin"
"(let-values()"
"(let-values(((tmp_607)(vector*-ref vec_0 pos_0)))"
"(let-values(((index_608)"
"(if(keyword? tmp_607)"
"(hash-ref"
" '#hasheq((#:scope+kind . 17)"
"(#:seteqv . 14)"
"(#:ref . 1)"
"(#:list . 12)"
"(#:vector . 12)"
"(#:module-binding . 24)"
"(#:set . 14)"
"(#:srcloc . 7)"
"(#:bulk-binding-at . 22)"
"(#:multi-scope . 19)"
"(#:hasheq . 13)"
"(#:simple-module-binding . 25)"
"(#:scope . 16)"
"(#:bulk-binding-registry . 3)"
"(#:hash . 13)"
"(#:shifted-multi-scope . 20)"
"(#:mpi . 9)"
"(#:quote . 8)"
"(#:prefab . 15)"
"(#:box . 10)"
"(#:local-binding . 26)"
"(#:bulk-binding . 27)"
"(#:inspector . 2)"
"(#:table-with-bulk-bindings . 21)"
"(#:interned-scope . 18)"
"(#:seteq . 14)"
"(#:provided . 28)"
"(#:syntax . 4)"
"(#:cons . 11)"
"(#:hasheqv . 13)"
"(#:datum->syntax . 5)"
"(#:syntax+props . 6)"
"(#:representative-scope . 23))"
" tmp_607"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_608 14)"
"(if(unsafe-fx< index_608 6)"
"(if(unsafe-fx< index_608 2)"
"(if(unsafe-fx< index_608 1)"
"(let-values()(values(vector*-ref vec_0 pos_0)(add1 pos_0)))"
"(let-values()(values(vector*-ref shared_0(vector*-ref vec_0(add1 pos_0)))(+ pos_0 2))))"
"(if(unsafe-fx< index_608 3)"
"(let-values()(values inspector_0(add1 pos_0)))"
"(if(unsafe-fx< index_608 4)"
"(let-values()(values bulk-binding-registry_0(add1 pos_0)))"
"(if(unsafe-fx< index_608 5)"
"(let-values()"
"(let-values(((content_609 next-pos_610)"
"(decode"
" vec_0"
"(add1 pos_0)"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((context_611 next-pos_612)"
"(let-values(((i_613)(vector*-ref vec_0 next-pos_610)))"
"(if(exact-integer? i_613)"
"(values(vector*-ref shared_0 i_613)(add1 next-pos_610))"
"(decode"
" vec_0"
" next-pos_610"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))))"
"(let-values(((srcloc_614 next-pos_615)"
"(let-values(((i_616)(vector*-ref vec_0 next-pos_612)))"
"(if(exact-integer? i_616)"
"(values(vector*-ref shared_0 i_616)(add1 next-pos_612))"
"(decode"
" vec_0"
" next-pos_612"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))))"
"(values"
"(deserialize-syntax content_609 context_611 srcloc_614 #f #f inspector_0)"
" next-pos_615)))))"
"(let-values()"
"(let-values(((content_617 next-pos_618)"
"(decode"
" vec_0"
"(add1 pos_0)"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((context_619 next-pos_620)"
"(let-values(((i_621)(vector*-ref vec_0 next-pos_618)))"
"(if(exact-integer? i_621)"
"(values(vector*-ref shared_0 i_621)(add1 next-pos_618))"
"(decode"
" vec_0"
" next-pos_618"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))))"
"(let-values(((srcloc_622 next-pos_623)"
"(let-values(((i_624)(vector*-ref vec_0 next-pos_620)))"
"(if(exact-integer? i_624)"
"(values(vector*-ref shared_0 i_624)(add1 next-pos_620))"
"(decode"
" vec_0"
" next-pos_620"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))))"
"(values"
"(deserialize-datum->syntax content_617 context_619 srcloc_622 inspector_0)"
" next-pos_623)))))))))"
"(if(unsafe-fx< index_608 9)"
"(if(unsafe-fx< index_608 7)"
"(let-values()"
"(let-values(((content_625 next-pos_626)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((context_627 next-pos_628)"
"(let-values(((i_629)(vector*-ref vec_0 next-pos_626)))"
"(if(exact-integer? i_629)"
"(values(vector*-ref shared_0 i_629)(add1 next-pos_626))"
"(decode"
" vec_0"
" next-pos_626"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))))"
"(let-values(((srcloc_630 next-pos_631)"
"(let-values(((i_632)(vector*-ref vec_0 next-pos_628)))"
"(if(exact-integer? i_632)"
"(values(vector*-ref shared_0 i_632)(add1 next-pos_628))"
"(decode"
" vec_0"
" next-pos_628"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))))"
"(let-values(((props_633 next-pos_634)"
"(decode"
" vec_0"
" next-pos_631"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((tamper_635 next-pos_636)"
"(decode"
" vec_0"
" next-pos_634"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
"(deserialize-syntax"
" content_625"
" context_627"
" srcloc_630"
" props_633"
" tamper_635"
" inspector_0)"
" next-pos_636)))))))"
"(if(unsafe-fx< index_608 8)"
"(let-values()"
"(let-values(((source_637 next-pos_638)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((line_639 next-pos_640)"
"(decode"
" vec_0"
" next-pos_638"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((column_641 next-pos_642)"
"(decode"
" vec_0"
" next-pos_640"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((position_643 next-pos_644)"
"(decode"
" vec_0"
" next-pos_642"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((span_645 next-pos_646)"
"(decode"
" vec_0"
" next-pos_644"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
"(srcloc source_637 line_639 column_641 position_643 span_645)"
" next-pos_646)))))))"
"(let-values()(values(vector*-ref vec_0(add1 pos_0))(+ pos_0 2)))))"
"(if(unsafe-fx< index_608 11)"
"(if(unsafe-fx< index_608 10)"
"(let-values()(values(vector*-ref mpis_0(vector*-ref vec_0(add1 pos_0)))(+ pos_0 2)))"
"(let-values()"
"(let-values(((v_647 next-pos_648)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(values(box-immutable v_647) next-pos_648))))"
"(if(unsafe-fx< index_608 12)"
"(let-values()"
"(let-values(((a_649 next-pos_650)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((d_651 next-pos_652)"
"(decode"
" vec_0"
" next-pos_650"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values(cons a_649 d_651) next-pos_652))))"
"(if(unsafe-fx< index_608 13)"
"(let-values()"
"(let-values(((len_653)(vector*-ref vec_0(add1 pos_0))))"
"(let-values(((r_654)(make-vector len_653)))"
"(let-values(((next-pos_655)"
"(let-values(((start_656) 0)((end_657) len_653)((inc_658) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_656 end_657 inc_658)))"
"((letrec-values(((for-loop_659)"
"(lambda(pos_1 pos_2)"
"(begin"
" 'for-loop"
"(if(< pos_2 end_657)"
"(let-values(((i_662) pos_2))"
"(let-values(((pos_663)"
"(let-values(((pos_664) pos_1))"
"(let-values(((pos_665)"
"(let-values()"
"(let-values(((v_666"
" next-pos_667)"
"(let-values(((v_668"
" next-pos_669)"
"(decode"
" vec_0"
" pos_664"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
" v_668"
" next-pos_669))))"
"(begin"
"(vector-set!"
" r_654"
" i_662"
" v_666)"
" next-pos_667)))))"
"(values pos_665)))))"
"(if(not #f)"
"(for-loop_659 pos_663(+ pos_2 inc_658))"
" pos_663)))"
" pos_1)))))"
" for-loop_659)"
"(+ pos_0 2)"
" start_656)))))"
"(values"
"(if(eq?(vector*-ref vec_0 pos_0) '#:list)"
"(vector->list r_654)"
"(vector->immutable-vector r_654))"
" next-pos_655)))))"
"(let-values()"
"(let-values(((ht_670)"
"(let-values(((tmp_672)(vector*-ref vec_0 pos_0)))"
"(if(equal? tmp_672 '#:hash)"
"(let-values()(hash))"
"(if(equal? tmp_672 '#:hasheq)"
"(let-values()(hasheq))"
"(if(equal? tmp_672 '#:hasheqv)"
"(let-values()(hasheqv))"
"(let-values()(void))))))))"
"(let-values(((len_671)(vector*-ref vec_0(add1 pos_0))))"
"(let-values(((start_673) 0)((end_674) len_671)((inc_675) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_673 end_674 inc_675)))"
"((letrec-values(((for-loop_676)"
"(lambda(ht_0 pos_1 pos_2)"
"(begin"
" 'for-loop"
"(if(< pos_2 end_674)"
"(let-values()"
"(let-values(((ht_681 pos_682)"
"(let-values(((ht_683) ht_0)"
"((pos_684) pos_1))"
"(let-values(((ht_685 pos_686)"
"(let-values()"
"(let-values(((k_687"
" next-pos_688)"
"(decode"
" vec_0"
" pos_684"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((v_689"
" next-pos_690)"
"(decode"
" vec_0"
" next-pos_688"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
"(hash-set"
" ht_683"
" k_687"
" v_689)"
" next-pos_690))))))"
"(values ht_685 pos_686)))))"
"(if(not #f)"
"(for-loop_676 ht_681 pos_682(+ pos_2 inc_675))"
"(values ht_681 pos_682))))"
"(values ht_0 pos_1))))))"
" for-loop_676)"
" ht_670"
"(+ pos_0 2)"
" start_673)))))))))))"
"(if(unsafe-fx< index_608 21)"
"(if(unsafe-fx< index_608 17)"
"(if(unsafe-fx< index_608 15)"
"(let-values()"
"(let-values(((s_691)"
"(let-values(((tmp_693)(vector*-ref vec_0 pos_0)))"
"(if(equal? tmp_693 '#:set)"
"(let-values()(set))"
"(if(equal? tmp_693 '#:seteq)"
"(let-values()(seteq))"
"(if(equal? tmp_693 '#:seteqv)"
"(let-values()(seteqv))"
"(let-values()(void))))))))"
"(let-values(((len_692)(vector*-ref vec_0(add1 pos_0))))"
"(let-values(((start_694) 0)((end_695) len_692)((inc_696) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_694 end_695 inc_696)))"
"((letrec-values(((for-loop_697)"
"(lambda(s_0 pos_1 pos_2)"
"(begin"
" 'for-loop"
"(if(< pos_2 end_695)"
"(let-values()"
"(let-values(((s_702 pos_703)"
"(let-values(((s_704) s_0)((pos_705) pos_1))"
"(let-values(((s_706 pos_707)"
"(let-values()"
"(let-values(((k_708"
" next-pos_709)"
"(decode"
" vec_0"
" pos_705"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
"(set-add s_704 k_708)"
" next-pos_709)))))"
"(values s_706 pos_707)))))"
"(if(not #f)"
"(for-loop_697 s_702 pos_703(+ pos_2 inc_696))"
"(values s_702 pos_703))))"
"(values s_0 pos_1))))))"
" for-loop_697)"
" s_691"
"(+ pos_0 2)"
" start_694))))))"
"(if(unsafe-fx< index_608 16)"
"(let-values()"
"(let-values(((key_710 next-pos_711)"
"(let-values(((k_715 next-pos_716)"
"(decode"
" vec_0"
"(add1 pos_0)"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values k_715 next-pos_716))))"
"(let-values(((len_712)(vector*-ref vec_0 next-pos_711)))"
"(let-values(((r_713 done-pos_714)"
"(let-values(((start_717) 0)((end_718) len_712)((inc_719) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_717 end_718 inc_719)))"
"((letrec-values(((for-loop_720)"
"(lambda(r_0 pos_1 pos_2)"
"(begin"
" 'for-loop"
"(if(< pos_2 end_718)"
"(let-values()"
"(let-values(((r_725 pos_726)"
"(let-values(((r_727) r_0)"
"((pos_728) pos_1))"
"(let-values(((r_729 pos_730)"
"(let-values()"
"(let-values(((v_731"
" next-pos_732)"
"(decode"
" vec_0"
" pos_728"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
"(cons"
" v_731"
" r_727)"
" next-pos_732)))))"
"(values r_729 pos_730)))))"
"(if(not #f)"
"(for-loop_720"
" r_725"
" pos_726"
"(+ pos_2 inc_719))"
"(values r_725 pos_726))))"
"(values r_0 pos_1))))))"
" for-loop_720)"
" null"
"(add1 next-pos_711)"
" start_717)))))"
"(values(apply make-prefab-struct key_710(reverse$1 r_713)) done-pos_714)))))"
"(let-values()(values(deserialize-scope)(add1 pos_0)))))"
"(if(unsafe-fx< index_608 18)"
"(let-values()"
"(let-values(((kind_733 next-pos_734)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(values(deserialize-scope kind_733) next-pos_734)))"
"(if(unsafe-fx< index_608 19)"
"(let-values()"
"(let-values(((id_735 next-pos_736)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(values(make-interned-scope id_735) next-pos_736)))"
"(if(unsafe-fx< index_608 20)"
"(let-values()"
"(let-values(((name_737 next-pos_738)"
"(decode"
" vec_0"
"(add1 pos_0)"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((scopes_739 next-pos_740)"
"(decode"
" vec_0"
" next-pos_738"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values(deserialize-multi-scope name_737 scopes_739) next-pos_740))))"
"(let-values()"
"(let-values(((phase_741 next-pos_742)"
"(decode"
" vec_0"
"(add1 pos_0)"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((multi-scope_743 next-pos_744)"
"(decode"
" vec_0"
" next-pos_742"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values(deserialize-shifted-multi-scope phase_741 multi-scope_743) next-pos_744))))))))"
"(if(unsafe-fx< index_608 24)"
"(if(unsafe-fx< index_608 22)"
"(let-values()"
"(let-values(((syms_745 next-pos_746)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((bulk-bindings_747 next-pos_748)"
"(decode vec_0 next-pos_746 mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(values(deserialize-table-with-bulk-bindings syms_745 bulk-bindings_747) next-pos_748))))"
"(if(unsafe-fx< index_608 23)"
"(let-values()"
"(let-values(((scopes_749 next-pos_750)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((bulk_751 next-pos_752)"
"(decode"
" vec_0"
" next-pos_750"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values(deserialize-bulk-binding-at scopes_749 bulk_751) next-pos_752))))"
"(let-values()"
"(let-values(((kind_753 next-pos_754)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((phase_755 next-pos_756)"
"(decode"
" vec_0"
" next-pos_754"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values(deserialize-representative-scope kind_753 phase_755) next-pos_756))))))"
"(if(unsafe-fx< index_608 26)"
"(if(unsafe-fx< index_608 25)"
"(let-values()"
"(let-values(((module_757 next-pos_758)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((sym_759 next-pos_760)"
"(decode"
" vec_0"
" next-pos_758"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((phase_761 next-pos_762)"
"(decode"
" vec_0"
" next-pos_760"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((nominal-module_763 next-pos_764)"
"(decode"
" vec_0"
" next-pos_762"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((nominal-phase_765 next-pos_766)"
"(decode"
" vec_0"
" next-pos_764"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((nominal-sym_767 next-pos_768)"
"(decode"
" vec_0"
" next-pos_766"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((nominal-require-phase_769 next-pos_770)"
"(decode"
" vec_0"
" next-pos_768"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((free=id_771 next-pos_772)"
"(decode"
" vec_0"
" next-pos_770"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((extra-inspector_773 next-pos_774)"
"(decode"
" vec_0"
" next-pos_772"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((extra-nominal-bindings_775 next-pos_776)"
"(decode"
" vec_0"
" next-pos_774"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
"(deserialize-full-module-binding"
" module_757"
" sym_759"
" phase_761"
" nominal-module_763"
" nominal-phase_765"
" nominal-sym_767"
" nominal-require-phase_769"
" free=id_771"
" extra-inspector_773"
" extra-nominal-bindings_775)"
" next-pos_776))))))))))))"
"(let-values()"
"(let-values(((module_777 next-pos_778)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((sym_779 next-pos_780)"
"(decode"
" vec_0"
" next-pos_778"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((phase_781 next-pos_782)"
"(decode"
" vec_0"
" next-pos_780"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((nominal-module_783 next-pos_784)"
"(decode"
" vec_0"
" next-pos_782"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
"(deserialize-simple-module-binding module_777 sym_779 phase_781 nominal-module_783)"
" next-pos_784)))))))"
"(if(unsafe-fx< index_608 27)"
"(let-values()"
"(let-values(((key_785 next-pos_786)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((free=id_787 next-pos_788)"
"(decode"
" vec_0"
" next-pos_786"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values(deserialize-full-local-binding key_785 free=id_787) next-pos_788))))"
"(if(unsafe-fx< index_608 28)"
"(let-values()"
"(let-values(((prefix_789 next-pos_790)"
"(decode"
" vec_0"
"(add1 pos_0)"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((excepts_791 next-pos_792)"
"(decode"
" vec_0"
" next-pos_790"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((mpi_793 next-pos_794)"
"(decode"
" vec_0"
" next-pos_792"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((provide-phase-level_795 next-pos_796)"
"(decode"
" vec_0"
" next-pos_794"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((phase-shift_797 next-pos_798)"
"(decode"
" vec_0"
" next-pos_796"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((bulk-binding-registry_799 next-pos_800)"
"(decode"
" vec_0"
" next-pos_798"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
"(deserialize-bulk-binding"
" prefix_789"
" excepts_791"
" mpi_793"
" provide-phase-level_795"
" phase-shift_797"
" bulk-binding-registry_799)"
" next-pos_800))))))))"
"(let-values()"
"(let-values(((binding_801 next-pos_802)"
"(decode"
" vec_0"
"(add1 pos_0)"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((protected?_803 next-pos_804)"
"(decode"
" vec_0"
" next-pos_802"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((syntax?_805 next-pos_806)"
"(decode"
" vec_0"
" next-pos_804"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(values"
"(deserialize-provided binding_801 protected?_803 syntax?_805)"
" next-pos_806)))))))))))))))))"
"(define-values"
"(decode-fill!)"
"(lambda(v_0 vec_0 pos_0 mpis_0 inspector_0 bulk-binding-registry_0 shared_0)"
"(begin"
"(let-values(((tmp_814)(vector*-ref vec_0 pos_0)))"
"(if(equal? tmp_814 #f)"
"(let-values()(add1 pos_0))"
"(if(equal? tmp_814 '#:set-box!)"
"(let-values()"
"(let-values(((c_815 next-pos_816)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(begin(set-box! v_0 c_815) next-pos_816)))"
"(if(equal? tmp_814 '#:set-vector!)"
"(let-values()"
"(let-values(((len_817)(vector*-ref vec_0(add1 pos_0))))"
"(let-values(((start_818) 0)((end_819) len_817)((inc_820) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_818 end_819 inc_820)))"
"((letrec-values(((for-loop_821)"
"(lambda(pos_1 pos_2)"
"(begin"
" 'for-loop"
"(if(< pos_2 end_819)"
"(let-values(((i_824) pos_2))"
"(let-values(((pos_825)"
"(let-values(((pos_826) pos_1))"
"(let-values(((pos_827)"
"(let-values()"
"(let-values(((c_828 next-pos_829)"
"(decode"
" vec_0"
" pos_826"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(begin"
"(vector-set! v_0 i_824 c_828)"
" next-pos_829)))))"
"(values pos_827)))))"
"(if(not #f)(for-loop_821 pos_825(+ pos_2 inc_820)) pos_825)))"
" pos_1)))))"
" for-loop_821)"
"(+ pos_0 2)"
" start_818)))))"
"(if(equal? tmp_814 '#:set-hash!)"
"(let-values()"
"(let-values(((len_830)(vector*-ref vec_0(add1 pos_0))))"
"(let-values(((start_831) 0)((end_832) len_830)((inc_833) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_831 end_832 inc_833)))"
"((letrec-values(((for-loop_834)"
"(lambda(pos_1 pos_2)"
"(begin"
" 'for-loop"
"(if(< pos_2 end_832)"
"(let-values()"
"(let-values(((pos_838)"
"(let-values(((pos_839) pos_1))"
"(let-values(((pos_840)"
"(let-values()"
"(let-values(((key_841 next-pos_842)"
"(decode"
" vec_0"
" pos_839"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(let-values(((val_843 done-pos_844)"
"(decode"
" vec_0"
" next-pos_842"
" mpis_0"
" inspector_0"
" bulk-binding-registry_0"
" shared_0)))"
"(begin"
"(hash-set! v_0 key_841 val_843)"
" done-pos_844))))))"
"(values pos_840)))))"
"(if(not #f)(for-loop_834 pos_838(+ pos_2 inc_833)) pos_838)))"
" pos_1)))))"
" for-loop_834)"
"(+ pos_0 2)"
" start_831)))))"
"(if(equal? tmp_814 '#:scope-fill!)"
"(let-values()"
"(let-values(((c_845 next-pos_846)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(begin(deserialize-scope-fill! v_0 c_845) next-pos_846)))"
"(if(equal? tmp_814 '#:representative-scope-fill!)"
"(let-values()"
"(let-values(((a_847 next-pos_848)"
"(decode vec_0(add1 pos_0) mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(let-values(((d_849 done-pos_850)"
"(decode vec_0 next-pos_848 mpis_0 inspector_0 bulk-binding-registry_0 shared_0)))"
"(begin(deserialize-representative-scope-fill! v_0 a_847 d_849) done-pos_850))))"
"                    (let-values () (error 'deserialize \"bad fill encoding: ~v\" (vector*-ref vec_0 pos_0)))))))))))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_0)"
"(begin"
"(let-values(((seen_852)(make-hasheq)))"
"(let-values(((reachable-scopes_853)(seteq)))"
"(let-values(((get-reachable-scopes_854)(lambda()(begin 'get-reachable-scopes reachable-scopes_853))))"
"(let-values(((scope-triggers_855)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_856)"
"(lambda(v_1)"
"(begin"
" 'loop"
"(if(interned-literal? v_1)"
"(let-values()(void))"
"(if(hash-ref seen_852 v_1 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_852 v_1 #t)"
"(if(scope-with-bindings? v_1)"
"(let-values()"
"(begin"
"(set! reachable-scopes_853(set-add reachable-scopes_853 v_1))"
"((reach-scopes-ref v_1) v_1 loop_856)"
"(let-values(((lst_858)(hash-ref scope-triggers_855 v_1 null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_858)))"
"((letrec-values(((for-loop_859)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((proc_861)"
"(unsafe-car lst_0))"
"((rest_862)"
"(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(proc_861"
" loop_856))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_859 rest_862)"
"(values))))"
"(values))))))"
" for-loop_859)"
" lst_858)))"
"(void)"
"(hash-remove! scope-triggers_855 v_1)"
"((scope-with-bindings-ref v_1)"
" v_1"
" get-reachable-scopes_854"
" loop_856"
"(lambda(sc-unreachable_0 b_0)"
"(hash-update!"
" scope-triggers_855"
" sc-unreachable_0"
"(lambda(l_0)(cons b_0 l_0))"
" null)))))"
"(if(reach-scopes? v_1)"
"(let-values()((reach-scopes-ref v_1) v_1 loop_856))"
"(if(pair? v_1)"
"(let-values()(begin(loop_856(car v_1))(loop_856(cdr v_1))))"
"(if(vector? v_1)"
"(let-values()"
"(begin"
"(let-values(((vec_866 len_867)"
"(let-values(((vec_868) v_1))"
"(begin"
"(check-vector vec_868)"
"(values"
" vec_868"
"(unsafe-vector-length vec_868))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_869)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_867)"
"(let-values(((e_871)"
"(unsafe-vector-ref"
" vec_866"
" pos_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_856"
" e_871))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_869"
"(unsafe-fx+ 1 pos_0))"
"(values))))"
"(values))))))"
" for-loop_869)"
" 0)))"
"(void)))"
"(if(box? v_1)"
"(let-values()(loop_856(unbox v_1)))"
"(if(hash? v_1)"
"(let-values()"
"(begin"
"(let-values(((ht_872) v_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_872)))"
"((letrec-values(((for-loop_873)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_875 v_876)"
"(hash-iterate-key+value"
" ht_872"
" i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_856"
" k_875)"
"(loop_856"
" v_876)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_873"
"(hash-iterate-next"
" ht_872"
" i_0))"
"(values))))"
"(values))))))"
" for-loop_873)"
"(hash-iterate-first ht_872))))"
"(void)))"
"(if(prefab-struct-key v_1)"
"(let-values()"
"(begin"
"(let-values(((v*_877 start*_878 stop*_879 step*_880)"
"(normalise-inputs"
" 'in-vector"
"                                                                               \"vector\""
"(lambda(x_0)(vector? x_0))"
"(lambda(x_0)(unsafe-vector-length x_0))"
"(struct->vector v_1)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_883)"
"(lambda(idx_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_0"
" stop*_879)"
"(let-values(((e_885)"
"(unsafe-vector-ref"
" v*_877"
" idx_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_856"
" e_885))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_883"
"(unsafe-fx+ idx_0 1))"
"(values))))"
"(values))))))"
" for-loop_883)"
" start*_878)))"
"(void)))"
"(if(srcloc? v_1)"
"(let-values()(loop_856(srcloc-source v_1)))"
"(let-values()(void))))))))))))))))))"
" loop_856)"
" v_0)"
" reachable-scopes_853))))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(syntax-module-path-index-shift/no-keywords)"
"(let-values(((syntax-module-path-index-shift_886)"
"(let-values(((core26_887)"
"(lambda(s23_0 from-mpi24_0 to-mpi25_0 inspector22_0)"
"(begin"
" 'core26"
"(let-values(((s_892) s23_0))"
"(let-values(((from-mpi_893) from-mpi24_0))"
"(let-values(((to-mpi_894) to-mpi25_0))"
"(let-values(((inspector_895) inspector22_0))"
"(let-values()"
"(let-values(((s28_896) s_892)"
"((from-mpi29_897) from-mpi_893)"
"((to-mpi30_898) to-mpi_894)"
"((inspector31_899) inspector_895))"
"(syntax-module-path-index-shift13.1"
" #f"
" s28_896"
" from-mpi29_897"
" to-mpi30_898"
" inspector31_899)))))))))))"
"(case-lambda"
"((s_0 from-mpi_0 to-mpi_0)"
"(begin 'syntax-module-path-index-shift(core26_887 s_0 from-mpi_0 to-mpi_0 #f)))"
"((s_0 from-mpi_0 to-mpi_0 inspector22_0)(core26_887 s_0 from-mpi_0 to-mpi_0 inspector22_0))))))"
" syntax-module-path-index-shift_886))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'constant"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift/no-keywords"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(define-values"
"(struct:parsed parsed1.1 parsed? parsed-s)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type 'parsed #f 1 0 #f(list(cons prop:authentic #t)) #f #f '(0) #f 'parsed)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 's))))"
"(define-values"
"(struct:parsed-id parsed-id2.1 parsed-id? parsed-id-binding parsed-id-inspector)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-id"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-id)))))"
"(values"
" struct:_21"
" make-_22"
" ?_23"
"(make-struct-field-accessor -ref_24 0 'binding)"
"(make-struct-field-accessor -ref_24 1 'inspector))))"
"(define-values"
"(struct:parsed-primitive-id parsed-primitive-id3.1 parsed-primitive-id?)"
"(let-values(((struct:_46 make-_47 ?_48 -ref_49 -set!_50)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-primitive-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-primitive-id)))))"
"(values struct:_46 make-_47 ?_48)))"
"(define-values"
"(struct:parsed-top-id parsed-top-id4.1 parsed-top-id?)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-top-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-top-id)))))"
"(values struct:_61 make-_62 ?_63)))"
"(define-values"
"(struct:parsed-lambda parsed-lambda5.1 parsed-lambda? parsed-lambda-keys parsed-lambda-body)"
"(let-values(((struct:_76 make-_77 ?_78 -ref_79 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-lambda"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-lambda)))))"
"(values"
" struct:_76"
" make-_77"
" ?_78"
"(make-struct-field-accessor -ref_79 0 'keys)"
"(make-struct-field-accessor -ref_79 1 'body))))"
"(define-values"
"(struct:parsed-case-lambda parsed-case-lambda6.1 parsed-case-lambda? parsed-case-lambda-clauses)"
"(let-values(((struct:_101 make-_102 ?_103 -ref_104 -set!_105)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-case-lambda"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-case-lambda)))))"
"(values struct:_101 make-_102 ?_103(make-struct-field-accessor -ref_104 0 'clauses))))"
"(define-values"
"(struct:parsed-app parsed-app7.1 parsed-app? parsed-app-rator parsed-app-rands)"
"(let-values(((struct:_121 make-_122 ?_123 -ref_124 -set!_125)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-app"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-app)))))"
"(values"
" struct:_121"
" make-_122"
" ?_123"
"(make-struct-field-accessor -ref_124 0 'rator)"
"(make-struct-field-accessor -ref_124 1 'rands))))"
"(define-values"
"(struct:parsed-if parsed-if8.1 parsed-if? parsed-if-tst parsed-if-thn parsed-if-els)"
"(let-values(((struct:_146 make-_147 ?_148 -ref_149 -set!_150)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-if"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-if)))))"
"(values"
" struct:_146"
" make-_147"
" ?_148"
"(make-struct-field-accessor -ref_149 0 'tst)"
"(make-struct-field-accessor -ref_149 1 'thn)"
"(make-struct-field-accessor -ref_149 2 'els))))"
"(define-values"
"(struct:parsed-set! parsed-set!9.1 parsed-set!? parsed-set!-id parsed-set!-rhs)"
"(let-values(((struct:_176 make-_177 ?_178 -ref_179 -set!_180)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-set!"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-set!)))))"
"(values"
" struct:_176"
" make-_177"
" ?_178"
"(make-struct-field-accessor -ref_179 0 'id)"
"(make-struct-field-accessor -ref_179 1 'rhs))))"
"(define-values"
"(struct:parsed-with-continuation-mark"
" parsed-with-continuation-mark10.1"
" parsed-with-continuation-mark?"
" parsed-with-continuation-mark-key"
" parsed-with-continuation-mark-val"
" parsed-with-continuation-mark-body)"
"(let-values(((struct:_201 make-_202 ?_203 -ref_204 -set!_205)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-with-continuation-mark"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-with-continuation-mark)))))"
"(values"
" struct:_201"
" make-_202"
" ?_203"
"(make-struct-field-accessor -ref_204 0 'key)"
"(make-struct-field-accessor -ref_204 1 'val)"
"(make-struct-field-accessor -ref_204 2 'body))))"
"(define-values"
"(struct:parsed-#%variable-reference"
" parsed-#%variable-reference11.1"
" parsed-#%variable-reference?"
" parsed-#%variable-reference-id)"
"(let-values(((struct:_231 make-_232 ?_233 -ref_234 -set!_235)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%variable-reference"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%variable-reference)))))"
"(values struct:_231 make-_232 ?_233(make-struct-field-accessor -ref_234 0 'id))))"
"(define-values"
"(struct:parsed-begin parsed-begin12.1 parsed-begin? parsed-begin-body)"
"(let-values(((struct:_251 make-_252 ?_253 -ref_254 -set!_255)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin)))))"
"(values struct:_251 make-_252 ?_253(make-struct-field-accessor -ref_254 0 'body))))"
"(define-values"
"(struct:parsed-begin0 parsed-begin013.1 parsed-begin0? parsed-begin0-body)"
"(let-values(((struct:_271 make-_272 ?_273 -ref_274 -set!_275)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin0"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin0)))))"
"(values struct:_271 make-_272 ?_273(make-struct-field-accessor -ref_274 0 'body))))"
"(define-values"
"(struct:parsed-quote parsed-quote14.1 parsed-quote? parsed-quote-datum)"
"(let-values(((struct:_291 make-_292 ?_293 -ref_294 -set!_295)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote)))))"
"(values struct:_291 make-_292 ?_293(make-struct-field-accessor -ref_294 0 'datum))))"
"(define-values"
"(struct:parsed-quote-syntax parsed-quote-syntax15.1 parsed-quote-syntax? parsed-quote-syntax-datum)"
"(let-values(((struct:_311 make-_312 ?_313 -ref_314 -set!_315)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote-syntax)))))"
"(values struct:_311 make-_312 ?_313(make-struct-field-accessor -ref_314 0 'datum))))"
"(define-values"
"(struct:parsed-let_-values"
" parsed-let_-values16.1"
" parsed-let_-values?"
" parsed-let_-values-idss"
" parsed-let_-values-clauses"
" parsed-let_-values-body)"
"(let-values(((struct:_331 make-_332 ?_333 -ref_334 -set!_335)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let_-values"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-let_-values)))))"
"(values"
" struct:_331"
" make-_332"
" ?_333"
"(make-struct-field-accessor -ref_334 0 'idss)"
"(make-struct-field-accessor -ref_334 1 'clauses)"
"(make-struct-field-accessor -ref_334 2 'body))))"
"(define-values"
"(struct:parsed-let-values parsed-let-values17.1 parsed-let-values?)"
"(let-values(((struct:_361 make-_362 ?_363 -ref_364 -set!_365)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-let-values)))))"
"(values struct:_361 make-_362 ?_363)))"
"(define-values"
"(struct:parsed-letrec-values parsed-letrec-values18.1 parsed-letrec-values?)"
"(let-values(((struct:_376 make-_377 ?_378 -ref_379 -set!_380)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-letrec-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-letrec-values)))))"
"(values struct:_376 make-_377 ?_378)))"
"(define-values"
"(struct:parsed-define-values"
" parsed-define-values19.1"
" parsed-define-values?"
" parsed-define-values-ids"
" parsed-define-values-syms"
" parsed-define-values-rhs)"
"(let-values(((struct:_391 make-_392 ?_393 -ref_394 -set!_395)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-values"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-values)))))"
"(values"
" struct:_391"
" make-_392"
" ?_393"
"(make-struct-field-accessor -ref_394 0 'ids)"
"(make-struct-field-accessor -ref_394 1 'syms)"
"(make-struct-field-accessor -ref_394 2 'rhs))))"
"(define-values"
"(struct:parsed-define-syntaxes"
" parsed-define-syntaxes20.1"
" parsed-define-syntaxes?"
" parsed-define-syntaxes-ids"
" parsed-define-syntaxes-syms"
" parsed-define-syntaxes-rhs)"
"(let-values(((struct:_421 make-_422 ?_423 -ref_424 -set!_425)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-syntaxes"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-syntaxes)))))"
"(values"
" struct:_421"
" make-_422"
" ?_423"
"(make-struct-field-accessor -ref_424 0 'ids)"
"(make-struct-field-accessor -ref_424 1 'syms)"
"(make-struct-field-accessor -ref_424 2 'rhs))))"
"(define-values"
"(struct:parsed-begin-for-syntax parsed-begin-for-syntax21.1 parsed-begin-for-syntax? parsed-begin-for-syntax-body)"
"(let-values(((struct:_451 make-_452 ?_453 -ref_454 -set!_455)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin-for-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin-for-syntax)))))"
"(values struct:_451 make-_452 ?_453(make-struct-field-accessor -ref_454 0 'body))))"
"(define-values"
"(struct:parsed-#%declare parsed-#%declare22.1 parsed-#%declare?)"
"(let-values(((struct:_471 make-_472 ?_473 -ref_474 -set!_475)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%declare"
" struct:parsed"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-#%declare)))))"
"(values struct:_471 make-_472 ?_473)))"
"(define-values"
"(struct:parsed-require parsed-require23.1 parsed-require?)"
"(let-values(((struct:_486 make-_487 ?_488 -ref_489 -set!_490)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-require"
" struct:parsed"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-require)))))"
"(values struct:_486 make-_487 ?_488)))"
"(define-values"
"(struct:parsed-#%module-begin parsed-#%module-begin24.1 parsed-#%module-begin? parsed-#%module-begin-body)"
"(let-values(((struct:_501 make-_502 ?_503 -ref_504 -set!_505)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%module-begin"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%module-begin)))))"
"(values struct:_501 make-_502 ?_503(make-struct-field-accessor -ref_504 0 'body))))"
"(define-values"
"(struct:parsed-module"
" parsed-module25.1"
" parsed-module?"
" parsed-module-star?"
" parsed-module-name-id"
" parsed-module-self"
" parsed-module-requires"
" parsed-module-provides"
" parsed-module-root-ctx-simple?"
" parsed-module-encoded-root-ctx"
" parsed-module-body"
" parsed-module-compiled-module"
" parsed-module-compiled-submodules)"
"(let-values(((struct:_521 make-_522 ?_523 -ref_524 -set!_525)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-module"
" struct:parsed"
" 10"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'parsed-module)))))"
"(values"
" struct:_521"
" make-_522"
" ?_523"
"(make-struct-field-accessor -ref_524 0 'star?)"
"(make-struct-field-accessor -ref_524 1 'name-id)"
"(make-struct-field-accessor -ref_524 2 'self)"
"(make-struct-field-accessor -ref_524 3 'requires)"
"(make-struct-field-accessor -ref_524 4 'provides)"
"(make-struct-field-accessor -ref_524 5 'root-ctx-simple?)"
"(make-struct-field-accessor -ref_524 6 'encoded-root-ctx)"
"(make-struct-field-accessor -ref_524 7 'body)"
"(make-struct-field-accessor -ref_524 8 'compiled-module)"
"(make-struct-field-accessor -ref_524 9 'compiled-submodules))))"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_0 mod-path3_0 self4_0)"
"(begin"
" 'module-path->mpi5"
"(let-values(((mod-path_4) mod-path3_0))"
"(let-values(((self_5) self4_0))"
"(let-values(((declared-submodule-names_6)"
"(if(eq? declared-submodule-names1_0 unsafe-undefined) '#hasheq() declared-submodule-names1_0)))"
"(let-values()"
"(if(if(list? mod-path_4)"
"(if(= 2(length mod-path_4))"
"(if(eq? 'quote(car mod-path_4))"
"(if(symbol?(cadr mod-path_4))(hash-ref declared-submodule-names_6(cadr mod-path_4) #f) #f)"
" #f)"
" #f)"
" #f)"
"                (let-values () (1/module-path-index-join (list 'submod \".\" (cadr mod-path_4)) self_5))"
"(if(if(list? mod-path_4)"
"(if(eq? 'submod(car mod-path_4))"
"(let-values(((mod-path_7)(cadr mod-path_4)))"
"(if(list? mod-path_7)"
"(if(= 2(length mod-path_7))"
"(if(eq? 'quote(car mod-path_7))"
"(if(symbol?(cadr mod-path_7))"
"(hash-ref declared-submodule-names_6(cadr mod-path_7) #f)"
" #f)"
" #f)"
" #f)"
" #f))"
" #f)"
" #f)"
"(let-values()"
"                    (1/module-path-index-join (list* 'submod \".\" (cadr (cadr mod-path_4)) (cddr mod-path_4)) self_5))"
"(let-values()(1/module-path-index-join mod-path_4 self_5)))))))))))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_0 ctx_0)"
"(begin"
"(let-values(((mod-path8_28) mod-path_0)"
"((temp9_29)(namespace-mpi(expand-context-namespace ctx_0)))"
"((temp10_30)(expand-context-declared-submodule-names ctx_0)))"
"(module-path->mpi5.1 temp10_30 mod-path8_28 temp9_29)))))"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_0 phase_0)"
"(begin"
"(let-values(((s-scs_3)(syntax-scope-set s_0 phase_0)))"
"(let-values(((ht_4) s-scs_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(syms_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_8)(unsafe-immutable-hash-iterate-key ht_4 i_0)))"
"(let-values(((syms_9)"
"(let-values(((syms_10) syms_0))"
"(let-values(((syms_11)"
"(let-values()"
"(set-union"
" syms_10"
"(binding-table-symbols"
"(scope-binding-table sc_8)"
" s-scs_3"
" s_0"
" null)))))"
"(values syms_11)))))"
"(if(not #f)"
"(for-loop_5 syms_9(unsafe-immutable-hash-iterate-next ht_4 i_0))"
" syms_9)))"
" syms_0)))))"
" for-loop_5)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_4))))))))"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-also-required"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 9"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'requires+provides)))))"
"(values"
" struct:_36"
" make-_37"
" ?_38"
"(make-struct-field-accessor -ref_39 0 'self)"
"(make-struct-field-accessor -ref_39 1 'require-mpis)"
"(make-struct-field-accessor -ref_39 2 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_39 3 'requires)"
"(make-struct-field-accessor -ref_39 4 'provides)"
"(make-struct-field-accessor -ref_39 5 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_39 6 'also-required)"
"(make-struct-field-accessor -ref_39 7 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_39 8 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_40 7 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_40 8 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_96 make-_97 ?_98 -ref_99 -set!_100)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'required"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'required)))))"
"(values"
" struct:_96"
" make-_97"
" ?_98"
"(make-struct-field-accessor -ref_99 0 'id)"
"(make-struct-field-accessor -ref_99 1 'phase)"
"(make-struct-field-accessor -ref_99 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_99 3 'as-transformer?))))"
"(define-values"
"(struct:nominal nominal3.1 nominal? nominal-module nominal-provide-phase nominal-require-phase nominal-sym)"
"(let-values(((struct:_131 make-_132 ?_133 -ref_134 -set!_135)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'nominal"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'nominal)))))"
"(values"
" struct:_131"
" make-_132"
" ?_133"
"(make-struct-field-accessor -ref_134 0 'module)"
"(make-struct-field-accessor -ref_134 1 'provide-phase)"
"(make-struct-field-accessor -ref_134 2 'require-phase)"
"(make-struct-field-accessor -ref_134 3 'sym))))"
"(define-values"
"(struct:bulk-required"
" bulk-required4.1"
" bulk-required?"
" bulk-required-provides"
" bulk-required-prefix-len"
" bulk-required-s"
" bulk-required-provide-phase-level"
" bulk-required-can-be-shadowed?)"
"(let-values(((struct:_166 make-_167 ?_168 -ref_169 -set!_170)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-required"
" #f"
" 5"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'bulk-required)))))"
"(values"
" struct:_166"
" make-_167"
" ?_168"
"(make-struct-field-accessor -ref_169 0 'provides)"
"(make-struct-field-accessor -ref_169 1 'prefix-len)"
"(make-struct-field-accessor -ref_169 2 's)"
"(make-struct-field-accessor -ref_169 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_169 4 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides8.1)"
"(lambda(copy-requires5_0 self7_0)"
"(begin"
" 'make-requires+provides8"
"(let-values(((self_208) self7_0))"
"(let-values(((copy-r+p_209) copy-requires5_0))"
"(let-values()"
"(requires+provides1.1"
" self_208"
"(if copy-r+p_209(requires+provides-require-mpis copy-r+p_209)(make-module-path-index-intern-table))"
"(if copy-r+p_209(hash-copy(requires+provides-require-mpis-in-order copy-r+p_209))(make-hasheqv))"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
"(make-hasheq)"
" #t"
" #t)))))))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_0)"
"(begin"
"(begin"
"(hash-clear!(requires+provides-requires r+p_0))"
"(hash-clear!(requires+provides-provides r+p_0))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_0))"
"(hash-clear!(requires+provides-also-required r+p_0))))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_0 mpi_0)(begin(intern-module-path-index!(requires+provides-require-mpis r+p_0) mpi_0))))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_0 mod-name_0 phase-shift_0 is-cross-phase-persistent?_0)"
"(begin"
"(let-values(((mpi_231)(intern-mpi r+p_0 mod-name_0)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_0) mpi_231 '#hasheqv()) phase-shift_0 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_0)"
" phase-shift_0"
"(lambda(l_0)(cons mpi_231 l_0))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_0) mpi_231 make-hasheqv)"
" phase-shift_0"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_0"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_0 #f)))"
" mpi_231)))))"
"(define-values"
"(add-defined-or-required-id!19.1)"
"(lambda(as-transformer?12_0 can-be-shadowed?11_0 r+p15_0 id16_0 phase17_0 binding18_0)"
"(begin"
" 'add-defined-or-required-id!19"
"(let-values(((r+p_249) r+p15_0))"
"(let-values(((id_250) id16_0))"
"(let-values(((phase_251) phase17_0))"
"(let-values(((binding_252) binding18_0))"
"(let-values(((can-be-shadowed?_253) can-be-shadowed?11_0))"
"(let-values(((as-transformer?_254) as-transformer?12_0))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_251"
"(phase+"
"(module-binding-nominal-phase binding_252)"
"(module-binding-nominal-require-phase binding_252)))"
"(void)"
"                        (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((r+p124_256) r+p_249)"
"((id125_257) id_250)"
"((phase126_258) phase_251)"
"((temp127_259)(module-binding-nominal-module binding_252))"
"((temp128_260)(module-binding-nominal-require-phase binding_252))"
"((can-be-shadowed?129_261) can-be-shadowed?_253)"
"((as-transformer?130_262) as-transformer?_254))"
"(add-defined-or-required-id-at-nominal!33.1"
" as-transformer?130_262"
" can-be-shadowed?129_261"
" temp127_259"
" temp128_260"
" r+p124_256"
" id125_257"
" phase126_258)))))))))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!33.1)"
"(lambda(as-transformer?25_0"
" can-be-shadowed?24_0"
" nominal-module22_0"
" nominal-require-phase23_0"
" r+p30_0"
" id31_0"
" phase32_0)"
"(begin"
" 'add-defined-or-required-id-at-nominal!33"
"(let-values(((r+p_297) r+p30_0))"
"(let-values(((id_298) id31_0))"
"(let-values(((phase_299) phase32_0))"
"(let-values(((nominal-module_300) nominal-module22_0))"
"(let-values(((nominal-require-phase_301) nominal-require-phase23_0))"
"(let-values(((can-be-shadowed?_302) can-be-shadowed?24_0))"
"(let-values(((as-transformer?_303) as-transformer?25_0))"
"(let-values()"
"(let-values(((at-mod_304)"
"(hash-ref!"
"(requires+provides-requires r+p_297)"
"(intern-mpi r+p_297 nominal-module_300)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_305)(hash-ref! at-mod_304 nominal-require-phase_301 make-hasheq)))"
"(let-values(((sym_306)(syntax-e$1 id_298)))"
"(hash-set!"
" sym-to-reqds_305"
" sym_306"
"(cons-ish"
"(required2.1 id_298 phase_299 can-be-shadowed?_302 as-transformer?_303)"
"(hash-ref sym-to-reqds_305 sym_306 null)))))))))))))))))"
"(define-values"
"(add-bulk-required-ids!59.1)"
"(lambda(accum-update-nominals42_0"
" can-be-shadowed?40_0"
" check-and-remove?41_0"
" excepts37_0"
" in39_0"
" prefix36_0"
" symbols-accum38_0"
" who43_0"
" r+p52_0"
" s53_0"
" self54_0"
" nominal-module55_0"
" phase-shift56_0"
" provides57_0"
" provide-phase-level58_0)"
"(begin"
" 'add-bulk-required-ids!59"
"(let-values(((r+p_364) r+p52_0))"
"(let-values(((s_365) s53_0))"
"(let-values(((self_366) self54_0))"
"(let-values(((nominal-module_367) nominal-module55_0))"
"(let-values(((phase-shift_368) phase-shift56_0))"
"(let-values(((provides_369) provides57_0))"
"(let-values(((provide-phase-level_370) provide-phase-level58_0))"
"(let-values(((bulk-prefix_371) prefix36_0))"
"(let-values(((bulk-excepts_372) excepts37_0))"
"(let-values(((symbols-accum_373) symbols-accum38_0))"
"(let-values(((orig-s_374) in39_0))"
"(let-values(((can-be-shadowed?_375) can-be-shadowed?40_0))"
"(let-values(((check-and-remove?_376) check-and-remove?41_0))"
"(let-values(((accum-update-nominals_377) accum-update-nominals42_0))"
"(let-values(((who_378) who43_0))"
"(let-values()"
"(let-values(((phase_379)(phase+ provide-phase-level_370 phase-shift_368)))"
"(let-values(((shortcut-table_380)"
"(if check-and-remove?_376"
"(if(>(hash-count provides_369) 64)"
"(syntax-mapped-names s_365 phase_379)"
" #f)"
" #f)))"
"(let-values(((mpi_381)(intern-mpi r+p_364 nominal-module_367)))"
"(let-values(((at-mod_382)"
"(hash-ref!"
"(requires+provides-requires r+p_364)"
" mpi_381"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_383)"
"(hash-ref! at-mod_382 phase-shift_368 make-hasheq)))"
"(let-values(((prefix-len_384)"
"(if bulk-prefix_371"
"(string-length(symbol->string bulk-prefix_371))"
" 0)))"
"(let-values(((br_385)"
"(bulk-required4.1"
" provides_369"
" prefix-len_384"
" s_365"
" provide-phase-level_370"
" can-be-shadowed?_375)))"
"(let-values(((ht_386) provides_369))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_386)))"
"((letrec-values(((for-loop_387)"
"(lambda(any-already-defined?_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((out-sym_390"
" binding/p_391)"
"(hash-iterate-key+value"
" ht_386"
" i_0)))"
"(let-values(((any-already-defined?_392)"
"(let-values(((any-already-defined?_393)"
" any-already-defined?_0))"
"(if(not"
"(symbol-interned?"
" out-sym_390))"
" any-already-defined?_393"
"(let-values(((any-already-defined?_394)"
" any-already-defined?_393))"
"(let-values(((any-already-defined?_395)"
"(let-values()"
"(begin"
"(if symbols-accum_373"
"(let-values()"
"(hash-set!"
" symbols-accum_373"
" out-sym_390"
" #t))"
"(void))"
"(if(hash-ref"
" bulk-excepts_372"
" out-sym_390"
" #f)"
"(let-values()"
" #f)"
"(let-values()"
"(let-values(((sym_396)"
"(if(not"
" bulk-prefix_371)"
"(let-values()"
" out-sym_390)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                                \"~a~a\""
" bulk-prefix_371"
" out-sym_390))))))"
"(let-values(((already-defined?_397)"
"(if(if check-and-remove?_376"
"(let-values(((or-part_398)"
"(not"
" shortcut-table_380)))"
"(if or-part_398"
" or-part_398"
"(hash-ref"
" shortcut-table_380"
" sym_396"
" #f)))"
" #f)"
"(let-values()"
"(let-values(((temp131_400)"
" #t)"
"((temp132_401)"
" #t)"
"((r+p133_402)"
" r+p_364)"
"((temp134_403)"
"(datum->syntax$1"
" s_365"
" sym_396"
" s_365))"
"((phase135_404)"
" phase_379)"
"((orig-s136_405)"
" orig-s_374)"
"((temp137_406)"
"(lambda()"
"(let-values(((binding/p141_411)"
" binding/p_391)"
"((sym142_412)"
" sym_396)"
"((self143_413)"
" self_366)"
"((mpi144_414)"
" mpi_381)"
"((provide-phase-level145_415)"
" provide-phase-level_370)"
"((phase-shift146_416)"
" phase-shift_368))"
"(provide-binding-to-require-binding11.1"
" mpi144_414"
" phase-shift146_416"
" provide-phase-level145_415"
" self143_413"
" binding/p141_411"
" sym142_412))))"
"((temp138_407)"
" #t)"
"((accum-update-nominals139_408)"
" accum-update-nominals_377)"
"((who140_409)"
" who_378))"
"(check-not-defined95.1"
" accum-update-nominals139_408"
" temp132_401"
" temp131_400"
" orig-s136_405"
" temp138_407"
" temp137_406"
" who140_409"
" r+p133_402"
" temp134_403"
" phase135_404)))"
"(let-values()"
" #f))))"
"(begin"
"(if already-defined?_397"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_383"
" sym_396"
"(cons-ish"
" br_385"
"(hash-ref"
" sym-to-reqds_383"
" sym_396"
" null)))))"
"(let-values(((or-part_417)"
" any-already-defined?_394))"
"(if or-part_417"
" or-part_417"
" already-defined?_397)))))))))))"
"(values"
" any-already-defined?_395)))))))"
"(if(not #f)"
"(for-loop_387"
" any-already-defined?_392"
"(hash-iterate-next ht_386 i_0))"
" any-already-defined?_392)))"
" any-already-defined?_0)))))"
" for-loop_387)"
" #f"
"(hash-iterate-first ht_386))))))))))))))))))))))))))))))"
"(define-values"
"(bulk-required->required)"
"(lambda(br_0 nominal-module_0 phase_0 sym_0)"
"(begin"
"(let-values(((prefix-len_472)(bulk-required-prefix-len br_0)))"
"(let-values(((out-sym_473)"
"(if(zero? prefix-len_472)"
" sym_0"
"(string->symbol(substring(symbol->string sym_0) prefix-len_472)))))"
"(let-values(((binding/p_474)(hash-ref(bulk-required-provides br_0) out-sym_473)))"
"(required2.1"
"(datum->syntax$1(bulk-required-s br_0) sym_0)"
"(phase+ phase_0(bulk-required-provide-phase-level br_0))"
"(bulk-required-can-be-shadowed? br_0)"
"(provided-as-transformer? binding/p_474))))))))"
"(define-values"
"(normalize-required)"
"(lambda(r_0 mod-name_0 phase_0 sym_0)"
"(begin(if(bulk-required? r_0)(bulk-required->required r_0 mod-name_0 phase_0 sym_0) r_0))))"
"(define-values"
"(add-enclosing-module-defined-and-required!67.1)"
"(lambda(enclosing-requires+provides62_0 r+p64_0 enclosing-mod65_0 phase-shift66_0)"
"(begin"
" 'add-enclosing-module-defined-and-required!67"
"(let-values(((r+p_491) r+p64_0))"
"(let-values(((enclosing-r+p_492) enclosing-requires+provides62_0))"
"(let-values(((enclosing-mod_493) enclosing-mod65_0))"
"(let-values(((phase-shift_494) phase-shift66_0))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_491 #f)"
"(let-values(((ht_495)(requires+provides-requires enclosing-r+p_492)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_495)))"
"((letrec-values(((for-loop_496)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((mod-name_498 at-mod_499)"
"(hash-iterate-key+value ht_495 i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((ht_500)"
" at-mod_499))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_500)))"
"((letrec-values(((for-loop_501)"
"(lambda(i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((phase_503"
" at-phase_504)"
"(hash-iterate-key+value"
" ht_500"
" i_1)))"
"(let-values((()"
"(let-values(((ht_505)"
" at-phase_504))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_505)))"
"((letrec-values(((for-loop_506)"
"(lambda(i_2)"
"(begin"
" 'for-loop"
"(if i_2"
"(let-values(((sym_508"
" reqds_509)"
"(hash-iterate-key+value"
" ht_505"
" i_2)))"
"(let-values((()"
"(let-values(((lst_510)"
" reqds_509))"
"(begin"
"(void)"
"((letrec-values(((for-loop_511)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" lst_0))"
"(let-values(((reqd/maybe-bulk_513)"
"(if(pair?"
" lst_0)"
"(car"
" lst_0)"
" lst_0))"
"((rest_514)"
"(if(pair?"
" lst_0)"
"(cdr"
" lst_0)"
" null)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((reqd_515)"
"(normalize-required"
" reqd/maybe-bulk_513"
" mod-name_498"
" phase_503"
" sym_508)))"
"(let-values(((r+p147_517)"
" r+p_491)"
"((temp148_518)"
"(syntax-shift-phase-level$1"
"(let-values(((temp154_524)"
"(required-id"
" reqd_515))"
"((temp155_525)"
"(requires+provides-self"
" enclosing-r+p_492))"
"((enclosing-mod156_526)"
" enclosing-mod_493))"
"(syntax-module-path-index-shift13.1"
" #f"
" temp154_524"
" temp155_525"
" enclosing-mod156_526"
" #f))"
" phase-shift_494))"
"((temp149_519)"
"(phase+"
"(required-phase"
" reqd_515)"
" phase-shift_494))"
"((enclosing-mod150_520)"
" enclosing-mod_493)"
"((phase-shift151_521)"
" phase-shift_494)"
"((temp152_522)"
" #t)"
"((temp153_523)"
"(required-as-transformer?"
" reqd_515)))"
"(add-defined-or-required-id-at-nominal!33.1"
" temp153_523"
" temp152_522"
" enclosing-mod150_520"
" phase-shift151_521"
" r+p147_517"
" temp148_518"
" temp149_519))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_511"
" rest_514)"
"(values))))"
"(values))))))"
" for-loop_511)"
" lst_510)))))"
"(if(not"
" #f)"
"(for-loop_506"
"(hash-iterate-next"
" ht_505"
" i_2))"
"(values))))"
"(values))))))"
" for-loop_506)"
"(hash-iterate-first"
" ht_505))))))"
"(if(not"
" #f)"
"(for-loop_501"
"(hash-iterate-next"
" ht_500"
" i_1))"
"(values))))"
"(values))))))"
" for-loop_501)"
"(hash-iterate-first"
" ht_500))))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_496(hash-iterate-next ht_495 i_0))(values))))"
"(values))))))"
" for-loop_496)"
"(hash-iterate-first ht_495))))"
"(void))))))))))"
"(define-values"
"(remove-required-id!75.1)"
"(lambda(unless-matches70_0 r+p72_0 id73_0 phase74_0)"
"(begin"
" 'remove-required-id!75"
"(let-values(((r+p_553) r+p72_0))"
"(let-values(((id_554) id73_0))"
"(let-values(((phase_555) phase74_0))"
"(let-values(((binding_556) unless-matches70_0))"
"(let-values()"
"(let-values(((b_557)"
"(let-values(((id157_559) id_554)((phase158_560) phase_555)((temp159_561) #t))"
"(resolve+shift28.1 #f temp159_561 null unsafe-undefined #f id157_559 phase158_560))))"
"(if b_557"
"(let-values()"
"(let-values(((mpi_562)(intern-mpi r+p_553(module-binding-nominal-module b_557))))"
"(let-values(((at-mod_563)(hash-ref(requires+provides-requires r+p_553) mpi_562 #f)))"
"(if at-mod_563"
"(let-values()"
"(let-values(((nominal-phase_564)(module-binding-nominal-require-phase b_557)))"
"(let-values(((sym-to-reqds_565)(hash-ref at-mod_563 nominal-phase_564 #f)))"
"(if sym-to-reqds_565"
"(let-values()"
"(let-values(((sym_566)(syntax-e$1 id_554)))"
"(let-values(((l_567)(hash-ref sym-to-reqds_565 sym_566 null)))"
"(if(null? l_567)"
"(void)"
"(let-values()"
"(if(same-binding? b_557 binding_556)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_565"
" sym_566"
"(remove-non-matching-requireds"
" l_567"
" id_554"
" phase_555"
" mpi_562"
" nominal-phase_564"
" sym_566)))))))))"
"(void)))))"
"(void)))))"
"(void)))))))))))"
"(define-values"
"(remove-non-matching-requireds)"
"(lambda(reqds_0 id_0 phase_0 mpi_0 nominal-phase_0 sym_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_588) reqds_0))"
"(begin"
"(void)"
"((letrec-values(((for-loop_589)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(not(null? lst_0))"
"(let-values(((r_592)(if(pair? lst_0)(car lst_0) lst_0))"
"((rest_593)(if(pair? lst_0)(cdr lst_0) null)))"
"(let-values(((fold-var_594)"
"(let-values(((r_595)"
"(normalize-required"
" r_592"
" mpi_0"
" nominal-phase_0"
" sym_0)))"
"(begin"
" #t"
"((letrec-values(((for-loop_596)"
"(lambda(fold-var_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_598)"
"(let-values(((fold-var_599)"
" fold-var_1))"
"(if(if(eqv?"
" phase_0"
"(required-phase"
" r_595))"
"(free-identifier=?$1"
"(required-id"
" r_595)"
" id_0"
" phase_0"
" phase_0)"
" #f)"
" fold-var_599"
"(let-values(((fold-var_600)"
" fold-var_599))"
"(let-values(((fold-var_601)"
"(let-values()"
"(cons"
"(let-values()"
" r_595)"
" fold-var_600))))"
"(values"
" fold-var_601)))))))"
" fold-var_598))))))"
" for-loop_596)"
" fold-var_0)))))"
"(if(not #f)(for-loop_589 fold-var_594 rest_593) fold-var_594)))"
" fold-var_0)))))"
" for-loop_589)"
" null"
" lst_588)))))))"
"(define-values"
"(check-not-defined95.1)"
"(lambda(accum-update-nominals83_0"
" allow-defined?79_0"
" check-not-required?78_0"
" in80_0"
" remove-shadowed!?82_0"
" unless-matches81_0"
" who84_0"
" r+p92_0"
" id93_0"
" phase94_0)"
"(begin"
" 'check-not-defined95"
"(let-values(((check-not-required?_620) check-not-required?78_0))"
"(let-values(((allow-defined?_621) allow-defined?79_0))"
"(let-values(((r+p_622) r+p92_0))"
"(let-values(((id_623) id93_0))"
"(let-values(((phase_624) phase94_0))"
"(let-values(((orig-s_625) in80_0))"
"(let-values(((ok-binding/delayed_626) unless-matches81_0))"
"(let-values(((remove-shadowed!?_627) remove-shadowed!?82_0))"
"(let-values(((accum-update-nominals_628) accum-update-nominals83_0))"
"(let-values(((who_629) who84_0))"
"(let-values()"
"(let-values(((b_630)"
"(let-values(((id160_632) id_623)"
"((phase161_633) phase_624)"
"((temp162_634) #t))"
"(resolve+shift28.1"
" #f"
" temp162_634"
" null"
" unsafe-undefined"
" #f"
" id160_632"
" phase161_633))))"
"(if(not b_630)"
"(let-values() #f)"
"(if(not(module-binding? b_630))"
"                                  (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_623))"
"(let-values()"
"(let-values(((defined?_635)"
"(if b_630"
"(eq?(requires+provides-self r+p_622)(module-binding-module b_630))"
" #f)))"
"(if(if defined?_635"
"(not"
"(hash-ref"
"(hash-ref"
"(requires+provides-phase-to-defined-syms r+p_622)"
" phase_624"
" '#hasheq())"
"(module-binding-sym b_630)"
" #f))"
" #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((define-shadowing-require?_636)"
"(if(not defined?_635)(not check-not-required?_620) #f)))"
"(let-values(((mpi_637)"
"(intern-mpi r+p_622(module-binding-nominal-module b_630))))"
"(let-values(((at-mod_638)"
"(hash-ref(requires+provides-requires r+p_622) mpi_637 #f)))"
"(let-values(((ok-binding_639)"
"(if(not define-shadowing-require?_636)"
"(if(procedure? ok-binding/delayed_626)"
"(ok-binding/delayed_626)"
" ok-binding/delayed_626)"
" #f)))"
"(let-values(((raise-already-bound_640)"
"(lambda(defined?_0)"
"(begin"
" 'raise-already-bound"
"(raise-syntax-error$1"
" who_629"
"(string-append"
"                                                                      \"identifier already \""
"                                                                      (if defined?_0 \"defined\" \"required\")"
"(if(zero-phase? phase_624)"
"                                                                        (let-values () \"\")"
"(if(label-phase? phase_624)"
"                                                                          (let-values () \" for label\")"
"(if(= 1 phase_624)"
"                                                                            (let-values () \" for syntax\")"
"(let-values()"
"                                                                              (format \" for phase ~a\" phase_624))))))"
" orig-s_625"
" id_623)))))"
"(if(if(not at-mod_638)(not define-shadowing-require?_636) #f)"
"(let-values() #f)"
"(if(if ok-binding_639(same-binding? b_630 ok-binding_639) #f)"
"(let-values()"
"(begin"
"(if(same-binding-nominals? b_630 ok-binding_639)"
"(void)"
"(let-values()"
"(let-values(((update!_642)"
"(lambda()"
"(begin"
" 'update!"
"(let-values(((temp163_644) #t)"
"((id164_645) id_623)"
"((temp165_646)"
"(let-values(((ok-binding167_649)"
" ok-binding_639)"
"((temp168_650)"
"(cons"
" b_630"
"(module-binding-extra-nominal-bindings"
" b_630))))"
"(module-binding-update48.1"
" unsafe-undefined"
" temp168_650"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" ok-binding167_649)))"
"((phase166_647)"
" phase_624))"
"(add-binding!17.1"
" #f"
" temp163_644"
" id164_645"
" temp165_646"
" phase166_647))))))"
"(if accum-update-nominals_628"
"(let-values()"
"(set-box!"
" accum-update-nominals_628"
"(cons"
" update!_642"
"(unbox accum-update-nominals_628))))"
"(let-values()(update!_642))))))"
" defined?_635))"
"(if(if defined?_635 allow-defined?_621 #f)"
"(let-values()"
"(let-values(((also-required_651)"
"(requires+provides-also-required r+p_622)))"
"(let-values(((prev-b_652)"
"(hash-ref"
" also-required_651"
"(module-binding-sym b_630)"
" #f)))"
"(begin"
"(if(if prev-b_652"
"(not(same-binding? ok-binding_639 prev-b_652))"
" #f)"
"(let-values()(raise-already-bound_640 #f))"
"(void))"
"(hash-set!"
" also-required_651"
"(module-binding-sym b_630)"
" ok-binding_639)"
"(set-requires+provides-all-bindings-simple?!"
" r+p_622"
" #f)"
" #t))))"
"(let-values()"
"(let-values(((nominal-phase_653)"
"(module-binding-nominal-require-phase b_630)))"
"(let-values(((sym-to-reqds_654)"
"(hash-ref"
" at-mod_638"
" nominal-phase_653"
" '#hasheq())))"
"(let-values(((reqds_655)"
"(hash-ref"
" sym-to-reqds_654"
"(syntax-e$1 id_623)"
" null)))"
"(let-values(((only-can-can-shadow-require?_656)"
"(let-values(((lst_657) reqds_655))"
"(begin"
"(void)"
"((letrec-values(((for-loop_658)"
"(lambda(only-can-can-shadow-require?_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" lst_0))"
"(let-values(((r_661)"
"(if(pair?"
" lst_0)"
"(car"
" lst_0)"
" lst_0))"
"((rest_662)"
"(if(pair?"
" lst_0)"
"(cdr"
" lst_0)"
" null)))"
"(let-values(((only-can-can-shadow-require?_663)"
"(let-values(((only-can-can-shadow-require?_664)"
" only-can-can-shadow-require?_0))"
"(let-values(((only-can-can-shadow-require?_665)"
"(let-values()"
"(if(if(bulk-required?"
" r_661)"
"(bulk-required-can-be-shadowed?"
" r_661)"
"(required-can-be-shadowed?"
" r_661))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?!"
" r+p_622"
" #f)"
" only-can-can-shadow-require?_664))"
"(if define-shadowing-require?_636"
"(let-values()"
" #f)"
"(let-values()"
"(raise-already-bound_640"
" defined?_635)))))))"
"(values"
" only-can-can-shadow-require?_665)))))"
"(if(not"
" #f)"
"(for-loop_658"
" only-can-can-shadow-require?_663"
" rest_662)"
" only-can-can-shadow-require?_663)))"
" only-can-can-shadow-require?_0)))))"
" for-loop_658)"
" #t"
" lst_657)))))"
"(begin"
"(if define-shadowing-require?_636"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?!"
" r+p_622"
" #f)"
"(if only-can-can-shadow-require?_656"
"(void)"
"(let-values()"
"(hash-set!"
"(requires+provides-also-required"
" r+p_622)"
"(module-binding-sym b_630)"
" b_630)))))"
"(let-values()"
"(if(if remove-shadowed!?_627"
"(not(null? reqds_655))"
" #f)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_654"
"(syntax-e$1 id_623)"
"(remove-non-matching-requireds"
" reqds_655"
" id_623"
" phase_624"
" mpi_637"
" nominal-phase_653"
"(syntax-e$1 id_623))))"
"(void))))"
" #f)))))))))))))))))))))))))))))))))))"
"(define-values"
"(add-defined-syms!103.1)"
"(lambda(as-transformer?98_0 r+p100_0 syms101_0 phase102_0)"
"(begin"
" 'add-defined-syms!103"
"(let-values(((r+p_706) r+p100_0))"
"(let-values(((syms_707) syms101_0))"
"(let-values(((phase_708) phase102_0))"
"(let-values(((as-transformer?_709) as-transformer?98_0))"
"(let-values()"
"(let-values(((phase-to-defined-syms_710)(requires+provides-phase-to-defined-syms r+p_706)))"
"(let-values(((defined-syms_711)(hash-ref phase-to-defined-syms_710 phase_708 '#hasheq())))"
"(let-values(((new-defined-syms_712)"
"(let-values(((lst_713) syms_707))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_713)))"
"((letrec-values(((for-loop_714)"
"(lambda(defined-syms_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((sym_717)(unsafe-car lst_0))"
"((rest_718)(unsafe-cdr lst_0)))"
"(let-values(((defined-syms_719)"
"(let-values(((defined-syms_720)"
" defined-syms_0))"
"(let-values(((defined-syms_721)"
"(let-values()"
"(hash-set"
" defined-syms_720"
" sym_717"
"(if as-transformer?_709"
" 'transformer"
" 'variable)))))"
"(values defined-syms_721)))))"
"(if(not #f)"
"(for-loop_714 defined-syms_719 rest_718)"
" defined-syms_719)))"
" defined-syms_0)))))"
" for-loop_714)"
" defined-syms_711"
" lst_713)))))"
"(hash-set! phase-to-defined-syms_710 phase_708 new-defined-syms_712))))))))))))"
"(define-values"
"(defined-sym-kind)"
"(lambda(r+p_0 sym_0 phase_0)"
"(begin"
"(let-values(((phase-to-defined-syms_745)(requires+provides-phase-to-defined-syms r+p_0)))"
"(let-values(((defined-syms_746)(hash-ref phase-to-defined-syms_745 phase_0 '#hasheq())))"
"(hash-ref defined-syms_746 sym_0 #f))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_0 mod-name_0 phase_0)"
"(begin"
"(let-values(((mpi_750)(intern-mpi r+p_0 mod-name_0)))"
"(let-values(((at-mod_751)(hash-ref(requires+provides-requires r+p_0) mpi_750 #f)))"
"(if at-mod_751"
"(reverse$1"
"(let-values(((ht_752)(hash-ref at-mod_751 phase_0 '#hasheq())))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_752)))"
"((letrec-values(((for-loop_753)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_756 reqds_757)(hash-iterate-key+value ht_752 i_0)))"
"(let-values(((fold-var_758)"
"(let-values(((lst_759) reqds_757))"
"(begin"
"(void)"
"((letrec-values(((for-loop_760)"
"(lambda(fold-var_1 lst_0)"
"(begin"
" 'for-loop"
"(if(not(null? lst_0))"
"(let-values(((reqd_763)"
"(if(pair? lst_0)"
"(car lst_0)"
" lst_0))"
"((rest_764)"
"(if(pair? lst_0)"
"(cdr lst_0)"
" null)))"
"(let-values(((fold-var_765)"
"(let-values(((fold-var_766)"
" fold-var_1))"
"(let-values(((fold-var_767)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_763"
" mpi_750"
" phase_0"
" sym_756))"
" fold-var_766))))"
"(values"
" fold-var_767)))))"
"(if(not #f)"
"(for-loop_760"
" fold-var_765"
" rest_764)"
" fold-var_765)))"
" fold-var_1)))))"
" for-loop_760)"
" fold-var_0"
" lst_759)))))"
"(if(not #f)"
"(for-loop_753 fold-var_758(hash-iterate-next ht_752 i_0))"
" fold-var_758)))"
" fold-var_0)))))"
" for-loop_753)"
" null"
"(hash-iterate-first ht_752)))))"
" #f))))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_0)"
"(begin"
"(let-values(((or-part_769)(extract-module-requires r+p_0(requires+provides-self r+p_0) 0)))"
"(if or-part_769 or-part_769 null)))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_0 mod-name_0 phase_0)"
"(begin"
"(let-values(((self_773)(requires+provides-self r+p_0)))"
"(let-values(((requires_774)(requires+provides-requires r+p_0)))"
"(call/ec"
"(lambda(esc_0)"
"(reverse$1"
"(let-values(((lst_776)(if mod-name_0(list(intern-mpi r+p_0 mod-name_0))(hash-keys requires_774))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_776)))"
"((letrec-values(((for-loop_777)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((mod-name_780)(unsafe-car lst_0))"
"((rest_781)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_782)"
"(let-values(((fold-var_783) fold-var_0))"
"(if(eq? mod-name_780 self_773)"
" fold-var_783"
"(let-values(((phase-to-requireds_784)"
"(hash-ref"
" requires_774"
" mod-name_780"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_785)"
"(lambda(fold-var_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_787)"
"(let-values(((lst_788)"
"(if(eq?"
" phase_0"
" 'all)"
"(hash-keys"
" phase-to-requireds_784)"
"(list"
" phase_0))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_788)))"
"((letrec-values(((for-loop_789)"
"(lambda(fold-var_2"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((phase_792)"
"(unsafe-car"
" lst_1))"
"((rest_793)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_794)"
"(let-values(((ht_795)"
"(hash-ref"
" phase-to-requireds_784"
" phase_792"
"(lambda()"
"(esc_0"
" #f)))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_795)))"
"((letrec-values(((for-loop_796)"
"(lambda(fold-var_3"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_799"
" reqds_800)"
"(hash-iterate-key+value"
" ht_795"
" i_0)))"
"(let-values(((fold-var_801)"
"(let-values(((lst_802)"
" reqds_800))"
"(begin"
"(void)"
"((letrec-values(((for-loop_803)"
"(lambda(fold-var_4"
" lst_2)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" lst_2))"
"(let-values(((reqd_806)"
"(if(pair?"
" lst_2)"
"(car"
" lst_2)"
" lst_2))"
"((rest_807)"
"(if(pair?"
" lst_2)"
"(cdr"
" lst_2)"
" null)))"
"(let-values(((fold-var_808)"
"(let-values(((fold-var_809)"
" fold-var_4))"
"(let-values(((fold-var_810)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_806"
" mod-name_780"
" phase_792"
" sym_799))"
" fold-var_809))))"
"(values"
" fold-var_810)))))"
"(if(not"
" #f)"
"(for-loop_803"
" fold-var_808"
" rest_807)"
" fold-var_808)))"
" fold-var_4)))))"
" for-loop_803)"
" fold-var_3"
" lst_802)))))"
"(if(not"
" #f)"
"(for-loop_796"
" fold-var_801"
"(hash-iterate-next"
" ht_795"
" i_0))"
" fold-var_801)))"
" fold-var_3)))))"
" for-loop_796)"
" fold-var_2"
"(hash-iterate-first"
" ht_795))))))"
"(if(not"
" #f)"
"(for-loop_789"
" fold-var_794"
" rest_793)"
" fold-var_794)))"
" fold-var_2)))))"
" for-loop_789)"
" fold-var_1"
" lst_788)))))"
" fold-var_787))))))"
" for-loop_785)"
" fold-var_783)))))))"
"(if(not #f)(for-loop_777 fold-var_782 rest_781) fold-var_782)))"
" fold-var_0)))))"
" for-loop_777)"
" null"
" lst_776)))))))))))"
"(define-values"
"(add-provide!117.1)"
"(lambda(as-protected?106_0"
" as-transformer?107_0"
" r+p110_0"
" sym111_0"
" phase112_0"
" binding113_0"
" immed-binding114_0"
" id115_0"
" orig-s116_0)"
"(begin"
" 'add-provide!117"
"(let-values(((r+p_836) r+p110_0))"
"(let-values(((sym_837) sym111_0))"
"(let-values(((phase_838) phase112_0))"
"(let-values(((binding_839) binding113_0))"
"(let-values(((immed-binding_840) immed-binding114_0))"
"(let-values(((id_841) id115_0))"
"(let-values(((orig-s_842) orig-s116_0))"
"(let-values(((as-protected?_843) as-protected?106_0))"
"(let-values(((as-transformer?_844) as-transformer?107_0))"
"(let-values()"
"(begin"
"(if(if as-protected?_843"
"(not(eq?(module-binding-module immed-binding_840)(requires+provides-self r+p_836)))"
" #f)"
"(let-values()"
"                                (raise-syntax-error$1 #f \"cannot protect required identifier in re-provide\" sym_837))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_836)"
" phase_838"
"(lambda(at-phase_0)"
"(let-values(((b/p_846)(hash-ref at-phase_0 sym_837 #f)))"
"(let-values(((b_847)(provided-as-binding b/p_846)))"
"(if(not b_847)"
"(let-values()"
"(let-values(((plain-binding_848)"
"(if(binding-free=id binding_839)"
"(let-values(((binding169_850) binding_839)((temp170_851) #f))"
"(module-binding-update48.1"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" temp170_851"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" binding169_850))"
" binding_839)))"
"(hash-set"
" at-phase_0"
" sym_837"
"(if(let-values(((or-part_852) as-protected?_843))"
"(if or-part_852 or-part_852 as-transformer?_844))"
"(provided1.1 plain-binding_848 as-protected?_843 as-transformer?_844)"
" plain-binding_848))))"
"(if(same-binding? b_847 binding_839)"
"(let-values() at-phase_0)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                          \"identifier already provided (as a different binding)\""
" orig-s_842"
" id_841)))))))"
" '#hasheq())))))))))))))))"
"(define-values"
"(extract-requires-and-provides)"
"(lambda(r+p_0 old-self_0 new-self_0)"
"(begin"
"(let-values(((extract-requires_882)"
"(lambda()"
"(begin"
" 'extract-requires"
"(let-values(((phase-to-mpis-in-order_884)(requires+provides-require-mpis-in-order r+p_0)))"
"(let-values(((phases-in-order_885)"
"(let-values(((temp171_886)(hash-keys phase-to-mpis-in-order_884))"
"((phase<?172_887) phase<?))"
"(sort7.1 #f #f temp171_886 phase<?172_887))))"
"(reverse$1"
"(let-values(((lst_888) phases-in-order_885))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_888)))"
"((letrec-values(((for-loop_889)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((phase_892)(unsafe-car lst_0))"
"((rest_893)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_894)"
"(let-values(((fold-var_895) fold-var_0))"
"(let-values(((fold-var_896)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_892"
"(reverse$1"
"(let-values(((lst_897)"
"(reverse$1"
"(hash-ref"
" phase-to-mpis-in-order_884"
" phase_892))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_897)))"
"((letrec-values(((for-loop_898)"
"(lambda(fold-var_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((mpi_901)"
"(unsafe-car"
" lst_1))"
"((rest_902)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_903)"
"(let-values(((fold-var_904)"
" fold-var_1))"
"(if(eq?"
" mpi_901"
" old-self_0)"
" fold-var_904"
"(let-values(((fold-var_905)"
" fold-var_904))"
"(let-values(((fold-var_906)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_901"
" old-self_0"
" new-self_0))"
" fold-var_905))))"
"(values"
" fold-var_906)))))))"
"(if(not"
" #f)"
"(for-loop_898"
" fold-var_903"
" rest_902)"
" fold-var_903)))"
" fold-var_1)))))"
" for-loop_898)"
" null"
" lst_897))))))"
" fold-var_895))))"
"(values fold-var_896)))))"
"(if(not #f)"
"(for-loop_889 fold-var_894 rest_893)"
" fold-var_894)))"
" fold-var_0)))))"
" for-loop_889)"
" null"
" lst_888))))))))))"
"(let-values(((extract-provides_883)"
"(lambda()"
"(begin"
" 'extract-provides"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_0)"
" old-self_0"
" new-self_0)))))"
"(values(extract-requires_882)(extract-provides_883)))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_0 from-mpi_0 to-mpi_0)"
"(begin"
"(let-values(((ht_933) provides_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_933)))"
"((letrec-values(((for-loop_934)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_937 at-phase_938)(hash-iterate-key+value ht_933 i_0)))"
"(let-values(((table_939)"
"(let-values(((table_940) table_0))"
"(let-values(((table_941)"
"(let-values()"
"(let-values(((key_942 val_943)"
"(let-values()"
"(values"
" phase_937"
"(let-values(((ht_944)"
" at-phase_938))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_944)))"
"((letrec-values(((for-loop_945)"
"(lambda(table_1"
" i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((sym_948"
" binding_949)"
"(hash-iterate-key+value"
" ht_944"
" i_1)))"
"(let-values(((table_950)"
"(let-values(((table_951)"
" table_1))"
"(let-values(((table_952)"
"(let-values()"
"(let-values(((key_953"
" val_954)"
"(let-values()"
"(values"
" sym_948"
"(if(eq?"
" from-mpi_0"
" to-mpi_0)"
"(let-values()"
" binding_949)"
"(let-values()"
"((letrec-values(((loop_955)"
"(lambda(binding_0)"
"(begin"
" 'loop"
"(if(provided?"
" binding_0)"
"(let-values()"
"(provided1.1"
"(loop_955"
"(provided-binding"
" binding_0))"
"(provided-protected?"
" binding_0)"
"(provided-syntax?"
" binding_0)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_0"
" from-mpi_0"
" to-mpi_0)))))))"
" loop_955)"
" binding_949)))))))"
"(hash-set"
" table_951"
" key_953"
" val_954)))))"
"(values"
" table_952)))))"
"(if(not"
" #f)"
"(for-loop_945"
" table_950"
"(hash-iterate-next"
" ht_944"
" i_1))"
" table_950)))"
" table_1)))))"
" for-loop_945)"
" '#hasheq()"
"(hash-iterate-first"
" ht_944))))))))"
"(hash-set table_940 key_942 val_943)))))"
"(values table_941)))))"
"(if(not #f)(for-loop_934 table_939(hash-iterate-next ht_933 i_0)) table_939)))"
" table_0)))))"
" for-loop_934)"
" '#hasheqv()"
"(hash-iterate-first ht_933)))))))"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_21 make-_22 ?_23 -ref_24 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))))"
"(values struct:_21 make-_22 ?_23(make-struct-field-accessor -ref_24 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_41 make-_42 ?_43 -ref_44 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))))"
"(values struct:_41 make-_42 ?_43(make-struct-field-accessor -ref_44 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 'prefix-sym)"
"(make-struct-field-accessor -ref_64 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_86 make-_87 ?_88 -ref_89 -set!_90)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))))"
"(values"
" struct:_86"
" make-_87"
" ?_88"
"(make-struct-field-accessor -ref_89 0 'to-id)"
"(make-struct-field-accessor -ref_89 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!30.1)"
"(lambda(copy-variable-as-constant?11_0"
" copy-variable-phase-level10_0"
" declared-submodule-names9_0"
" initial-require?13_0"
" run-phase6_0"
" run?7_0"
" self5_0"
" skip-variable-phase-level12_0"
" visit?8_0"
" who14_0"
" reqs25_0"
" orig-s26_0"
" m-ns27_0"
" phase-shift28_0"
" requires+provides29_0)"
"(begin"
" 'parse-and-perform-requires!30"
"(let-values(((reqs_138) reqs25_0))"
"(let-values(((orig-s_139) orig-s26_0))"
"(let-values(((m-ns_140) m-ns27_0))"
"(let-values(((phase-shift_141) phase-shift28_0))"
"(let-values(((requires+provides_142) requires+provides29_0))"
"(let-values(((self_143) self5_0))"
"(let-values(((run-phase_144)"
"(if(eq? run-phase6_0 unsafe-undefined)(namespace-phase m-ns_140) run-phase6_0)))"
"(let-values(((run?_145) run?7_0))"
"(let-values(((visit?_146) visit?8_0))"
"(let-values(((declared-submodule-names_147)"
"(if(eq? declared-submodule-names9_0 unsafe-undefined)"
" '#hasheq()"
" declared-submodule-names9_0)))"
"(let-values(((copy-variable-phase-level_148) copy-variable-phase-level10_0))"
"(let-values(((copy-variable-as-constant?_149) copy-variable-as-constant?11_0))"
"(let-values(((skip-variable-phase-level_150) skip-variable-phase-level12_0))"
"(let-values(((initial-require?_151) initial-require?13_0))"
"(let-values(((who_152) who14_0))"
"(let-values()"
"((letrec-values(((loop_153)"
"(lambda(reqs_0"
" top-req_0"
" phase-shift_0"
" just-meta_0"
" adjust_0"
" for-meta-ok?_0"
" just-meta-ok?_0"
" layer_0)"
"(begin"
" 'loop"
"(let-values(((lst_162) reqs_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_162)))"
"((letrec-values(((for-loop_163)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((req_166)"
"(unsafe-car"
" lst_0))"
"((rest_167)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((result_168)"
"(let-values()"
"(let-values(((result_170)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_171)"
"(let-values(((check-nested116_173)"
"(lambda(want-layer115_0"
" ok?114_0)"
"(begin"
" 'check-nested116"
"(let-values(((want-layer_176)"
" want-layer115_0))"
"(let-values(((ok?_177)"
" ok?114_0))"
"(let-values()"
"(if(if ok?_177"
"(member"
" want-layer_176"
"(member"
" layer_0"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"invalid nesting\""
" orig-s_139"
" req_166))))))))))"
"(case-lambda"
"((want-layer_0)"
"(begin"
" 'check-nested"
"(check-nested116_173"
" want-layer_0"
" #t)))"
"((want-layer_0"
" ok?114_0)"
"(check-nested116_173"
" want-layer_0"
" ok?114_0))))))"
"(let-values(((fm_172)"
"(if(pair?"
"(syntax-e$1"
" req_166))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_166)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_166)))"
" #f)"
" #f)))"
"(let-values(((tmp_181)"
" fm_172))"
"(if(equal?"
" tmp_181"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_182"
" for-meta118_183"
" phase-level119_184"
" spec120_185)"
"(let-values(((s_203)"
" req_166))"
"(let-values(((orig-s_204)"
" s_203))"
"(let-values(((for-meta118_205"
" phase-level119_206"
" spec120_207)"
"(let-values(((s_208)"
"(if(syntax?$1"
" s_203)"
"(syntax-e$1"
" s_203)"
" s_203)))"
"(if(pair?"
" s_208)"
"(let-values(((for-meta121_209)"
"(let-values(((s_212)"
"(car"
" s_208)))"
" s_212))"
"((phase-level122_210"
" spec123_211)"
"(let-values(((s_213)"
"(cdr"
" s_208)))"
"(let-values(((s_214)"
"(if(syntax?$1"
" s_213)"
"(syntax-e$1"
" s_213)"
" s_213)))"
"(if(pair?"
" s_214)"
"(let-values(((phase-level124_215)"
"(let-values(((s_217)"
"(car"
" s_214)))"
" s_217))"
"((spec125_216)"
"(let-values(((s_218)"
"(cdr"
" s_214)))"
"(let-values(((s_219)"
"(if(syntax?$1"
" s_218)"
"(syntax-e$1"
" s_218)"
" s_218)))"
"(let-values(((flat-s_220)"
"(to-syntax-list.1"
" s_219)))"
"(if(not"
" flat-s_220)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_204))"
"(let-values()"
" flat-s_220)))))))"
"(values"
" phase-level124_215"
" spec125_216))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_204))))))"
"(values"
" for-meta121_209"
" phase-level122_210"
" spec123_211))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_204)))))"
"(values"
" #t"
" for-meta118_205"
" phase-level119_206"
" spec120_207))))))"
"(let-values(((p_202)"
"(syntax-e$1"
" phase-level119_184)))"
"(begin"
"(if(phase?"
" p_202)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad phase\""
" orig-s_139"
" req_166)))"
"(loop_153"
" spec120_185"
"(let-values(((or-part_221)"
" top-req_0))"
"(if or-part_221"
" or-part_221"
" req_166))"
"(phase+"
" phase-shift_0"
" p_202)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))))"
"(if(equal?"
" tmp_181"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_222"
" for-syntax126_223"
" spec127_224)"
"(let-values(((s_238)"
" req_166))"
"(let-values(((orig-s_239)"
" s_238))"
"(let-values(((for-syntax126_240"
" spec127_241)"
"(let-values(((s_242)"
"(if(syntax?$1"
" s_238)"
"(syntax-e$1"
" s_238)"
" s_238)))"
"(if(pair?"
" s_242)"
"(let-values(((for-syntax128_243)"
"(let-values(((s_245)"
"(car"
" s_242)))"
" s_245))"
"((spec129_244)"
"(let-values(((s_246)"
"(cdr"
" s_242)))"
"(let-values(((s_247)"
"(if(syntax?$1"
" s_246)"
"(syntax-e$1"
" s_246)"
" s_246)))"
"(let-values(((flat-s_248)"
"(to-syntax-list.1"
" s_247)))"
"(if(not"
" flat-s_248)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_239))"
"(let-values()"
" flat-s_248)))))))"
"(values"
" for-syntax128_243"
" spec129_244))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_239)))))"
"(values"
" #t"
" for-syntax126_240"
" spec127_241))))))"
"(loop_153"
" spec127_224"
"(let-values(((or-part_249)"
" top-req_0))"
"(if or-part_249"
" or-part_249"
" req_166))"
"(phase+"
" phase-shift_0"
" 1)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_181"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_250"
" for-template130_251"
" spec131_252)"
"(let-values(((s_266)"
" req_166))"
"(let-values(((orig-s_267)"
" s_266))"
"(let-values(((for-template130_268"
" spec131_269)"
"(let-values(((s_270)"
"(if(syntax?$1"
" s_266)"
"(syntax-e$1"
" s_266)"
" s_266)))"
"(if(pair?"
" s_270)"
"(let-values(((for-template132_271)"
"(let-values(((s_273)"
"(car"
" s_270)))"
" s_273))"
"((spec133_272)"
"(let-values(((s_274)"
"(cdr"
" s_270)))"
"(let-values(((s_275)"
"(if(syntax?$1"
" s_274)"
"(syntax-e$1"
" s_274)"
" s_274)))"
"(let-values(((flat-s_276)"
"(to-syntax-list.1"
" s_275)))"
"(if(not"
" flat-s_276)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_267))"
"(let-values()"
" flat-s_276)))))))"
"(values"
" for-template132_271"
" spec133_272))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_267)))))"
"(values"
" #t"
" for-template130_268"
" spec131_269))))))"
"(loop_153"
" spec131_252"
"(let-values(((or-part_277)"
" top-req_0))"
"(if or-part_277"
" or-part_277"
" req_166))"
"(phase+"
" phase-shift_0"
" -1)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_181"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_278"
" for-label134_279"
" spec135_280)"
"(let-values(((s_294)"
" req_166))"
"(let-values(((orig-s_295)"
" s_294))"
"(let-values(((for-label134_296"
" spec135_297)"
"(let-values(((s_298)"
"(if(syntax?$1"
" s_294)"
"(syntax-e$1"
" s_294)"
" s_294)))"
"(if(pair?"
" s_298)"
"(let-values(((for-label136_299)"
"(let-values(((s_301)"
"(car"
" s_298)))"
" s_301))"
"((spec137_300)"
"(let-values(((s_302)"
"(cdr"
" s_298)))"
"(let-values(((s_303)"
"(if(syntax?$1"
" s_302)"
"(syntax-e$1"
" s_302)"
" s_302)))"
"(let-values(((flat-s_304)"
"(to-syntax-list.1"
" s_303)))"
"(if(not"
" flat-s_304)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_295))"
"(let-values()"
" flat-s_304)))))))"
"(values"
" for-label136_299"
" spec137_300))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_295)))))"
"(values"
" #t"
" for-label134_296"
" spec135_297))))))"
"(loop_153"
" spec135_280"
"(let-values(((or-part_305)"
" top-req_0))"
"(if or-part_305"
" or-part_305"
" req_166))"
"(phase+"
" phase-shift_0"
" #f)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_181"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'raw"
" just-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_306"
" just-meta138_307"
" phase-level139_308"
" spec140_309)"
"(let-values(((s_327)"
" req_166))"
"(let-values(((orig-s_328)"
" s_327))"
"(let-values(((just-meta138_329"
" phase-level139_330"
" spec140_331)"
"(let-values(((s_332)"
"(if(syntax?$1"
" s_327)"
"(syntax-e$1"
" s_327)"
" s_327)))"
"(if(pair?"
" s_332)"
"(let-values(((just-meta141_333)"
"(let-values(((s_336)"
"(car"
" s_332)))"
" s_336))"
"((phase-level142_334"
" spec143_335)"
"(let-values(((s_337)"
"(cdr"
" s_332)))"
"(let-values(((s_338)"
"(if(syntax?$1"
" s_337)"
"(syntax-e$1"
" s_337)"
" s_337)))"
"(if(pair?"
" s_338)"
"(let-values(((phase-level144_339)"
"(let-values(((s_341)"
"(car"
" s_338)))"
" s_341))"
"((spec145_340)"
"(let-values(((s_342)"
"(cdr"
" s_338)))"
"(let-values(((s_343)"
"(if(syntax?$1"
" s_342)"
"(syntax-e$1"
" s_342)"
" s_342)))"
"(let-values(((flat-s_344)"
"(to-syntax-list.1"
" s_343)))"
"(if(not"
" flat-s_344)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_328))"
"(let-values()"
" flat-s_344)))))))"
"(values"
" phase-level144_339"
" spec145_340))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_328))))))"
"(values"
" just-meta141_333"
" phase-level142_334"
" spec143_335))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_328)))))"
"(values"
" #t"
" just-meta138_329"
" phase-level139_330"
" spec140_331))))))"
"(let-values(((p_326)"
"(syntax-e$1"
" phase-level139_308)))"
"(begin"
"(if(phase?"
" p_326)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad phase\""
" orig-s_139"
" req_166)))"
"(loop_153"
" spec140_309"
"(let-values(((or-part_345)"
" top-req_0))"
"(if or-part_345"
" or-part_345"
" req_166))"
" phase-shift_0"
" p_326"
" adjust_0"
" for-meta-ok?_0"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_181"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_346"
" only146_347"
" spec147_348"
" id148_349)"
"(let-values(((s_366)"
" req_166))"
"(let-values(((orig-s_367)"
" s_366))"
"(let-values(((only146_368"
" spec147_369"
" id148_370)"
"(let-values(((s_371)"
"(if(syntax?$1"
" s_366)"
"(syntax-e$1"
" s_366)"
" s_366)))"
"(if(pair?"
" s_371)"
"(let-values(((only149_372)"
"(let-values(((s_375)"
"(car"
" s_371)))"
" s_375))"
"((spec150_373"
" id151_374)"
"(let-values(((s_376)"
"(cdr"
" s_371)))"
"(let-values(((s_377)"
"(if(syntax?$1"
" s_376)"
"(syntax-e$1"
" s_376)"
" s_376)))"
"(if(pair?"
" s_377)"
"(let-values(((spec152_378)"
"(let-values(((s_380)"
"(car"
" s_377)))"
" s_380))"
"((id153_379)"
"(let-values(((s_381)"
"(cdr"
" s_377)))"
"(let-values(((s_382)"
"(if(syntax?$1"
" s_381)"
"(syntax-e$1"
" s_381)"
" s_381)))"
"(let-values(((flat-s_383)"
"(to-syntax-list.1"
" s_382)))"
"(if(not"
" flat-s_383)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_367))"
"(let-values()"
"(let-values(((id_384)"
"(let-values(((lst_385)"
" flat-s_383))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_385)))"
"((letrec-values(((for-loop_386)"
"(lambda(id_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_389)"
"(unsafe-car"
" lst_1))"
"((rest_390)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id_391)"
"(let-values(((id_392)"
" id_0))"
"(let-values(((id_393)"
"(let-values()"
"(let-values(((id154_394)"
"(let-values()"
"(if(let-values(((or-part_395)"
"(if(syntax?$1"
" s_389)"
"(symbol?"
"(syntax-e$1"
" s_389))"
" #f)))"
"(if or-part_395"
" or-part_395"
"(symbol?"
" s_389)))"
" s_389"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_367"
" s_389)))))"
"(cons"
" id154_394"
" id_392)))))"
"(values"
" id_393)))))"
"(if(not"
" #f)"
"(for-loop_386"
" id_391"
" rest_390)"
" id_391)))"
" id_0)))))"
" for-loop_386)"
" null"
" lst_385)))))"
"(reverse$1"
" id_384)))))))))"
"(values"
" spec152_378"
" id153_379))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_367))))))"
"(values"
" only149_372"
" spec150_373"
" id151_374))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_367)))))"
"(values"
" #t"
" only146_368"
" spec147_369"
" id148_370))))))"
"(loop_153"
"(list"
" spec147_348)"
"(let-values(((or-part_396)"
" top-req_0))"
"(if or-part_396"
" or-part_396"
" req_166))"
" phase-shift_0"
" just-meta_0"
"(adjust-only1.1"
"(ids->sym-set"
" id148_349))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_181"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_397"
" prefix155_398"
" id:prefix156_399"
" spec157_400)"
"(let-values(((s_417)"
" req_166))"
"(let-values(((orig-s_418)"
" s_417))"
"(let-values(((prefix155_419"
" id:prefix156_420"
" spec157_421)"
"(let-values(((s_422)"
"(if(syntax?$1"
" s_417)"
"(syntax-e$1"
" s_417)"
" s_417)))"
"(if(pair?"
" s_422)"
"(let-values(((prefix158_423)"
"(let-values(((s_426)"
"(car"
" s_422)))"
" s_426))"
"((id:prefix159_424"
" spec160_425)"
"(let-values(((s_427)"
"(cdr"
" s_422)))"
"(let-values(((s_428)"
"(if(syntax?$1"
" s_427)"
"(syntax-e$1"
" s_427)"
" s_427)))"
"(if(pair?"
" s_428)"
"(let-values(((id:prefix161_429)"
"(let-values(((s_431)"
"(car"
" s_428)))"
"(if(let-values(((or-part_432)"
"(if(syntax?$1"
" s_431)"
"(symbol?"
"(syntax-e$1"
" s_431))"
" #f)))"
"(if or-part_432"
" or-part_432"
"(symbol?"
" s_431)))"
" s_431"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_418"
" s_431))))"
"((spec162_430)"
"(let-values(((s_433)"
"(cdr"
" s_428)))"
"(let-values(((s_434)"
"(if(syntax?$1"
" s_433)"
"(syntax-e$1"
" s_433)"
" s_433)))"
"(if(pair?"
" s_434)"
"(let-values(((spec163_435)"
"(let-values(((s_436)"
"(car"
" s_434)))"
" s_436))"
"(()"
"(let-values(((s_437)"
"(cdr"
" s_434)))"
"(let-values(((s_438)"
"(if(syntax?$1"
" s_437)"
"(syntax-e$1"
" s_437)"
" s_437)))"
"(if(null?"
" s_438)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_418))))))"
"(values"
" spec163_435))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_418))))))"
"(values"
" id:prefix161_429"
" spec162_430))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_418))))))"
"(values"
" prefix158_423"
" id:prefix159_424"
" spec160_425))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_418)))))"
"(values"
" #t"
" prefix155_419"
" id:prefix156_420"
" spec157_421))))))"
"(loop_153"
"(list"
" spec157_400)"
"(let-values(((or-part_439)"
" top-req_0))"
"(if or-part_439"
" or-part_439"
" req_166))"
" phase-shift_0"
" just-meta_0"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix156_399))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_181"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_440"
" all-except164_441"
" spec165_442"
" id166_443)"
"(let-values(((s_460)"
" req_166))"
"(let-values(((orig-s_461)"
" s_460))"
"(let-values(((all-except164_462"
" spec165_463"
" id166_464)"
"(let-values(((s_465)"
"(if(syntax?$1"
" s_460)"
"(syntax-e$1"
" s_460)"
" s_460)))"
"(if(pair?"
" s_465)"
"(let-values(((all-except167_466)"
"(let-values(((s_469)"
"(car"
" s_465)))"
" s_469))"
"((spec168_467"
" id169_468)"
"(let-values(((s_470)"
"(cdr"
" s_465)))"
"(let-values(((s_471)"
"(if(syntax?$1"
" s_470)"
"(syntax-e$1"
" s_470)"
" s_470)))"
"(if(pair?"
" s_471)"
"(let-values(((spec170_472)"
"(let-values(((s_474)"
"(car"
" s_471)))"
" s_474))"
"((id171_473)"
"(let-values(((s_475)"
"(cdr"
" s_471)))"
"(let-values(((s_476)"
"(if(syntax?$1"
" s_475)"
"(syntax-e$1"
" s_475)"
" s_475)))"
"(let-values(((flat-s_477)"
"(to-syntax-list.1"
" s_476)))"
"(if(not"
" flat-s_477)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_461))"
"(let-values()"
"(let-values(((id_478)"
"(let-values(((lst_479)"
" flat-s_477))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_479)))"
"((letrec-values(((for-loop_480)"
"(lambda(id_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_483)"
"(unsafe-car"
" lst_1))"
"((rest_484)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id_485)"
"(let-values(((id_486)"
" id_0))"
"(let-values(((id_487)"
"(let-values()"
"(let-values(((id172_488)"
"(let-values()"
"(if(let-values(((or-part_489)"
"(if(syntax?$1"
" s_483)"
"(symbol?"
"(syntax-e$1"
" s_483))"
" #f)))"
"(if or-part_489"
" or-part_489"
"(symbol?"
" s_483)))"
" s_483"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_461"
" s_483)))))"
"(cons"
" id172_488"
" id_486)))))"
"(values"
" id_487)))))"
"(if(not"
" #f)"
"(for-loop_480"
" id_485"
" rest_484)"
" id_485)))"
" id_0)))))"
" for-loop_480)"
" null"
" lst_479)))))"
"(reverse$1"
" id_478)))))))))"
"(values"
" spec170_472"
" id171_473))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_461))))))"
"(values"
" all-except167_466"
" spec168_467"
" id169_468))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_461)))))"
"(values"
" #t"
" all-except164_462"
" spec165_463"
" id166_464))))))"
"(loop_153"
"(list"
" spec165_442)"
"(let-values(((or-part_490)"
" top-req_0))"
"(if or-part_490"
" or-part_490"
" req_166))"
" phase-shift_0"
" just-meta_0"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id166_443))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_181"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_491"
" prefix-all-except173_492"
" id:prefix174_493"
" spec175_494"
" id176_495)"
"(let-values(((s_515)"
" req_166))"
"(let-values(((orig-s_516)"
" s_515))"
"(let-values(((prefix-all-except173_517"
" id:prefix174_518"
" spec175_519"
" id176_520)"
"(let-values(((s_521)"
"(if(syntax?$1"
" s_515)"
"(syntax-e$1"
" s_515)"
" s_515)))"
"(if(pair?"
" s_521)"
"(let-values(((prefix-all-except177_522)"
"(let-values(((s_526)"
"(car"
" s_521)))"
" s_526))"
"((id:prefix178_523"
" spec179_524"
" id180_525)"
"(let-values(((s_527)"
"(cdr"
" s_521)))"
"(let-values(((s_528)"
"(if(syntax?$1"
" s_527)"
"(syntax-e$1"
" s_527)"
" s_527)))"
"(if(pair?"
" s_528)"
"(let-values(((id:prefix181_529)"
"(let-values(((s_532)"
"(car"
" s_528)))"
"(if(let-values(((or-part_533)"
"(if(syntax?$1"
" s_532)"
"(symbol?"
"(syntax-e$1"
" s_532))"
" #f)))"
"(if or-part_533"
" or-part_533"
"(symbol?"
" s_532)))"
" s_532"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_516"
" s_532))))"
"((spec182_530"
" id183_531)"
"(let-values(((s_534)"
"(cdr"
" s_528)))"
"(let-values(((s_535)"
"(if(syntax?$1"
" s_534)"
"(syntax-e$1"
" s_534)"
" s_534)))"
"(if(pair?"
" s_535)"
"(let-values(((spec184_536)"
"(let-values(((s_538)"
"(car"
" s_535)))"
" s_538))"
"((id185_537)"
"(let-values(((s_539)"
"(cdr"
" s_535)))"
"(let-values(((s_540)"
"(if(syntax?$1"
" s_539)"
"(syntax-e$1"
" s_539)"
" s_539)))"
"(let-values(((flat-s_541)"
"(to-syntax-list.1"
" s_540)))"
"(if(not"
" flat-s_541)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_516))"
"(let-values()"
"(let-values(((id_542)"
"(let-values(((lst_543)"
" flat-s_541))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_543)))"
"((letrec-values(((for-loop_544)"
"(lambda(id_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_547)"
"(unsafe-car"
" lst_1))"
"((rest_548)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id_549)"
"(let-values(((id_550)"
" id_0))"
"(let-values(((id_551)"
"(let-values()"
"(let-values(((id186_552)"
"(let-values()"
"(if(let-values(((or-part_553)"
"(if(syntax?$1"
" s_547)"
"(symbol?"
"(syntax-e$1"
" s_547))"
" #f)))"
"(if or-part_553"
" or-part_553"
"(symbol?"
" s_547)))"
" s_547"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_516"
" s_547)))))"
"(cons"
" id186_552"
" id_550)))))"
"(values"
" id_551)))))"
"(if(not"
" #f)"
"(for-loop_544"
" id_549"
" rest_548)"
" id_549)))"
" id_0)))))"
" for-loop_544)"
" null"
" lst_543)))))"
"(reverse$1"
" id_542)))))))))"
"(values"
" spec184_536"
" id185_537))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_516))))))"
"(values"
" id:prefix181_529"
" spec182_530"
" id183_531))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_516))))))"
"(values"
" prefix-all-except177_522"
" id:prefix178_523"
" spec179_524"
" id180_525))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_516)))))"
"(values"
" #t"
" prefix-all-except173_517"
" id:prefix174_518"
" spec175_519"
" id176_520))))))"
"(loop_153"
"(list"
" spec175_494)"
"(let-values(((or-part_554)"
" top-req_0))"
"(if or-part_554"
" or-part_554"
" req_166))"
" phase-shift_0"
" just-meta_0"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix174_493)"
"(ids->sym-set"
" id176_495))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_181"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_171"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_555"
" rename187_556"
" spec188_557"
" id:to189_558"
" id:from190_559)"
"(let-values(((s_579)"
" req_166))"
"(let-values(((orig-s_580)"
" s_579))"
"(let-values(((rename187_581"
" spec188_582"
" id:to189_583"
" id:from190_584)"
"(let-values(((s_585)"
"(if(syntax?$1"
" s_579)"
"(syntax-e$1"
" s_579)"
" s_579)))"
"(if(pair?"
" s_585)"
"(let-values(((rename191_586)"
"(let-values(((s_590)"
"(car"
" s_585)))"
" s_590))"
"((spec192_587"
" id:to193_588"
" id:from194_589)"
"(let-values(((s_591)"
"(cdr"
" s_585)))"
"(let-values(((s_592)"
"(if(syntax?$1"
" s_591)"
"(syntax-e$1"
" s_591)"
" s_591)))"
"(if(pair?"
" s_592)"
"(let-values(((spec195_593)"
"(let-values(((s_596)"
"(car"
" s_592)))"
" s_596))"
"((id:to196_594"
" id:from197_595)"
"(let-values(((s_597)"
"(cdr"
" s_592)))"
"(let-values(((s_598)"
"(if(syntax?$1"
" s_597)"
"(syntax-e$1"
" s_597)"
" s_597)))"
"(if(pair?"
" s_598)"
"(let-values(((id:to198_599)"
"(let-values(((s_601)"
"(car"
" s_598)))"
"(if(let-values(((or-part_602)"
"(if(syntax?$1"
" s_601)"
"(symbol?"
"(syntax-e$1"
" s_601))"
" #f)))"
"(if or-part_602"
" or-part_602"
"(symbol?"
" s_601)))"
" s_601"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_580"
" s_601))))"
"((id:from199_600)"
"(let-values(((s_603)"
"(cdr"
" s_598)))"
"(let-values(((s_604)"
"(if(syntax?$1"
" s_603)"
"(syntax-e$1"
" s_603)"
" s_603)))"
"(if(pair?"
" s_604)"
"(let-values(((id:from200_605)"
"(let-values(((s_606)"
"(car"
" s_604)))"
"(if(let-values(((or-part_607)"
"(if(syntax?$1"
" s_606)"
"(symbol?"
"(syntax-e$1"
" s_606))"
" #f)))"
"(if or-part_607"
" or-part_607"
"(symbol?"
" s_606)))"
" s_606"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_580"
" s_606))))"
"(()"
"(let-values(((s_608)"
"(cdr"
" s_604)))"
"(let-values(((s_609)"
"(if(syntax?$1"
" s_608)"
"(syntax-e$1"
" s_608)"
" s_608)))"
"(if(null?"
" s_609)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_580))))))"
"(values"
" id:from200_605))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_580))))))"
"(values"
" id:to198_599"
" id:from199_600))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_580))))))"
"(values"
" spec195_593"
" id:to196_594"
" id:from197_595))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_580))))))"
"(values"
" rename191_586"
" spec192_587"
" id:to193_588"
" id:from194_589))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_580)))))"
"(values"
" #t"
" rename187_581"
" spec188_582"
" id:to189_583"
" id:from190_584))))))"
"(loop_153"
"(list"
" spec188_557)"
"(let-values(((or-part_610)"
" top-req_0))"
"(if or-part_610"
" or-part_610"
" req_166))"
" phase-shift_0"
" just-meta_0"
"(adjust-rename4.1"
" id:to189_558"
"(syntax-e$1"
" id:from190_559))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_611)"
"(syntax->datum$1"
" req_166)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_614)"
"(1/module-path?"
" maybe-mp_611)))"
"(if or-part_614"
" or-part_614"
"(1/resolved-module-path?"
" maybe-mp_611)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad require spec\""
" orig-s_139"
" req_166)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_615)"
" adjust_0))"
"(if or-part_615"
" or-part_615"
"(not"
"(eq?"
" just-meta_0"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_142"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_612)"
"(if(1/resolved-module-path?"
" maybe-mp_611)"
"(resolved-module-path->module-path"
" maybe-mp_611)"
" maybe-mp_611)))"
"(let-values(((mpi_613)"
"(let-values(((mp218_617)"
" mp_612)"
"((self219_618)"
" self_143)"
"((declared-submodule-names220_619)"
" declared-submodule-names_147))"
"(module-path->mpi5.1"
" declared-submodule-names220_619"
" mp218_617"
" self219_618))))"
"(begin"
"(let-values(((mpi201_621)"
" mpi_613)"
"((req202_622)"
" req_166)"
"((self203_623)"
" self_143)"
"((temp204_624)"
"(let-values(((or-part_638)"
" req_166))"
"(if or-part_638"
" or-part_638"
" top-req_0)))"
"((m-ns205_625)"
" m-ns_140)"
"((phase-shift206_626)"
" phase-shift_0)"
"((run-phase207_627)"
" run-phase_144)"
"((just-meta208_628)"
" just-meta_0)"
"((adjust209_629)"
" adjust_0)"
"((requires+provides210_630)"
" requires+provides_142)"
"((run?211_631)"
" run?_145)"
"((visit?212_632)"
" visit?_146)"
"((copy-variable-phase-level213_633)"
" copy-variable-phase-level_148)"
"((copy-variable-as-constant?214_634)"
" copy-variable-as-constant?_149)"
"((skip-variable-phase-level215_635)"
" skip-variable-phase-level_150)"
"((initial-require?216_636)"
" initial-require?_151)"
"((who217_637)"
" who_152))"
"(perform-require!78.1"
" adjust209_629"
" #t"
" #f"
" copy-variable-as-constant?214_634"
" copy-variable-phase-level213_633"
" initial-require?216_636"
" just-meta208_628"
" phase-shift206_626"
" requires+provides210_630"
" run-phase207_627"
" run?211_631"
" skip-variable-phase-level215_635"
" visit?212_632"
" who217_637"
" mpi201_621"
" req202_622"
" self203_623"
" temp204_624"
" m-ns205_625))"
"(set! initial-require?_151"
" #f)))))))))))))))))))))))))"
"(values"
" result_170)))))"
"(if(if(not"
"((lambda x_0"
"(not"
" result_168))"
" req_166))"
"(not #f)"
" #f)"
"(for-loop_163"
" result_168"
" rest_167)"
" result_168)))"
" result_0)))))"
" for-loop_163)"
" #t"
" lst_162)))))))"
" loop_153)"
" reqs_138"
" #f"
" phase-shift_141"
" 'all"
" #f"
" #t"
" #t"
" 'raw))))))))))))))))))))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_0)"
"(begin"
"(let-values(((lst_694) ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_694)))"
"((letrec-values(((for-loop_695)"
"(lambda(table_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_698)(unsafe-car lst_0))((rest_699)(unsafe-cdr lst_0)))"
"(let-values(((table_700)"
"(let-values(((table_701) table_0))"
"(let-values(((table_702)"
"(let-values()"
"(let-values(((key_703 val_704)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_698))"
" #t))))"
"(hash-set table_701 key_703 val_704)))))"
"(values table_702)))))"
"(if(not #f)(for-loop_695 table_700 rest_699) table_700)))"
" table_0)))))"
" for-loop_695)"
" '#hash()"
" lst_694))))))"
"(define-values"
"(perform-initial-require!42.1)"
"(lambda(bind?33_0 who34_0 mod-path37_0 self38_0 in-stx39_0 m-ns40_0 requires+provides41_0)"
"(begin"
" 'perform-initial-require!42"
"(let-values(((mod-path_724) mod-path37_0))"
"(let-values(((self_725) self38_0))"
"(let-values(((in-stx_726) in-stx39_0))"
"(let-values(((m-ns_727) m-ns40_0))"
"(let-values(((requires+provides_728) requires+provides41_0))"
"(let-values(((bind?_729) bind?33_0))"
"(let-values(((who_730) who34_0))"
"(let-values()"
"(let-values(((temp221_732)"
"(let-values(((mod-path233_744) mod-path_724)((self234_745) self_725))"
"(module-path->mpi5.1 unsafe-undefined mod-path233_744 self234_745)))"
"((temp222_733) #f)"
"((self223_734) self_725)"
"((in-stx224_735) in-stx_726)"
"((m-ns225_736) m-ns_727)"
"((temp226_737) 0)"
"((temp227_738) 0)"
"((requires+provides228_739) requires+provides_728)"
"((temp229_740) #t)"
"((temp230_741) #t)"
"((bind?231_742) bind?_729)"
"((who232_743) who_730))"
"(perform-require!78.1"
" #f"
" bind?231_742"
" temp229_740"
" #f"
" #f"
" temp230_741"
" 'all"
" temp226_737"
" requires+provides228_739"
" temp227_738"
" #f"
" #f"
" #t"
" who232_743"
" temp221_732"
" temp222_733"
" self223_734"
" in-stx224_735"
" m-ns225_736)))))))))))))"
"(define-values"
"(perform-require!78.1)"
"(lambda(adjust48_0"
" bind?57_0"
" can-be-shadowed?52_0"
" copy-variable-as-constant?55_0"
" copy-variable-phase-level54_0"
" initial-require?53_0"
" just-meta47_0"
" phase-shift45_0"
" requires+provides49_0"
" run-phase46_0"
" run?51_0"
" skip-variable-phase-level56_0"
" visit?50_0"
" who58_0"
" mpi73_0"
" orig-s74_0"
" self75_0"
" in-stx76_0"
" m-ns77_0)"
"(begin"
" 'perform-require!78"
"(let-values(((mpi_799) mpi73_0))"
"(let-values(((orig-s_800) orig-s74_0))"
"(let-values()"
"(let-values(((in-stx_802) in-stx76_0))"
"(let-values(((m-ns_803) m-ns77_0))"
"(let-values(((phase-shift_804) phase-shift45_0))"
"(let-values(((run-phase_805) run-phase46_0))"
"(let-values(((just-meta_806) just-meta47_0))"
"(let-values(((adjust_807) adjust48_0))"
"(let-values(((requires+provides_808) requires+provides49_0))"
"(let-values(((visit?_809) visit?50_0))"
"(let-values(((run?_810) run?51_0))"
"(let-values(((can-be-shadowed?_811) can-be-shadowed?52_0))"
"(let-values(((initial-require?_812) initial-require?53_0))"
"(let-values(((copy-variable-phase-level_813) copy-variable-phase-level54_0))"
"(let-values(((copy-variable-as-constant?_814) copy-variable-as-constant?55_0))"
"(let-values(((skip-variable-phase-level_815) skip-variable-phase-level56_0))"
"(let-values(((bind?_816) bind?57_0))"
"(let-values(((who_817) who58_0))"
"(let-values()"
"(let-values()"
"(let-values(((module-name_818)"
"(1/module-path-index-resolve mpi_799 #t)))"
"(let-values(((bind-in-stx_819)"
"(if(adjust-rename? adjust_807)"
"(adjust-rename-to-id adjust_807)"
" in-stx_802)))"
"(let-values(((done-syms_820)(if adjust_807(make-hash) #f)))"
"(let-values(((m_821)"
"(namespace->module m-ns_803 module-name_818)))"
"(let-values((()"
"(begin"
"(if m_821"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'require"
" module-name_818)))"
"(values))))"
"(let-values(((interned-mpi_822)"
"(if requires+provides_808"
"(add-required-module!"
" requires+provides_808"
" mpi_799"
" phase-shift_804"
"(module-cross-phase-persistent? m_821))"
" mpi_799)))"
"(let-values((()"
"(begin"
"(if visit?_809"
"(let-values()"
"(let-values(((m-ns251_829) m-ns_803)"
"((interned-mpi252_830)"
" interned-mpi_822)"
"((phase-shift253_831)"
" phase-shift_804)"
"((run-phase254_832)"
" run-phase_805))"
"(namespace-module-visit!104.1"
" run-phase254_832"
" m-ns251_829"
" interned-mpi252_830"
" phase-shift253_831)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_810"
"(let-values()"
"(let-values(((m-ns255_834) m-ns_803)"
"((interned-mpi256_835)"
" interned-mpi_822)"
"((phase-shift257_836)"
" phase-shift_804)"
"((run-phase258_837)"
" run-phase_805))"
"(namespace-module-instantiate!96.1"
" #t"
" run-phase258_837"
" unsafe-undefined"
" #f"
" m-ns255_834"
" interned-mpi256_835"
" phase-shift257_836)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_838)"
" visit?_809))"
"(if or-part_838"
" or-part_838"
" run?_810)))"
"(let-values()"
"(let-values(((m-ns259_840)"
" m-ns_803)"
"((interned-mpi260_841)"
" interned-mpi_822)"
"((phase-shift261_842)"
" phase-shift_804)"
"((run-phase262_843)"
" run-phase_805))"
"(namespace-module-make-available!112.1"
" run-phase262_843"
" m-ns259_840"
" interned-mpi260_841"
" phase-shift261_842)))"
"(void))"
"(values))))"
"(let-values(((can-bulk-bind?_823)"
"(if(let-values(((or-part_844)"
"(not adjust_807)))"
"(if or-part_844"
" or-part_844"
"(let-values(((or-part_845)"
"(adjust-prefix?"
" adjust_807)))"
"(if or-part_845"
" or-part_845"
"(adjust-all-except?"
" adjust_807)))))"
"(not skip-variable-phase-level_815)"
" #f)))"
"(let-values(((bulk-prefix_824)"
"(if(adjust-prefix? adjust_807)"
"(let-values()"
"(adjust-prefix-sym adjust_807))"
"(if(adjust-all-except? adjust_807)"
"(let-values()"
"(adjust-all-except-prefix-sym"
" adjust_807))"
"(let-values() #f)))))"
"(let-values(((bulk-excepts_825)"
"(if(adjust-all-except? adjust_807)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_807))"
"(let-values() '#hasheq()))))"
"(let-values(((update-nominals-box_826)"
"(if can-bulk-bind?_823"
"(box null)"
" #f)))"
"(let-values((()"
"(begin"
"(let-values(((m235_847)"
" m_821)"
"((bind-in-stx236_848)"
" bind-in-stx_819)"
"((phase-shift237_849)"
" phase-shift_804)"
"((m-ns238_850)"
" m-ns_803)"
"((interned-mpi239_851)"
" interned-mpi_822)"
"((module-name240_852)"
" module-name_818)"
"((orig-s241_853)"
" orig-s_800)"
"((temp242_854)"
"(if requires+provides_808"
"(requires+provides-self"
" requires+provides_808)"
" #f))"
"((temp243_855)"
"(if(adjust-only?"
" adjust_807)"
"(let-values()"
"(set->list"
"(adjust-only-syms"
" adjust_807)))"
"(if(adjust-rename?"
" adjust_807)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_807)))"
"(let-values()"
" #f))))"
"((just-meta244_856)"
" just-meta_806)"
"((bind?245_857)"
" bind?_816)"
"((can-bulk-bind?246_858)"
" can-bulk-bind?_823)"
"((bulk-prefix247_859)"
" bulk-prefix_824)"
"((bulk-excepts248_860)"
" bulk-excepts_825)"
"((temp249_861)"
"(if requires+provides_808"
"(if can-bulk-bind?_823"
"(lambda(provides_0"
" provide-phase-level_0)"
"(begin"
" 'temp249"
"(let-values(((requires+provides263_866)"
" requires+provides_808)"
"((bind-in-stx264_867)"
" bind-in-stx_819)"
"((temp265_868)"
"(module-self"
" m_821))"
"((mpi266_869)"
" mpi_799)"
"((phase-shift267_870)"
" phase-shift_804)"
"((provides268_871)"
" provides_0)"
"((provide-phase-level269_872)"
" provide-phase-level_0)"
"((bulk-prefix270_873)"
" bulk-prefix_824)"
"((bulk-excepts271_874)"
" bulk-excepts_825)"
"((temp272_875)"
"(if(positive?"
"(hash-count"
" bulk-excepts_825))"
" done-syms_820"
" #f))"
"((can-be-shadowed?273_876)"
" can-be-shadowed?_811)"
"((temp274_877)"
"(not"
" initial-require?_812))"
"((orig-s275_878)"
" orig-s_800)"
"((update-nominals-box276_879)"
" update-nominals-box_826)"
"((who277_880)"
" who_817))"
"(add-bulk-required-ids!59.1"
" update-nominals-box276_879"
" can-be-shadowed?273_876"
" temp274_877"
" bulk-excepts271_874"
" orig-s275_878"
" bulk-prefix270_873"
" temp272_875"
" who277_880"
" requires+provides263_866"
" bind-in-stx264_867"
" temp265_868"
" mpi266_869"
" phase-shift267_870"
" provides268_871"
" provide-phase-level269_872))))"
" #f)"
" #f))"
"((temp250_862)"
"(if(let-values(((or-part_881)"
"(not"
" can-bulk-bind?_823)))"
"(if or-part_881"
" or-part_881"
" copy-variable-phase-level_813))"
"(lambda(binding_0"
" as-transformer?_0)"
"(begin"
" 'temp250"
"(let-values(((sym_884)"
"(module-binding-nominal-sym"
" binding_0)))"
"(let-values(((provide-phase_885)"
"(module-binding-nominal-phase"
" binding_0)))"
"(let-values(((adjusted-sym_886)"
"(if(not"
"(symbol-interned?"
" sym_884))"
"(let-values()"
" #f)"
"(if(if skip-variable-phase-level_815"
"(if(not"
" as-transformer?_0)"
"(equal?"
" provide-phase_885"
" skip-variable-phase-level_815)"
" #f)"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_807)"
"(let-values()"
" sym_884)"
"(if(adjust-only?"
" adjust_807)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_807)"
" sym_884)"
"(if(hash-set!"
" done-syms_820"
" sym_884"
" #t)"
" sym_884"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_807)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                              \"~a~a\""
"(adjust-prefix-sym"
" adjust_807)"
" sym_884)))"
"(if(adjust-all-except?"
" adjust_807)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_807)"
" sym_884)"
"(hash-set!"
" done-syms_820"
" sym_884"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                                                  \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_807)"
" sym_884))"
" #f))"
"(if(adjust-rename?"
" adjust_807)"
"(let-values()"
"(if(eq?"
" sym_884"
"(adjust-rename-from-sym"
" adjust_807))"
"(if(hash-set!"
" done-syms_820"
" sym_884"
" #t)"
"(adjust-rename-to-id"
" adjust_807)"
" #f)"
" #f))"
"(void))))))))))"
"(let-values(((skip-bind?_887)"
"(if(if adjusted-sym_886"
" requires+provides_808"
" #f)"
"(let-values()"
"(let-values(((s_888)"
"(datum->syntax$1"
" bind-in-stx_819"
" adjusted-sym_886)))"
"(let-values(((bind-phase_889)"
"(phase+"
" phase-shift_804"
" provide-phase_885)))"
"(let-values(((skip-bind?_890)"
"(if initial-require?_812"
"(let-values()"
" #f)"
"(let-values()"
"(let-values(((temp278_892)"
" #t)"
"((temp279_893)"
" #t)"
"((requires+provides280_894)"
" requires+provides_808)"
"((s281_895)"
" s_888)"
"((bind-phase282_896)"
" bind-phase_889)"
"((binding283_897)"
" binding_0)"
"((orig-s284_898)"
" orig-s_800)"
"((temp285_899)"
" #t)"
"((who286_900)"
" who_817))"
"(check-not-defined95.1"
" #f"
" temp279_893"
" temp278_892"
" orig-s284_898"
" temp285_899"
" binding283_897"
" who286_900"
" requires+provides280_894"
" s281_895"
" bind-phase282_896))))))"
"(begin"
"(if skip-bind?_890"
"(void)"
"(let-values()"
"(let-values(((requires+provides287_902)"
" requires+provides_808)"
"((s288_903)"
" s_888)"
"((bind-phase289_904)"
" bind-phase_889)"
"((binding290_905)"
" binding_0)"
"((can-be-shadowed?291_906)"
" can-be-shadowed?_811)"
"((as-transformer?292_907)"
" as-transformer?_0))"
"(add-defined-or-required-id!19.1"
" as-transformer?292_907"
" can-be-shadowed?291_906"
" requires+provides287_902"
" s288_903"
" bind-phase289_904"
" binding290_905))))"
" skip-bind?_890)))))"
"(let-values()"
" #f))))"
"(begin"
"(if(if copy-variable-phase-level_813"
"(if(not"
" as-transformer?_0)"
"(equal?"
" provide-phase_885"
" copy-variable-phase-level_813)"
" #f)"
" #f)"
"(let-values()"
"(copy-namespace-value"
" m-ns_803"
" sym_884"
" binding_0"
" copy-variable-phase-level_813"
" phase-shift_804"
" copy-variable-as-constant?_814))"
"(void))"
"(if(not"
" skip-bind?_887)"
" adjusted-sym_886"
" #f))))))))"
" #f)))"
"(bind-all-provides!107.1"
" bind?245_857"
" temp249_861"
" bulk-excepts248_860"
" bulk-prefix247_859"
" can-bulk-bind?246_858"
" temp242_854"
" temp250_862"
" orig-s241_853"
" just-meta244_856"
" temp243_855"
" m235_847"
" bind-in-stx236_848"
" phase-shift237_849"
" m-ns238_850"
" interned-mpi239_851"
" module-name240_852))"
"(values))))"
"(let-values((()"
"(begin"
"(if update-nominals-box_826"
"(let-values()"
"(begin"
"(let-values(((lst_908)"
"(unbox"
" update-nominals-box_826)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_908)))"
"((letrec-values(((for-loop_909)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((update!_911)"
"(unsafe-car"
" lst_0))"
"((rest_912)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(update!_911))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_909"
" rest_912)"
"(values))))"
"(values))))))"
" for-loop_909)"
" lst_908)))"
"(void)))"
"(void))"
"(values))))"
"(let-values(((need-syms_827)"
"(if(adjust-only?"
" adjust_807)"
"(let-values()"
"(adjust-only-syms"
" adjust_807))"
"(if(adjust-all-except?"
" adjust_807)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_807))"
"(if(adjust-rename?"
" adjust_807)"
"(let-values()"
"(set"
"(adjust-rename-from-sym"
" adjust_807)))"
"(let-values()"
" #f))))))"
"(if(if need-syms_827"
"(not"
"(="
"(set-count need-syms_827)"
"(hash-count done-syms_820)))"
" #f)"
"(let-values()"
"(begin"
"(let-values(((ht_913)"
" need-syms_827))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys"
" ht_913)))"
"((letrec-values(((for-loop_914)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_916)"
"(unsafe-immutable-hash-iterate-key"
" ht_913"
" i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_820"
" sym_916"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" who_817"
"                                                                                                                                                             \"not in nested spec\""
" orig-s_800"
" sym_916))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_914"
"(unsafe-immutable-hash-iterate-next"
" ht_913"
" i_0))"
"(values))))"
"(values))))))"
" for-loop_914)"
"(unsafe-immutable-hash-iterate-first"
" ht_913))))"
"(void)))"
"(void))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(bind-all-provides!107.1)"
"(lambda(bind?85_0"
" bulk-callback90_0"
" bulk-excepts88_0"
" bulk-prefix87_0"
" can-bulk?86_0"
" defines-mpi82_0"
" filter89_0"
" in81_0"
" just-meta84_0"
" only83_0"
" m101_0"
" in-stx102_0"
" phase-shift103_0"
" ns104_0"
" mpi105_0"
" module-name106_0)"
"(begin"
" 'bind-all-provides!107"
"(let-values(((m_1014) m101_0))"
"(let-values(((in-stx_1015) in-stx102_0))"
"(let-values(((phase-shift_1016) phase-shift103_0))"
"(let-values(((ns_1017) ns104_0))"
"(let-values(((mpi_1018) mpi105_0))"
"(let-values(((module-name_1019) module-name106_0))"
"(let-values(((orig-s_1020) in81_0))"
"(let-values(((defines-mpi_1021) defines-mpi82_0))"
"(let-values(((only-syms_1022) only83_0))"
"(let-values(((just-meta_1023) just-meta84_0))"
"(let-values(((bind?_1024) bind?85_0))"
"(let-values(((can-bulk?_1025) can-bulk?86_0))"
"(let-values(((bulk-prefix_1026) bulk-prefix87_0))"
"(let-values(((bulk-excepts_1027) bulk-excepts88_0))"
"(let-values(((filter_1028) filter89_0))"
"(let-values(((bulk-callback_1029) bulk-callback90_0))"
"(let-values()"
"(let-values(((self_1030)(module-self m_1014)))"
"(begin"
"(let-values(((ht_1031)(module-provides m_1014)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_1031)))"
"((letrec-values(((for-loop_1032)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((provide-phase-level_1034"
" provides_1035)"
"(hash-iterate-key+value"
" ht_1031"
" i_0)))"
"(let-values((()"
"(let-values()"
"(if(let-values(((or-part_1036)"
"(eq?"
" just-meta_1023"
" 'all)))"
"(if or-part_1036"
" or-part_1036"
"(eqv?"
" just-meta_1023"
" provide-phase-level_1034)))"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_1037)"
"(phase+"
" phase-shift_1016"
" provide-phase-level_1034)))"
"(let-values(((need-except?_1038)"
"(if bulk-callback_1029"
"(bulk-callback_1029"
" provides_1035"
" provide-phase-level_1034)"
" #f)))"
"(if bind?_1024"
"(let-values()"
"(begin"
"(if filter_1028"
"(let-values()"
"(begin"
"(let-values(((lst_1039)"
"(let-values(((or-part_1040)"
" only-syms_1022))"
"(if or-part_1040"
" or-part_1040"
"(hash-keys"
" provides_1035)))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_1039)))"
"((letrec-values(((for-loop_1041)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((sym_1043)"
"(unsafe-car"
" lst_0))"
"((rest_1044)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_1045)"
"(hash-ref"
" provides_1035"
" sym_1043"
" #f)))"
"(if binding/p_1045"
"(let-values()"
"(let-values(((b_1046)"
"(let-values(((binding/p293_1048)"
" binding/p_1045)"
"((sym294_1049)"
" sym_1043)"
"((self295_1050)"
" self_1030)"
"((mpi296_1051)"
" mpi_1018)"
"((provide-phase-level297_1052)"
" provide-phase-level_1034)"
"((phase-shift298_1053)"
" phase-shift_1016))"
"(provide-binding-to-require-binding11.1"
" mpi296_1051"
" phase-shift298_1053"
" provide-phase-level297_1052"
" self295_1050"
" binding/p293_1048"
" sym294_1049))))"
"(let-values(((sym_1054)"
"(filter_1028"
" b_1046"
"(provided-as-transformer?"
" binding/p_1045))))"
"(if(if sym_1054"
"(not"
" can-bulk?_1025)"
" #f)"
"(let-values()"
"(let-values(((temp299_1055)"
"(datum->syntax$1"
" in-stx_1015"
" sym_1054))"
"((b300_1056)"
" b_1046)"
"((phase301_1057)"
" phase_1037))"
"(add-binding!17.1"
" #f"
" #f"
" temp299_1055"
" b300_1056"
" phase301_1057)))"
"(void)))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_1041"
" rest_1044)"
"(values))))"
"(values))))))"
" for-loop_1041)"
" lst_1039)))"
"(void)))"
"(void))"
"(if can-bulk?_1025"
"(let-values()"
"(let-values(((bulk-binding-registry_1058)"
"(namespace-bulk-binding-registry"
" ns_1017)))"
"(let-values(((in-stx302_1060)"
" in-stx_1015)"
"((temp303_1061)"
"(bulk-binding14.1"
"(let-values(((or-part_1065)"
"(if(not"
" bulk-prefix_1026)"
"(if(zero?"
"(hash-count"
" bulk-excepts_1027))"
" provides_1035"
" #f)"
" #f)))"
"(if or-part_1065"
" or-part_1065"
"(if(not"
"(registered-bulk-provide?"
" bulk-binding-registry_1058"
" module-name_1019))"
"(bulk-provides-add-prefix-remove-exceptions"
" provides_1035"
" bulk-prefix_1026"
" bulk-excepts_1027)"
" #f)))"
" bulk-prefix_1026"
" bulk-excepts_1027"
" self_1030"
" mpi_1018"
" provide-phase-level_1034"
" phase-shift_1016"
" bulk-binding-registry_1058))"
"((phase304_1062)"
" phase_1037)"
"((orig-s305_1063)"
" orig-s_1020)"
"((temp306_1064)"
"(if need-except?_1038"
" defines-mpi_1021"
" #f)))"
"(add-bulk-binding!27.1"
" orig-s305_1063"
" temp306_1064"
" in-stx302_1060"
" temp303_1061"
" phase304_1062))))"
"(void))))"
"(void)))))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_1032"
"(hash-iterate-next ht_1031 i_0))"
"(values))))"
"(values))))))"
" for-loop_1032)"
"(hash-iterate-first ht_1031))))"
"(void)))))))))))))))))))))))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_0)"
"(begin"
"(let-values(((rebuild-req_1123)"
"(lambda(req_1 new-req_0)(begin 'rebuild-req(datum->syntax$1 req_1 new-req_0 req_1 req_1)))))"
"(letrec-values(((loop_1124)"
"(lambda(shifted?_0)"
"(begin"
" 'loop"
"(lambda(req_1)"
"(let-values(((fm_1129)"
"(if(pair?(syntax-e$1 req_1))"
"(if(identifier?(car(syntax-e$1 req_1)))"
"(syntax-e$1(car(syntax-e$1 req_1)))"
" #f)"
" #f)))"
"(let-values(((tmp_1130) fm_1129))"
"(if(equal? tmp_1130 'for-meta)"
"(let-values()"
"(let-values(((ok?_1131 for-meta307_1132 phase-level308_1133 spec309_1134)"
"(let-values(((s_1152) req_1))"
"(let-values(((orig-s_1153) s_1152))"
"(let-values(((for-meta307_1154"
" phase-level308_1155"
" spec309_1156)"
"(let-values(((s_1157)"
"(if(syntax?$1 s_1152)"
"(syntax-e$1 s_1152)"
" s_1152)))"
"(if(pair? s_1157)"
"(let-values(((for-meta310_1158)"
"(let-values(((s_1161)"
"(car s_1157)))"
" s_1161))"
"((phase-level311_1159"
" spec312_1160)"
"(let-values(((s_1162)"
"(cdr s_1157)))"
"(let-values(((s_1163)"
"(if(syntax?$1"
" s_1162)"
"(syntax-e$1"
" s_1162)"
" s_1162)))"
"(if(pair? s_1163)"
"(let-values(((phase-level313_1164)"
"(let-values(((s_1166)"
"(car"
" s_1163)))"
" s_1166))"
"((spec314_1165)"
"(let-values(((s_1167)"
"(cdr"
" s_1163)))"
"(let-values(((s_1168)"
"(if(syntax?$1"
" s_1167)"
"(syntax-e$1"
" s_1167)"
" s_1167)))"
"(let-values(((flat-s_1169)"
"(to-syntax-list.1"
" s_1168)))"
"(if(not"
" flat-s_1169)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_1153))"
"(let-values()"
" flat-s_1169)))))))"
"(values"
" phase-level313_1164"
" spec314_1165))"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_1153))))))"
"(values"
" for-meta310_1158"
" phase-level311_1159"
" spec312_1160))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_1153)))))"
"(values"
" #t"
" for-meta307_1154"
" phase-level308_1155"
" spec309_1156))))))"
"(let-values(((p_1151)(syntax-e$1 phase-level308_1133)))"
"(begin"
"(if(phase? p_1151)"
"(void)"
"                                               (let-values () (raise-syntax-error$1 #f \"bad phase\" req_1)))"
"(rebuild-req_1123"
" req_1"
"(list*"
" for-meta307_1132"
"(phase+ p_1151 1)"
"(map2(loop_1124 #t) spec309_1134)))))))"
"(if(equal? tmp_1130 'for-syntax)"
"(let-values()"
"(let-values(((ok?_1170 for-syntax315_1171 spec316_1172)"
"(let-values(((s_1186) req_1))"
"(let-values(((orig-s_1187) s_1186))"
"(let-values(((for-syntax315_1188 spec316_1189)"
"(let-values(((s_1190)"
"(if(syntax?$1 s_1186)"
"(syntax-e$1 s_1186)"
" s_1186)))"
"(if(pair? s_1190)"
"(let-values(((for-syntax317_1191)"
"(let-values(((s_1193)"
"(car s_1190)))"
" s_1193))"
"((spec318_1192)"
"(let-values(((s_1194)"
"(cdr s_1190)))"
"(let-values(((s_1195)"
"(if(syntax?$1"
" s_1194)"
"(syntax-e$1"
" s_1194)"
" s_1194)))"
"(let-values(((flat-s_1196)"
"(to-syntax-list.1"
" s_1195)))"
"(if(not flat-s_1196)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_1187))"
"(let-values()"
" flat-s_1196)))))))"
"(values for-syntax317_1191 spec318_1192))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_1187)))))"
"(values #t for-syntax315_1188 spec316_1189))))))"
"(rebuild-req_1123"
" req_1"
"(list* 'for-meta 2(map2(loop_1124 #t) spec316_1172)))))"
"(if(equal? tmp_1130 'for-template)"
"(let-values()"
"(let-values(((ok?_1197 for-template319_1198 spec320_1199)"
"(let-values(((s_1213) req_1))"
"(let-values(((orig-s_1214) s_1213))"
"(let-values(((for-template319_1215 spec320_1216)"
"(let-values(((s_1217)"
"(if(syntax?$1 s_1213)"
"(syntax-e$1 s_1213)"
" s_1213)))"
"(if(pair? s_1217)"
"(let-values(((for-template321_1218)"
"(let-values(((s_1220)"
"(car"
" s_1217)))"
" s_1220))"
"((spec322_1219)"
"(let-values(((s_1221)"
"(cdr"
" s_1217)))"
"(let-values(((s_1222)"
"(if(syntax?$1"
" s_1221)"
"(syntax-e$1"
" s_1221)"
" s_1221)))"
"(let-values(((flat-s_1223)"
"(to-syntax-list.1"
" s_1222)))"
"(if(not flat-s_1223)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_1214))"
"(let-values()"
" flat-s_1223)))))))"
"(values"
" for-template321_1218"
" spec322_1219))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_1214)))))"
"(values #t for-template319_1215 spec320_1216))))))"
"(rebuild-req_1123"
" req_1"
"(list* 'for-meta 0(map2(loop_1124 #t) spec320_1199)))))"
"(if(equal? tmp_1130 'for-label)"
"(let-values()"
"(let-values(((ok?_1224 for-label323_1225 spec324_1226)"
"(let-values(((s_1240) req_1))"
"(let-values(((orig-s_1241) s_1240))"
"(let-values(((for-label323_1242 spec324_1243)"
"(let-values(((s_1244)"
"(if(syntax?$1 s_1240)"
"(syntax-e$1 s_1240)"
" s_1240)))"
"(if(pair? s_1244)"
"(let-values(((for-label325_1245)"
"(let-values(((s_1247)"
"(car"
" s_1244)))"
" s_1247))"
"((spec326_1246)"
"(let-values(((s_1248)"
"(cdr"
" s_1244)))"
"(let-values(((s_1249)"
"(if(syntax?$1"
" s_1248)"
"(syntax-e$1"
" s_1248)"
" s_1248)))"
"(let-values(((flat-s_1250)"
"(to-syntax-list.1"
" s_1249)))"
"(if(not"
" flat-s_1250)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_1241))"
"(let-values()"
" flat-s_1250)))))))"
"(values"
" for-label325_1245"
" spec326_1246))"
"(raise-syntax-error$1"
" #f"
"                                                                                  \"bad syntax\""
" orig-s_1241)))))"
"(values #t for-label323_1242 spec324_1243))))))"
"(rebuild-req_1123"
" req_1"
"(list* for-label323_1225(map2(loop_1124 #t) spec324_1226)))))"
"(if(equal? tmp_1130 'just-meta)"
"(let-values()"
"(let-values(((ok?_1251"
" just-meta327_1252"
" phase-level328_1253"
" spec329_1254)"
"(let-values(((s_1271) req_1))"
"(let-values(((orig-s_1272) s_1271))"
"(let-values(((just-meta327_1273"
" phase-level328_1274"
" spec329_1275)"
"(let-values(((s_1276)"
"(if(syntax?$1 s_1271)"
"(syntax-e$1 s_1271)"
" s_1271)))"
"(if(pair? s_1276)"
"(let-values(((just-meta330_1277)"
"(let-values(((s_1280)"
"(car"
" s_1276)))"
" s_1280))"
"((phase-level331_1278"
" spec332_1279)"
"(let-values(((s_1281)"
"(cdr"
" s_1276)))"
"(let-values(((s_1282)"
"(if(syntax?$1"
" s_1281)"
"(syntax-e$1"
" s_1281)"
" s_1281)))"
"(if(pair? s_1282)"
"(let-values(((phase-level333_1283)"
"(let-values(((s_1285)"
"(car"
" s_1282)))"
" s_1285))"
"((spec334_1284)"
"(let-values(((s_1286)"
"(cdr"
" s_1282)))"
"(let-values(((s_1287)"
"(if(syntax?$1"
" s_1286)"
"(syntax-e$1"
" s_1286)"
" s_1286)))"
"(let-values(((flat-s_1288)"
"(to-syntax-list.1"
" s_1287)))"
"(if(not"
" flat-s_1288)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_1272))"
"(let-values()"
" flat-s_1288)))))))"
"(values"
" phase-level333_1283"
" spec334_1284))"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_1272))))))"
"(values"
" just-meta330_1277"
" phase-level331_1278"
" spec332_1279))"
"(raise-syntax-error$1"
" #f"
"                                                                                    \"bad syntax\""
" orig-s_1272)))))"
"(values"
" #t"
" just-meta327_1273"
" phase-level328_1274"
" spec329_1275))))))"
"(rebuild-req_1123"
" req_1"
"(list*"
" just-meta327_1252"
" phase-level328_1253"
"(map2(loop_1124 #f) spec329_1254)))))"
"(let-values()"
"(if shifted?_0"
" req_1"
"(datum->syntax$1 #f(list 'for-syntax req_1))))))))))))))))"
"((loop_1124 #f) req_0))))))"
"(define-values"
"(copy-namespace-value)"
"(lambda(m-ns_0 adjusted-sym_0 binding_0 phase-level_0 phase-shift_0 as-constant?_0)"
"(begin"
"(let-values(((i-ns_1295)"
"(let-values(((m-ns335_1298) m-ns_0)"
"((temp336_1299)(1/module-path-index-resolve(module-binding-module binding_0)))"
"((temp337_1300)(phase-(module-binding-phase binding_0) phase-level_0))"
"((temp338_1301) #t))"
"(namespace->module-namespace82.1"
" #f"
" temp338_1301"
" unsafe-undefined"
" m-ns335_1298"
" temp336_1299"
" temp337_1300))))"
"(let-values(((val_1296)"
"(namespace-get-variable"
" i-ns_1295"
"(module-binding-phase binding_0)"
"(module-binding-sym binding_0)"
"(lambda()"
"(error"
" 'namespace-require/copy"
"(format"
"(string-append"
"                            \"namespace mismatch;\\n\""
"                            \" variable not found\\n\""
"                            \"  module: ~a\\n\""
"                            \"  variable name: ~s\\n\""
"                            \"  phase level: ~s\")"
"(module-binding-module binding_0)"
"(module-binding-sym binding_0)"
"(module-binding-phase binding_0)))))))"
"(namespace-set-variable!"
" m-ns_0"
"(phase+ phase-shift_0 phase-level_0)"
" adjusted-sym_0"
" val_1296"
" as-constant?_0))))))"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" 'constant"
" top-level-bind!-id"
"(lambda(id_0 mpi_0 orig-phase_0 phase-shift_0 ns_0 sym_0 trans?_0 trans-val_0)"
"(let-values(((phase_9)(phase+ orig-phase_0 phase-shift_0)))"
"(let-values(((b_10)"
"(let-values(((mpi4_12) mpi_0)"
"((phase5_13) phase_9)"
"((sym6_14) sym_0)"
"((temp7_15)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_0))))"
"(make-module-binding22.1"
" #f"
" null"
" temp7_15"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" mpi4_12"
" phase5_13"
" sym6_14))))"
"(begin"
"(let-values(((id1_16) id_0)((b2_17) b_10)((phase3_18) phase_9))"
"(add-binding!17.1 #f #f id1_16 b2_17 phase3_18))"
"(if trans?_0"
"(let-values()(if trans-val_0(let-values()(maybe-install-free=id! trans-val_0 id_0 phase_9))(void)))"
"(let-values()(namespace-unset-transformer! ns_0 phase_9 sym_0)))))))"
" top-level-require!-id"
"(lambda(stx_0 ns_0)"
"(let-values(((reqs_21)(cdr(syntax->list$1 stx_0))))"
"(let-values(((temp8_23) #t)"
"((temp9_24) #f)"
"((reqs10_25) reqs_21)"
"((temp11_26) #f)"
"((ns12_27) ns_0)"
"((temp13_28)(namespace-phase ns_0))"
"((temp14_29)(let-values(((temp17_32) #f))(make-requires+provides8.1 #f temp17_32)))"
"((temp15_30) 'require)"
"((temp16_31) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" unsafe-undefined"
" temp16_31"
" unsafe-undefined"
" temp8_23"
" #f"
" #f"
" temp9_24"
" temp15_30"
" reqs10_25"
" temp11_26"
" ns12_27"
" temp13_28"
" temp14_29))))))"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-original-self"
" compiled-in-memory-requires"
" compiled-in-memory-provides"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literals"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys"
" compiled-in-memory-namespace-scopes"
" compiled-in-memory-purely-functional?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 13"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_0 port_0 mode_0)(write(compiled-in-memory-linklet-directory cim_0) port_0))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12)"
" #f"
" 'compiled-in-memory)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'linklet-directory)"
"(make-struct-field-accessor -ref_4 1 'original-self)"
"(make-struct-field-accessor -ref_4 2 'requires)"
"(make-struct-field-accessor -ref_4 3 'provides)"
"(make-struct-field-accessor -ref_4 4 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_4 5 'compile-time-inspector)"
"(make-struct-field-accessor -ref_4 6 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_4 7 'mpis)"
"(make-struct-field-accessor -ref_4 8 'syntax-literals)"
"(make-struct-field-accessor -ref_4 9 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 10 'post-compiled-in-memorys)"
"(make-struct-field-accessor -ref_4 11 'namespace-scopes)"
"(make-struct-field-accessor -ref_4 12 'purely-functional?))))"
"(define-values"
"(struct:namespace-scopes namespace-scopes1.1 namespace-scopes? namespace-scopes-post namespace-scopes-other)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type 'namespace-scopes #f 2 0 #f null 'prefab #f '(0 1) #f 'namespace-scopes)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'post)"
"(make-struct-field-accessor -ref_4 1 'other))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_0 original-scopes-s_0 new-ns_0)"
"(begin"
"(let-values(((old-scs-post_29 old-scs-other_30)"
"(if(namespace-scopes? original-scopes-s_0)"
"(values(namespace-scopes-post original-scopes-s_0)(namespace-scopes-other original-scopes-s_0))"
"(decode-namespace-scopes original-scopes-s_0))))"
"(let-values(((new-scs-post_31 new-scs-other_32)(extract-namespace-scopes/values new-ns_0)))"
"(syntax-swap-scopes"
"(syntax-swap-scopes s_0 old-scs-post_29 new-scs-post_31)"
" old-scs-other_30"
" new-scs-other_32))))))"
"(define-values"
"(extract-namespace-scopes/values)"
"(lambda(ns_0)"
"(begin"
"(let-values(((root-ctx_34)(namespace-get-root-expand-ctx ns_0)))"
"(let-values(((post-expansion-sc_35)(post-expansion-scope(root-expand-context-post-expansion root-ctx_34))))"
"(values"
"(seteq post-expansion-sc_35)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_34)) post-expansion-sc_35)))))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_0)"
"(begin"
"(let-values(((scs-post_37 scs-other_38)(extract-namespace-scopes/values ns_0)))"
"(namespace-scopes1.1 scs-post_37 scs-other_38)))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_0)"
"(begin"
"(let-values(((post-expansion-scs_40 other-scs_41)(extract-namespace-scopes/values ns_0)))"
"(let-values(((post-expansion-s_42)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_40))))"
"(let-values(((other-s_43)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_41))))"
"(datum->syntax$1 #f(vector post-expansion-s_42 other-s_43))))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_0)"
"(begin"
"(let-values(((vec_45)(syntax-e$1 stx_0)))"
"(values(syntax-scope-set(vector-ref vec_45 0) 0)(syntax-scope-set(vector-ref vec_45 1) 0))))))"
"(define-values"
"(namespace-scopes=?)"
"(lambda(nss1_0 nss2_0)"
"(begin"
"(if(set=?(namespace-scopes-post nss1_0)(namespace-scopes-post nss2_0))"
"(set=?(namespace-scopes-other nss1_0)(namespace-scopes-other nss2_0))"
" #f))))"
"(define-values"
"(struct:syntax-literals"
" syntax-literals1.1"
" syntax-literals?"
" syntax-literals-stxes"
" syntax-literals-count"
" set-syntax-literals-stxes!"
" set-syntax-literals-count!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax-literals"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'syntax-literals)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'stxes)"
"(make-struct-field-accessor -ref_4 1 'count)"
"(make-struct-field-mutator -set!_5 0 'stxes)"
"(make-struct-field-mutator -set!_5 1 'count))))"
"(define-values"
"(struct:header"
" header2.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type 'header #f 8 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_29 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_29 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_29 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_29 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_29 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_29 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_29 7 'syntax-literals)"
"(make-struct-field-mutator -set!_30 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_30 5 'require-vars-in-order))))"
"(define-values"
"(struct:variable-use variable-use3.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_81 make-_82 ?_83 -ref_84 -set!_85)"
"(let-values()"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))))"
"(values"
" struct:_81"
" make-_82"
" ?_83"
"(make-struct-field-accessor -ref_84 0 'module-use)"
"(make-struct-field-accessor -ref_84 1 'sym))))"
"(define-values(make-syntax-literals)(lambda()(begin(syntax-literals1.1 null 0))))"
"(define-values"
"(make-header)"
"(lambda(mpis_0 syntax-literals_0)"
"(begin"
"(header2.1 mpis_0(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq) syntax-literals_0))))"
"(define-values(make-variable-uses)(lambda()(begin(make-hash))))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header-or-literals_0 q_0)"
"(begin"
"(let-values(((sl_110)"
"(if(header? header-or-literals_0)"
"(header-syntax-literals header-or-literals_0)"
" header-or-literals_0)))"
"(let-values(((pos_111)(syntax-literals-count sl_110)))"
"(begin"
"(set-syntax-literals-count! sl_110(add1 pos_111))"
"(set-syntax-literals-stxes! sl_110(cons q_0(syntax-literals-stxes sl_110)))"
" pos_111))))))"
"(define-values"
"(add-syntax-literals!)"
"(lambda(sl_0 vec_0)"
"(begin"
"(let-values(((pos_114)(syntax-literals-count sl_0)))"
"(begin"
"(let-values(((vec_115 len_116)"
"(let-values(((vec_117) vec_0))"
"(begin(check-vector vec_117)(values vec_117(unsafe-vector-length vec_117))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_118)"
"(lambda(pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_116)"
"(let-values(((e_120)(unsafe-vector-ref vec_115 pos_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(add-syntax-literal! sl_0 e_120))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_118(unsafe-fx+ 1 pos_0))(values))))"
"(values))))))"
" for-loop_118)"
" 0)))"
"(void)"
"(cons pos_114(vector-length vec_0)))))))"
"(define-values(syntax-literals-empty?)(lambda(sl_0)(begin(null?(syntax-literals-stxes sl_0)))))"
"(define-values"
"(generate-lazy-syntax-literals!9.1)"
"(lambda(skip-deserialize?4_0 sl6_0 mpis7_0 self8_0)"
"(begin"
" 'generate-lazy-syntax-literals!9"
"(let-values(((sl_126) sl6_0))"
"(let-values(((mpis_127) mpis7_0))"
"(let-values(((self_128) self8_0))"
"(let-values(((skip-deserialize?_129) skip-deserialize?4_0))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list syntax-literals-id)"
"(list* 'make-vector(syntax-literals-count sl_126) '(#f)))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(pos)"
"(list"
" 'let-values"
"(list(list '(ready-stx)(list* 'unsafe-vector*-ref syntax-literals-id '(pos))))"
"(list"
" 'if"
" 'ready-stx"
" 'ready-stx"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_129"
" null"
"(list"
"(list"
" 'if"
"(list* 'unsafe-vector*-ref deserialized-syntax-vector-id '(0))"
" '(void)"
"(list deserialize-syntax-id bulk-binding-registry-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'unsafe-vector*-ref deserialized-syntax-vector-id '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_127 self_128)"
" self-id"
" inspector-id)))"
"(list"
" 'begin"
"(list* 'vector-cas! syntax-literals-id '(pos #f stx))"
"(list* 'unsafe-vector*-ref syntax-literals-id '(pos))))))))))))))))))))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(sl_0 mpis_0)"
"(begin"
"(if(syntax-literals-empty? sl_0)"
"(let-values()(list(list* 'define-values(list deserialize-syntax-id) '(#f))))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
"(list bulk-binding-registry-id)"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(list"
" 'let-values"
"(list(list*(list inspector-id) '(#f)))"
"(let-values(((temp25_152)"
"(vector->immutable-vector(list->vector(reverse$1(syntax-literals-stxes sl_0)))))"
"((mpis26_153) mpis_0))"
"(generate-deserialize6.1 #t temp25_152 mpis26_153))))"
"(list* 'set! deserialize-syntax-id '(#f)))))))))))"
"(define-values(generate-lazy-syntax-literal-lookup)(lambda(pos_0)(begin(list get-syntax-literal!-id pos_0))))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(sl_0 mpis_0 base-phase_0 self_0 ns_0)"
"(begin"
"(if(syntax-literals-empty? sl_0)"
"(let-values() #f)"
"(let-values()"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_160)(cons(encode-namespace-scopes ns_0)(reverse$1(syntax-literals-stxes sl_0))))"
"((mpis28_161) mpis_0))"
"(generate-deserialize6.1 #t temp27_160 mpis28_161))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_0 dest-phase-id))"
"(add-module-path-index! mpis_0 self_0)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '((cdr ns+stxss)))))))))))"
"(define-values"
"(generate-eager-syntax-literal-lookup)"
"(lambda(pos_0)(begin(list 'unsafe-vector*-ref syntax-literals-id pos_0))))"
"(define-values"
"(syntax-literals-as-vector)"
"(lambda(sl_0)(begin(list->vector(reverse$1(syntax-literals-stxes sl_0))))))"
"(define-values"
"(select-fresh)"
"(lambda(sym_0 header_0)"
"(begin"
"(if(symbol-conflicts? sym_0 header_0)"
"((letrec-values(((loop_168)"
"(lambda(pos_0)"
"(begin"
" 'loop"
"                              (let-values (((new-sym_170) (string->symbol (format \"~a/~a\" pos_0 sym_0))))"
"(if(symbol-conflicts? new-sym_170 header_0)(loop_168(add1 pos_0)) new-sym_170))))))"
" loop_168)"
" 1)"
" sym_0))))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_0 header_0)"
"(begin"
"(let-values(((or-part_173)(built-in-symbol? sym_0)))"
"(if or-part_173 or-part_173(hash-ref(header-define-and-import-syms header_0) sym_0 #f))))))"
"(define-values"
"(register-required-variable-use!19.1)"
"(lambda(defined?12_0 header14_0 mpi15_0 phase16_0 sym17_0 extra-inspector18_0)"
"(begin"
" 'register-required-variable-use!19"
"(let-values(((header_180) header14_0))"
"(let-values(((mpi_181) mpi15_0))"
"(let-values(((phase_182) phase16_0))"
"(let-values(((sym_183) sym17_0))"
"(let-values(((extra-inspector_184) extra-inspector18_0))"
"(let-values(((defined?_185) defined?12_0))"
"(let-values()"
"(let-values(((key_186)(variable-use3.1(module-use1.1 mpi_181 phase_182) sym_183)))"
"(let-values(((variable-uses_187)(header-require-var-to-import-sym header_180)))"
"(let-values(((prev-var-sym_188)(hash-ref variable-uses_187 key_186 #f)))"
"(let-values(((var-sym_189)"
"(let-values(((or-part_190) prev-var-sym_188))"
"(if or-part_190"
" or-part_190"
"(let-values(((sym_191)"
"(select-fresh(variable-use-sym key_186) header_180)))"
"(begin"
"(hash-set! variable-uses_187 key_186 sym_191)"
"(set-header-require-vars-in-order!"
" header_180"
"(cons key_186(header-require-vars-in-order header_180)))"
"(hash-set!"
"(header-define-and-import-syms header_180)"
" sym_191"
"(if defined?_185 'defined 'required))"
" sym_191))))))"
"(begin"
"(if(if extra-inspector_184(not prev-var-sym_188) #f)"
"(let-values()"
"(let-values(((extra-inspectors_192)"
"(header-import-sym-to-extra-inspectors header_180)))"
"(hash-update!"
" extra-inspectors_192"
" var-sym_189"
"(lambda(s_0)(set-add s_0 extra-inspector_184))"
" '#hasheq())))"
"(void))"
" var-sym_189)))))))))))))))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_0 def-sym_0)(begin(hash-set!(header-define-and-import-syms header_0) def-sym_0 'defined))))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_0 var-sym_0)"
"(begin(eq? 'required(hash-ref(header-define-and-import-syms header_0) var-sym_0 #f)))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_0 phase_0 cctx_0 cross-linklet-inlining?_0)"
"(begin"
"(let-values(((mod-use-ht_228 link-mod-uses_229)"
"(let-values(((lst_230)(header-require-vars-in-order header_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_230)))"
"((letrec-values(((for-loop_231)"
"(lambda(ht_0 link-mod-uses_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((vu_235)(unsafe-car lst_0))"
"((rest_236)(unsafe-cdr lst_0)))"
"(let-values(((ht_237 link-mod-uses_238)"
"(let-values(((ht_239) ht_0)"
"((link-mod-uses_240) link-mod-uses_0))"
"(let-values(((ht_241 link-mod-uses_242)"
"(let-values()"
"(let-values(((mu_243)"
"(variable-use-module-use"
" vu_235)))"
"(if(let-values(((or-part_244)"
"(hash-ref"
" ht_239"
" mu_243"
" #f)))"
"(if or-part_244"
" or-part_244"
"(let-values(((or-part_245)"
"(eq?"
"(module-use-module"
" mu_243)"
"(compile-context-self"
" cctx_0))))"
"(if or-part_245"
" or-part_245"
"(top-level-module-path-index?"
"(module-use-module"
" mu_243))))))"
"(values ht_239 link-mod-uses_240)"
"(values"
"(hash-set ht_239 mu_243 #t)"
"(cons"
" mu_243"
" link-mod-uses_240)))))))"
"(values ht_241 link-mod-uses_242)))))"
"(if(not #f)"
"(for-loop_231 ht_237 link-mod-uses_238 rest_236)"
"(values ht_237 link-mod-uses_238))))"
"(values ht_0 link-mod-uses_0))))))"
" for-loop_231)"
" '#hash()"
" null"
" lst_230)))))"
"(values"
" link-mod-uses_229"
"(reverse$1"
"(let-values(((lst_246) link-mod-uses_229))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_246)))"
"((letrec-values(((for-loop_247)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((mu_250)(unsafe-car lst_0))((rest_251)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_252)"
"(let-values(((fold-var_253) fold-var_0))"
"(let-values(((fold-var_254)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_255)"
"(header-require-vars-in-order"
" header_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_255)))"
"((letrec-values(((for-loop_256)"
"(lambda(fold-var_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair? lst_1)"
"(let-values(((vu_259)"
"(unsafe-car"
" lst_1))"
"((rest_260)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_261)"
"(let-values(((fold-var_262)"
" fold-var_1))"
"(if(equal?"
" mu_250"
"(variable-use-module-use"
" vu_259))"
"(let-values(((fold-var_263)"
" fold-var_262))"
"(let-values(((fold-var_264)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_265)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_0)"
" vu_259)))"
"(let-values(((ex-sym_266)"
"(variable-use-sym"
" vu_259)))"
"(if(eq?"
" var-sym_265"
" ex-sym_266)"
" var-sym_265"
"(list"
" ex-sym_266"
" var-sym_265)))))"
" fold-var_263))))"
"(values"
" fold-var_264)))"
" fold-var_262))))"
"(if(not #f)"
"(for-loop_256"
" fold-var_261"
" rest_260)"
" fold-var_261)))"
" fold-var_1)))))"
" for-loop_256)"
" null"
" lst_255)))))"
" fold-var_253))))"
"(values fold-var_254)))))"
"(if(not #f)(for-loop_247 fold-var_252 rest_251) fold-var_252)))"
" fold-var_0)))))"
" for-loop_247)"
" null"
" lst_246))))"
"(reverse$1"
"(let-values(((lst_267) link-mod-uses_229))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_267)))"
"((letrec-values(((for-loop_268)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((mu_271)(unsafe-car lst_0))((rest_272)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_273)"
"(let-values(((fold-var_274) fold-var_0))"
"(let-values(((fold-var_275)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_276)"
"(let-values(((lst_277)"
"(header-require-vars-in-order"
" header_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_277)))"
"((letrec-values(((for-loop_278)"
"(lambda(table_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((vu_281)"
"(unsafe-car"
" lst_1))"
"((rest_282)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((table_283)"
"(let-values(((table_284)"
" table_0))"
"(if(equal?"
" mu_271"
"(variable-use-module-use"
" vu_281))"
"(let-values(((var-sym_285)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_0)"
" vu_281)))"
"(begin"
" #t"
"((letrec-values(((for-loop_286)"
"(lambda(table_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_288)"
"(let-values(((extra-inspectors_289)"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_0)"
" var-sym_285"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_290)"
"(lambda(table_2)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_292)"
"(let-values(((table_293)"
" table_2))"
"(if(let-values(((or-part_294)"
" extra-inspectors_289))"
"(if or-part_294"
" or-part_294"
" cross-linklet-inlining?_0))"
"(let-values(((table_295)"
" table_293))"
"(let-values(((table_296)"
"(let-values()"
"(let-values(((key_297"
" val_298)"
"(let-values()"
"(values"
" var-sym_285"
" extra-inspectors_289))))"
"(hash-set"
" table_295"
" key_297"
" val_298)))))"
"(values"
" table_296)))"
" table_293))))"
" table_292))))))"
" for-loop_290)"
" table_1)))))"
" table_288))))))"
" for-loop_286)"
" table_284)))"
" table_284))))"
"(if(not"
" #f)"
"(for-loop_278"
" table_283"
" rest_282)"
" table_283)))"
" table_0)))))"
" for-loop_278)"
" '#hash()"
" lst_277)))))"
"(if(hash-count extra-inspectorss_276)"
" extra-inspectorss_276"
" #f)))"
" fold-var_274))))"
"(values fold-var_275)))))"
"(if(not #f)(for-loop_268 fold-var_273 rest_272) fold-var_273)))"
" fold-var_0)))))"
" for-loop_268)"
" null"
" lst_267))))"
"(reverse$1"
"(let-values(((lst_299)(header-require-vars-in-order header_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_299)))"
"((letrec-values(((for-loop_300)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((vu_303)(unsafe-car lst_0))((rest_304)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_305)"
"(let-values(((fold-var_306) fold-var_0))"
"(if(let-values(((mod_307)"
"(module-use-module"
"(variable-use-module-use vu_303))))"
"(let-values(((or-part_308)"
"(eq?"
" mod_307"
"(compile-context-self cctx_0))))"
"(if or-part_308"
" or-part_308"
"(top-level-module-path-index? mod_307))))"
"(let-values(((fold-var_309) fold-var_306))"
"(let-values(((fold-var_310)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_311)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_0)"
" vu_303)))"
"(let-values(((ex-sym_312)"
"(variable-use-sym"
" vu_303)))"
"(if(eq? var-sym_311 ex-sym_312)"
" var-sym_311"
"(list var-sym_311 ex-sym_312)))))"
" fold-var_309))))"
"(values fold-var_310)))"
" fold-var_306))))"
"(if(not #f)(for-loop_300 fold-var_305 rest_304) fold-var_305)))"
" fold-var_0)))))"
" for-loop_300)"
" null"
" lst_299)))))))))"
"(define-values"
"(instance-imports)"
"(list ns-id phase-shift-id self-id inspector-id bulk-binding-registry-id set-transformer!-id))"
"(define-values"
"(make-instance-instance13.1)"
"(lambda(bulk-binding-registry5_0 inspector4_0 namespace1_0 phase-shift2_0 self3_0 set-transformer!6_0)"
"(begin"
" 'make-instance-instance13"
"(let-values(((ns_19) namespace1_0))"
"(let-values(((phase-shift_20) phase-shift2_0))"
"(let-values(((self_21) self3_0))"
"(let-values(((inspector_22) inspector4_0))"
"(let-values(((bulk-binding-registry_23) bulk-binding-registry5_0))"
"(let-values(((set-transformer!_24) set-transformer!6_0))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" 'constant"
" ns-id"
" ns_19"
" phase-shift-id"
" phase-shift_20"
" self-id"
" self_21"
" inspector-id"
" inspector_22"
" bulk-binding-registry-id"
" bulk-binding-registry_23"
" set-transformer!-id"
" set-transformer!_24)))))))))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lambda(set-transformer!16_0)"
"(begin"
" 'make-module-body-instance-instance18"
"(let-values(((set-transformer!_56) set-transformer!16_0))"
"(let-values()(1/make-instance 'body-instance #f 'constant set-transformer!-id set-transformer!_56))))))"
"(define-values"
"(empty-syntax-literals-instance)"
"(1/make-instance 'empty-stx #f 'constant get-syntax-literal!-id(lambda(pos_0) #f) 'get-encoded-root-expand-ctx #f))"
"(define-values"
"(empty-module-body-instance)"
"(let-values(((temp21_67)(lambda(name_0 val_0)(void))))(make-module-body-instance-instance18.1 temp21_67)))"
"(define-values"
"(empty-top-syntax-literal-instance)"
"(1/make-instance 'top-syntax-literal #f 'constant mpi-vector-id #f syntax-literals-id #f))"
"(define-values"
"(empty-syntax-literals-data-instance)"
"(1/make-instance 'empty-stx-data #f 'constant deserialized-syntax-vector-id(vector) deserialize-syntax-id void))"
"(define-values"
"(empty-instance-instance)"
"(let-values(((temp22_71) #f)((temp23_72) #f)((temp24_73) #f)((temp25_74) #f)((temp26_75) #f)((temp27_76) #f))"
"(make-instance-instance13.1 temp26_75 temp25_74 temp22_71 temp23_72 temp24_73 temp27_76)))"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_0 dest-phase2_0 inspector5_0 namespace1_0 self3_0)"
"(begin"
" 'make-eager-instance-instance11"
"(let-values(((ns_13) namespace1_0))"
"(let-values(((dest-phase_14) dest-phase2_0))"
"(let-values(((self_15) self3_0))"
"(let-values(((bulk-binding-registry_16) bulk-binding-registry4_0))"
"(let-values(((inspector_17) inspector5_0))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" 'constant"
" ns-id"
" ns_13"
" dest-phase-id"
" dest-phase_14"
" self-id"
" self_15"
" bulk-binding-registry-id"
" bulk-binding-registry_16"
" inspector-id"
" inspector_17"
" 'swap-top-level-scopes"
" swap-top-level-scopes))))))))))"
"(define-values"
"(empty-eager-instance-instance)"
"(let-values(((temp14_43) #f)((temp15_44) #f)((temp16_45) #f)((temp17_46) #f)((temp18_47) #f))"
"(make-eager-instance-instance11.1 temp17_46 temp15_44 temp18_47 temp14_43 temp16_45)))"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_0)"
"(begin"
"(let-values(((or-part_2)(number? datum_0)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(boolean? datum_0)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(string? datum_0)))(if or-part_4 or-part_4(bytes? datum_0))))))))))"
"(define-values(datum->syntax$3) datum->syntax)"
"(define-values(syntax-property$2) syntax-property)"
"(define-values(syntax-e$2) syntax-e)"
"(define-values(1/syntax?) syntax?)"
"(define-values(correlated?)(lambda(e_0)(begin(1/syntax? e_0))))"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated3_307)"
"(lambda(d2_0 srcloc1_0)"
"(begin"
" 'datum->correlated3"
"(let-values(((d_310) d2_0))"
"(let-values(((srcloc_311) srcloc1_0))(let-values()(datum->syntax$3 #f d_310 srcloc_311))))))))"
"(case-lambda"
"((d_0)(begin(datum->correlated3_307 d_0 #f)))"
"((d_0 srcloc1_0)(datum->correlated3_307 d_0 srcloc1_0)))))"
"(define-values(correlated-e)(lambda(e_0)(begin(if(1/syntax? e_0)(syntax-e$2 e_0) e_0))))"
"(define-values(correlated-cadr)(lambda(e_0)(begin(car(correlated-e(cdr(correlated-e e_0)))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_0)(begin(let-values(((l_318)(correlated-e e_0)))(if(list? l_318)(length l_318) #f)))))"
"(define-values"
"(correlated->list)"
"(lambda(e_0)"
"(begin"
"((letrec-values(((loop_320)"
"(lambda(e_1)"
"(begin"
" 'loop"
"(if(list? e_1)"
"(let-values() e_1)"
"(if(pair? e_1)"
"(let-values()(cons(car e_1)(loop_320(cdr e_1))))"
"(if(null? e_1)"
"(let-values() null)"
"(if(1/syntax? e_1)"
"(let-values()(loop_320(syntax-e$2 e_1)))"
"                                    (let-values () (error 'correlated->list \"not a list\"))))))))))"
" loop_320)"
" e_0))))"
"(define-values"
"(correlated-property)"
"(case-lambda((e_0 k_0)(begin(syntax-property$2 e_0 k_0)))((e_0 k_0 v_0)(syntax-property$2 e_0 k_0 v_0))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_0)"
"(begin"
" 'to-syntax-list"
"(if(list? s_0)"
"(let-values() s_0)"
"(if(pair? s_0)"
"(let-values()(let-values(((r_350)(to-syntax-list.1$1(cdr s_0))))(if r_350(cons(car s_0) r_350) #f)))"
"(if(1/syntax? s_0)(let-values()(to-syntax-list.1$1(syntax-e$2 s_0)))(let-values() #f)))))))"
"(define-values"
"(srcloc->vector)"
"(lambda(s_0)"
"(begin"
"(if s_0"
"(vector(srcloc-source s_0)(srcloc-line s_0)(srcloc-column s_0)(srcloc-position s_0)(srcloc-span s_0))"
" #f))))"
"(define-values(keep-source-locations?) #f)"
"(define-values"
"(correlate*)"
"(lambda(stx_0 s-exp_0)"
"(begin(if(syntax-srcloc stx_0)(datum->correlated s-exp_0(srcloc->vector(syntax-srcloc stx_0))) s-exp_0))))"
"(define-values(correlate~)(lambda(stx_0 s-exp_0)(begin s-exp_0)))"
"(define-values"
"(correlate/app)"
"(lambda(stx_0 s-exp_0)(begin(if keep-source-locations?(correlate* stx_0 s-exp_0)(correlate~ stx_0 s-exp_0)))))"
"(define-values(->correlated)(lambda(s_0)(begin(datum->correlated s_0 #f))))"
"(define-values(compile-keep-source-locations!)(lambda(on?_0)(begin(set! keep-source-locations? on?_0))))"
"(define-values"
"(compile$2)"
"(let-values(((compile5_6)"
"(lambda(p3_0 cctx4_0 name1_0 result-used?2_0)"
"(begin"
" 'compile5"
"(let-values(((p_11) p3_0))"
"(let-values(((cctx_12) cctx4_0))"
"(let-values(((name_13) name1_0))"
"(let-values(((result-used?_14) result-used?2_0))"
"(let-values()"
"(let-values(((compile_15)"
"(lambda(p_0 name_0 result-used?_0)"
"(begin 'compile(compile$2 p_0 cctx_12 name_0 result-used?_0)))))"
"(let-values(((s_19)(parsed-s p_11)))"
"(if(parsed-id? p_11)"
"(let-values()"
"(let-values(((p25_20) p_11)((cctx26_21) cctx_12))"
"(compile-identifier22.1 #f #f p25_20 cctx26_21)))"
"(if(parsed-lambda? p_11)"
"(let-values()"
"(if result-used?_14"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_19"
"(list*"
" 'lambda"
"(compile-lambda"
"(parsed-lambda-keys p_11)"
"(parsed-lambda-body p_11)"
" cctx_12)))"
" name_13"
" s_19))"
"(let-values()(correlate~ s_19 ''unused-lambda))))"
"(if(parsed-case-lambda? p_11)"
"(let-values()"
"(if result-used?_14"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_19"
"(list*"
" 'case-lambda"
"(reverse$1"
"(let-values(((lst_22)(parsed-case-lambda-clauses p_11)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_22)))"
"((letrec-values(((for-loop_23)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((clause_26)"
"(unsafe-car lst_0))"
"((rest_27)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_28)"
"(let-values(((fold-var_29)"
" fold-var_0))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
"(car"
" clause_26)"
"(cadr"
" clause_26)"
" cctx_12))"
" fold-var_29))))"
"(values"
" fold-var_30)))))"
"(if(not #f)"
"(for-loop_23 fold-var_28 rest_27)"
" fold-var_28)))"
" fold-var_0)))))"
" for-loop_23)"
" null"
" lst_22))))))"
" name_13"
" s_19))"
"(let-values()(correlate~ s_19 ''unused-case-lambda))))"
"(if(parsed-app? p_11)"
"(let-values()"
"(let-values(((rands_31)(parsed-app-rands p_11)))"
"(correlate/app"
" s_19"
"(cons"
"(compile_15(parsed-app-rator p_11) #f #t)"
"(reverse$1"
"(let-values(((lst_32) rands_31))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((r_36)(unsafe-car lst_0))"
"((rest_37)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39)"
" fold-var_0))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_15"
" r_36"
" #f"
" #t))"
" fold-var_39))))"
"(values"
" fold-var_40)))))"
"(if(not #f)"
"(for-loop_33 fold-var_38 rest_37)"
" fold-var_38)))"
" fold-var_0)))))"
" for-loop_33)"
" null"
" lst_32))))))))"
"(if(parsed-if? p_11)"
"(let-values()"
"(let-values(((tst-e_41)(compile_15(parsed-if-tst p_11) #f #f)))"
"(if(eq?(correlated-e tst-e_41) #t)"
"(let-values()"
"(compile_15(parsed-if-thn p_11) name_13 result-used?_14))"
"(if(eq?(correlated-e tst-e_41) #f)"
"(let-values()"
"(compile_15(parsed-if-els p_11) name_13 result-used?_14))"
"(let-values()"
"(correlate~"
" s_19"
"(list"
" 'if"
" tst-e_41"
"(compile_15(parsed-if-thn p_11) name_13 result-used?_14)"
"(compile_15(parsed-if-els p_11) name_13 result-used?_14))))))))"
"(if(parsed-with-continuation-mark? p_11)"
"(let-values()"
"(correlate~"
" s_19"
"(list"
" 'with-continuation-mark"
"(compile_15(parsed-with-continuation-mark-key p_11) #f #t)"
"(compile_15(parsed-with-continuation-mark-val p_11) #f #t)"
"(compile_15"
"(parsed-with-continuation-mark-body p_11)"
" name_13"
" result-used?_14))))"
"(if(parsed-begin0? p_11)"
"(let-values()"
"(correlate~"
" s_19"
"(list*"
" 'begin0"
"(compile_15(car(parsed-begin0-body p_11)) name_13 result-used?_14)"
"(reverse$1"
"(let-values(((lst_42)(cdr(parsed-begin0-body p_11))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_46)"
"(unsafe-car lst_0))"
"((rest_47)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_48)"
"(let-values(((fold-var_49)"
" fold-var_0))"
"(let-values(((fold-var_50)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_15"
" e_46"
" #f"
" #f))"
" fold-var_49))))"
"(values"
" fold-var_50)))))"
"(if(not #f)"
"(for-loop_43 fold-var_48 rest_47)"
" fold-var_48)))"
" fold-var_0)))))"
" for-loop_43)"
" null"
" lst_42)))))))"
"(if(parsed-begin? p_11)"
"(let-values()"
"(correlate~"
" s_19"
"(compile-begin"
"(parsed-begin-body p_11)"
" cctx_12"
" name_13"
" result-used?_14)))"
"(if(parsed-set!? p_11)"
"(let-values()"
"(correlate~"
" s_19"
"(let-values(((temp27_52)(parsed-set!-id p_11))"
"((cctx28_53) cctx_12)"
"((temp29_54) #t)"
"((temp30_55)"
"(compile_15"
"(parsed-set!-rhs p_11)"
"(parsed-s(parsed-set!-id p_11))"
" #t)))"
"(compile-identifier22.1"
" temp30_55"
" temp29_54"
" temp27_52"
" cctx28_53))))"
"(if(parsed-let-values? p_11)"
"(let-values()"
"(let-values(((p31_57) p_11)"
"((cctx32_58) cctx_12)"
"((name33_59) name_13)"
"((temp34_60) #f)"
"((result-used?35_61) result-used?_14))"
"(compile-let13.1"
" temp34_60"
" p31_57"
" cctx32_58"
" name33_59"
" result-used?35_61)))"
"(if(parsed-letrec-values? p_11)"
"(let-values()"
"(let-values(((p36_63) p_11)"
"((cctx37_64) cctx_12)"
"((name38_65) name_13)"
"((temp39_66) #t)"
"((result-used?40_67) result-used?_14))"
"(compile-let13.1"
" temp39_66"
" p36_63"
" cctx37_64"
" name38_65"
" result-used?40_67)))"
"(if(parsed-quote? p_11)"
"(let-values()"
"(let-values(((datum_68)(parsed-quote-datum p_11)))"
"(if(self-quoting-in-linklet? datum_68)"
"(let-values()(correlate~ s_19 datum_68))"
"(let-values()"
"(correlate~ s_19(list 'quote datum_68))))))"
"(if(parsed-quote-syntax? p_11)"
"(let-values()"
"(if result-used?_14"
"(compile-quote-syntax"
"(parsed-quote-syntax-datum p_11)"
" cctx_12)"
"(correlate~ s_19(list 'quote(syntax->datum$1 s_19)))))"
"(if(parsed-#%variable-reference? p_11)"
"(let-values()"
"(let-values(((id_69)"
"(parsed-#%variable-reference-id p_11)))"
"(correlate~"
" s_19"
"(if id_69"
"(list"
" '#%variable-reference"
"(let-values(((id41_70) id_69)"
"((cctx42_71) cctx_12))"
"(compile-identifier22.1"
" #f"
" #f"
" id41_70"
" cctx42_71)))"
" '(#%variable-reference)))))"
"(let-values()"
"(error"
"                                                                 \"unrecognized parsed form:\""
" p_11)))))))))))))))))))))))))))"
"(case-lambda"
"((p_0 cctx_0)(begin 'compile(compile5_6 p_0 cctx_0 #f #t)))"
"((p_0 cctx_0 name_0 result-used?2_0)(compile5_6 p_0 cctx_0 name_0 result-used?2_0))"
"((p_0 cctx_0 name1_0)(compile5_6 p_0 cctx_0 name1_0 #t)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_0 bodys_0 cctx_0)(begin(list formals_0(compile-sequence bodys_0 cctx_0 #f #t)))))"
"(define-values"
"(compile-sequence)"
"(lambda(bodys_0 cctx_0 name_0 result-used?_0)"
"(begin"
"(if(null?(cdr bodys_0))"
"(compile$2(car bodys_0) cctx_0 name_0 result-used?_0)"
"(compile-begin bodys_0 cctx_0 name_0 result-used?_0)))))"
"(define-values"
"(compile-begin)"
"(lambda(es_0 cctx_0 name_0 result-used?_0)"
"(begin"
"(let-values(((used-pos_92)(sub1(length es_0))))"
"(list*"
" 'begin"
"(reverse$1"
"(let-values(((lst_93) es_0)((start_94) 0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_93)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_94)))"
"((letrec-values(((for-loop_95)"
"(lambda(fold-var_0 lst_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0) #t #f)"
"(let-values(((e_99)(unsafe-car lst_0))"
"((rest_100)(unsafe-cdr lst_0))"
"((i_101) pos_0))"
"(let-values(((fold-var_102)"
"(let-values(((fold-var_103) fold-var_0))"
"(let-values(((fold-var_104)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((used?_105)"
"(= i_101 used-pos_92)))"
"(compile$2"
" e_99"
" cctx_0"
"(if used?_105 name_0 #f)"
"(if used?_105 result-used?_0 #f))))"
" fold-var_103))))"
"(values fold-var_104)))))"
"(if(not #f)(for-loop_95 fold-var_102 rest_100(+ pos_0 1)) fold-var_102)))"
" fold-var_0)))))"
" for-loop_95)"
" null"
" lst_93"
" start_94)))))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_0 inferred-name_0 orig-s_0)"
"(begin"
"(letrec-values(((simplify-name_109)"
"(lambda(v_0)"
"(begin"
" 'simplify-name"
"(if(pair? v_0)"
"(let-values()"
"(let-values(((n1_114)(simplify-name_109(car v_0))))"
"(let-values(((n2_115)(simplify-name_109(cdr v_0))))"
"(if(eq? n1_114 n2_115) n1_114 v_0))))"
"(let-values() v_0))))))"
"(let-values(((name_110)"
"(let-values(((or-part_116)"
"(let-values(((v_117)"
"(simplify-name_109(syntax-property$1 orig-s_0 'inferred-name))))"
"(if(let-values(((or-part_118)(symbol? v_117)))"
"(if or-part_118"
" or-part_118"
"(let-values(((or-part_119)(syntax?$1 v_117)))"
"(if or-part_119 or-part_119(void? v_117)))))"
" v_117"
" #f))))"
"(if or-part_116 or-part_116 inferred-name_0))))"
"(let-values(((named-s_111)"
"(if name_110"
"(correlated-property"
"(->correlated s_0)"
" 'inferred-name"
"(if(syntax?$1 name_110)(syntax-e$1 name_110) name_110))"
" s_0)))"
"(let-values(((as-method_112)(syntax-property$1 orig-s_0 'method-arity-error)))"
"(if as-method_112"
"(correlated-property(->correlated named-s_111) 'method-arity-error as-method_112)"
" named-s_111))))))))"
"(define-values"
"(compile-let13.1)"
"(lambda(rec?7_0 p9_0 cctx10_0 name11_0 result-used?12_0)"
"(begin"
" 'compile-let13"
"(let-values(((p_135) p9_0))"
"(let-values(((cctx_136) cctx10_0))"
"(let-values(((name_137) name11_0))"
"(let-values(((rec?_138) rec?7_0))"
"(let-values(((result-used?_139) result-used?12_0))"
"(let-values()"
"(let-values(((body_140)(parsed-let_-values-body p_135)))"
"(correlate~"
"(parsed-s p_135)"
"(list"
"(if rec?_138 'letrec-values 'let-values)"
"(reverse$1"
"(let-values(((lst_141)(parsed-let_-values-clauses p_135))"
"((lst_142)(parsed-let_-values-idss p_135)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_141)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_142)))"
"((letrec-values(((for-loop_143)"
"(lambda(fold-var_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((clause_147)(unsafe-car lst_0))"
"((rest_148)(unsafe-cdr lst_0))"
"((ids_149)(unsafe-car lst_1))"
"((rest_150)(unsafe-cdr lst_1)))"
"(let-values(((fold-var_151)"
"(let-values(((fold-var_152) fold-var_0))"
"(let-values(((fold-var_153)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(if rec?_138"
"(reverse$1"
"(let-values(((lst_154)"
"(car"
" clause_147))"
"((lst_155)"
" ids_149))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_154)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_155)))"
"((letrec-values(((for-loop_156)"
"(lambda(fold-var_1"
" lst_2"
" lst_3)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_2)"
"(pair?"
" lst_3)"
" #f)"
"(let-values(((sym_160)"
"(unsafe-car"
" lst_2))"
"((rest_161)"
"(unsafe-cdr"
" lst_2))"
"((id_162)"
"(unsafe-car"
" lst_3))"
"((rest_163)"
"(unsafe-cdr"
" lst_3)))"
"(let-values(((fold-var_164)"
"(let-values(((fold-var_165)"
" fold-var_1))"
"(let-values(((fold-var_166)"
"(let-values()"
"(cons"
"(let-values()"
"(add-undefined-error-name-property"
" sym_160"
" id_162))"
" fold-var_165))))"
"(values"
" fold-var_166)))))"
"(if(not"
" #f)"
"(for-loop_156"
" fold-var_164"
" rest_161"
" rest_163)"
" fold-var_164)))"
" fold-var_1)))))"
" for-loop_156)"
" null"
" lst_154"
" lst_155))))"
"(car clause_147))"
"(compile$2"
"(cadr clause_147)"
" cctx_136"
"(if(= 1(length ids_149))"
"(car ids_149)"
" #f))))"
" fold-var_152))))"
"(values fold-var_153)))))"
"(if(not #f)"
"(for-loop_143 fold-var_151 rest_148 rest_150)"
" fold-var_151)))"
" fold-var_0)))))"
" for-loop_143)"
" null"
" lst_141"
" lst_142))))"
"(compile-sequence body_140 cctx_136 name_137 result-used?_139)))))))))))))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_0 orig-id_0)"
"(begin"
"(let-values(((id_185)(correlate~ orig-id_0 sym_0)))"
"(correlated-property"
"(->correlated id_185)"
" 'undefined-error-name"
"(let-values(((or-part_186)(syntax-property$1 orig-id_0 'undefined-error-name)))"
"(if or-part_186 or-part_186(syntax-e$1 orig-id_0))))))))"
"(define-values"
"(compile-identifier22.1)"
"(lambda(set-to17_0 set-to?16_0 p20_0 cctx21_0)"
"(begin"
" 'compile-identifier22"
"(let-values(((p_191) p20_0))"
"(let-values(((cctx_192) cctx21_0))"
"(let-values(((set-to?_193) set-to?16_0))"
"(let-values(((rhs_194) set-to17_0))"
"(let-values()"
"(let-values(((normal-b_195)(parsed-id-binding p_191)))"
"(let-values(((b_196)"
"(let-values(((or-part_198) normal-b_195))"
"(if or-part_198"
" or-part_198"
"(let-values(((temp43_199)(compile-context-self cctx_192))"
"((temp44_200)(compile-context-phase cctx_192))"
"((temp45_201)(syntax-e$1(parsed-s p_191))))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" temp43_199"
" temp44_200"
" temp45_201))))))"
"(let-values(((sym_197)"
"(if(local-binding? b_196)"
"(let-values()(local-binding-key b_196))"
"(if(module-binding? b_196)"
"(let-values()"
"(let-values(((mpi_202)"
"(if(parsed-top-id? p_191)"
"(compile-context-self cctx_192)"
"(module-binding-module b_196))))"
"(if(parsed-primitive-id? p_191)"
"(let-values()"
"(begin"
"(if(zero?(module-binding-phase b_196))"
"(void)"
"(let-values()"
"                                                    (error \"internal error: non-zero phase for a primitive\")))"
"(if set-to?_193"
"(let-values()"
"(error"
"                                                     \"internal error: cannot assign to a primitive:\""
"(module-binding-sym b_196)))"
"(void))"
"(module-binding-sym b_196)))"
"(if(eq? mpi_202(compile-context-module-self cctx_192))"
"(let-values()"
"(let-values(((header_203)(compile-context-header cctx_192)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_203)"
"(module-binding-sym b_196))))"
"(let-values()"
"(let-values(((temp46_204)(compile-context-header cctx_192))"
"((mpi47_205) mpi_202)"
"((temp48_206)(module-binding-phase b_196))"
"((temp49_207)(module-binding-sym b_196))"
"((temp50_208)"
"(let-values(((or-part_209)"
"(module-binding-extra-inspector b_196)))"
"(if or-part_209"
" or-part_209"
"(let-values(((or-part_210)"
"(parsed-id-inspector p_191)))"
"(if or-part_210"
" or-part_210"
"(if(parsed-s p_191)"
"(syntax-inspector(parsed-s p_191))"
" #f)))))))"
"(register-required-variable-use!19.1"
" #f"
" temp46_204"
" mpi47_205"
" temp48_206"
" temp49_207"
" temp50_208)))))))"
"(let-values()"
"(error"
"                                         \"not a reference to a module or local binding:\""
" b_196"
"(parsed-s p_191)))))))"
"(correlate~(parsed-s p_191)(if set-to?_193(list 'set! sym_197 rhs_194) sym_197)))))))))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_0 cctx_0)"
"(begin"
"(let-values(((pos_236)(add-syntax-literal!(compile-context-header cctx_0) q_0)))"
"(if(compile-context-lazy-syntax-literals? cctx_0)"
"(let-values()(generate-lazy-syntax-literal-lookup pos_236))"
"(let-values()(generate-eager-syntax-literal-lookup pos_236)))))))"
"(define-values"
"(extra-inspectors-allow?)"
"(lambda(extra-inspectors_0 guard-insp_0)"
"(begin"
"(if(not extra-inspectors_0)"
"(let-values() #f)"
"(if(set? extra-inspectors_0)"
"(let-values()"
"(let-values(((ht_3) extra-inspectors_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((extra-insp_7)(unsafe-immutable-hash-iterate-key ht_3 i_0)))"
"(let-values(((result_8)"
"(let-values()"
"(let-values(((result_10)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_7"
" guard-insp_0)))))"
"(values result_10)))))"
"(if(if(not((lambda x_0(not result_8)) extra-insp_7))(not #f) #f)"
"(for-loop_4 result_8(unsafe-immutable-hash-iterate-next ht_3 i_0))"
" result_8)))"
" result_0)))))"
" for-loop_4)"
" #t"
"(unsafe-immutable-hash-iterate-first ht_3)))))"
"(if(procedure? extra-inspectors_0)"
"(let-values()(extra-inspectors_0 guard-insp_0))"
"(let-values()"
"(error"
" 'extra-inspectors-allow?"
"               \"unknown representation of extra inspectors: ~e\""
" extra-inspectors_0))))))))"
"(define-values"
"(extra-inspectors-merge)"
"(lambda(extra-inspectors-1_0 extra-inspectors-2_0)"
"(begin"
"(if(let-values(((or-part_14)(not extra-inspectors-1_0)))(if or-part_14 or-part_14(not extra-inspectors-2_0)))"
"(let-values() #f)"
"(if(if(set? extra-inspectors-1_0)(set? extra-inspectors-2_0) #f)"
"(let-values()(set-union extra-inspectors-1_0 extra-inspectors-2_0))"
"(let-values()"
"(lambda(guard-insp_0)"
"(if(extra-inspectors-allow? extra-inspectors-1_0 guard-insp_0)"
"(extra-inspectors-allow? extra-inspectors-2_0 guard-insp_0)"
" #f))))))))"
"(define-values"
"(struct:module-use*"
" module-use*1.1"
" module-use*?"
" module-use*-extra-inspectorss"
" module-use*-self-inspector"
" set-module-use*-extra-inspectorss!"
" set-module-use*-self-inspector!)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-use*"
" struct:module-use"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'module-use*)))))"
"(values"
" struct:_16"
" make-_17"
" ?_18"
"(make-struct-field-accessor -ref_19 0 'extra-inspectorss)"
"(make-struct-field-accessor -ref_19 1 'self-inspector)"
"(make-struct-field-mutator -set!_20 0 'extra-inspectorss)"
"(make-struct-field-mutator -set!_20 1 'self-inspector))))"
"(define-values"
"(module-uses-add-extra-inspectorsss)"
"(lambda(mus_0 extra-inspectorsss_0)"
"(begin"
"(if extra-inspectorsss_0"
"(let-values()"
"(reverse$1"
"(let-values(((lst_43) mus_0)((lst_44) extra-inspectorsss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_43)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_44)))"
"((letrec-values(((for-loop_45)"
"(lambda(fold-var_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((mu_49)(unsafe-car lst_0))"
"((rest_50)(unsafe-cdr lst_0))"
"((extra-inspectorss_51)(unsafe-car lst_1))"
"((rest_52)(unsafe-cdr lst_1)))"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54) fold-var_0))"
"(let-values(((fold-var_55)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use*1.1"
"(module-use-module mu_49)"
"(module-use-phase mu_49)"
" extra-inspectorss_51"
" #f))"
" fold-var_54))))"
"(values fold-var_55)))))"
"(if(not #f)(for-loop_45 fold-var_53 rest_50 rest_52) fold-var_53)))"
" fold-var_0)))))"
" for-loop_45)"
" null"
" lst_43"
" lst_44)))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_56) mus_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((mu_60)(unsafe-car lst_0))((rest_61)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_62)"
"(let-values(((fold-var_63) fold-var_0))"
"(let-values(((fold-var_64)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use*1.1"
"(module-use-module mu_60)"
"(module-use-phase mu_60)"
" #f"
" #f))"
" fold-var_63))))"
"(values fold-var_64)))))"
"(if(not #f)(for-loop_57 fold-var_62 rest_61) fold-var_62)))"
" fold-var_0)))))"
" for-loop_57)"
" null"
" lst_56)))))))))"
"(define-values"
"(module-uses-strip-extra-inspectorsss)"
"(lambda(mu*s_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_66) mu*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((mu*_70)(unsafe-car lst_0))((rest_71)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_72)"
"(let-values(((fold-var_73) fold-var_0))"
"(let-values(((fold-var_74)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use1.1"
"(module-use-module mu*_70)"
"(module-use-phase mu*_70)))"
" fold-var_73))))"
"(values fold-var_74)))))"
"(if(not #f)(for-loop_67 fold-var_72 rest_71) fold-var_72)))"
" fold-var_0)))))"
" for-loop_67)"
" null"
" lst_66)))))))"
"(define-values"
"(module-uses-extract-extra-inspectorsss)"
"(lambda(mu*s_0 linklet_0 check-inlined-reference?_0 skip-n_0)"
"(begin"
"(if(not check-inlined-reference?_0)"
"(let-values()"
"(reverse$1"
"(let-values(((lst_79) mu*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_79)))"
"((letrec-values(((for-loop_80)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((mu*_83)(unsafe-car lst_0))((rest_84)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_85)"
"(let-values(((fold-var_86) fold-var_0))"
"(let-values(((fold-var_87)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use*-extra-inspectorss mu*_83))"
" fold-var_86))))"
"(values fold-var_87)))))"
"(if(not #f)(for-loop_80 fold-var_85 rest_84) fold-var_85)))"
" fold-var_0)))))"
" for-loop_80)"
" null"
" lst_79)))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_88) mu*s_0)((lst_89)(list-tail(1/linklet-import-variables linklet_0) skip-n_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_88)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(fold-var_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((mu*_94)(unsafe-car lst_0))"
"((rest_95)(unsafe-cdr lst_0))"
"((imports_96)(unsafe-car lst_1))"
"((rest_97)(unsafe-cdr lst_1)))"
"(let-values(((fold-var_98)"
"(let-values(((fold-var_99) fold-var_0))"
"(let-values(((fold-var_100)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_101)"
"(module-use*-extra-inspectorss"
" mu*_94)))"
"(let-values(((lst_102) imports_96))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_102)))"
"((letrec-values(((for-loop_103)"
"(lambda(extra-inspectorss_0"
" lst_2)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_2)"
"(let-values(((import_106)"
"(unsafe-car"
" lst_2))"
"((rest_107)"
"(unsafe-cdr"
" lst_2)))"
"(let-values(((extra-inspectorss_108)"
"(let-values(((extra-inspectorss_109)"
" extra-inspectorss_0))"
"(let-values(((extra-inspectorss_110)"
"(let-values()"
"(if(eq?"
"(hash-ref"
" extra-inspectorss_109"
" import_106"
" '#:not-recorded)"
" '#:not-recorded)"
"(let-values()"
"(hash-set"
" extra-inspectorss_109"
" import_106"
"(set"
"(module-use*-self-inspector"
" mu*_94))))"
"(let-values()"
" extra-inspectorss_109)))))"
"(values"
" extra-inspectorss_110)))))"
"(if(not"
" #f)"
"(for-loop_103"
" extra-inspectorss_108"
" rest_107)"
" extra-inspectorss_108)))"
" extra-inspectorss_0)))))"
" for-loop_103)"
" extra-inspectorss_101"
" lst_102)))))"
" fold-var_99))))"
"(values fold-var_100)))))"
"(if(not #f)(for-loop_90 fold-var_98 rest_95 rest_97) fold-var_98)))"
" fold-var_0)))))"
" for-loop_90)"
" null"
" lst_88"
" lst_89)))))))))"
"(define-values"
"(module-use*-declaration-inspector!)"
"(lambda(mu*_0 insp_0)(begin(set-module-use*-self-inspector! mu*_0 insp_0))))"
"(define-values"
"(module-use+extra-inspectors)"
"(lambda(mpi_0 phase_0 imports_0 inspector_0 extra-inspector_0 extra-inspectorss_0)"
"(begin"
"(let-values(((now-inspector_119)(current-code-inspector)))"
"(let-values(((add-insp?_120)(if inspector_0(inspector-superior? inspector_0 now-inspector_119) #f)))"
"(let-values(((add-extra-insp?_121)"
"(if extra-inspector_0(inspector-superior? extra-inspector_0 now-inspector_119) #f)))"
"(let-values(((new-extra-inspectorss_122)"
"(if(let-values(((or-part_123) add-insp?_120))"
"(if or-part_123 or-part_123 add-extra-insp?_121))"
"(let-values()"
"(let-values(((lst_124) imports_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_124)))"
"((letrec-values(((for-loop_125)"
"(lambda(table_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((import_128)(unsafe-car lst_0))"
"((rest_129)(unsafe-cdr lst_0)))"
"(let-values(((table_130)"
"(let-values(((table_131) table_0))"
"(let-values(((table_132)"
"(let-values()"
"(let-values(((key_133"
" val_134)"
"(let-values()"
"(values"
" import_128"
"(let-values(((extra-inspectors_135)"
"(if extra-inspectorss_0"
"(hash-ref"
" extra-inspectorss_0"
" import_128"
" #f)"
" #f)))"
"(lambda(guard-insp_0)"
"(let-values(((or-part_137)"
"(if add-insp?_120"
"(inspector-superior?"
" inspector_0"
" guard-insp_0)"
" #f)))"
"(if or-part_137"
" or-part_137"
"(let-values(((or-part_138)"
"(if add-extra-insp?_121"
"(inspector-superior?"
" extra-inspector_0"
" guard-insp_0)"
" #f)))"
"(if or-part_138"
" or-part_138"
"(extra-inspectors-allow?"
" extra-inspectors_135"
" guard-insp_0)))))))))))"
"(hash-set"
" table_131"
" key_133"
" val_134)))))"
"(values table_132)))))"
"(if(not #f)"
"(for-loop_125 table_130 rest_129)"
" table_130)))"
" table_0)))))"
" for-loop_125)"
" '#hash()"
" lst_124))))"
"(let-values()"
"(let-values(((lst_139) imports_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_139)))"
"((letrec-values(((for-loop_140)"
"(lambda(extra-inspectorss_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((import_143)(unsafe-car lst_0))"
"((rest_144)(unsafe-cdr lst_0)))"
"(let-values(((extra-inspectorss_145)"
"(let-values(((extra-inspectorss_146)"
" extra-inspectorss_1))"
"(let-values(((extra-inspectorss_147)"
"(let-values()"
"(if(hash-ref"
" extra-inspectorss_146"
" import_143"
" #f)"
" extra-inspectorss_146"
"(hash-set"
" extra-inspectorss_146"
" import_143"
" #f)))))"
"(values extra-inspectorss_147)))))"
"(if(not #f)"
"(for-loop_140 extra-inspectorss_145 rest_144)"
" extra-inspectorss_145)))"
" extra-inspectorss_1)))))"
" for-loop_140)"
"(let-values(((or-part_148) extra-inspectorss_0))"
"(if or-part_148 or-part_148(seteq)))"
" lst_139)))))))"
"(module-use*1.1 mpi_0 phase_0 new-extra-inspectorss_122 #f))))))))"
"(define-values"
"(module-use-merge-extra-inspectorss!)"
"(lambda(existing-mu*_0 mu*_0)"
"(begin"
"(let-values(((extra-inspectorss_151)(module-use*-extra-inspectorss mu*_0)))"
"(let-values(((existing-extra-inspectorss_152)(module-use*-extra-inspectorss existing-mu*_0)))"
"(let-values(((new-extra-inspectorss_153)"
"(let-values(((ht_154) extra-inspectorss_151))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_154)))"
"((letrec-values(((for-loop_155)"
"(lambda(new-extra-inspectorss_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_158 extra-inspectors_159)"
"(hash-iterate-key+value ht_154 i_0)))"
"(let-values(((new-extra-inspectorss_160)"
"(let-values(((new-extra-inspectorss_161)"
" new-extra-inspectorss_0))"
"(let-values(((new-extra-inspectorss_162)"
"(let-values()"
"(hash-set"
" new-extra-inspectorss_161"
" sym_158"
"(extra-inspectors-merge"
" extra-inspectors_159"
"(hash-ref"
" new-extra-inspectorss_161"
" sym_158"
"(seteq)))))))"
"(values new-extra-inspectorss_162)))))"
"(if(not #f)"
"(for-loop_155"
" new-extra-inspectorss_160"
"(hash-iterate-next ht_154 i_0))"
" new-extra-inspectorss_160)))"
" new-extra-inspectorss_0)))))"
" for-loop_155)"
" existing-extra-inspectorss_152"
"(hash-iterate-first ht_154))))))"
"(set-module-use*-extra-inspectorss! existing-mu*_0 new-extra-inspectorss_153)))))))"
"(define-values"
"(struct:link-info"
" link-info1.1"
" link-info?"
" link-info-link-module-uses"
" link-info-imports"
" link-info-extra-inspectorsss"
" link-info-def-decls)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type 'link-info #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'link-info)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'link-module-uses)"
"(make-struct-field-accessor -ref_9 1 'imports)"
"(make-struct-field-accessor -ref_9 2 'extra-inspectorsss)"
"(make-struct-field-accessor -ref_9 3 'def-decls))))"
"(define-values"
"(compile-forms31.1)"
"(lambda(body-import-instances3_0"
" body-imports2_0"
" body-suffix-forms4_0"
" compiled-expression-callback8_0"
" cross-linklet-inlining?14_0"
" definition-callback9_0"
" encoded-root-expand-ctx-box6_0"
" force-phases5_0"
" get-module-linklet-info11_0"
" other-form-callback10_0"
" root-ctx-only-if-syntax?7_0"
" serializable?13_0"
" to-source?12_0"
" bodys28_0"
" cctx29_0"
" mpis30_0)"
"(begin"
" 'compile-forms31"
"(let-values(((bodys_65) bodys28_0))"
"(let-values(((cctx_66) cctx29_0))"
"(let-values(((mpis_67) mpis30_0))"
"(let-values(((body-imports_68) body-imports2_0))"
"(let-values(((body-import-instances_69) body-import-instances3_0))"
"(let-values(((body-suffix-forms_70) body-suffix-forms4_0))"
"(let-values(((force-phases_71) force-phases5_0))"
"(let-values(((encoded-root-expand-ctx-box_72) encoded-root-expand-ctx-box6_0))"
"(let-values(((root-ctx-only-if-syntax?_73) root-ctx-only-if-syntax?7_0))"
"(let-values(((compiled-expression-callback_74)"
"(if(eq? compiled-expression-callback8_0 unsafe-undefined)"
" void"
" compiled-expression-callback8_0)))"
"(let-values(((definition-callback_75)"
"(if(eq? definition-callback9_0 unsafe-undefined) void definition-callback9_0)))"
"(let-values(((other-form-callback_76)"
"(if(eq? other-form-callback10_0 unsafe-undefined)"
" void"
" other-form-callback10_0)))"
"(let-values(((get-module-linklet-info_77)"
"(if(eq? get-module-linklet-info11_0 unsafe-undefined)"
"(lambda(mod-name_0 p_0)(begin 'get-module-linklet-info #f))"
" get-module-linklet-info11_0)))"
"(let-values(((to-source?_80) to-source?12_0))"
"(let-values(((serializable?_81) serializable?13_0))"
"(let-values(((cross-linklet-inlining?_82) cross-linklet-inlining?14_0))"
"(let-values()"
"(let-values(((phase_83)(compile-context-phase cctx_66)))"
"(let-values(((self_84)(compile-context-self cctx_66)))"
"(let-values(((syntax-literals_85)(make-syntax-literals)))"
"(let-values(((phase-to-body_86)(make-hasheqv)))"
"(let-values(((add-body!_87)"
"(lambda(phase_0 body_0)"
"(begin"
" 'add-body!"
"(hash-update!"
" phase-to-body_86"
" phase_0"
"(lambda(l_0)(cons body_0 l_0))"
" null)))))"
"(let-values(((phase-to-header_88)(make-hasheqv)))"
"(let-values(((find-or-create-header!_89)"
"(lambda(phase_0)"
"(begin"
" 'find-or-create-header!"
"(let-values(((or-part_107)"
"(hash-ref"
" phase-to-header_88"
" phase_0"
" #f)))"
"(if or-part_107"
" or-part_107"
"(let-values(((header_108)"
"(make-header"
" mpis_67"
" syntax-literals_85)))"
"(begin"
"(hash-set!"
" phase-to-header_88"
" phase_0"
" header_108)"
" header_108))))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_109) force-phases_71))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_109)))"
"((letrec-values(((for-loop_110)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((phase_112)"
"(unsafe-car"
" lst_0))"
"((rest_113)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(find-or-create-header!_89"
" phase_112)"
"(add-body!_87"
" phase_112"
" '(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_110"
" rest_113)"
"(values))))"
"(values))))))"
" for-loop_110)"
" lst_109)))"
"(values))))"
"(let-values()"
"(let-values(((saw-define-syntaxes?_90) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_66)"
"(let-values()"
"((letrec-values(((loop!_114)"
"(lambda(bodys_0"
" phase_0"
" header_0)"
"(begin"
" 'loop!"
"(begin"
"(let-values(((lst_118)"
" bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_118)))"
"((letrec-values(((for-loop_119)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((body_121)"
"(unsafe-car"
" lst_0))"
"((rest_122)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_121)"
"(let-values()"
"(begin"
"(let-values(((lst_123)"
"(parsed-define-values-syms"
" body_121)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_123)))"
"((letrec-values(((for-loop_124)"
"(lambda(lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((sym_126)"
"(unsafe-car"
" lst_1))"
"((rest_127)"
"(unsafe-cdr"
" lst_1)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_128)"
"(select-fresh"
" sym_126"
" header_0)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_0)"
" sym_126"
" def-sym_128)"
"(set-header-binding-syms-in-order!"
" header_0"
"(cons"
" sym_126"
"(header-binding-syms-in-order"
" header_0)))"
"(register-as-defined!"
" header_0"
" def-sym_128))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_124"
" rest_127)"
"(values))))"
"(values))))))"
" for-loop_124)"
" lst_123)))"
"(void)))"
"(if(parsed-begin-for-syntax?"
" body_121)"
"(let-values()"
"(loop!_114"
"(parsed-begin-for-syntax-body"
" body_121)"
"(add1"
" phase_0)"
"(find-or-create-header!_89"
"(add1"
" phase_0))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_119"
" rest_122)"
"(values))))"
"(values))))))"
" for-loop_119)"
" lst_118)))"
"(void))))))"
" loop!_114)"
" bodys_65"
" phase_83"
"(find-or-create-header!_89 phase_83)))"
"(void))"
"(values))))"
"(let-values(((as-required?_91)"
"(lambda(header_0)"
"(begin"
" 'as-required?"
"(lambda(sym_0)"
"(registered-as-required?"
" header_0"
" sym_0))))))"
"(let-values(((last-i_92)(sub1(length bodys_65))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_131)"
"(lambda(bodys_0"
" phase_0"
" header_0)"
"(begin"
" 'loop!"
"(begin"
"(let-values(((lst_135)"
" bodys_0)"
"((start_136)"
" 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_135)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-naturals"
" start_136)))"
"((letrec-values(((for-loop_137)"
"(lambda(lst_0"
" pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
" #t"
" #f)"
"(let-values(((body_140)"
"(unsafe-car"
" lst_0))"
"((rest_141)"
"(unsafe-cdr"
" lst_0))"
"((i_142)"
" pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_140)"
"(let-values()"
"(let-values(((ids_143)"
"(parsed-define-values-ids"
" body_140)))"
"(let-values(((binding-syms_144)"
"(parsed-define-values-syms"
" body_140)))"
"(let-values(((def-syms_145)"
"(if(compile-context-module-self"
" cctx_66)"
"(let-values()"
"(reverse$1"
"(let-values(((lst_147)"
" binding-syms_144))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_147)))"
"((letrec-values(((for-loop_148)"
"(lambda(fold-var_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((binding-sym_151)"
"(unsafe-car"
" lst_1))"
"((rest_152)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_153)"
"(let-values(((fold-var_154)"
" fold-var_0))"
"(let-values(((fold-var_155)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_0)"
" binding-sym_151))"
" fold-var_154))))"
"(values"
" fold-var_155)))))"
"(if(not"
" #f)"
"(for-loop_148"
" fold-var_153"
" rest_152)"
" fold-var_153)))"
" fold-var_0)))))"
" for-loop_148)"
" null"
" lst_147)))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_156)"
" binding-syms_144))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(fold-var_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((binding-sym_160)"
"(unsafe-car"
" lst_1))"
"((rest_161)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_162)"
"(let-values(((fold-var_163)"
" fold-var_0))"
"(let-values(((fold-var_164)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((header35_166)"
" header_0)"
"((temp36_167)"
"(compile-context-self"
" cctx_66))"
"((phase37_168)"
" phase_0)"
"((binding-sym38_169)"
" binding-sym_160)"
"((temp39_170)"
" #f)"
"((temp40_171)"
" #t))"
"(register-required-variable-use!19.1"
" temp40_171"
" header35_166"
" temp36_167"
" phase37_168"
" binding-sym38_169"
" temp39_170)))"
" fold-var_163))))"
"(values"
" fold-var_164)))))"
"(if(not"
" #f)"
"(for-loop_157"
" fold-var_162"
" rest_161)"
" fold-var_162)))"
" fold-var_0)))))"
" for-loop_157)"
" null"
" lst_156))))))))"
"(let-values(((rhs_146)"
"(compile$2"
"(parsed-define-values-rhs"
" body_140)"
"(let-values(((the-struct_172)"
" cctx_66))"
"(if(compile-context?"
" the-struct_172)"
"(let-values(((phase41_173)"
" phase_0)"
"((header42_174)"
" header_0))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_172)"
" phase41_173"
"(compile-context-self"
" the-struct_172)"
"(compile-context-module-self"
" the-struct_172)"
"(compile-context-full-module-name"
" the-struct_172)"
"(compile-context-lazy-syntax-literals?"
" the-struct_172)"
" header42_174))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"compile-context?\""
" the-struct_172)))"
"(if(="
"(length"
" ids_143)"
" 1)"
"(car"
" ids_143)"
" #f))))"
"(begin"
"(definition-callback_75)"
"(compiled-expression-callback_74"
" rhs_146"
"(length"
" def-syms_145)"
" phase_0"
"(as-required?_91"
" header_0))"
"(add-body!_87"
" phase_0"
"(propagate-inline-property"
"(correlate*"
"(parsed-s"
" body_140)"
"(list"
" 'define-values"
" def-syms_145"
" rhs_146))"
"(parsed-s"
" body_140)))"
"(if(let-values(((or-part_175)"
"(compile-context-module-self"
" cctx_66)))"
"(if or-part_175"
" or-part_175"
"(null?"
" ids_143)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_87"
" phase_0"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(reverse$1"
"(let-values(((lst_176)"
" def-syms_145))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_176)))"
"((letrec-values(((for-loop_177)"
"(lambda(fold-var_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((def-sym_180)"
"(unsafe-car"
" lst_1))"
"((rest_181)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_182)"
"(let-values(((fold-var_183)"
" fold-var_0))"
"(let-values(((fold-var_184)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_180"
" '(#f)))"
" fold-var_183))))"
"(values"
" fold-var_184)))))"
"(if(not"
" #f)"
"(for-loop_177"
" fold-var_182"
" rest_181)"
" fold-var_182)))"
" fold-var_0)))))"
" for-loop_177)"
" null"
" lst_176)))))"
" '((void))))"
"(add-body!_87"
" phase_0"
"(compile-top-level-bind"
" ids_143"
" binding-syms_144"
"(let-values(((the-struct_185)"
" cctx_66))"
"(if(compile-context?"
" the-struct_185)"
"(let-values(((phase43_186)"
" phase_0)"
"((header44_187)"
" header_0))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_185)"
" phase43_186"
"(compile-context-self"
" the-struct_185)"
"(compile-context-module-self"
" the-struct_185)"
"(compile-context-full-module-name"
" the-struct_185)"
"(compile-context-lazy-syntax-literals?"
" the-struct_185)"
" header44_187))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                       \"compile-context?\""
" the-struct_185)))"
" #f)))))))))))"
"(if(parsed-define-syntaxes?"
" body_140)"
"(let-values()"
"(let-values(((ids_188)"
"(parsed-define-syntaxes-ids"
" body_140)))"
"(let-values(((binding-syms_189)"
"(parsed-define-syntaxes-syms"
" body_140)))"
"(let-values(((next-header_190)"
"(find-or-create-header!_89"
"(add1"
" phase_0))))"
"(let-values(((gen-syms_191)"
"(reverse$1"
"(let-values(((lst_194)"
" binding-syms_189))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_194)))"
"((letrec-values(((for-loop_195)"
"(lambda(fold-var_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((binding-sym_198)"
"(unsafe-car"
" lst_1))"
"((rest_199)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_200)"
"(let-values(((fold-var_201)"
" fold-var_0))"
"(let-values(((fold-var_202)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((gen-sym_203)"
"(select-fresh"
" binding-sym_198"
" next-header_190)))"
"(begin"
"(register-as-defined!"
" next-header_190"
" gen-sym_203)"
" gen-sym_203)))"
" fold-var_201))))"
"(values"
" fold-var_202)))))"
"(if(not"
" #f)"
"(for-loop_195"
" fold-var_200"
" rest_199)"
" fold-var_200)))"
" fold-var_0)))))"
" for-loop_195)"
" null"
" lst_194))))))"
"(let-values(((rhs_192)"
"(compile$2"
"(parsed-define-syntaxes-rhs"
" body_140)"
"(let-values(((the-struct_204)"
" cctx_66))"
"(if(compile-context?"
" the-struct_204)"
"(let-values(((phase45_205)"
"(add1"
" phase_0))"
"((header46_206)"
" next-header_190))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_204)"
" phase45_205"
"(compile-context-self"
" the-struct_204)"
"(compile-context-module-self"
" the-struct_204)"
"(compile-context-full-module-name"
" the-struct_204)"
"(compile-context-lazy-syntax-literals?"
" the-struct_204)"
" header46_206))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                              \"compile-context?\""
" the-struct_204))))))"
"(let-values((()"
"(begin"
"(definition-callback_75)"
"(values))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_74"
" rhs_192"
"(length"
" gen-syms_191)"
"(add1"
" phase_0)"
"(as-required?_91"
" header_0))"
"(values))))"
"(let-values(((transformer-set!s_193)"
"(reverse$1"
"(let-values(((lst_207)"
" binding-syms_189)"
"((lst_208)"
" gen-syms_191))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_207)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(fold-var_0"
" lst_1"
" lst_2)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_1)"
"(pair?"
" lst_2)"
" #f)"
"(let-values(((binding-sym_213)"
"(unsafe-car"
" lst_1))"
"((rest_214)"
"(unsafe-cdr"
" lst_1))"
"((gen-sym_215)"
"(unsafe-car"
" lst_2))"
"((rest_216)"
"(unsafe-cdr"
" lst_2)))"
"(let-values(((fold-var_217)"
"(let-values(((fold-var_218)"
" fold-var_0))"
"(let-values(((fold-var_219)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_213)"
" gen-sym_215))"
" fold-var_218))))"
"(values"
" fold-var_219)))))"
"(if(not"
" #f)"
"(for-loop_209"
" fold-var_217"
" rest_214"
" rest_216)"
" fold-var_217)))"
" fold-var_0)))))"
" for-loop_209)"
" null"
" lst_207"
" lst_208))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_66)"
"(let-values()"
"(add-body!_87"
"(add1"
" phase_0)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_191"
" rhs_192))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_193"
" '((void)))))))"
"(let-values()"
"(add-body!_87"
"(add1"
" phase_0)"
"(generate-top-level-define-syntaxes"
" gen-syms_191"
" rhs_192"
" transformer-set!s_193"
"(compile-top-level-bind"
" ids_188"
" binding-syms_189"
"(let-values(((the-struct_220)"
" cctx_66))"
"(if(compile-context?"
" the-struct_220)"
"(let-values(((phase47_221)"
" phase_0)"
"((header48_222)"
" header_0))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_220)"
" phase47_221"
"(compile-context-self"
" the-struct_220)"
"(compile-context-module-self"
" the-struct_220)"
"(compile-context-full-module-name"
" the-struct_220)"
"(compile-context-lazy-syntax-literals?"
" the-struct_220)"
" header48_222))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                \"compile-context?\""
" the-struct_220)))"
" gen-syms_191)))))"
"(set! saw-define-syntaxes?_90"
" #t)))))))))))"
"(if(parsed-begin-for-syntax?"
" body_140)"
"(let-values()"
"(loop!_131"
"(parsed-begin-for-syntax-body"
" body_140)"
"(add1"
" phase_0)"
"(find-or-create-header!_89"
"(add1"
" phase_0))))"
"(if(let-values(((or-part_223)"
"(parsed-#%declare?"
" body_140)))"
"(if or-part_223"
" or-part_223"
"(let-values(((or-part_224)"
"(parsed-module?"
" body_140)))"
"(if or-part_224"
" or-part_224"
"(parsed-require?"
" body_140)))))"
"(let-values()"
"(let-values(((e_225)"
"(other-form-callback_76"
" body_140"
"(let-values(((the-struct_226)"
" cctx_66))"
"(if(compile-context?"
" the-struct_226)"
"(let-values(((phase49_227)"
" phase_0)"
"((header50_228)"
" header_0))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_226)"
" phase49_227"
"(compile-context-self"
" the-struct_226)"
"(compile-context-module-self"
" the-struct_226)"
"(compile-context-full-module-name"
" the-struct_226)"
"(compile-context-lazy-syntax-literals?"
" the-struct_226)"
" header50_228))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"compile-context?\""
" the-struct_226))))))"
"(if e_225"
"(let-values()"
"(begin"
"(compiled-expression-callback_74"
" e_225"
" #f"
" phase_0"
"(as-required?_91"
" header_0))"
"(add-body!_87"
" phase_0"
" e_225)))"
"(void))))"
"(let-values()"
"(let-values(((e_229)"
"(compile$2"
" body_140"
"(let-values(((the-struct_230)"
" cctx_66))"
"(if(compile-context?"
" the-struct_230)"
"(let-values(((phase51_231)"
" phase_0)"
"((header52_232)"
" header_0))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_230)"
" phase51_231"
"(compile-context-self"
" the-struct_230)"
"(compile-context-module-self"
" the-struct_230)"
"(compile-context-full-module-name"
" the-struct_230)"
"(compile-context-lazy-syntax-literals?"
" the-struct_230)"
" header52_232))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"compile-context?\""
" the-struct_230)))"
" #f"
"(="
" i_142"
" last-i_92))))"
"(begin"
"(compiled-expression-callback_74"
" e_229"
" #f"
" phase_0"
"(as-required?_91"
" header_0))"
"(add-body!_87"
" phase_0"
" e_229)))))))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_137"
" rest_141"
"(+"
" pos_0"
" 1))"
"(values))))"
"(values))))))"
" for-loop_137)"
" lst_135"
" start_136)))"
"(void))))))"
" loop!_131)"
" bodys_65"
" phase_83"
"(find-or-create-header!_89 phase_83))"
"(values))))"
"(let-values(((encoded-root-expand-pos_93)"
"(if encoded-root-expand-ctx-box_72"
"(if(unbox"
" encoded-root-expand-ctx-box_72)"
"(if(not"
"(if root-ctx-only-if-syntax?_73"
"(if(not"
" saw-define-syntaxes?_90)"
"(syntax-literals-empty?"
" syntax-literals_85)"
" #f)"
" #f))"
"(add-syntax-literal!"
" syntax-literals_85"
"(unbox"
" encoded-root-expand-ctx-box_72))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_94)"
"(let-values(((temp53_233)"
"(hash-keys"
" phase-to-body_86))"
"((<54_234) <))"
"(sort7.1"
" #f"
" #f"
" temp53_233"
" <54_234))))"
"(let-values(((min-phase_95)"
"(if(pair? phases-in-order_94)"
"(car phases-in-order_94)"
" phase_83)))"
"(let-values(((max-phase_96)"
"(if(pair? phases-in-order_94)"
"(car"
"(reverse$1"
" phases-in-order_94))"
" phase_83)))"
"(let-values(((phase-to-link-info_97)"
"(let-values(((lst_235)"
" phases-in-order_94))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_235)))"
"((letrec-values(((for-loop_236)"
"(lambda(table_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((phase_239)"
"(unsafe-car"
" lst_0))"
"((rest_240)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((table_241)"
"(let-values(((table_242)"
" table_0))"
"(let-values(((table_243)"
"(let-values()"
"(let-values(((key_244"
" val_245)"
"(let-values()"
"(let-values(((header_246)"
"(hash-ref"
" phase-to-header_88"
" phase_239"
" #f)))"
"(let-values(((link-module-uses_247"
" imports_248"
" extra-inspectorsss_249"
" def-decls_250)"
"(generate-links+imports"
" header_246"
" phase_239"
" cctx_66"
" cross-linklet-inlining?_82)))"
"(values"
" phase_239"
"(link-info1.1"
" link-module-uses_247"
" imports_248"
" extra-inspectorsss_249"
" def-decls_250)))))))"
"(hash-set"
" table_242"
" key_244"
" val_245)))))"
"(values"
" table_243)))))"
"(if(not"
" #f)"
"(for-loop_236"
" table_241"
" rest_240)"
" table_241)))"
" table_0)))))"
" for-loop_236)"
" '#hash()"
" lst_235)))))"
"(let-values(((body-linklets+module-use*s_98)"
"(let-values(((lst_251)"
" phases-in-order_94))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_251)))"
"((letrec-values(((for-loop_252)"
"(lambda(table_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((phase_255)"
"(unsafe-car"
" lst_0))"
"((rest_256)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((table_257)"
"(let-values(((table_258)"
" table_0))"
"(let-values(((table_259)"
"(let-values()"
"(let-values(((key_260"
" val_261)"
"(let-values()"
"(let-values(((bodys_262)"
"(hash-ref"
" phase-to-body_86"
" phase_255)))"
"(let-values(((li_263)"
"(hash-ref"
" phase-to-link-info_97"
" phase_255)))"
"(let-values(((binding-sym-to-define-sym_264)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_88"
" phase_255))))"
"(let-values(((module-use*s_265)"
"(module-uses-add-extra-inspectorsss"
"(link-info-link-module-uses"
" li_263)"
"(link-info-extra-inspectorsss"
" li_263))))"
"(let-values(((linklet_266"
" new-module-use*s_267)"
"(let-values()"
"((if to-source?_80"
"(lambda(l_0"
" name_0"
" keys_0"
" getter_0)"
"(values"
" l_0"
" keys_0))"
"(lambda(l_0"
" name_0"
" keys_0"
" getter_0)"
"(1/compile-linklet"
" l_0"
" name_0"
" keys_0"
" getter_0"
"(if serializable?_81"
" '(serializable)"
" '()))))"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_68"
"(link-info-imports"
" li_263))"
"(qq-append"
"(link-info-def-decls"
" li_263)"
"(reverse$1"
"(let-values(((lst_276)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_88"
" phase_255))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_276)))"
"((letrec-values(((for-loop_277)"
"(lambda(fold-var_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((binding-sym_280)"
"(unsafe-car"
" lst_1))"
"((rest_281)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_282)"
"(let-values(((fold-var_283)"
" fold-var_0))"
"(let-values(((fold-var_284)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_285)"
"(hash-ref"
" binding-sym-to-define-sym_264"
" binding-sym_280)))"
"(if(eq?"
" def-sym_285"
" binding-sym_280)"
" def-sym_285"
"(list"
" def-sym_285"
" binding-sym_280))))"
" fold-var_283))))"
"(values"
" fold-var_284)))))"
"(if(not"
" #f)"
"(for-loop_277"
" fold-var_282"
" rest_281)"
" fold-var_282)))"
" fold-var_0)))))"
" for-loop_277)"
" null"
" lst_276)))))"
"(qq-append"
"(reverse$1"
" bodys_262)"
" body-suffix-forms_70))"
" 'module"
"(list->vector"
"(append"
" body-import-instances_69"
" module-use*s_265))"
"(make-module-use-to-linklet"
" cross-linklet-inlining?_82"
"(compile-context-namespace"
" cctx_66)"
" get-module-linklet-info_77"
" module-use*s_265)))))"
"(values"
" phase_255"
"(cons"
" linklet_266"
"(list-tail"
"(vector->list"
" new-module-use*s_267)"
"(length"
" body-imports_68))))))))))))"
"(hash-set"
" table_258"
" key_260"
" val_261)))))"
"(values"
" table_259)))))"
"(if(not"
" #f)"
"(for-loop_252"
" table_257"
" rest_256)"
" table_257)))"
" table_0)))))"
" for-loop_252)"
" '#hasheq()"
" lst_251)))))"
"(let-values(((body-linklets_99)"
"(let-values(((ht_286)"
" body-linklets+module-use*s_98))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_286)))"
"((letrec-values(((for-loop_287)"
"(lambda(table_0"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_290"
" l+mu*s_291)"
"(hash-iterate-key+value"
" ht_286"
" i_0)))"
"(let-values(((table_292)"
"(let-values(((table_293)"
" table_0))"
"(let-values(((table_294)"
"(let-values()"
"(let-values(((key_295"
" val_296)"
"(let-values()"
"(values"
" phase_290"
"(car"
" l+mu*s_291)))))"
"(hash-set"
" table_293"
" key_295"
" val_296)))))"
"(values"
" table_294)))))"
"(if(not"
" #f)"
"(for-loop_287"
" table_292"
"(hash-iterate-next"
" ht_286"
" i_0))"
" table_292)))"
" table_0)))))"
" for-loop_287)"
" '#hasheq()"
"(hash-iterate-first"
" ht_286))))))"
"(let-values(((phase-to-link-module-uses_100)"
"(let-values(((ht_297)"
" body-linklets+module-use*s_98))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_297)))"
"((letrec-values(((for-loop_298)"
"(lambda(table_0"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_301"
" l+mu*s_302)"
"(hash-iterate-key+value"
" ht_297"
" i_0)))"
"(let-values(((table_303)"
"(let-values(((table_304)"
" table_0))"
"(let-values(((table_305)"
"(let-values()"
"(let-values(((key_306"
" val_307)"
"(let-values()"
"(values"
" phase_301"
"(module-uses-strip-extra-inspectorsss"
"(cdr"
" l+mu*s_302))))))"
"(hash-set"
" table_304"
" key_306"
" val_307)))))"
"(values"
" table_305)))))"
"(if(not"
" #f)"
"(for-loop_298"
" table_303"
"(hash-iterate-next"
" ht_297"
" i_0))"
" table_303)))"
" table_0)))))"
" for-loop_298)"
" '#hasheq()"
"(hash-iterate-first"
" ht_297))))))"
"(let-values(((phase-to-link-module-uses-expr_101)"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_100"
" mpis_67)))"
"(let-values(((phase-to-link-extra-inspectorsss_102)"
"(let-values(((ht_308)"
" body-linklets+module-use*s_98))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_308)))"
"((letrec-values(((for-loop_309)"
"(lambda(table_0"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_312"
" l+mu*s_313)"
"(hash-iterate-key+value"
" ht_308"
" i_0)))"
"(let-values(((table_314)"
"(let-values(((extra-inspectorsss_315)"
"(module-uses-extract-extra-inspectorsss"
"(cdr"
" l+mu*s_313)"
"(car"
" l+mu*s_313)"
" cross-linklet-inlining?_82"
"(length"
" body-imports_68))))"
"(begin"
" #t"
"((letrec-values(((for-loop_316)"
"(lambda(table_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_318)"
"(let-values(((table_319)"
" table_1))"
"(if extra-inspectorsss_315"
"(let-values(((table_320)"
" table_319))"
"(let-values(((table_321)"
"(let-values()"
"(let-values(((key_322"
" val_323)"
"(let-values()"
"(values"
" phase_312"
" extra-inspectorsss_315))))"
"(hash-set"
" table_320"
" key_322"
" val_323)))))"
"(values"
" table_321)))"
" table_319))))"
" table_318))))))"
" for-loop_316)"
" table_0)))))"
"(if(not"
" #f)"
"(for-loop_309"
" table_314"
"(hash-iterate-next"
" ht_308"
" i_0))"
" table_314)))"
" table_0)))))"
" for-loop_309)"
" '#hash()"
"(hash-iterate-first"
" ht_308))))))"
"(values"
" body-linklets_99"
" min-phase_95"
" max-phase_96"
" phase-to-link-module-uses_100"
" phase-to-link-module-uses-expr_101"
" phase-to-link-extra-inspectorsss_102"
" syntax-literals_85"
" encoded-root-expand-pos_93)))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_0 binding-syms_0 cctx_0 trans-exprs_0)"
"(begin"
"(let-values(((phase_388)(compile-context-phase cctx_0)))"
"(let-values(((self_389)(compile-context-self cctx_0)))"
"(let-values(((header_390)(compile-context-header cctx_0)))"
"(let-values(((mpis_391)(header-module-path-indexes header_390)))"
"(let-values(((top-level-bind-scope_392)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_0)))))"
"(let-values(((self-expr_393)(add-module-path-index! mpis_391 self_389)))"
"(list*"
" 'begin"
"(reverse$1"
"(let-values(((lst_394) ids_0)"
"((lst_395) binding-syms_0)"
"((lst_396)"
"(let-values(((or-part_397) trans-exprs_0))"
"(if or-part_397"
" or-part_397"
"(reverse$1"
"(let-values(((lst_398) ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_398)))"
"((letrec-values(((for-loop_399)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_402)(unsafe-car lst_0))"
"((rest_403)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_404)"
"(let-values(((fold-var_405)"
" fold-var_0))"
"(let-values(((fold-var_406)"
"(let-values()"
"(cons"
"(let-values()"
" ''#f)"
" fold-var_405))))"
"(values fold-var_406)))))"
"(if(not #f)"
"(for-loop_399 fold-var_404 rest_403)"
" fold-var_404)))"
" fold-var_0)))))"
" for-loop_399)"
" null"
" lst_398))))))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_394)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_395)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_396)))"
"((letrec-values(((for-loop_407)"
"(lambda(fold-var_0 lst_0 lst_1 lst_2)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(if(pair? lst_1)(pair? lst_2) #f) #f)"
"(let-values(((id_412)(unsafe-car lst_0))"
"((rest_413)(unsafe-cdr lst_0))"
"((binding-sym_414)(unsafe-car lst_1))"
"((rest_415)(unsafe-cdr lst_1))"
"((trans-expr_416)(unsafe-car lst_2))"
"((rest_417)(unsafe-cdr lst_2)))"
"(let-values(((fold-var_418)"
"(let-values(((fold-var_419) fold-var_0))"
"(let-values(((fold-var_420)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_421)"
"(compile-quote-syntax"
"(remove-scope"
" id_412"
" top-level-bind-scope_392)"
" cctx_0)))"
"(list"
" top-level-bind!-id"
" id-stx_421"
" self-expr_393"
" phase_388"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_414)"
"(if trans-exprs_0 #t #f)"
" trans-expr_416)))"
" fold-var_419))))"
"(values fold-var_420)))))"
"(if(not #f)"
"(for-loop_407 fold-var_418 rest_413 rest_415 rest_417)"
" fold-var_418)))"
" fold-var_0)))))"
" for-loop_407)"
" null"
" lst_394"
" lst_395"
" lst_396))))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_0 rhs_0 transformer-set!s_0 finish_0)"
"(begin"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_0)"
"(list"
" 'case-lambda"
"(list gen-syms_0(list* 'begin(qq-append transformer-set!s_0(list* finish_0 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_0"
"(list*"
" 'values"
"(reverse$1"
"(let-values(((lst_428) gen-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_428)))"
"((letrec-values(((for-loop_429)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_432)(unsafe-car lst_0))((rest_433)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_434)"
"(let-values(((fold-var_435) fold-var_0))"
"(let-values(((fold-var_436)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_435))))"
"(values fold-var_436)))))"
"(if(not #f)(for-loop_429 fold-var_434 rest_433) fold-var_434)))"
" fold-var_0)))))"
" for-loop_429)"
" null"
" lst_428)))))))"
"(list* 'begin finish_0 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_0 '((apply values args)))) '((void)))))))))"
"(define-values"
"(propagate-inline-property)"
"(lambda(e_0 orig-s_0)"
"(begin"
"(let-values(((v_439)(syntax-property$1 orig-s_0 'compiler-hint:cross-module-inline)))"
"(if v_439(correlated-property e_0 'compiler-hint:cross-module-inline v_439) e_0)))))"
"(define-values"
"(make-module-use-to-linklet)"
"(lambda(cross-linklet-inlining?_0 ns_0 get-module-linklet-info_0 init-mu*s_0)"
"(begin"
"(let-values(((mu*-intern-table_444)(make-hash)))"
"(let-values(((intern-module-use*_445)"
"(lambda(mu*_0)"
"(begin"
" 'intern-module-use*"
"(let-values(((mod-name_447)(1/module-path-index-resolve(module-use-module mu*_0))))"
"(let-values(((existing-mu*_448)"
"(hash-ref"
" mu*-intern-table_444"
"(cons mod-name_447(module-use-phase mu*_0))"
" #f)))"
"(if existing-mu*_448"
"(let-values()"
"(begin(module-use-merge-extra-inspectorss! existing-mu*_448 mu*_0) existing-mu*_448))"
"(let-values()"
"(begin"
"(hash-set! mu*-intern-table_444(cons mod-name_447(module-use-phase mu*_0)) mu*_0)"
" mu*_0)))))))))"
"(begin"
"(let-values(((lst_449) init-mu*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_449)))"
"((letrec-values(((for-loop_450)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((mu*_452)(unsafe-car lst_0))((rest_453)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(intern-module-use*_445 mu*_452))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_450 rest_453)(values))))"
"(values))))))"
" for-loop_450)"
" lst_449)))"
"(void)"
"(lambda(mu*-or-instance_0)"
"(if(1/instance? mu*-or-instance_0)"
"(let-values()(values mu*-or-instance_0 #f))"
"(if(not cross-linklet-inlining?_0)"
"(let-values()(values #f #f))"
"(if mu*-or-instance_0"
"(let-values()"
"(let-values(((mu*_455) mu*-or-instance_0))"
"(let-values(((mod-name_456)(1/module-path-index-resolve(module-use-module mu*_455))))"
"(let-values(((mli_457)"
"(let-values(((or-part_458)"
"(get-module-linklet-info_0"
" mod-name_456"
"(module-use-phase mu*_455))))"
"(if or-part_458"
" or-part_458"
"(namespace->module-linklet-info"
" ns_0"
" mod-name_456"
"(module-use-phase mu*_455))))))"
"(begin"
"(if mli_457"
"(let-values()"
"(module-use*-declaration-inspector! mu*_455(module-linklet-info-inspector mli_457)))"
"(void))"
"(if mli_457"
"(values"
"(module-linklet-info-linklet-or-instance mli_457)"
"(if(module-linklet-info-module-uses mli_457)"
"(list->vector"
"(append"
" '(#f #f)"
"(let-values(((mus_459)(module-linklet-info-module-uses mli_457))"
"((extra-inspectorsss_460)"
"(module-linklet-info-extra-inspectorsss mli_457)))"
"(reverse$1"
"(let-values(((lst_461) mus_459)"
"((lst_462)"
"(1/linklet-import-variables"
"(module-linklet-info-linklet-or-instance mli_457)))"
"((lst_463)"
"(let-values(((or-part_464) extra-inspectorsss_460))"
"(if or-part_464 or-part_464 mus_459))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_461)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_462)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_463)))"
"((letrec-values(((for-loop_465)"
"(lambda(fold-var_0 lst_0 lst_1 lst_2)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)"
"(if(pair? lst_1)(pair? lst_2) #f)"
" #f)"
"(let-values(((sub-mu_470)(unsafe-car lst_0))"
"((rest_471)(unsafe-cdr lst_0))"
"((imports_472)(unsafe-car lst_1))"
"((rest_473)(unsafe-cdr lst_1))"
"((extra-inspectorss_474)"
"(unsafe-car lst_2))"
"((rest_475)(unsafe-cdr lst_2)))"
"(let-values(((fold-var_476)"
"(let-values(((fold-var_477)"
" fold-var_0))"
"(let-values(((fold-var_478)"
"(let-values()"
"(cons"
"(let-values()"
"(intern-module-use*_445"
"(module-use+extra-inspectors"
"(module-path-index-shift"
"(module-use-module"
" sub-mu_470)"
"(module-linklet-info-self"
" mli_457)"
"(module-use-module"
" mu*_455))"
"(module-use-phase"
" sub-mu_470)"
" imports_472"
"(module-linklet-info-inspector"
" mli_457)"
"(module-linklet-info-extra-inspector"
" mli_457)"
"(if extra-inspectorsss_460"
" extra-inspectorss_474"
" #f))))"
" fold-var_477))))"
"(values fold-var_478)))))"
"(if(not #f)"
"(for-loop_465"
" fold-var_476"
" rest_471"
" rest_473"
" rest_475)"
" fold-var_476)))"
" fold-var_0)))))"
" for-loop_465)"
" null"
" lst_461"
" lst_462"
" lst_463)))))))"
" #f))"
"(values #f #f)))))))"
"(let-values()(values #f #f))))))))))))"
"(define-values"
"(build-shared-data-linklet)"
"(lambda(cims_0 ns_0)"
"(begin"
"(let-values(((mpis_3)(make-module-path-index-table)))"
"(let-values(((mpi-trees_4)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_0)"
"(let-values(((vec_13 i_14)"
"(let-values(((vec_15 len_16)"
"(let-values(((vec_17)(compiled-in-memory-mpis cim_0)))"
"(begin"
"(check-vector vec_17)"
"(values vec_17(unsafe-vector-length vec_17))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_18)"
"(lambda(vec_0 i_0 pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_16)"
"(let-values(((mpi_22)"
"(unsafe-vector-ref vec_15 pos_0)))"
"(let-values(((vec_23 i_24)"
"(let-values(((vec_25) vec_0)"
"((i_26) i_0))"
"(let-values(((vec_27 i_28)"
"(let-values()"
"(let-values(((new-vec_29)"
"(if(eq?"
" i_26"
"(unsafe-vector*-length"
" vec_25))"
"(grow-vector"
" vec_25)"
" vec_25)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_29"
" i_26"
"(let-values()"
"(add-module-path-index!/pos"
" mpis_3"
" mpi_22)))"
"(values"
" new-vec_29"
"(unsafe-fx+"
" i_26"
" 1)))))))"
"(values vec_27 i_28)))))"
"(if(not #f)"
"(for-loop_18 vec_23 i_24(unsafe-fx+ 1 pos_0))"
"(values vec_23 i_24))))"
"(values vec_0 i_0))))))"
" for-loop_18)"
"(make-vector 16)"
" 0"
" 0)))))"
"(shrink-vector vec_13 i_14))))))"
"(let-values(((syntax-literals_5)(make-syntax-literals)))"
"(let-values(((syntax-literals-trees_6)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_0)"
"(add-syntax-literals! syntax-literals_5(compiled-in-memory-syntax-literals cim_0))))))"
"(let-values(((module-uses-tables_7) null))"
"(let-values(((module-uses-tables-count_8) 0))"
"(let-values(((phase-to-link-module-uses-trees_9)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_0)"
"(let-values(((pos_32) module-uses-tables-count_8))"
"(begin"
"(set! module-uses-tables_7"
"(cons"
"(compiled-in-memory-phase-to-link-module-uses cim_0)"
" module-uses-tables_7))"
"(set! module-uses-tables-count_8(add1 pos_32))"
" pos_32))))))"
"(let-values(((syntax-literals-expr_10)"
"(generate-eager-syntax-literals! syntax-literals_5 mpis_3 0 #f ns_0)))"
"(let-values(((phase-to-link-module-uses-expr_11)"
"(list*"
" 'vector"
"(reverse$1"
"(let-values(((lst_33)(reverse$1 module-uses-tables_7)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((phase-to-link-module-uses_37)"
"(unsafe-car lst_0))"
"((rest_38)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_39)"
"(let-values(((fold-var_40)"
" fold-var_0))"
"(let-values(((fold-var_41)"
"(let-values()"
"(cons"
"(let-values()"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_37"
" mpis_3))"
" fold-var_40))))"
"(values fold-var_41)))))"
"(if(not #f)"
"(for-loop_34 fold-var_39 rest_38)"
" fold-var_39)))"
" fold-var_0)))))"
" for-loop_34)"
" null"
" lst_33)))))))"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
" mpi-vector-id"
" '(mpi-vector-trees"
" phase-to-link-modules-vector"
" phase-to-link-modules-trees"
" syntax-literals"
" syntax-literals-trees))"
"(list 'define-values(list mpi-vector-id)(generate-module-path-index-deserialize mpis_3))"
"(list 'define-values '(mpi-vector-trees)(list 'quote mpi-trees_4))"
"(list 'define-values '(phase-to-link-modules-vector) phase-to-link-module-uses-expr_11)"
"(list"
" 'define-values"
" '(phase-to-link-modules-trees)"
"(list 'quote phase-to-link-module-uses-trees_9))"
"(list 'define-values '(syntax-literals) syntax-literals-expr_10)"
"(list"
" 'define-values"
" '(syntax-literals-trees)"
"(list 'quote syntax-literals-trees_6))))))))))))))))"
"(define-values"
"(map-cim-tree)"
"(lambda(cims_0 proc_0)"
"(begin"
"((letrec-values(((loop_44)"
"(lambda(cims_1)"
"(begin"
" 'loop"
"(reverse$1"
"(let-values(((lst_46) cims_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((cim_50)(unsafe-car lst_0))"
"((rest_51)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_52)"
"(let-values(((fold-var_53) fold-var_0))"
"(let-values(((fold-var_54)"
"(let-values()"
"(cons"
"(let-values()"
"(vector"
"(proc_0 cim_50)"
"(loop_44"
"(compiled-in-memory-pre-compiled-in-memorys"
" cim_50))"
"(loop_44"
"(compiled-in-memory-post-compiled-in-memorys"
" cim_50))))"
" fold-var_53))))"
"(values fold-var_54)))))"
"(if(not #f)"
"(for-loop_47 fold-var_52 rest_51)"
" fold-var_52)))"
" fold-var_0)))))"
" for-loop_47)"
" null"
" lst_46))))))))"
" loop_44)"
" cims_0))))"
"(define-values"
"(compiled-tops->compiled-top8.1)"
"(lambda(merge-serialization?2_0 namespace3_0 to-source?1_0 all-cims7_0)"
"(begin"
" 'compiled-tops->compiled-top8"
"(let-values(((all-cims_5) all-cims7_0))"
"(let-values(((to-source?_6) to-source?1_0))"
"(let-values(((merge-serialization?_7) merge-serialization?2_0))"
"(let-values(((ns_8) namespace3_0))"
"(let-values()"
"(let-values(((cims_9)(remove-nontail-purely-functional all-cims_5)))"
"(if(= 1(length cims_9))"
"(let-values()(car cims_9))"
"(let-values()"
"(let-values(((sequence-ht_10)"
"(let-values(((lst_12) cims_9)((start_13) 0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_12)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_13)))"
"((letrec-values(((for-loop_14)"
"(lambda(table_0 lst_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0) #t #f)"
"(let-values(((cim_18)(unsafe-car lst_0))"
"((rest_19)(unsafe-cdr lst_0))"
"((i_20) pos_0))"
"(let-values(((table_21)"
"(let-values(((table_22) table_0))"
"(let-values(((table_23)"
"(let-values()"
"(let-values(((key_24"
" val_25)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_20))"
"((if to-source?_6"
" values"
" compiled-in-memory-linklet-directory)"
" cim_18)))))"
"(hash-set"
" table_22"
" key_24"
" val_25)))))"
"(values table_23)))))"
"(if(not #f)"
"(for-loop_14 table_21 rest_19(+ pos_0 1))"
" table_21)))"
" table_0)))))"
" for-loop_14)"
" '#hasheq()"
" lst_12"
" start_13)))))"
"(let-values(((ht_11)"
"(if merge-serialization?_7"
"(hash-set"
" sequence-ht_10"
" 'data"
"(1/hash->linklet-directory"
"(hasheq"
" #f"
"(1/hash->linklet-bundle"
"(hasheq 0(build-shared-data-linklet cims_9 ns_8))))))"
" sequence-ht_10)))"
"(if to-source?_6"
"(let-values() ht_11)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_11)"
" #f"
" #f"
" #f"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_9"
" null"
" #f"
" #f))))))))))))))))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_0)"
"(begin"
"(let-values(((ht_53)(1/linklet-directory->hash ld_0)))"
"(reverse$1"
"(let-values(((start_54) 0)((end_55)(hash-count ht_53))((inc_56) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_54 end_55 inc_56)))"
"((letrec-values(((for-loop_57)"
"(lambda(fold-var_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_55)"
"(let-values(((i_60) pos_0))"
"(let-values(((fold-var_61)"
"(let-values(((top_62)"
"(hash-ref"
" ht_53"
"(string->symbol(number->string i_60))"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_63)"
"(lambda(fold-var_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_65)"
"(let-values(((fold-var_66)"
" fold-var_1))"
"(if top_62"
"(let-values(((fold-var_67)"
" fold-var_66))"
"(let-values(((fold-var_68)"
"(let-values()"
"(cons"
"(let-values()"
" top_62)"
" fold-var_67))))"
"(values"
" fold-var_68)))"
" fold-var_66))))"
" fold-var_65))))))"
" for-loop_63)"
" fold-var_0)))))"
"(if(not #f)(for-loop_57 fold-var_61(+ pos_0 inc_56)) fold-var_61)))"
" fold-var_0)))))"
" for-loop_57)"
" null"
" start_54))))))))"
"(define-values"
"(remove-nontail-purely-functional)"
"(lambda(cims_0)"
"(begin"
"((letrec-values(((loop_70)"
"(lambda(cims_1)"
"(begin"
" 'loop"
"(if(null? cims_1)"
"(let-values() null)"
"(if(null?(cdr cims_1))"
"(let-values() cims_1)"
"(if(if(compiled-in-memory?(car cims_1))"
"(compiled-in-memory-purely-functional?(car cims_1))"
" #f)"
"(let-values()(loop_70(cdr cims_1)))"
"(let-values()(cons(car cims_1)(cdr cims_1))))))))))"
" loop_70)"
" cims_0))))"
"(define-values"
"(struct:known-defined/delay known-defined/delay2.1 known-defined/delay? known-defined/delay-thunk)"
"(let-values(((struct:_16 make-_17 ?_18 -ref_19 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-defined/delay #f 1 0 #f null 'prefab #f '(0) #f 'known-defined/delay)))))"
"(values struct:_16 make-_17 ?_18(make-struct-field-accessor -ref_19 0 'thunk))))"
"(define-values"
"(struct:known-property known-property3.1 known-property?)"
"(let-values(((struct:_36 make-_37 ?_38 -ref_39 -set!_40)"
"(let-values()"
"(let-values()(make-struct-type 'known-property #f 0 0 #f null 'prefab #f '() #f 'known-property)))))"
"(values struct:_36 make-_37 ?_38)))"
"(define-values"
"(struct:known-function known-function4.1 known-function? known-function-arity known-function-pure?)"
"(let-values(((struct:_51 make-_52 ?_53 -ref_54 -set!_55)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-function #f 2 0 #f null 'prefab #f '(0 1) #f 'known-function)))))"
"(values"
" struct:_51"
" make-_52"
" ?_53"
"(make-struct-field-accessor -ref_54 0 'arity)"
"(make-struct-field-accessor -ref_54 1 'pure?))))"
"(define-values"
"(struct:known-function-of-satisfying"
" known-function-of-satisfying5.1"
" known-function-of-satisfying?"
" known-function-of-satisfying-arg-predicate-keys)"
"(let-values(((struct:_76 make-_77 ?_78 -ref_79 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'known-function-of-satisfying"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'known-function-of-satisfying)))))"
"(values struct:_76 make-_77 ?_78(make-struct-field-accessor -ref_79 0 'arg-predicate-keys))))"
"(define-values"
"(struct:known-predicate known-predicate6.1 known-predicate? known-predicate-key)"
"(let-values(((struct:_96 make-_97 ?_98 -ref_99 -set!_100)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-predicate #f 1 0 #f null 'prefab #f '(0) #f 'known-predicate)))))"
"(values struct:_96 make-_97 ?_98(make-struct-field-accessor -ref_99 0 'key))))"
"(define-values"
"(struct:known-satisfies known-satisfies7.1 known-satisfies? known-satisfies-predicate-key)"
"(let-values(((struct:_116 make-_117 ?_118 -ref_119 -set!_120)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-satisfies #f 1 0 #f null 'prefab #f '(0) #f 'known-satisfies)))))"
"(values struct:_116 make-_117 ?_118(make-struct-field-accessor -ref_119 0 'predicate-key))))"
"(define-values"
"(struct:known-struct-op known-struct-op8.1 known-struct-op? known-struct-op-type known-struct-op-field-count)"
"(let-values(((struct:_136 make-_137 ?_138 -ref_139 -set!_140)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'known-struct-op)))))"
"(values"
" struct:_136"
" make-_137"
" ?_138"
"(make-struct-field-accessor -ref_139 0 'type)"
"(make-struct-field-accessor -ref_139 1 'field-count))))"
"(define-values"
"(lookup-defn)"
"(lambda(defns_0 sym_0)"
"(begin"
"(let-values(((d_163)(hash-ref defns_0 sym_0 #f)))"
"(if(known-defined/delay? d_163)"
"(let-values()(begin((known-defined/delay-thunk d_163))(lookup-defn defns_0 sym_0)))"
"(let-values() d_163))))))"
"(define-values"
"(any-side-effects?9.1)"
"(lambda(known-defns2_0 known-locals1_0 ready-variable?3_0 e7_0 expected-results8_0)"
"(begin"
" 'any-side-effects?9"
"(let-values(((e_6) e7_0))"
"(let-values(((expected-results_7) expected-results8_0))"
"(let-values(((locals_8)(if(eq? known-locals1_0 unsafe-undefined) '#hasheq() known-locals1_0)))"
"(let-values(((defns_9)(if(eq? known-defns2_0 unsafe-undefined) '#hasheq() known-defns2_0)))"
"(let-values(((ready-variable?_10)"
"(if(eq? ready-variable?3_0 unsafe-undefined)"
"(lambda(id_0)(begin 'ready-variable? #f))"
" ready-variable?3_0)))"
"(let-values()"
"(let-values(((effects?_12)"
"(lambda(e_0 expected-results_0 locals_0)"
"(begin"
" 'effects?"
"(let-values(((e12_18) e_0)"
"((expected-results13_19) expected-results_0)"
"((locals14_20) locals_0)"
"((defns15_21) defns_9)"
"((ready-variable?16_22) ready-variable?_10))"
"(any-side-effects?9.1"
" defns15_21"
" locals14_20"
" ready-variable?16_22"
" e12_18"
" expected-results13_19))))))"
"(let-values(((actual-results_13)"
"((letrec-values(((loop_23)"
"(lambda(e_0 locals_0)"
"(begin"
" 'loop"
"(let-values(((tmp_26)"
"(if(pair?(correlated-e e_0))"
"(correlated-e(car(correlated-e e_0)))"
" #f)))"
"(let-values(((index_27)"
"(if(symbol? tmp_26)"
"(hash-ref"
" '#hasheq((#%variable-reference . 1)"
"(begin . 5)"
"(begin0 . 6)"
"(case-lambda . 1)"
"(gensym . 11)"
"(if . 12)"
"(lambda . 1)"
"(let-values . 2)"
"(letrec-values . 2)"
"(make-struct-field-accessor . 8)"
"(make-struct-field-mutator . 9)"
"(make-struct-type . 7)"
"(make-struct-type-property . 10)"
"(quote . 1)"
"(values . 3)"
"(void . 4))"
" tmp_26"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_27 6)"
"(if(unsafe-fx< index_27 2)"
"(if(unsafe-fx< index_27 1)"
"(let-values()"
"(let-values(((v_28)(correlated-e e_0)))"
"(if(let-values(((or-part_29)(string? v_28)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)"
"(number? v_28)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)"
"(boolean? v_28)))"
"(if or-part_31"
" or-part_31"
"(char? v_28)))))))"
"(let-values() 1)"
"(let-values(((c1_32)"
"(if(pair? v_28)"
"(let-values(((rator_33)"
"(correlated-e"
"(car v_28))))"
"(let-values(((or-part_34)"
"(hash-ref"
" locals_0"
" rator_33"
" #f)))"
"(if or-part_34"
" or-part_34"
"(lookup-defn"
" defns_9"
" rator_33))))"
" #f)))"
"(if c1_32"
"((lambda(d_0)"
"(let-values(((ok?_36 _17_37 e18_38)"
"(let-values(((s_53) e_0))"
"(let-values(((orig-s_54)"
" s_53))"
"(let-values(((_17_55"
" e18_56)"
"(let-values(((s_57)"
"(if(1/syntax?"
" s_53)"
"(syntax-e$2"
" s_53)"
" s_53)))"
"(if(pair?"
" s_57)"
"(let-values(((_19_58)"
"(let-values(((s_60)"
"(car"
" s_57)))"
" s_60))"
"((e20_59)"
"(let-values(((s_61)"
"(cdr"
" s_57)))"
"(let-values(((s_62)"
"(if(1/syntax?"
" s_61)"
"(syntax-e$2"
" s_61)"
" s_61)))"
"(let-values(((flat-s_63)"
"(to-syntax-list.1$1"
" s_62)))"
"(if(not"
" flat-s_63)"
"(let-values()"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                            \"bad syntax\""
" orig-s_54))"
"(let-values()"
" flat-s_63)))))))"
"(values"
" _19_58"
" e20_59))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_54)))))"
"(values"
" #t"
" _17_55"
" e18_56))))))"
"(let-values(((n-args_52)"
"(length e18_38)))"
"(if(let-values(((or-part_73)"
"(if(let-values(((or-part_74)"
"(if(known-struct-op?"
" d_0)"
"(if(eq?"
" 'constructor"
"(known-struct-op-type"
" d_0))"
"(="
"(known-struct-op-field-count"
" d_0)"
" n-args_52)"
" #f)"
" #f)))"
"(if or-part_74"
" or-part_74"
"(if(known-function?"
" d_0)"
"(if(known-function-pure?"
" d_0)"
"(arity-includes?"
"(known-function-arity"
" d_0)"
" n-args_52)"
" #f)"
" #f)))"
"(let-values(((lst_75)"
" e18_38))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_75)))"
"((letrec-values(((for-loop_76)"
"(lambda(result_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((e_79)"
"(unsafe-car"
" lst_0))"
"((rest_80)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((result_81)"
"(let-values()"
"(let-values(((result_83)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_12"
" e_79"
" 1"
" locals_0))))))"
"(values"
" result_83)))))"
"(if(if(not"
"((lambda x_0"
"(not"
" result_81))"
" e_79))"
"(not"
" #f)"
" #f)"
"(for-loop_76"
" result_81"
" rest_80)"
" result_81)))"
" result_0)))))"
" for-loop_76)"
" #t"
" lst_75)))"
" #f)))"
"(if or-part_73"
" or-part_73"
"(if(known-function-of-satisfying?"
" d_0)"
"(if(="
" n-args_52"
"(length"
"(known-function-of-satisfying-arg-predicate-keys"
" d_0)))"
"(let-values(((lst_85)"
" e18_38)"
"((lst_86)"
"(known-function-of-satisfying-arg-predicate-keys"
" d_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_85)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_86)))"
"((letrec-values(((for-loop_87)"
"(lambda(result_0"
" lst_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
"(pair?"
" lst_1)"
" #f)"
"(let-values(((e_91)"
"(unsafe-car"
" lst_0))"
"((rest_92)"
"(unsafe-cdr"
" lst_0))"
"((key_93)"
"(unsafe-car"
" lst_1))"
"((rest_94)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((result_95)"
"(let-values()"
"(let-values(((result_97)"
"(let-values()"
"(let-values()"
"(if(not"
"(effects?_12"
" e_91"
" 1"
" locals_0))"
"(satisfies?"
" e_91"
" key_93"
" defns_9"
" locals_0)"
" #f)))))"
"(values"
" result_97)))))"
"(if(if(not"
"((lambda x_0"
"(not"
" result_95))"
" e_91))"
"(if(not"
"((lambda x_0"
"(not"
" result_95))"
" key_93))"
"(not"
" #f)"
" #f)"
" #f)"
"(for-loop_87"
" result_95"
" rest_92"
" rest_94)"
" result_95)))"
" result_0)))))"
" for-loop_87)"
" #t"
" lst_85"
" lst_86)))"
" #f)"
" #f)))"
" 1"
" #f))))"
" c1_32)"
"(let-values()"
"(if(let-values(((or-part_100)"
"(self-quoting-in-linklet?"
" v_28)))"
"(if or-part_100"
" or-part_100"
"(if(symbol? v_28)"
"(let-values(((or-part_101)"
"(hash-ref"
" locals_0"
" v_28"
" #f)))"
"(if or-part_101"
" or-part_101"
"(let-values(((or-part_102)"
"(lookup-defn"
" defns_9"
" v_28)))"
"(if or-part_102"
" or-part_102"
"(let-values(((or-part_103)"
"(built-in-symbol?"
" v_28)))"
"(if or-part_103"
" or-part_103"
"(ready-variable?_10"
" v_28)))))))"
" #f)))"
" 1"
" #f)))))))"
"(let-values() 1))"
"(if(unsafe-fx< index_27 3)"
"(let-values()"
"(let-values(((ok?_104"
" _21_105"
" ids22_106"
" rhs23_107"
" body24_108)"
"(let-values(((s_128) e_0))"
"(let-values(((orig-s_129) s_128))"
"(let-values(((_21_130"
" ids22_131"
" rhs23_132"
" body24_133)"
"(let-values(((s_134)"
"(if(1/syntax?"
" s_128)"
"(syntax-e$2"
" s_128)"
" s_128)))"
"(if(pair? s_134)"
"(let-values(((_25_135)"
"(let-values(((s_139)"
"(car"
" s_134)))"
" s_139))"
"((ids26_136"
" rhs27_137"
" body28_138)"
"(let-values(((s_140)"
"(cdr"
" s_134)))"
"(let-values(((s_141)"
"(if(1/syntax?"
" s_140)"
"(syntax-e$2"
" s_140)"
" s_140)))"
"(if(pair?"
" s_141)"
"(let-values(((ids29_142"
" rhs30_143)"
"(let-values(((s_145)"
"(car"
" s_141)))"
"(let-values(((s_146)"
"(if(1/syntax?"
" s_145)"
"(syntax-e$2"
" s_145)"
" s_145)))"
"(let-values(((flat-s_147)"
"(to-syntax-list.1$1"
" s_146)))"
"(if(not"
" flat-s_147)"
"(let-values()"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_129))"
"(let-values()"
"(let-values(((ids_154"
" rhs_155)"
"(let-values(((lst_156)"
" flat-s_147))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_156)))"
"((letrec-values(((for-loop_157)"
"(lambda(ids_0"
" rhs_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_161)"
"(unsafe-car"
" lst_0))"
"((rest_162)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((ids_163"
" rhs_164)"
"(let-values(((ids_165)"
" ids_0)"
"((rhs_166)"
" rhs_0))"
"(let-values(((ids_167"
" rhs_168)"
"(let-values()"
"(let-values(((ids36_169"
" rhs37_170)"
"(let-values()"
"(let-values(((s_171)"
"(if(1/syntax?"
" s_161)"
"(syntax-e$2"
" s_161)"
" s_161)))"
"(if(pair?"
" s_171)"
"(let-values(((ids32_172)"
"(let-values(((s_174)"
"(car"
" s_171)))"
" s_174))"
"((rhs33_173)"
"(let-values(((s_175)"
"(cdr"
" s_171)))"
"(let-values(((s_176)"
"(if(1/syntax?"
" s_175)"
"(syntax-e$2"
" s_175)"
" s_175)))"
"(if(pair?"
" s_176)"
"(let-values(((rhs34_177)"
"(let-values(((s_178)"
"(car"
" s_176)))"
" s_178))"
"(()"
"(let-values(((s_179)"
"(cdr"
" s_176)))"
"(let-values(((s_180)"
"(if(1/syntax?"
" s_179)"
"(syntax-e$2"
" s_179)"
" s_179)))"
"(if(null?"
" s_180)"
"(values)"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_129))))))"
"(values"
" rhs34_177))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_129))))))"
"(values"
" ids32_172"
" rhs33_173))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_129))))))"
"(values"
"(cons"
" ids36_169"
" ids_165)"
"(cons"
" rhs37_170"
" rhs_166))))))"
"(values"
" ids_167"
" rhs_168)))))"
"(if(not"
" #f)"
"(for-loop_157"
" ids_163"
" rhs_164"
" rest_162)"
"(values"
" ids_163"
" rhs_164))))"
"(values"
" ids_0"
" rhs_0))))))"
" for-loop_157)"
" null"
" null"
" lst_156)))))"
"(values"
"(reverse$1"
" ids_154)"
"(reverse$1"
" rhs_155)))))))))"
"((body31_144)"
"(let-values(((s_190)"
"(cdr"
" s_141)))"
"(let-values(((s_191)"
"(if(1/syntax?"
" s_190)"
"(syntax-e$2"
" s_190)"
" s_190)))"
"(if(pair?"
" s_191)"
"(let-values(((body35_192)"
"(let-values(((s_193)"
"(car"
" s_191)))"
" s_193))"
"(()"
"(let-values(((s_194)"
"(cdr"
" s_191)))"
"(let-values(((s_195)"
"(if(1/syntax?"
" s_194)"
"(syntax-e$2"
" s_194)"
" s_194)))"
"(if(null?"
" s_195)"
"(values)"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_129))))))"
"(values"
" body35_192))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_129))))))"
"(values"
" ids29_142"
" rhs30_143"
" body31_144))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_129))))))"
"(values"
" _25_135"
" ids26_136"
" rhs27_137"
" body28_138))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_129)))))"
"(values"
" #t"
" _21_130"
" ids22_131"
" rhs23_132"
" body24_133))))))"
"(if(not"
"(let-values(((lst_208) ids22_106)"
"((lst_209) rhs23_107))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_208)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_209)))"
"((letrec-values(((for-loop_210)"
"(lambda(result_0"
" lst_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
"(pair? lst_1)"
" #f)"
"(let-values(((ids_214)"
"(unsafe-car"
" lst_0))"
"((rest_215)"
"(unsafe-cdr"
" lst_0))"
"((rhs_216)"
"(unsafe-car"
" lst_1))"
"((rest_217)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((result_218)"
"(let-values()"
"(let-values(((result_220)"
"(let-values()"
"(let-values()"
"(effects?_12"
" rhs_216"
"(correlated-length"
" ids_214)"
" locals_0)))))"
"(values"
" result_220)))))"
"(if(if(not"
"((lambda x_0"
" result_218)"
" ids_214))"
"(if(not"
"((lambda x_0"
" result_218)"
" rhs_216))"
"(not"
" #f)"
" #f)"
" #f)"
"(for-loop_210"
" result_218"
" rest_215"
" rest_217)"
" result_218)))"
" result_0)))))"
" for-loop_210)"
" #f"
" lst_208"
" lst_209))))"
"(loop_23"
" body24_108"
"(add-binding-info"
" locals_0"
" ids22_106"
" rhs23_107))"
" #f)))"
"(if(unsafe-fx< index_27 4)"
"(let-values()"
"(let-values(((ok?_223 _38_224 e39_225)"
"(let-values(((s_239) e_0))"
"(let-values(((orig-s_240) s_239))"
"(let-values(((_38_241 e39_242)"
"(let-values(((s_243)"
"(if(1/syntax?"
" s_239)"
"(syntax-e$2"
" s_239)"
" s_239)))"
"(if(pair?"
" s_243)"
"(let-values(((_40_244)"
"(let-values(((s_246)"
"(car"
" s_243)))"
" s_246))"
"((e41_245)"
"(let-values(((s_247)"
"(cdr"
" s_243)))"
"(let-values(((s_248)"
"(if(1/syntax?"
" s_247)"
"(syntax-e$2"
" s_247)"
" s_247)))"
"(let-values(((flat-s_249)"
"(to-syntax-list.1$1"
" s_248)))"
"(if(not"
" flat-s_249)"
"(let-values()"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_240))"
"(let-values()"
" flat-s_249)))))))"
"(values"
" _40_244"
" e41_245))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_240)))))"
"(values"
" #t"
" _38_241"
" e39_242))))))"
"(if(let-values(((lst_259) e39_225))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_259)))"
"((letrec-values(((for-loop_260)"
"(lambda(result_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_263)"
"(unsafe-car"
" lst_0))"
"((rest_264)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((result_265)"
"(let-values()"
"(let-values(((result_267)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_12"
" e_263"
" 1"
" locals_0))))))"
"(values"
" result_267)))))"
"(if(if(not"
"((lambda x_0"
"(not"
" result_265))"
" e_263))"
"(not"
" #f)"
" #f)"
"(for-loop_260"
" result_265"
" rest_264)"
" result_265)))"
" result_0)))))"
" for-loop_260)"
" #t"
" lst_259)))"
"(length e39_225)"
" #f)))"
"(if(unsafe-fx< index_27 5)"
"(let-values()"
"(let-values(((ok?_269 _42_270 e43_271)"
"(let-values(((s_285) e_0))"
"(let-values(((orig-s_286)"
" s_285))"
"(let-values(((_42_287"
" e43_288)"
"(let-values(((s_289)"
"(if(1/syntax?"
" s_285)"
"(syntax-e$2"
" s_285)"
" s_285)))"
"(if(pair?"
" s_289)"
"(let-values(((_44_290)"
"(let-values(((s_292)"
"(car"
" s_289)))"
" s_292))"
"((e45_291)"
"(let-values(((s_293)"
"(cdr"
" s_289)))"
"(let-values(((s_294)"
"(if(1/syntax?"
" s_293)"
"(syntax-e$2"
" s_293)"
" s_293)))"
"(let-values(((flat-s_295)"
"(to-syntax-list.1$1"
" s_294)))"
"(if(not"
" flat-s_295)"
"(let-values()"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_286))"
"(let-values()"
" flat-s_295)))))))"
"(values"
" _44_290"
" e45_291))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_286)))))"
"(values"
" #t"
" _42_287"
" e43_288))))))"
"(if(let-values(((lst_305) e43_271))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_305)))"
"((letrec-values(((for-loop_306)"
"(lambda(result_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((e_309)"
"(unsafe-car"
" lst_0))"
"((rest_310)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((result_311)"
"(let-values()"
"(let-values(((result_313)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_12"
" e_309"
" 1"
" locals_0))))))"
"(values"
" result_313)))))"
"(if(if(not"
"((lambda x_0"
"(not"
" result_311))"
" e_309))"
"(not"
" #f)"
" #f)"
"(for-loop_306"
" result_311"
" rest_310)"
" result_311)))"
" result_0)))))"
" for-loop_306)"
" #t"
" lst_305)))"
" 1"
" #f)))"
"(let-values()"
"(let-values(((ok?_315 _46_316 e47_317)"
"(let-values(((s_331) e_0))"
"(let-values(((orig-s_332)"
" s_331))"
"(let-values(((_46_333"
" e47_334)"
"(let-values(((s_335)"
"(if(1/syntax?"
" s_331)"
"(syntax-e$2"
" s_331)"
" s_331)))"
"(if(pair?"
" s_335)"
"(let-values(((_48_336)"
"(let-values(((s_338)"
"(car"
" s_335)))"
" s_338))"
"((e49_337)"
"(let-values(((s_339)"
"(cdr"
" s_335)))"
"(let-values(((s_340)"
"(if(1/syntax?"
" s_339)"
"(syntax-e$2"
" s_339)"
" s_339)))"
"(let-values(((flat-s_341)"
"(to-syntax-list.1$1"
" s_340)))"
"(if(not"
" flat-s_341)"
"(let-values()"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_332))"
"(let-values()"
" flat-s_341)))))))"
"(values"
" _48_336"
" e49_337))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_332)))))"
"(values"
" #t"
" _46_333"
" e47_334))))))"
"((letrec-values(((bloop_351)"
"(lambda(es_0)"
"(begin"
" 'bloop"
"(if(null? es_0)"
"(let-values() #f)"
"(if(null?(cdr es_0))"
"(let-values()"
"(loop_23"
"(car es_0)"
" locals_0))"
"(let-values()"
"(if(not"
"(effects?_12"
"(car es_0)"
" #f"
" locals_0))"
"(bloop_351"
"(cdr es_0))"
" #f))))))))"
" bloop_351)"
" e47_317)))))))"
"(if(unsafe-fx< index_27 9)"
"(if(unsafe-fx< index_27 7)"
"(let-values()"
"(let-values(((ok?_353 _50_354 e051_355 e52_356)"
"(let-values(((s_373) e_0))"
"(let-values(((orig-s_374) s_373))"
"(let-values(((_50_375"
" e051_376"
" e52_377)"
"(let-values(((s_378)"
"(if(1/syntax?"
" s_373)"
"(syntax-e$2"
" s_373)"
" s_373)))"
"(if(pair? s_378)"
"(let-values(((_53_379)"
"(let-values(((s_382)"
"(car"
" s_378)))"
" s_382))"
"((e054_380"
" e55_381)"
"(let-values(((s_383)"
"(cdr"
" s_378)))"
"(let-values(((s_384)"
"(if(1/syntax?"
" s_383)"
"(syntax-e$2"
" s_383)"
" s_383)))"
"(if(pair?"
" s_384)"
"(let-values(((e056_385)"
"(let-values(((s_387)"
"(car"
" s_384)))"
" s_387))"
"((e57_386)"
"(let-values(((s_388)"
"(cdr"
" s_384)))"
"(let-values(((s_389)"
"(if(1/syntax?"
" s_388)"
"(syntax-e$2"
" s_388)"
" s_388)))"
"(let-values(((flat-s_390)"
"(to-syntax-list.1$1"
" s_389)))"
"(if(not"
" flat-s_390)"
"(let-values()"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_374))"
"(let-values()"
" flat-s_390)))))))"
"(values"
" e056_385"
" e57_386))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_374))))))"
"(values"
" _53_379"
" e054_380"
" e55_381))"
"((lambda(false_0"
" str_0"
" e_1)"
"(error"
" str_0))"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_374)))))"
"(values"
" #t"
" _50_375"
" e051_376"
" e52_377))))))"
"(if(let-values(((lst_403) e52_356))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_403)))"
"((letrec-values(((for-loop_404)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_407)"
"(unsafe-car"
" lst_0))"
"((rest_408)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((result_409)"
"(let-values()"
"(let-values(((result_411)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_12"
" e_407"
" #f"
" locals_0))))))"
"(values"
" result_411)))))"
"(if(if(not"
"((lambda x_0"
"(not"
" result_409))"
" e_407))"
"(not #f)"
" #f)"
"(for-loop_404"
" result_409"
" rest_408)"
" result_409)))"
" result_0)))))"
" for-loop_404)"
" #t"
" lst_403)))"
"(loop_23 e051_355 locals_0)"
" #f)))"
"(if(unsafe-fx< index_27 8)"
"(let-values()"
"(if(ok-make-struct-type?"
" e_0"
" ready-variable?_10"
" defns_9)"
" 5"
" #f))"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_0"
" locals_0"
" 'general-accessor"
" defns_9)"
" 1"
" #f))))"
"(if(unsafe-fx< index_27 10)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_0"
" locals_0"
" 'general-mutator"
" defns_9)"
" 1"
" #f))"
"(if(unsafe-fx< index_27 11)"
"(let-values()"
"(if(ok-make-struct-type-property? e_0 defns_9)"
" 3"
" #f))"
"(if(unsafe-fx< index_27 12)"
"(let-values()"
"(let-values(((ok?_413"
" gs58_414"
" quot59_415"
" datum60_416)"
"(let-values(((s_433) e_0))"
"(if(let-values(((s_434)"
"(if(1/syntax?"
" s_433)"
"(syntax-e$2"
" s_433)"
" s_433)))"
"(if(pair? s_434)"
"(if(let-values(((s_435)"
"(car"
" s_434)))"
" #t)"
"(let-values(((s_436)"
"(cdr"
" s_434)))"
"(let-values(((s_437)"
"(if(1/syntax?"
" s_436)"
"(syntax-e$2"
" s_436)"
" s_436)))"
"(if(pair? s_437)"
"(if(let-values(((s_438)"
"(car"
" s_437)))"
"(let-values(((s_439)"
"(if(1/syntax?"
" s_438)"
"(syntax-e$2"
" s_438)"
" s_438)))"
"(if(pair?"
" s_439)"
"(if(let-values(((s_440)"
"(car"
" s_439)))"
" #t)"
"(let-values(((s_441)"
"(cdr"
" s_439)))"
"(let-values(((s_442)"
"(if(1/syntax?"
" s_441)"
"(syntax-e$2"
" s_441)"
" s_441)))"
"(if(pair?"
" s_442)"
"(if(let-values(((s_443)"
"(car"
" s_442)))"
" #t)"
"(let-values(((s_444)"
"(cdr"
" s_442)))"
"(let-values(((s_445)"
"(if(1/syntax?"
" s_444)"
"(syntax-e$2"
" s_444)"
" s_444)))"
"(null?"
" s_445)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
"(let-values(((s_446)"
"(cdr"
" s_437)))"
"(let-values(((s_447)"
"(if(1/syntax?"
" s_446)"
"(syntax-e$2"
" s_446)"
" s_446)))"
"(null?"
" s_447)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((gs58_449"
" quot59_450"
" datum60_451)"
"(let-values(((s_452)"
"(if(1/syntax?"
" s_433)"
"(syntax-e$2"
" s_433)"
" s_433)))"
"(let-values(((gs61_453)"
"(let-values(((s_456)"
"(car"
" s_452)))"
" s_456))"
"((quot62_454"
" datum63_455)"
"(let-values(((s_457)"
"(cdr"
" s_452)))"
"(let-values(((s_458)"
"(if(1/syntax?"
" s_457)"
"(syntax-e$2"
" s_457)"
" s_457)))"
"(let-values(((quot64_459"
" datum65_460)"
"(let-values(((s_461)"
"(car"
" s_458)))"
"(let-values(((s_462)"
"(if(1/syntax?"
" s_461)"
"(syntax-e$2"
" s_461)"
" s_461)))"
"(let-values(((quot66_463)"
"(let-values(((s_465)"
"(car"
" s_462)))"
" s_465))"
"((datum67_464)"
"(let-values(((s_466)"
"(cdr"
" s_462)))"
"(let-values(((s_467)"
"(if(1/syntax?"
" s_466)"
"(syntax-e$2"
" s_466)"
" s_466)))"
"(let-values(((datum68_468)"
"(let-values(((s_469)"
"(car"
" s_467)))"
" s_469))"
"(()"
"(let-values(((s_470)"
"(cdr"
" s_467)))"
"(let-values(((s_471)"
"(if(1/syntax?"
" s_470)"
"(syntax-e$2"
" s_470)"
" s_470)))"
"(values)))))"
"(values"
" datum68_468))))))"
"(values"
" quot66_463"
" datum67_464)))))"
"(()"
"(let-values(((s_478)"
"(cdr"
" s_458)))"
"(let-values(((s_479)"
"(if(1/syntax?"
" s_478)"
"(syntax-e$2"
" s_478)"
" s_478)))"
"(values)))))"
"(values"
" quot64_459"
" datum65_460))))))"
"(values"
" gs61_453"
" quot62_454"
" datum63_455)))))"
"(values"
" #t"
" gs58_449"
" quot59_450"
" datum60_451)))"
"(values #f #f #f #f)))))"
"(if(let-values(((or-part_486)"
"(if ok?_413"
"(if(eq?"
" 'quote"
" quot59_415)"
"(let-values(((or-part_487)"
"(symbol?"
" datum60_416)))"
"(if or-part_487"
" or-part_487"
"(string?"
" datum60_416)))"
" #f)"
" #f)))"
"(if or-part_486"
" or-part_486"
"(null?(cdr(correlated-e e_0)))))"
" 1"
" #f)))"
"(let-values()"
"(let-values(((ok?_488"
" _69_489"
" id:rator70_490"
" id:arg71_491"
" thn72_492"
" els73_493)"
"(let-values(((s_516) e_0))"
"(if(let-values(((s_517)"
"(if(1/syntax?"
" s_516)"
"(syntax-e$2"
" s_516)"
" s_516)))"
"(if(pair? s_517)"
"(if(let-values(((s_518)"
"(car"
" s_517)))"
" #t)"
"(let-values(((s_519)"
"(cdr"
" s_517)))"
"(let-values(((s_520)"
"(if(1/syntax?"
" s_519)"
"(syntax-e$2"
" s_519)"
" s_519)))"
"(if(pair? s_520)"
"(if(let-values(((s_521)"
"(car"
" s_520)))"
"(let-values(((s_522)"
"(if(1/syntax?"
" s_521)"
"(syntax-e$2"
" s_521)"
" s_521)))"
"(if(pair?"
" s_522)"
"(if(let-values(((s_523)"
"(car"
" s_522)))"
"(let-values(((or-part_524)"
"(if(1/syntax?"
" s_523)"
"(symbol?"
"(syntax-e$2"
" s_523))"
" #f)))"
"(if or-part_524"
" or-part_524"
"(symbol?"
" s_523))))"
"(let-values(((s_525)"
"(cdr"
" s_522)))"
"(let-values(((s_526)"
"(if(1/syntax?"
" s_525)"
"(syntax-e$2"
" s_525)"
" s_525)))"
"(if(pair?"
" s_526)"
"(if(let-values(((s_527)"
"(car"
" s_526)))"
"(let-values(((or-part_528)"
"(if(1/syntax?"
" s_527)"
"(symbol?"
"(syntax-e$2"
" s_527))"
" #f)))"
"(if or-part_528"
" or-part_528"
"(symbol?"
" s_527))))"
"(let-values(((s_529)"
"(cdr"
" s_526)))"
"(let-values(((s_530)"
"(if(1/syntax?"
" s_529)"
"(syntax-e$2"
" s_529)"
" s_529)))"
"(null?"
" s_530)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
"(let-values(((s_531)"
"(cdr"
" s_520)))"
"(let-values(((s_532)"
"(if(1/syntax?"
" s_531)"
"(syntax-e$2"
" s_531)"
" s_531)))"
"(if(pair?"
" s_532)"
"(if(let-values(((s_533)"
"(car"
" s_532)))"
" #t)"
"(let-values(((s_534)"
"(cdr"
" s_532)))"
"(let-values(((s_535)"
"(if(1/syntax?"
" s_534)"
"(syntax-e$2"
" s_534)"
" s_534)))"
"(if(pair?"
" s_535)"
"(if(let-values(((s_536)"
"(car"
" s_535)))"
" #t)"
"(let-values(((s_537)"
"(cdr"
" s_535)))"
"(let-values(((s_538)"
"(if(1/syntax?"
" s_537)"
"(syntax-e$2"
" s_537)"
" s_537)))"
"(null?"
" s_538)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_69_540"
" id:rator70_541"
" id:arg71_542"
" thn72_543"
" els73_544)"
"(let-values(((s_545)"
"(if(1/syntax?"
" s_516)"
"(syntax-e$2"
" s_516)"
" s_516)))"
"(let-values(((_74_546)"
"(let-values(((s_551)"
"(car"
" s_545)))"
" s_551))"
"((id:rator75_547"
" id:arg76_548"
" thn77_549"
" els78_550)"
"(let-values(((s_552)"
"(cdr"
" s_545)))"
"(let-values(((s_553)"
"(if(1/syntax?"
" s_552)"
"(syntax-e$2"
" s_552)"
" s_552)))"
"(let-values(((id:rator79_554"
" id:arg80_555)"
"(let-values(((s_558)"
"(car"
" s_553)))"
"(let-values(((s_559)"
"(if(1/syntax?"
" s_558)"
"(syntax-e$2"
" s_558)"
" s_558)))"
"(let-values(((id:rator83_560)"
"(let-values(((s_562)"
"(car"
" s_559)))"
" s_562))"
"((id:arg84_561)"
"(let-values(((s_563)"
"(cdr"
" s_559)))"
"(let-values(((s_564)"
"(if(1/syntax?"
" s_563)"
"(syntax-e$2"
" s_563)"
" s_563)))"
"(let-values(((id:arg85_565)"
"(let-values(((s_566)"
"(car"
" s_564)))"
" s_566))"
"(()"
"(let-values(((s_567)"
"(cdr"
" s_564)))"
"(let-values(((s_568)"
"(if(1/syntax?"
" s_567)"
"(syntax-e$2"
" s_567)"
" s_567)))"
"(values)))))"
"(values"
" id:arg85_565))))))"
"(values"
" id:rator83_560"
" id:arg84_561)))))"
"((thn81_556"
" els82_557)"
"(let-values(((s_575)"
"(cdr"
" s_553)))"
"(let-values(((s_576)"
"(if(1/syntax?"
" s_575)"
"(syntax-e$2"
" s_575)"
" s_575)))"
"(let-values(((thn86_577)"
"(let-values(((s_579)"
"(car"
" s_576)))"
" s_579))"
"((els87_578)"
"(let-values(((s_580)"
"(cdr"
" s_576)))"
"(let-values(((s_581)"
"(if(1/syntax?"
" s_580)"
"(syntax-e$2"
" s_580)"
" s_580)))"
"(let-values(((els88_582)"
"(let-values(((s_583)"
"(car"
" s_581)))"
" s_583))"
"(()"
"(let-values(((s_584)"
"(cdr"
" s_581)))"
"(let-values(((s_585)"
"(if(1/syntax?"
" s_584)"
"(syntax-e$2"
" s_584)"
" s_584)))"
"(values)))))"
"(values"
" els88_582))))))"
"(values"
" thn86_577"
" els87_578))))))"
"(values"
" id:rator79_554"
" id:arg80_555"
" thn81_556"
" els82_557))))))"
"(values"
" _74_546"
" id:rator75_547"
" id:arg76_548"
" thn77_549"
" els78_550)))))"
"(values"
" #t"
" _69_540"
" id:rator70_541"
" id:arg71_542"
" thn72_543"
" els73_544)))"
"(values #f #f #f #f #f #f)))))"
"(if ok?_488"
"(let-values()"
"(let-values(((c2_598)"
"(let-values(((or-part_599)"
"(hash-ref"
" locals_0"
" id:rator70_490"
" #f)))"
"(if or-part_599"
" or-part_599"
"(lookup-defn"
" defns_9"
" id:rator70_490)))))"
"(if c2_598"
"((lambda(d_0)"
"(if(known-predicate? d_0)"
"(if(not"
"(effects?_12"
" thn72_492"
" expected-results_7"
"(hash-set"
" locals_0"
" id:arg71_491"
"(known-satisfies7.1"
"(known-predicate-key"
" d_0)))))"
"(loop_23 els73_493 locals_0)"
" #f)"
" #f))"
" c2_598)"
"(let-values() #f))))"
"(let-values()"
"(let-values(((ok?_601"
" _89_602"
" tst90_603"
" thn91_604"
" els92_605)"
"(let-values(((s_625) e_0))"
"(if(let-values(((s_626)"
"(if(1/syntax?"
" s_625)"
"(syntax-e$2"
" s_625)"
" s_625)))"
"(if(pair? s_626)"
"(if(let-values(((s_627)"
"(car"
" s_626)))"
" #t)"
"(let-values(((s_628)"
"(cdr"
" s_626)))"
"(let-values(((s_629)"
"(if(1/syntax?"
" s_628)"
"(syntax-e$2"
" s_628)"
" s_628)))"
"(if(pair?"
" s_629)"
"(if(let-values(((s_630)"
"(car"
" s_629)))"
" #t)"
"(let-values(((s_631)"
"(cdr"
" s_629)))"
"(let-values(((s_632)"
"(if(1/syntax?"
" s_631)"
"(syntax-e$2"
" s_631)"
" s_631)))"
"(if(pair?"
" s_632)"
"(if(let-values(((s_633)"
"(car"
" s_632)))"
" #t)"
"(let-values(((s_634)"
"(cdr"
" s_632)))"
"(let-values(((s_635)"
"(if(1/syntax?"
" s_634)"
"(syntax-e$2"
" s_634)"
" s_634)))"
"(if(pair?"
" s_635)"
"(if(let-values(((s_636)"
"(car"
" s_635)))"
" #t)"
"(let-values(((s_637)"
"(cdr"
" s_635)))"
"(let-values(((s_638)"
"(if(1/syntax?"
" s_637)"
"(syntax-e$2"
" s_637)"
" s_637)))"
"(null?"
" s_638)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_89_640"
" tst90_641"
" thn91_642"
" els92_643)"
"(let-values(((s_644)"
"(if(1/syntax?"
" s_625)"
"(syntax-e$2"
" s_625)"
" s_625)))"
"(let-values(((_93_645)"
"(let-values(((s_649)"
"(car"
" s_644)))"
" s_649))"
"((tst94_646"
" thn95_647"
" els96_648)"
"(let-values(((s_650)"
"(cdr"
" s_644)))"
"(let-values(((s_651)"
"(if(1/syntax?"
" s_650)"
"(syntax-e$2"
" s_650)"
" s_650)))"
"(let-values(((tst97_652)"
"(let-values(((s_655)"
"(car"
" s_651)))"
" s_655))"
"((thn98_653"
" els99_654)"
"(let-values(((s_656)"
"(cdr"
" s_651)))"
"(let-values(((s_657)"
"(if(1/syntax?"
" s_656)"
"(syntax-e$2"
" s_656)"
" s_656)))"
"(let-values(((thn100_658)"
"(let-values(((s_660)"
"(car"
" s_657)))"
" s_660))"
"((els101_659)"
"(let-values(((s_661)"
"(cdr"
" s_657)))"
"(let-values(((s_662)"
"(if(1/syntax?"
" s_661)"
"(syntax-e$2"
" s_661)"
" s_661)))"
"(let-values(((els102_663)"
"(let-values(((s_664)"
"(car"
" s_662)))"
" s_664))"
"(()"
"(let-values(((s_665)"
"(cdr"
" s_662)))"
"(let-values(((s_666)"
"(if(1/syntax?"
" s_665)"
"(syntax-e$2"
" s_665)"
" s_665)))"
"(values)))))"
"(values"
" els102_663))))))"
"(values"
" thn100_658"
" els101_659))))))"
"(values"
" tst97_652"
" thn98_653"
" els99_654))))))"
"(values"
" _93_645"
" tst94_646"
" thn95_647"
" els96_648)))))"
"(values"
" #t"
" _89_640"
" tst90_641"
" thn91_642"
" els92_643)))"
"(values"
" #f"
" #f"
" #f"
" #f"
" #f)))))"
"(if ok?_601"
"(if(not"
"(effects?_12"
" tst90_603"
" 1"
" locals_0))"
"(if(not"
"(effects?_12"
" thn91_604"
" expected-results_7"
" locals_0))"
"(loop_23 els92_605 locals_0)"
" #f)"
" #f)"
" #f)))))))))))))))))"
" loop_23)"
" e_6"
" locals_8)))"
"(not"
"(if actual-results_13"
"(let-values(((or-part_679)(not expected-results_7)))"
"(if or-part_679 or-part_679(= actual-results_13 expected-results_7)))"
" #f)))))))))))))"
"(define-values"
"(satisfies?)"
"(lambda(e_0 key_0 defns_0 locals_0)"
"(begin"
"(let-values(((d_713)"
"(let-values(((or-part_714)(hash-ref locals_0 e_0 #f)))"
"(if or-part_714 or-part_714(lookup-defn defns_0 e_0)))))"
"(if d_713(if(known-satisfies? d_713)(eq? key_0(known-satisfies-predicate-key d_713)) #f) #f)))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_0 idss_0 rhss_0)"
"(begin"
"(let-values(((lst_718) idss_0)((lst_719) rhss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_718)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_719)))"
"((letrec-values(((for-loop_720)"
"(lambda(locals_1 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((ids_724)(unsafe-car lst_0))"
"((rest_725)(unsafe-cdr lst_0))"
"((rhs_726)(unsafe-car lst_1))"
"((rest_727)(unsafe-cdr lst_1)))"
"(let-values(((locals_728)"
"(let-values(((locals_729) locals_1))"
"(let-values(((locals_730)"
"(let-values()"
"((letrec-values(((loop_731)"
"(lambda(rhs_0)"
"(begin"
" 'loop"
"(let-values(((tmp_733)"
"(if(pair?"
"(correlated-e"
" rhs_0))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_0)))"
" #f)))"
"(if(equal?"
" tmp_733"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_734)"
"(extract-struct-field-count-lower-bound"
" rhs_0)))"
"(let-values(((lst_735)"
"(correlated->list"
" ids_724))"
"((lst_736)"
" '(struct-type"
" constructor"
" predicate"
" general-accessor"
" general-mutator)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_735)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_736)))"
"((letrec-values(((for-loop_737)"
"(lambda(locals_2"
" lst_2"
" lst_3)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_2)"
"(pair?"
" lst_3)"
" #f)"
"(let-values(((id_741)"
"(unsafe-car"
" lst_2))"
"((rest_742)"
"(unsafe-cdr"
" lst_2))"
"((type_743)"
"(unsafe-car"
" lst_3))"
"((rest_744)"
"(unsafe-cdr"
" lst_3)))"
"(let-values(((locals_745)"
"(let-values(((locals_746)"
" locals_2))"
"(let-values(((locals_747)"
"(let-values()"
"(hash-set"
" locals_746"
"(correlated-e"
" id_741)"
"(known-struct-op8.1"
" type_743"
" field-count_734)))))"
"(values"
" locals_747)))))"
"(if(not"
" #f)"
"(for-loop_737"
" locals_745"
" rest_742"
" rest_744)"
" locals_745)))"
" locals_2)))))"
" for-loop_737)"
" locals_729"
" lst_735"
" lst_736)))))"
"(if(equal?"
" tmp_733"
" 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_0)))"
"(loop_731"
"(caddr"
"(correlated->list"
" rhs_0)))"
"(loop_731 #f)))"
"(let-values()"
"(let-values(((lst_748)"
"(correlated->list"
" ids_724)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_748)))"
"((letrec-values(((for-loop_749)"
"(lambda(locals_2"
" lst_2)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_2)"
"(let-values(((id_752)"
"(unsafe-car"
" lst_2))"
"((rest_753)"
"(unsafe-cdr"
" lst_2)))"
"(let-values(((locals_754)"
"(let-values(((locals_755)"
" locals_2))"
"(let-values(((locals_756)"
"(let-values()"
"(hash-set"
" locals_755"
"(correlated-e"
" id_752)"
" #t))))"
"(values"
" locals_756)))))"
"(if(not"
" #f)"
"(for-loop_749"
" locals_754"
" rest_753)"
" locals_754)))"
" locals_2)))))"
" for-loop_749)"
" locals_729"
" lst_748)))))))))))"
" loop_731)"
" rhs_726))))"
"(values locals_730)))))"
"(if(not #f)(for-loop_720 locals_728 rest_725 rest_727) locals_728)))"
" locals_1)))))"
" for-loop_720)"
" locals_0"
" lst_718"
" lst_719))))))"
"(define-values"
"(ok-make-struct-type-property?)"
"(lambda(e_0 defns_0)"
"(begin"
"(let-values(((l_759)(correlated->list e_0)))"
"(if(<= 2(length l_759) 5)"
"(let-values(((lst_760)(cdr l_759))"
"((lst_761)"
"(list"
"(lambda(v_0)(quoted? symbol? v_0))"
"(lambda(v_0)(is-lambda? v_0 2 defns_0))"
"(lambda(v_0)(ok-make-struct-type-property-super? v_0 defns_0))"
"(lambda(v_0)"
"(let-values(((v103_767) v_0)((temp104_768) 1)((defns105_769) defns_0))"
"(any-side-effects?9.1"
" defns105_769"
" unsafe-undefined"
" unsafe-undefined"
" v103_767"
" temp104_768))))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_760)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_761)))"
"((letrec-values(((for-loop_770)"
"(lambda(result_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((arg_774)(unsafe-car lst_0))"
"((rest_775)(unsafe-cdr lst_0))"
"((pred_776)(unsafe-car lst_1))"
"((rest_777)(unsafe-cdr lst_1)))"
"(let-values(((result_778)"
"(let-values()"
"(let-values(((result_780)"
"(let-values()"
"(let-values()(pred_776 arg_774)))))"
"(values result_780)))))"
"(if(if(not((lambda x_0(not result_778)) arg_774))"
"(if(not((lambda x_0(not result_778)) pred_776))(not #f) #f)"
" #f)"
"(for-loop_770 result_778 rest_775 rest_777)"
" result_778)))"
" result_0)))))"
" for-loop_770)"
" #t"
" lst_760"
" lst_761)))"
" #f)))))"
"(define-values"
"(ok-make-struct-type-property-super?)"
"(lambda(v_0 defns_0)"
"(begin"
"(let-values(((or-part_785)(quoted? null? v_0)))"
"(if or-part_785"
" or-part_785"
"(let-values(((or-part_786)(eq? 'null(correlated-e v_0))))"
"(if or-part_786"
" or-part_786"
"(if(pair?(correlated-e v_0))"
"(if(eq?(correlated-e(car(correlated-e v_0))) 'list)"
"(if(let-values(((lst_787)(cdr(correlated->list v_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_787)))"
"((letrec-values(((for-loop_788)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((prop+val_791)(unsafe-car lst_0))"
"((rest_792)(unsafe-cdr lst_0)))"
"(let-values(((result_793)"
"(let-values()"
"(let-values(((result_795)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_791)"
" 3)"
"(let-values(((prop+val_796)"
"(correlated->list"
" prop+val_791)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_796)))"
"(if(let-values(((or-part_797)"
"(memq"
"(correlated-e"
"(list-ref"
" prop+val_796"
" 1))"
" '(prop:procedure"
" prop:equal+hash"
" prop:custom-write))))"
"(if or-part_797"
" or-part_797"
"(known-property?"
"(lookup-defn"
" defns_0"
"(correlated-e"
"(list-ref"
" prop+val_796"
" 1))))))"
"(not"
"(let-values(((temp106_799)"
"(list-ref"
" prop+val_796"
" 2))"
"((temp107_800)"
" 1)"
"((defns108_801)"
" defns_0))"
"(any-side-effects?9.1"
" defns108_801"
" unsafe-undefined"
" unsafe-undefined"
" temp106_799"
" temp107_800)))"
" #f)"
" #f))"
" #f)))))"
"(values result_795)))))"
"(if(if(not((lambda x_0(not result_793)) prop+val_791))"
"(not #f)"
" #f)"
"(for-loop_788 result_793 rest_792)"
" result_793)))"
" result_0)))))"
" for-loop_788)"
" #t"
" lst_787)))"
"(="
"(sub1(correlated-length v_0))"
"(set-count"
"(let-values(((lst_803)(cdr(correlated->list v_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_803)))"
"((letrec-values(((for-loop_804)"
"(lambda(table_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((prop+val_807)(unsafe-car lst_0))"
"((rest_808)(unsafe-cdr lst_0)))"
"(let-values(((table_809)"
"(let-values(((table_810) table_0))"
"(let-values(((table_811)"
"(let-values()"
"(let-values(((key_812 val_813)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_807)"
" 1)))"
" #t))))"
"(hash-set"
" table_810"
" key_812"
" val_813)))))"
"(values table_811)))))"
"(if(not #f)(for-loop_804 table_809 rest_808) table_809)))"
" table_0)))))"
" for-loop_804)"
" '#hash()"
" lst_803)))))"
" #f)"
" #f)"
" #f))))))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_0 ready-variable?_0 defns_0)"
"(begin"
"(let-values(((l_817)(correlated->list e_0)))"
"(let-values(((init-field-count-expr_818)(if(>(length l_817) 3)(list-ref l_817 3) #f)))"
"(let-values(((auto-field-count-expr_819)(if(>(length l_817) 4)(list-ref l_817 4) #f)))"
"(let-values(((num-fields_820)"
"(maybe+"
"(field-count-expr-to-field-count init-field-count-expr_818)"
"(field-count-expr-to-field-count auto-field-count-expr_819))))"
"(let-values(((immutables-expr_821)"
"(let-values(((or-part_823)(if(>(length l_817) 9)(list-ref l_817 9) #f)))"
"(if or-part_823 or-part_823 'null))))"
"(let-values(((super-expr_822)(if(>(length l_817) 2)(list-ref l_817 2) #f)))"
"(if(>=(length l_817) 5)"
"(if(<=(length l_817) 12)"
"(let-values(((lst_824)(cdr l_817))"
"((lst_825)"
"(list"
"(lambda(v_0)(quoted? symbol? v_0))"
"(lambda(v_0)(super-ok? v_0 defns_0))"
"(lambda(v_0)(field-count-expr-to-field-count v_0))"
"(lambda(v_0)(field-count-expr-to-field-count v_0))"
"(lambda(v_0)"
"(not"
"(let-values(((v109_832) v_0)"
"((temp110_833) 1)"
"((ready-variable?111_834) ready-variable?_0)"
"((defns112_835) defns_0))"
"(any-side-effects?9.1"
" defns112_835"
" unsafe-undefined"
" ready-variable?111_834"
" v109_832"
" temp110_833))))"
"(lambda(v_0)"
"(known-good-struct-properties? v_0 immutables-expr_821 super-expr_822 defns_0))"
"(lambda(v_0)(inspector-or-false? v_0))"
"(lambda(v_0)(procedure-spec? v_0 num-fields_820))"
"(lambda(v_0)(immutables-ok? v_0 init-field-count-expr_818)))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_824)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_825)))"
"((letrec-values(((for-loop_840)"
"(lambda(result_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((arg_844)(unsafe-car lst_0))"
"((rest_845)(unsafe-cdr lst_0))"
"((pred_846)(unsafe-car lst_1))"
"((rest_847)(unsafe-cdr lst_1)))"
"(let-values(((result_848)"
"(let-values()"
"(let-values(((result_850)"
"(let-values()"
"(let-values()"
"(pred_846 arg_844)))))"
"(values result_850)))))"
"(if(if(not((lambda x_0(not result_848)) arg_844))"
"(if(not((lambda x_0(not result_848)) pred_846))"
"(not #f)"
" #f)"
" #f)"
"(for-loop_840 result_848 rest_845 rest_847)"
" result_848)))"
" result_0)))))"
" for-loop_840)"
" #t"
" lst_824"
" lst_825)))"
" #f)"
" #f))))))))))"
"(define-values"
"(super-ok?)"
"(lambda(e_0 defns_0)"
"(begin"
"(let-values(((or-part_855)(quoted? false? e_0)))"
"(if or-part_855"
" or-part_855"
"(let-values(((o_856)(lookup-defn defns_0(correlated-e e_0))))"
"(if o_856(if(known-struct-op? o_856)(eq? 'struct-type(known-struct-op-type o_856)) #f) #f)))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_0)"
"(begin"
"(let-values(((l_858)(correlated->list e_0)))"
"(+"
"(field-count-expr-to-field-count(list-ref l_858 3))"
"(field-count-expr-to-field-count(list-ref l_858 4)))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_0 v_0)"
"(begin"
"(let-values(((or-part_861)"
"(if(pair?(correlated-e v_0))"
"(if(eq?(correlated-e(car(correlated-e v_0))) 'quote)"
"(val?_0(correlated-e(correlated-cadr v_0)))"
" #f)"
" #f)))"
"(if or-part_861 or-part_861(val?_0(correlated-e v_0)))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_0)(begin(if(pair?(correlated-e v_0))(correlated-e(correlated-cadr v_0))(correlated-e v_0)))))"
"(define-values(false?)(lambda(v_0)(begin(eq?(correlated-e v_0) #f))))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_0)(begin(if(quoted? exact-nonnegative-integer? v_0)(quoted-value v_0) #f))))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_0)"
"(begin"
"(let-values(((or-part_866)(quoted? false? v_0)))"
"(if or-part_866"
" or-part_866"
"(let-values(((or-part_867)(if(quoted? symbol? v_0)(eq? 'prefab(quoted-value v_0)) #f)))"
"(if or-part_867"
" or-part_867"
"(if(= 1(correlated-length v_0))"
"(eq? 'current-inspector(correlated-e(car(correlated-e v_0))))"
" #f))))))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_0 immutables-expr_0 super-expr_0 defns_0)"
"(begin"
"(let-values(((or-part_872)(quoted? null? v_0)))"
"(if or-part_872"
" or-part_872"
"(let-values(((or-part_873)(eq? 'null(correlated-e v_0))))"
"(if or-part_873"
" or-part_873"
"(if(pair?(correlated-e v_0))"
"(if(eq?(correlated-e(car(correlated-e v_0))) 'list)"
"(if(let-values(((lst_874)(cdr(correlated->list v_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_874)))"
"((letrec-values(((for-loop_875)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((prop+val_878)(unsafe-car lst_0))"
"((rest_879)(unsafe-cdr lst_0)))"
"(let-values(((result_880)"
"(let-values()"
"(let-values(((result_882)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_878)"
" 3)"
"(let-values(((prop+val_883)"
"(correlated->list"
" prop+val_878)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_883)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_883 1)"
"(list-ref prop+val_883 2)"
" immutables-expr_0"
" super-expr_0"
" defns_0)"
" #f))"
" #f)))))"
"(values result_882)))))"
"(if(if(not((lambda x_0(not result_880)) prop+val_878))"
"(not #f)"
" #f)"
"(for-loop_875 result_880 rest_879)"
" result_880)))"
" result_0)))))"
" for-loop_875)"
" #t"
" lst_874)))"
"(="
"(sub1(correlated-length v_0))"
"(set-count"
"(let-values(((lst_885)(cdr(correlated->list v_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_885)))"
"((letrec-values(((for-loop_886)"
"(lambda(table_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((prop+val_889)(unsafe-car lst_0))"
"((rest_890)(unsafe-cdr lst_0)))"
"(let-values(((table_891)"
"(let-values(((table_892) table_0))"
"(let-values(((table_893)"
"(let-values()"
"(let-values(((key_894 val_895)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_889)"
" 1)))"
" #t))))"
"(hash-set"
" table_892"
" key_894"
" val_895)))))"
"(values table_893)))))"
"(if(not #f)(for-loop_886 table_891 rest_890) table_891)))"
" table_0)))))"
" for-loop_886)"
" '#hash()"
" lst_885)))))"
" #f)"
" #f)"
" #f))))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_0 val-expr_0 immutables-expr_0 super-expr_0 defns_0)"
"(begin"
"(let-values(((prop-name_901)(correlated-e prop-expr_0)))"
"(let-values(((tmp_902) prop-name_901))"
"(if(equal? tmp_902 'prop:evt)"
"(let-values()"
"(let-values(((or-part_903)(is-lambda? val-expr_0 1 defns_0)))"
"(if or-part_903 or-part_903(immutable-field? val-expr_0 immutables-expr_0))))"
"(if(equal? tmp_902 'prop:procedure)"
"(let-values()"
"(let-values(((or-part_904)(is-lambda? val-expr_0 1 defns_0)))"
"(if or-part_904 or-part_904(immutable-field? val-expr_0 immutables-expr_0))))"
"(if(equal? tmp_902 'prop:custom-write)"
"(let-values()(is-lambda? val-expr_0 3 defns_0))"
"(if(equal? tmp_902 'prop:equal+hash)"
"(let-values()"
"(let-values(((l_905)(correlated->list val-expr_0)))"
"(if(eq? 'list(car l_905))"
"(if(is-lambda?(list-ref l_905 1) 3 defns_0)"
"(if(is-lambda?(list-ref l_905 2) 2 defns_0)(is-lambda?(list-ref l_905 3) 2 defns_0) #f)"
" #f)"
" #f)))"
"(if(if(equal? tmp_902 'prop:method-arity-error) #t(equal? tmp_902 'prop:incomplete-arity))"
"(let-values()"
"(not"
"(let-values(((val-expr113_907) val-expr_0)((temp114_908) 1)((defns115_909) defns_0))"
"(any-side-effects?9.1"
" defns115_909"
" unsafe-undefined"
" unsafe-undefined"
" val-expr113_907"
" temp114_908))))"
"(if(equal? tmp_902 'prop:impersonator-of)"
"(let-values()(is-lambda? val-expr_0 1 defns_0))"
"(if(equal? tmp_902 'prop:arity-string)"
"(let-values()(is-lambda? val-expr_0 1 defns_0))"
"(if(equal? tmp_902 'prop:checked-procedure)"
"(let-values()(if(quoted? false? super-expr_0)(immutable-field? 1 immutables-expr_0) #f))"
"(let-values()"
"(let-values(((o_910)(lookup-defn defns_0 prop-name_901)))"
"(if o_910"
"(if(known-property? o_910)"
"(not"
"(let-values(((val-expr116_912) val-expr_0)"
"((temp117_913) 1)"
"((defns118_914) defns_0))"
"(any-side-effects?9.1"
" defns118_914"
" unsafe-undefined"
" unsafe-undefined"
" val-expr116_912"
" temp117_913)))"
" #f)"
" #f))))))))))))))))"
"(define-values"
"(is-lambda?)"
"(lambda(expr_0 arity_0 defns_0)"
"(begin"
"(let-values(((lookup_918)(lookup-defn defns_0 expr_0)))"
"(let-values(((or-part_919)"
"(if lookup_918"
"(if(known-function? lookup_918)"
"(let-values(((or-part_920)(not arity_0)))"
"(if or-part_920 or-part_920(arity-includes?(known-function-arity lookup_918) arity_0)))"
" #f)"
" #f)))"
"(if or-part_919"
" or-part_919"
"(let-values(((or-part_921)"
"(if(pair?(correlated-e expr_0))"
"(if(eq? 'case-lambda(car(correlated-e expr_0)))(not arity_0) #f)"
" #f)))"
"(if or-part_921"
" or-part_921"
"(if(pair?(correlated-e expr_0))"
"(if(eq? 'lambda(car(correlated-e expr_0)))"
"(let-values(((or-part_922)(not arity_0)))"
"(if or-part_922"
" or-part_922"
"((letrec-values(((loop_923)"
"(lambda(args_0 arity_1)"
"(begin"
" 'loop"
"(if(correlated? args_0)"
"(let-values()(loop_923(correlated-e args_0) arity_1))"
"(if(null? args_0)"
"(let-values()(zero? arity_1))"
"(if(pair? args_0)"
"(let-values()(loop_923(cdr args_0)(sub1 arity_1)))"
"(let-values()(not(negative? arity_1))))))))))"
" loop_923)"
"(cadr(correlated->list expr_0))"
" arity_0)))"
" #f)"
" #f)))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(a_0 n_0)"
"(begin"
"(let-values(((or-part_928)(equal? a_0 n_0)))"
"(if or-part_928"
" or-part_928"
"(if(list? a_0)"
"(let-values(((lst_929) a_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_929)))"
"((letrec-values(((for-loop_930)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((a_933)(unsafe-car lst_0))((rest_934)(unsafe-cdr lst_0)))"
"(let-values(((result_935)"
"(let-values()"
"(let-values(((result_937)"
"(let-values()"
"(let-values()(equal? a_933 n_0)))))"
"(values result_937)))))"
"(if(if(not((lambda x_0 result_935) a_933))(not #f) #f)"
"(for-loop_930 result_935 rest_934)"
" result_935)))"
" result_0)))))"
" for-loop_930)"
" #f"
" lst_929)))"
" #f))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_0 immutables-expr_0)"
"(begin"
"(if(quoted? exact-nonnegative-integer? val-expr_0)"
"(memv(quoted-value val-expr_0)(immutables-expr-to-immutables immutables-expr_0 null))"
" #f))))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_0 fail-v_0)"
"(begin"
"(let-values(((tmp_943)(if(pair?(correlated-e e_0))(correlated-e(car(correlated-e e_0))) #f)))"
"(if(equal? tmp_943 'quote)"
"(let-values()"
"(let-values(((v_944)(correlated-cadr e_0)))"
"(let-values(((or-part_945)"
"(if(correlated-length v_944)"
"(let-values(((l_946)(map2 correlated-e(correlated->list v_944))))"
"(if(andmap2 exact-nonnegative-integer? l_946)"
"(if(=(length l_946)(set-count(list->set l_946))) l_946 #f)"
" #f))"
" #f)))"
"(if or-part_945 or-part_945 fail-v_0))))"
"(let-values() fail-v_0))))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_0 field-count_0)"
"(begin"
"(let-values(((or-part_949)(quoted? false? e_0)))"
"(if or-part_949"
" or-part_949"
"(let-values(((or-part_950)"
"(if(quoted? exact-nonnegative-integer? e_0)"
"(if field-count_0(<(quoted-value e_0) field-count_0) #f)"
" #f)))"
"(if or-part_950 or-part_950(is-lambda? e_0 #f '#hasheq()))))))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_0 init-field-count-expr_0)"
"(begin"
"(let-values(((l_953)(immutables-expr-to-immutables e_0 #f)))"
"(let-values(((c_954)(field-count-expr-to-field-count init-field-count-expr_0)))"
"(if l_953"
"(let-values(((lst_955) l_953))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_955)))"
"((letrec-values(((for-loop_956)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((n_959)(unsafe-car lst_0))((rest_960)(unsafe-cdr lst_0)))"
"(let-values(((result_961)"
"(let-values()"
"(let-values(((result_963)"
"(let-values()"
"(let-values()(< n_959 c_954)))))"
"(values result_963)))))"
"(if(if(not((lambda x_0(not result_961)) n_959))(not #f) #f)"
"(for-loop_956 result_961 rest_960)"
" result_961)))"
" result_0)))))"
" for-loop_956)"
" #t"
" lst_955)))"
" #f))))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_0 locals_0 type_0 defns_0)"
"(begin"
"(let-values(((l_969)(correlated->list e_0)))"
"(let-values(((a_970)"
"(if(let-values(((or-part_971)(=(length l_969) 3)))"
"(if or-part_971 or-part_971(=(length l_969) 4)))"
"(let-values(((or-part_972)(hash-ref locals_0(correlated-e(list-ref l_969 1)) #f)))"
"(if or-part_972 or-part_972(lookup-defn defns_0(correlated-e(list-ref l_969 1)))))"
" #f)))"
"(if(known-struct-op? a_970)"
"(if(eq?(known-struct-op-type a_970) type_0)"
"(if(<(field-count-expr-to-field-count(list-ref l_969 2))(known-struct-op-field-count a_970))"
"(let-values(((or-part_973)(=(length l_969) 3)))"
"(if or-part_973 or-part_973(quoted? symbol?(list-ref l_969 3))))"
" #f)"
" #f)"
" #f))))))"
"(define-values(maybe+)(lambda(x_0 y_0)(begin(if x_0(if y_0(+ x_0 y_0) #f) #f))))"
"(define-values"
"(compile-single)"
"(lambda(p_0 cctx_0)"
"(begin"
"(let-values(((p12_4) p_0)((cctx13_5) cctx_0)((temp14_6) #f)((temp15_7) #t))"
"(compile-top9.1 temp14_6 temp15_7 #f p12_4 cctx13_5)))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_0 single-expression?2_0 to-source?3_0 p7_0 cctx8_0)"
"(begin"
" 'compile-top9"
"(let-values(((p_13) p7_0))"
"(let-values(((cctx_14) cctx8_0))"
"(let-values(((serializable?_15) serializable?1_0))"
"(let-values(((single-expression?_16) single-expression?2_0))"
"(let-values(((to-source?_17) to-source?3_0))"
"(let-values()"
"(let-values()"
"(let-values(((phase_18)(compile-context-phase cctx_14)))"
"(let-values(((mpis_19)(make-module-path-index-table)))"
"(let-values(((purely-functional?_20) #t))"
"(let-values(((body-linklets_21"
" min-phase_22"
" max-phase_23"
" phase-to-link-module-uses_24"
" phase-to-link-module-uses-expr_25"
" phase-to-link-extra-inspectorss_26"
" syntax-literals_27"
" no-root-context-pos_28)"
"(let-values(((temp16_32)(list p_13))"
"((cctx17_33) cctx_14)"
"((mpis18_34) mpis_19)"
"((temp19_35)"
"(if single-expression?_16"
"(list* '()(list syntax-literals-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literals-id)"
" instance-imports)))"
"((temp20_36)"
"(list"
" top-level-instance"
" empty-top-syntax-literal-instance"
" empty-instance-instance))"
"((to-source?21_37) to-source?_17)"
"((serializable?22_38) serializable?_15)"
"((temp23_39)(lambda()(set! purely-functional?_20 #f)))"
"((temp24_40)"
"(lambda(e_0 expected-results_0 phase_0 required-reference?_0)"
"(if(if purely-functional?_20"
"(let-values(((e27_48) e_0)"
"((expected-results28_49) expected-results_0)"
"((required-reference?29_50)"
" required-reference?_0))"
"(any-side-effects?9.1"
" unsafe-undefined"
" unsafe-undefined"
" required-reference?29_50"
" e27_48"
" expected-results28_49))"
" #f)"
"(let-values()(set! purely-functional?_20 #f))"
"(void))))"
"((temp25_41)"
"(lambda(s_0 cctx_0)"
"(begin"
"(set! purely-functional?_20 #f)"
"(compile-top-level-require s_0 cctx_0))))"
"((temp26_42)(not single-expression?_16)))"
"(compile-forms31.1"
" temp20_36"
" temp19_35"
" null"
" temp24_40"
" temp26_42"
" temp23_39"
" #f"
" null"
" unsafe-undefined"
" temp25_41"
" #f"
" serializable?22_38"
" to-source?21_37"
" temp16_32"
" cctx17_33"
" mpis18_34))))"
"(let-values(((add-metadata_29)"
"(lambda(ht_0)"
"(begin"
" 'add-metadata"
"(let-values(((ht_54)(hash-set ht_0 'original-phase phase_18)))"
"(let-values(((ht_55)(hash-set ht_54 'max-phase max-phase_23)))"
" ht_55))))))"
"(let-values(((bundle_30)"
"((if to-source?_17 values 1/hash->linklet-bundle)"
"(add-metadata_29"
"(if serializable?_15"
"(let-values()"
"(let-values(((syntax-literals-expr_56)"
"(let-values()"
"(generate-eager-syntax-literals!"
" syntax-literals_27"
" mpis_19"
" phase_18"
"(compile-context-self cctx_14)"
"(compile-context-namespace cctx_14)))))"
"(let-values(((link-linklet_57)"
"((if to-source?_17"
" values"
"(lambda(s_0)"
"(let-values()"
"(let-values(((linklet_59 new-keys_60)"
"(1/compile-linklet"
" s_0"
" #f"
"(vector"
" deserialize-instance"
" empty-eager-instance-instance)"
"(lambda(inst_0)"
"(values inst_0 #f)))))"
" linklet_59))))"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literals-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_19))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_18) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_25)"
"(list"
" 'define-values"
"(list syntax-literals-id)"
" syntax-literals-expr_56)))))"
"(hash-set body-linklets_21 'link link-linklet_57))))"
"(let-values() body-linklets_21))))))"
"(if to-source?_17"
"(let-values()(hasheq #f bundle_30))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_30))"
" #f"
" #f"
" #f"
" phase-to-link-module-uses_24"
"(current-code-inspector)"
" phase-to-link-extra-inspectorss_26"
"(mpis-as-vector mpis_19)"
"(syntax-literals-as-vector syntax-literals_27)"
" null"
" null"
"(extract-namespace-scopes(compile-context-namespace cctx_14))"
" purely-functional?_20)))))))))))))))))))"
"(define-values"
"(compile-top-level-require)"
"(lambda(p_0 cctx_0)"
"(begin"
"(let-values(((phase_93)(compile-context-phase cctx_0)))"
"(if(parsed-require? p_0)"
"(let-values()"
"(let-values(((form-stx_94)(compile-quote-syntax(syntax-disarm$1(parsed-s p_0)) cctx_0)))"
"(list top-level-require!-id form-stx_94 ns-id)))"
"(let-values() #f))))))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_0"
" frame-id1_0"
" in4_0"
" requires+provides3_0"
" top-level-bind-scope2_0"
" ids11_0"
" defined-syms12_0"
" self13_0"
" phase14_0"
" all-scopes-stx15_0)"
"(begin"
" 'select-defined-syms-and-bind!16"
"(let-values(((ids_28) ids11_0))"
"(let-values(((defined-syms_29) defined-syms12_0))"
"(let-values(((self_30) self13_0))"
"(let-values(((phase_31) phase14_0))"
"(let-values(((all-scopes-stx_32) all-scopes-stx15_0))"
"(let-values(((frame-id_33) frame-id1_0))"
"(let-values(((top-level-bind-scope_34) top-level-bind-scope2_0))"
"(let-values(((requires+provides_35) requires+provides3_0))"
"(let-values(((orig-s_36) in4_0))"
"(let-values(((as-transformer?_37) as-transformer?5_0))"
"(let-values()"
"(let-values(((defined-syms-at-phase_38)"
"(let-values(((or-part_39)(hash-ref defined-syms_29 phase_31 #f)))"
"(if or-part_39"
" or-part_39"
"(let-values(((ht_40)(make-hasheq)))"
"(begin(hash-set! defined-syms_29 phase_31 ht_40) ht_40))))))"
"(reverse$1"
"(let-values(((lst_41) ids_28))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_41)))"
"((letrec-values(((for-loop_42)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_45)(unsafe-car lst_0))"
"((rest_46)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_47)"
"(let-values(((fold-var_48) fold-var_0))"
"(let-values(((fold-var_49)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_50)"
"(syntax-e$1"
" id_45)))"
"(let-values(((defined-sym_51)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_38"
" sym_50"
" #f)"
" id_45"
" phase_31"
" top-level-bind-scope_34))"
"(if(no-extra-scopes?"
" id_45"
" all-scopes-stx_32"
" top-level-bind-scope_34"
" phase_31)"
"(symbol-interned?"
" sym_50)"
" #f)"
" #f)"
" sym_50"
"((letrec-values(((loop_53)"
"(lambda(pos_0)"
"(begin"
" 'loop"
"(let-values(((s_55)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                        \"~a.~a\""
" sym_50"
" pos_0))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_38"
" s_55"
" #f)"
" id_45"
" phase_31"
" top-level-bind-scope_34)"
"(loop_53"
"(add1"
" pos_0))"
" s_55))))))"
" loop_53)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_38"
" defined-sym_51"
" id_45)"
"(values))))"
"(let-values(((b_52)"
"(let-values(((self23_57)"
" self_30)"
"((phase24_58)"
" phase_31)"
"((defined-sym25_59)"
" defined-sym_51)"
"((frame-id26_60)"
" frame-id_33)"
"((sym27_61)"
" sym_50))"
"(make-module-binding22.1"
" #f"
" null"
" frame-id26_60"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" sym27_61"
" unsafe-undefined"
" self23_57"
" phase24_58"
" defined-sym25_59))))"
"(begin"
"(if requires+provides_35"
"(let-values()"
"(let-values(((requires+provides28_63)"
" requires+provides_35)"
"((id29_64)"
" id_45)"
"((phase30_65)"
" phase_31)"
"((b31_66)"
" b_52))"
"(remove-required-id!75.1"
" b31_66"
" requires+provides28_63"
" id29_64"
" phase30_65)))"
"(void))"
"(let-values(((id19_68)"
" id_45)"
"((b20_69)"
" b_52)"
"((phase21_70)"
" phase_31)"
"((orig-s22_71)"
" orig-s_36))"
"(add-binding!17.1"
" orig-s22_71"
" #f"
" id19_68"
" b20_69"
" phase21_70))"
"(if requires+provides_35"
"(let-values()"
"(let-values(((requires+provides32_73)"
" requires+provides_35)"
"((id33_74)"
" id_45)"
"((phase34_75)"
" phase_31)"
"((b35_76)"
" b_52)"
"((as-transformer?36_77)"
" as-transformer?_37))"
"(add-defined-or-required-id!19.1"
" as-transformer?36_77"
" #f"
" requires+provides32_73"
" id33_74"
" phase34_75"
" b35_76)))"
"(void))"
" defined-sym_51))))))"
" fold-var_48))))"
"(values fold-var_49)))))"
"(if(not #f)"
"(for-loop_42 fold-var_47 rest_46)"
" fold-var_47)))"
" fold-var_0)))))"
" for-loop_42)"
" null"
" lst_41)))))))))))))))))))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_0 all-scopes-stx_0 top-level-bind-scope_0 phase_0)"
"(begin"
"(let-values(((m-id_115)(datum->syntax$1 all-scopes-stx_0(syntax-e$1 id_0))))"
"(let-values(((or-part_116)(bound-identifier=?$1 id_0 m-id_115 phase_0)))"
"(if or-part_116"
" or-part_116"
"(if top-level-bind-scope_0"
"(bound-identifier=?$1 id_0(add-scope m-id_115 top-level-bind-scope_0) phase_0)"
" #f)))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_0 id_0 phase_0 top-level-bind-scope_0)"
"(begin"
"(if prev-id_0"
"(if(not(bound-identifier=?$1 prev-id_0 id_0 phase_0))"
"(let-values(((or-part_121)(not top-level-bind-scope_0)))"
"(if or-part_121"
" or-part_121"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_0 top-level-bind-scope_0)"
"(remove-scope id_0 top-level-bind-scope_0)"
" phase_0))))"
" #f)"
" #f))))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_0 ctx_0)"
"(begin"
"(let-values(((tl-ids37_125) tl-ids_0)"
"((temp38_126)(root-expand-context-defined-syms ctx_0))"
"((temp39_127)(root-expand-context-self-mpi ctx_0))"
"((temp40_128)(expand-context-phase ctx_0))"
"((temp41_129)(root-expand-context-all-scopes-stx ctx_0))"
"((temp42_130)(root-expand-context-frame-id ctx_0))"
"((temp43_131)(root-expand-context-top-level-bind-scope ctx_0)))"
"(select-defined-syms-and-bind!16.1"
" #f"
" temp42_130"
" #f"
" #f"
" temp43_131"
" tl-ids37_125"
" temp38_126"
" temp39_127"
" temp40_128"
" temp41_129)))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_0 phase_0 sym_0 id_0)"
"(begin"
"(let-values(((defined-syms-at-phase_136)"
"(let-values(((or-part_137)(hash-ref defined-syms_0 phase_0 #f)))"
"(if or-part_137"
" or-part_137"
"(let-values(((ht_138)(make-hasheq)))"
"(begin(hash-set! defined-syms_0 phase_0 ht_138) ht_138))))))"
"(hash-set! defined-syms-at-phase_136 sym_0 id_0)))))"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_0 evaled-ld-h_0)"
"(begin"
"(lambda(ns_0 phase-shift_0 original-self_0 self_0)"
"(let-values(((root-ctx_7)"
"(let-values(((temp1_11)(namespace-mpi ns_0)))"
"(make-root-expand-context13.1 #f null unsafe-undefined unsafe-undefined temp1_11))))"
"(let-values(((s_8)(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_7))))"
"(let-values((()"
"(begin"
"(let-values(((lst_12) requires_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_12)))"
"((letrec-values(((for-loop_13)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((phase+reqs_15)(unsafe-car lst_0))"
"((rest_16)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_17)"
"(car"
" phase+reqs_15)))"
"(begin"
"(let-values(((lst_18)"
"(cdr"
" phase+reqs_15)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_18)))"
"((letrec-values(((for-loop_19)"
"(lambda(lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((req_21)"
"(unsafe-car"
" lst_1))"
"((rest_22)"
"(unsafe-cdr"
" lst_1)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_23)"
"(module-path-index-shift"
" req_21"
" original-self_0"
" self_0)))"
"(let-values(((mpi2_25)"
" mpi_23)"
"((s3_26)"
" s_8)"
"((self4_27)"
" self_0)"
"((s5_28)"
" s_8)"
"((ns6_29)"
" ns_0)"
"((temp7_30)"
"(phase+"
" phase_17"
" phase-shift_0))"
"((phase-shift8_31)"
" phase-shift_0)"
"((temp9_32)"
" 'module))"
"(perform-require!78.1"
" #f"
" #t"
" #f"
" #f"
" #f"
" #f"
" 'all"
" temp7_30"
" #f"
" phase-shift8_31"
" #f"
" #f"
" #t"
" temp9_32"
" mpi2_25"
" s3_26"
" self4_27"
" s5_28"
" ns6_29))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_19"
" rest_22)"
"(values))))"
"(values))))))"
" for-loop_19)"
" lst_18)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_13 rest_16)(values))))"
"(values))))))"
" for-loop_13)"
" lst_12)))"
"(values))))"
"(let-values()"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_7)))"
"(begin"
"(let-values(((ht_33) evaled-ld-h_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_36 linklet_37)(hash-iterate-key+value ht_33 i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_38)"
"(1/linklet-export-variables"
" linklet_37)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((sym_41)"
"(unsafe-car"
" lst_0))"
"((rest_42)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_43)"
"(datum->syntax$1"
" s_8"
" sym_41)))"
"(begin"
"(let-values(((id10_44)"
" id_43)"
"((temp11_45)"
"(let-values(((self13_47)"
" self_0)"
"((phase14_48)"
" phase_36)"
"((sym15_49)"
" sym_41))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" self13_47"
" phase14_48"
" sym15_49)))"
"((phase12_46)"
" phase_36))"
"(add-binding!17.1"
" #f"
" #f"
" id10_44"
" temp11_45"
" phase12_46))"
"(add-defined-sym!"
" defined-syms_9"
" phase_36"
" sym_41"
" id_43))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_39"
" rest_42)"
"(values))))"
"(values))))))"
" for-loop_39)"
" lst_38)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_34(hash-iterate-next ht_33 i_0))(values))))"
"(values))))))"
" for-loop_34)"
"(hash-iterate-first ht_33))))"
"(void)"
" root-ctx_7))))))))))"
"(define-values"
"(shift-to-inside-root-context)"
"(lambda(root-context_0)"
"(begin"
"(let-values(((outside-mpi_51)(root-expand-context-self-mpi root-context_0)))"
"(let-values(((inside-mpi_52)(make-self-module-path-index(module-path-index-resolved outside-mpi_51))))"
"(let-values(((v_53) root-context_0))"
"(let-values(((the-struct_54) v_53))"
"(if(root-expand-context/outer? the-struct_54)"
"(let-values(((inner16_55)"
"(let-values(((the-struct_56)(root-expand-context/outer-inner v_53)))"
"(if(root-expand-context/inner? the-struct_56)"
"(let-values(((self-mpi17_57) inside-mpi_52)"
"((all-scopes-stx18_58)"
"(let-values(((temp19_59)"
"(root-expand-context-all-scopes-stx root-context_0))"
"((outside-mpi20_60) outside-mpi_51)"
"((inside-mpi21_61) inside-mpi_52))"
"(syntax-module-path-index-shift13.1"
" #f"
" temp19_59"
" outside-mpi20_60"
" inside-mpi21_61"
" #f))))"
"(root-expand-context/inner2.1"
" self-mpi17_57"
"(root-expand-context/inner-module-scopes the-struct_56)"
"(root-expand-context/inner-top-level-bind-scope the-struct_56)"
" all-scopes-stx18_58"
"(root-expand-context/inner-defined-syms the-struct_56)"
"(root-expand-context/inner-counter the-struct_56)"
"(root-expand-context/inner-lift-key the-struct_56)))"
"                                  (raise-argument-error 'struct-copy \"root-expand-context/inner?\" the-struct_56)))))"
"(root-expand-context/outer1.1"
" inner16_55"
"(root-expand-context/outer-post-expansion the-struct_54)"
"(root-expand-context/outer-use-site-scopes the-struct_54)"
"(root-expand-context/outer-frame-id the-struct_54)))"
"                (raise-argument-error 'struct-copy \"root-expand-context/outer?\" the-struct_54)))))))))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_0"
" linklet3_0"
" import-module-uses4_0"
" import-module-instances5_0"
" insp6_0"
" extra-inspector7_0"
" extra-inspectorsss8_0)"
"(begin"
" 'check-require-access9"
"(let-values(((linklet_27) linklet3_0))"
"(let-values(((skip-num-imports_28) skip-imports1_0))"
"(let-values(((import-module-uses_29) import-module-uses4_0))"
"(let-values(((import-module-instances_30) import-module-instances5_0))"
"(let-values(((insp_31) insp6_0))"
"(let-values(((extra-inspector_32) extra-inspector7_0))"
"(let-values(((extra-inspectorsss_33) extra-inspectorsss8_0))"
"(let-values()"
"(begin"
"(let-values(((lst_34)(list-tail(1/linklet-import-variables linklet_27) skip-num-imports_28))"
"((lst_35) import-module-uses_29)"
"((lst_36) import-module-instances_30)"
"((lst_37)"
"(let-values(((or-part_38) extra-inspectorsss_33))"
"(if or-part_38 or-part_38 import-module-uses_29))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_34)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_35)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_36)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_37)))"
"((letrec-values(((for-loop_39)"
"(lambda(lst_0 lst_1 lst_2 lst_3)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)"
"(if(pair? lst_1)(if(pair? lst_2)(pair? lst_3) #f) #f)"
" #f)"
"(let-values(((import-syms_44)(unsafe-car lst_0))"
"((rest_45)(unsafe-cdr lst_0))"
"((mu_46)(unsafe-car lst_1))"
"((rest_47)(unsafe-cdr lst_1))"
"((mi_48)(unsafe-car lst_2))"
"((rest_49)(unsafe-cdr lst_2))"
"((extra-inspectorss_50)(unsafe-car lst_3))"
"((rest_51)(unsafe-cdr lst_3)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_52)"
"(module-instance-module"
" mi_48)))"
"(if(module-no-protected?"
" m_52)"
"(void)"
"(let-values()"
"(let-values(((access_53)"
"(let-values(((or-part_54)"
"(module-access"
" m_52)))"
"(if or-part_54"
" or-part_54"
"(module-compute-access!"
" m_52)))))"
"(begin"
"(let-values(((lst_55)"
" import-syms_44))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_55)))"
"((letrec-values(((for-loop_56)"
"(lambda(lst_4)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_4)"
"(let-values(((import-sym_58)"
"(unsafe-car"
" lst_4))"
"((rest_59)"
"(unsafe-cdr"
" lst_4)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_60)"
"(hash-ref"
"(hash-ref"
" access_53"
"(module-use-phase"
" mu_46)"
" '#hasheq())"
" import-sym_58"
" 'unexported)))"
"(if(let-values(((or-part_61)"
"(eq?"
" a_60"
" 'unexported)))"
"(if or-part_61"
" or-part_61"
"(eq?"
" a_60"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_62)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_48))))"
"(if(let-values(((or-part_63)"
"(inspector-superior?"
" insp_31"
" guard-insp_62)))"
"(if or-part_63"
" or-part_63"
"(let-values(((or-part_64)"
"(if extra-inspector_32"
"(inspector-superior?"
" extra-inspector_32"
" guard-insp_62)"
" #f)))"
"(if or-part_64"
" or-part_64"
"(if extra-inspectorsss_33"
"(if extra-inspectorss_50"
"(extra-inspectors-allow?"
"(hash-ref"
" extra-inspectorss_50"
" import-sym_58"
" #f)"
" guard-insp_62)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                                    \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                                    \"  variable: ~s\\n\""
"                                                                                                                                                                                    \"  from module: ~a\")"
" a_60"
" import-sym_58"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_48))))))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_56"
" rest_59)"
"(values))))"
"(values))))))"
" for-loop_56)"
" lst_55)))"
"(void)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_39 rest_45 rest_47 rest_49 rest_51)"
"(values))))"
"(values))))))"
" for-loop_39)"
" lst_34"
" lst_35"
" lst_36"
" lst_37)))"
"(void)))))))))))))"
"(define-values"
"(check-single-require-access)"
"(lambda(mi_0 phase_0 sym_0 insp_0)"
"(begin"
"(let-values(((m_89)(module-instance-module mi_0)))"
"(if(module-no-protected? m_89)"
"(let-values() #t)"
"(let-values()"
"(let-values(((access_90)"
"(let-values(((or-part_92)(module-access m_89)))"
"(if or-part_92 or-part_92(module-compute-access! m_89)))))"
"(let-values(((a_91)(hash-ref(hash-ref access_90 phase_0 '#hasheq()) sym_0 'unexported)))"
"(if(let-values(((or-part_93)(eq? a_91 'unexported)))"
"(if or-part_93 or-part_93(eq? a_91 'protected)))"
"(let-values()"
"(let-values(((guard-insp_94)(namespace-inspector(module-instance-namespace mi_0))))"
"(let-values(((or-part_95)(if insp_0(inspector-superior? insp_0 guard-insp_94) #f)))"
"(if or-part_95 or-part_95(inspector-superior?(current-code-inspector) guard-insp_94)))))"
"(let-values() #t))))))))))"
"(define-values(module-cache)(make-weak-hasheq))"
"(define-values"
"(make-module-cache-key)"
"(lambda(hash-code_0)"
"    (begin (if hash-code_0 (string->symbol (format \"~s\" (list hash-code_0 (current-load-relative-directory)))) #f))))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_0 proc_0)(begin(hash-set! module-cache key_0(make-ephemeron key_0 proc_0)))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_0)(begin(let-values(((e_5)(hash-ref module-cache key_0 #f)))(if e_5(ephemeron-value e_5) #f)))))"
"(define-values(current-module-declare-as-predefined)(make-parameter #f))"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_0 supermodule-name3_0 with-submodules?2_0 c7_0)"
"(begin"
" 'eval-module8"
"(let-values(((c_5) c7_0))"
"(let-values(((ns_6)(if(eq? namespace1_0 unsafe-undefined)(1/current-namespace) namespace1_0)))"
"(let-values(((with-submodules?_7) with-submodules?2_0))"
"(let-values(((supermodule-name_8) supermodule-name3_0))"
"(let-values()"
"(let-values()"
"(let-values(((dh_9 h_10 data-instance_11 declaration-instance_12)"
"(compiled-module->dh+h+data-instance+declaration-instance c_5)))"
"(let-values(((syntax-literals-data-instance_13)"
"(if(compiled-in-memory? c_5)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_5)"
"(let-values(((l_34)(hash-ref h_10 'stx-data #f)))"
"(if l_34"
"(let-values()"
"(1/instantiate-linklet"
"(1/eval-linklet l_34)"
"(list deserialize-instance data-instance_11)))"
"(if(eq?(hash-ref h_10 'module->namespace #f) 'empty)"
"(let-values() empty-syntax-literals-instance/empty-namespace)"
"(let-values() empty-syntax-literals-data-instance)))))))"
"(let-values(((decl_14)"
"(lambda(key_0)"
"(begin 'decl(1/instance-variable-value declaration-instance_12 key_0)))))"
"(let-values(((pre-submodule-names_15)(hash-ref h_10 'pre null)))"
"(let-values(((post-submodule-names_16)(hash-ref h_10 'post null)))"
"(let-values(((default-name_17)(hash-ref h_10 'name 'module)))"
"(let-values(((cache-key_18)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_15)"
"(if(null? post-submodule-names_16)(hash-ref h_10 'hash-code #f) #f)"
" #f))))"
"(let-values(((cross-phase-persistent?_19)(hash-ref h_10 'cross-phase-persistent? #f)))"
"(let-values(((min-phase_20)(hash-ref h_10 'min-phase 0)))"
"(let-values(((max-phase_21)(hash-ref h_10 'max-phase 0)))"
"(let-values(((language-info_22)(hash-ref h_10 'language-info #f)))"
"(let-values(((phases-h_23)"
"(let-values(((start_36) min-phase_20)"
"((end_37)(add1 max-phase_21))"
"((inc_38) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_36 end_37 inc_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(table_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_37)"
"(let-values(((phase-level_42) pos_0))"
"(let-values(((table_43)"
"(let-values(((v_44)"
"(hash-ref"
" h_10"
" phase-level_42"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_45)"
"(lambda(table_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_47)"
"(let-values(((table_48)"
" table_1))"
"(if v_44"
"(let-values(((table_49)"
" table_48))"
"(let-values(((table_50)"
"(let-values()"
"(let-values(((key_51"
" val_52)"
"(let-values()"
"(values"
" phase-level_42"
"(1/eval-linklet"
" v_44)))))"
"(hash-set"
" table_49"
" key_51"
" val_52)))))"
"(values"
" table_50)))"
" table_48))))"
" table_47))))))"
" for-loop_45)"
" table_0)))))"
"(if(not #f)"
"(for-loop_39"
" table_43"
"(+ pos_0 inc_38))"
" table_43)))"
" table_0)))))"
" for-loop_39)"
" '#hash()"
" start_36)))))"
"(let-values(((syntax-literals-linklet_24)"
"(let-values(((l_53)(hash-ref h_10 'stx #f)))"
"(if l_53(1/eval-linklet l_53) #f))))"
"(let-values(((extra-inspector_25)"
"(if(compiled-in-memory? c_5)"
"(compiled-in-memory-compile-time-inspector c_5)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_26)"
"(if(compiled-in-memory? c_5)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_5)"
" '#hasheqv())))"
"(let-values(((requires_27)(decl_14 'requires)))"
"(let-values(((provides_28)(decl_14 'provides)))"
"(let-values(((original-self_29)(decl_14 'self-mpi)))"
"(let-values(((phase-to-link-modules_30)"
"(decl_14 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_31)"
"(make-create-root-expand-context-from-module"
" requires_27"
" phases-h_23)))"
"(let-values(((declare-submodules_32)"
"(if dh_9"
"(lambda(ns_0 names_0 declare-name_0 pre?_0)"
"(begin"
" 'declare-submodules"
"(if(compiled-in-memory? c_5)"
"(begin"
"(let-values(((lst_58)"
"(if pre?_0"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_5)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_5))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_58)))"
"((letrec-values(((for-loop_59)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((c_61)"
"(unsafe-car"
" lst_0))"
"((rest_62)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((c12_64)"
" c_61)"
"((ns13_65)"
" ns_0)"
"((declare-name14_66)"
" declare-name_0))"
"(eval-module8.1"
" ns13_65"
" declare-name14_66"
" #t"
" c12_64)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_59"
" rest_62)"
"(values))))"
"(values))))))"
" for-loop_59)"
" lst_58)))"
"(void))"
"(begin"
"(let-values(((lst_67) names_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_67)))"
"((letrec-values(((for-loop_68)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((name_70)"
"(unsafe-car"
" lst_0))"
"((rest_71)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_72)"
"(hash-ref"
" dh_9"
" name_70"
" #f)))"
"(begin"
"(if sm-cd_72"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                             \"missing submodule declaration:\""
" name_70)))"
"(let-values(((sm-cd15_74)"
" sm-cd_72)"
"((ns16_75)"
" ns_0)"
"((declare-name17_76)"
" declare-name_0))"
"(eval-module8.1"
" ns16_75"
" declare-name17_76"
" #t"
" sm-cd15_74)))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_68"
" rest_71)"
"(values))))"
"(values))))))"
" for-loop_68)"
" lst_67)))"
"(void)))))"
" void)))"
"(let-values(((declare-this-module_33)"
"(lambda(ns_0)"
"(begin"
" 'declare-this-module"
"(let-values(((m_78)"
"(let-values(((temp22_81)"
"(1/current-module-declare-source))"
"((original-self23_82)"
" original-self_29)"
"((requires24_83)"
" requires_27)"
"((provides25_84)"
" provides_28)"
"((language-info26_85)"
" language-info_22)"
"((min-phase27_86)"
" min-phase_20)"
"((max-phase28_87)"
" max-phase_21)"
"((cross-phase-persistent?29_88)"
" cross-phase-persistent?_19)"
"((temp30_89)"
"(current-module-declare-as-predefined))"
"((temp31_90)"
"(append"
" pre-submodule-names_15"
" post-submodule-names_16))"
"((supermodule-name32_91)"
" supermodule-name_8)"
"((temp33_92)"
"(lambda()"
"(get-all-variables"
" phases-h_23)))"
"((temp34_93)"
"(lambda(phase-level_0"
" ns_1"
" insp_0)"
"(module-linklet-info2.1"
"(hash-ref"
" phases-h_23"
" phase-level_0"
" #f)"
"(hash-ref"
" phase-to-link-modules_30"
" phase-level_0"
" #f)"
" original-self_29"
" insp_0"
" extra-inspector_25"
"(hash-ref"
" phase-to-link-extra-inspectorsss_26"
" phase-level_0"
" #f))))"
"((temp35_94)"
"(lambda(bulk-binding-registry_0)"
"(force-syntax-deserialize"
" syntax-literals-data-instance_13"
" bulk-binding-registry_0)))"
"((temp36_95)"
"(lambda(data-box_0"
" ns_1"
" phase-shift_0"
" self_0"
" bulk-binding-registry_0"
" insp_0)"
"(if(unbox"
" data-box_0)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_0"
" cache-key_18"
" ns_1"
" syntax-literals-linklet_24"
" data-instance_11"
" syntax-literals-data-instance_13"
" phase-shift_0"
" original-self_29"
" self_0"
" bulk-binding-registry_0"
" insp_0"
" create-root-expand-context-from-module_31)))))"
"((temp37_96)"
"(lambda(data-box_0"
" ns_1"
" phase-shift_0"
" phase-level_0"
" self_0"
" bulk-binding-registry_0"
" insp_0)"
"(let-values()"
"(let-values(((syntax-literals-instance_114)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_0))))"
"(let-values(((phase-linklet_115)"
"(hash-ref"
" phases-h_23"
" phase-level_0"
" #f)))"
"(if phase-linklet_115"
"(let-values()"
"(let-values(((module-uses_116)"
"(hash-ref"
" phase-to-link-modules_30"
" phase-level_0)))"
"(let-values(((import-module-instances_117"
" import-instances_118)"
"(let-values(((mis_121"
" is_122)"
"(let-values(((lst_123)"
" module-uses_116))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_123)))"
"((letrec-values(((for-loop_124)"
"(lambda(mis_0"
" is_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((mu_128)"
"(unsafe-car"
" lst_0))"
"((rest_129)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((mis_130"
" is_131)"
"(let-values(((mis_132)"
" mis_0)"
"((is_133)"
" is_0))"
"(let-values(((mis_134"
" is_135)"
"(let-values()"
"(let-values(((mis45_136"
" is46_137)"
"(let-values()"
"(let-values(((ns47_139)"
" ns_1)"
"((mu48_140)"
" mu_128)"
"((original-self49_141)"
" original-self_29)"
"((self50_142)"
" self_0)"
"((temp51_143)"
"(phase+"
"(phase-"
" phase-level_0"
"(module-use-phase"
" mu_128))"
" phase-shift_0)))"
"(namespace-module-use->module+linklet-instances144.1"
" temp51_143"
" original-self49_141"
" self50_142"
" ns47_139"
" mu48_140)))))"
"(values"
"(cons"
" mis45_136"
" mis_132)"
"(cons"
" is46_137"
" is_133))))))"
"(values"
" mis_134"
" is_135)))))"
"(if(not"
" #f)"
"(for-loop_124"
" mis_130"
" is_131"
" rest_129)"
"(values"
" mis_130"
" is_131))))"
"(values"
" mis_0"
" is_0))))))"
" for-loop_124)"
" null"
" null"
" lst_123)))))"
"(values"
"(reverse$1"
" mis_121)"
"(reverse$1"
" is_122)))))"
"(let-values((()"
"(begin"
"(let-values(((phase-linklet38_145)"
" phase-linklet_115)"
"((temp39_146)"
" 2)"
"((module-uses40_147)"
" module-uses_116)"
"((import-module-instances41_148)"
" import-module-instances_117)"
"((insp42_149)"
" insp_0)"
"((extra-inspector43_150)"
" extra-inspector_25)"
"((temp44_151)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_26"
" phase-level_0"
" #f)))"
"(check-require-access9.1"
" temp39_146"
" phase-linklet38_145"
" module-uses40_147"
" import-module-instances41_148"
" insp42_149"
" extra-inspector43_150"
" temp44_151))"
"(values))))"
"(let-values(((module-body-instance-instance_119)"
"(let-values(((temp52_153)"
"(lambda(name_0"
" val_0)"
"(namespace-set-transformer!"
" ns_1"
"(sub1"
" phase-level_0)"
" name_0"
" val_0))))"
"(make-module-body-instance-instance18.1"
" temp52_153))))"
"(let-values(((instantiate-body_120)"
"(lambda()"
"(begin"
" 'instantiate-body"
"(1/instantiate-linklet"
" phase-linklet_115"
"(list*"
" syntax-literals-instance_114"
" module-body-instance-instance_119"
" import-instances_118)"
"(namespace->instance"
" ns_1"
" phase-level_0))))))"
"(if(zero-phase?"
" phase-level_0)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_0)"
"(let-values()"
"(instantiate-body_120))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_1)"
"(let-values()"
"(instantiate-body_120))))))"
"(let-values()"
"(let-values(((ns-1_156)"
"(namespace->namespace-at-phase"
" ns_1"
"(phase+"
" phase-shift_0"
"(sub1"
" phase-level_0)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(promise1.1"
"(lambda()"
"(let-values(((ns-153_157)"
" ns-1_156))"
"(make-expand-context10.1"
" #f"
" #f"
" #f"
" ns-153_157)))"
" #f)"
" 1/current-namespace"
" ns_1"
" current-module-code-inspector"
" insp_0)"
"(let-values()"
"(instantiate-body_120))))))))))))"
"(void))))))))"
"(make-module39.1"
" cross-phase-persistent?29_88"
" temp35_94"
" temp33_92"
" temp37_96"
" language-info26_85"
" max-phase28_87"
" min-phase27_86"
" #f"
" temp34_93"
" temp30_89"
" temp36_95"
" #f"
" provides25_84"
" requires24_83"
" original-self23_82"
" temp22_81"
" temp31_90"
" supermodule-name32_91))))"
"(let-values(((declare-name_79)"
"(substitute-module-declare-name"
" default-name_17)))"
"(begin"
"(if with-submodules?_7"
"(let-values()"
"(declare-submodules_32"
" ns_0"
" pre-submodule-names_15"
" declare-name_79"
" #t))"
"(void))"
"(let-values(((ns18_159) ns_0)"
"((m19_160) m_78)"
"((declare-name20_161)"
" declare-name_79)"
"((with-submodules?21_162)"
" with-submodules?_7))"
"(declare-module!58.1"
" with-submodules?21_162"
" ns18_159"
" m19_160"
" declare-name20_161))"
"(if with-submodules?_7"
"(let-values()"
"(declare-submodules_32"
" ns_0"
" post-submodule-names_16"
" declare-name_79"
" #f))"
"(void)))))))))"
"(begin"
"(if cache-key_18"
"(let-values()"
"(module-cache-set!"
" cache-key_18"
" declare-this-module_33))"
"(void))"
"(declare-this-module_33"
" ns_6)))))))))))))))))))))))))))))))))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_189 make-_190 ?_191 -ref_192 -set!_193)"
"(let-values()"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))))"
"(values"
" struct:_189"
" make-_190"
" ?_191"
"(make-struct-field-accessor -ref_192 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_192 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_0"
" cache-key_0"
" ns_0"
" syntax-literals-linklet_0"
" data-instance_0"
" syntax-literals-data-instance_0"
" phase-shift_0"
" original-self_0"
" self_0"
" bulk-binding-registry_0"
" insp_0"
" create-root-expand-context-from-module_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(not(load-on-demand-enabled))"
"(let-values()"
"(force-syntax-deserialize syntax-literals-data-instance_0 bulk-binding-registry_0))"
"(void))"
"(values))))"
"(let-values(((inst_226)"
"(let-values(((ns55_230) ns_0)"
"((phase-shift56_231) phase-shift_0)"
"((self57_232) self_0)"
"((insp58_233) insp_0)"
"((bulk-binding-registry59_234) bulk-binding-registry_0)"
"((temp60_235)"
"                                    (lambda (name_0 val_0) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(make-instance-instance13.1"
" bulk-binding-registry59_234"
" insp58_233"
" ns55_230"
" phase-shift56_231"
" self57_232"
" temp60_235))))"
"(let-values(((syntax-literals-instance_227)"
"(if syntax-literals-linklet_0"
"(1/instantiate-linklet"
" syntax-literals-linklet_0"
"(list deserialize-instance data-instance_0 syntax-literals-data-instance_0 inst_226))"
" empty-syntax-literals-instance)))"
"(let-values((()"
"(begin"
"(set-box! data-box_0(instance-data11.1 syntax-literals-instance_227 cache-key_0))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_228)"
"(1/instance-variable-value syntax-literals-instance_227 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_228 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_0"
"(promise1.1"
"(lambda()"
"(shift-to-inside-root-context"
"(let-values(((self61_239) self_0))"
"(make-root-expand-context13.1 #f null unsafe-undefined unsafe-undefined self61_239))))"
" #f)))"
"(if(procedure? get-encoded-root-expand-ctx_228)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_0"
"(promise1.1"
"(lambda()"
"(shift-to-inside-root-context"
"(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_228) self_0)))"
" #f)))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_0"
"(promise1.1"
"(lambda()"
"(shift-to-inside-root-context"
"(create-root-expand-context-from-module_0 ns_0 phase-shift_0 original-self_0 self_0)))"
" #f)))))))))))))"
"(define-values"
"(force-syntax-deserialize)"
"(lambda(syntax-literals-data-instance_0 bulk-binding-registry_0)"
"(begin"
"(if(let-values(((or-part_242)(eq? syntax-literals-data-instance_0 empty-syntax-literals-data-instance)))"
"(if or-part_242"
" or-part_242"
"(eq? syntax-literals-data-instance_0 empty-syntax-literals-instance/empty-namespace)))"
"(void)"
"(let-values()"
"(let-values(((deserialize-syntax_243)"
"(1/instance-variable-value syntax-literals-data-instance_0 deserialize-syntax-id)))"
"(if deserialize-syntax_243(let-values()(deserialize-syntax_243 bulk-binding-registry_0))(void))))))))"
"(define-values"
"(compiled-module->dh+h)"
"(lambda(c_0)"
"(begin"
"(let-values(((ld/h_245)(if(compiled-in-memory? c_0)(compiled-in-memory-linklet-directory c_0) c_0)))"
"(let-values(((dh_246)"
"(if(1/linklet-directory? ld/h_245)"
"(let-values()(1/linklet-directory->hash ld/h_245))"
"(let-values() #f))))"
"(let-values(((h_247)(1/linklet-bundle->hash(if dh_246(hash-ref dh_246 #f) ld/h_245))))"
"(values dh_246 h_247)))))))"
"(define-values"
"(compiled-module->h)"
"(lambda(c_0)(begin(let-values(((dh_249 h_250)(compiled-module->dh+h c_0))) h_250))))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_0)"
"(begin"
"(let-values(((dh_252 h_253)(compiled-module->dh+h c_0)))"
"(let-values(((data-instance_254)"
"(if(compiled-in-memory? c_0)"
"(make-data-instance-from-compiled-in-memory c_0)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_253 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_255)"
"(if(if(compiled-in-memory? c_0)(compiled-in-memory-original-self c_0) #f)"
"(make-declaration-instance-from-compiled-in-memory c_0)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_253 'decl))"
"(list deserialize-instance data-instance_254)))))"
"(values dh_252 h_253 data-instance_254 declaration-instance_255)))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_0)"
"(begin"
"(let-values(((dh_257 h_258 data-instance_259 declaration-instance_260)"
"(compiled-module->dh+h+data-instance+declaration-instance c_0)))"
" declaration-instance_260))))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_0)"
"(begin"
"(let-values(((dh_262 h_263 data-instance_264 declaration-instance_265)"
"(compiled-module->dh+h+data-instance+declaration-instance c_0)))"
"(values h_263 declaration-instance_265)))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_0)(begin(1/make-instance 'data #f 'constant mpi-vector-id(compiled-in-memory-mpis cim_0)))))"
"(define-values"
"(make-declaration-instance-from-compiled-in-memory)"
"(lambda(cim_0)"
"(begin"
"(1/make-instance"
" 'decl"
" #f"
" 'constant"
" 'self-mpi"
"(compiled-in-memory-original-self cim_0)"
" 'requires"
"(compiled-in-memory-requires cim_0)"
" 'provides"
"(compiled-in-memory-provides cim_0)"
" 'phase-to-link-modules"
"(compiled-in-memory-phase-to-link-module-uses cim_0)))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_0)"
"(begin"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literals cim_0)))))"
"(define-values"
"(empty-syntax-literals-instance/empty-namespace)"
"(1/make-instance"
" 'empty-stx/empty-ns"
" #f"
" 'constant"
" get-syntax-literal!-id"
"(lambda(pos_0) #f)"
" 'get-encoded-root-expand-ctx"
" 'empty))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_0)"
"(begin"
"(let-values(((ht_271) phases-h_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_271)))"
"((letrec-values(((for-loop_272)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_275 linklet_276)(hash-iterate-key+value ht_271 i_0)))"
"(let-values(((table_277)"
"(let-values(((table_278) table_0))"
"(let-values(((table_279)"
"(let-values()"
"(let-values(((key_280 val_281)"
"(let-values()"
"(values"
" phase_275"
"(1/linklet-export-variables"
" linklet_276)))))"
"(hash-set table_278 key_280 val_281)))))"
"(values table_279)))))"
"(if(not #f)(for-loop_272 table_277(hash-iterate-next ht_271 i_0)) table_277)))"
" table_0)))))"
" for-loop_272)"
" '#hash()"
"(hash-iterate-first ht_271)))))))"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_0 self_0)"
"(begin"
"(let-values(((extract_3)"
"(lambda(ok?_0)"
"(begin"
" 'extract"
"(let-values(((result-l_5)"
"(reverse$1"
"(let-values(((ht_6) provides_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_6)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_10 at-phase_11)"
"(hash-iterate-key+value ht_6 i_0)))"
"(let-values(((fold-var_12)"
"(let-values(((l_13)"
"(reverse$1"
"(let-values(((ht_14)"
" at-phase_11))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_14)))"
"((letrec-values(((for-loop_15)"
"(lambda(fold-var_1"
" i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((sym_18"
" b/p_19)"
"(hash-iterate-key+value"
" ht_14"
" i_1)))"
"(let-values(((fold-var_20)"
"(let-values(((fold-var_21)"
" fold-var_1))"
"(if(ok?_0"
" b/p_19)"
"(let-values(((fold-var_22)"
" fold-var_21))"
"(let-values(((fold-var_23)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_24)"
"(provided-as-binding"
" b/p_19)))"
"(list"
" sym_18"
"(if(eq?"
" self_0"
"(module-binding-module"
" b_24))"
"(let-values()"
" null)"
"(let-values()"
"(reverse$1"
"(let-values(((lst_25)"
"(cons"
" b_24"
"(module-binding-extra-nominal-bindings"
" b_24))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_25)))"
"((letrec-values(((for-loop_26)"
"(lambda(fold-var_2"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((b_29)"
"(unsafe-car"
" lst_0))"
"((rest_30)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_31)"
"(let-values(((fold-var_32)"
" fold-var_2))"
"(let-values(((fold-var_33)"
"(let-values()"
"(cons"
"(let-values()"
"(if(if(eqv?"
"(module-binding-nominal-phase"
" b_29)"
" phase_10)"
"(eq?"
"(module-binding-nominal-sym"
" b_29)"
" sym_18)"
" #f)"
"(let-values()"
"(module-binding-nominal-module"
" b_29))"
"(let-values()"
"(list"
"(module-binding-nominal-module"
" b_29)"
"(module-binding-phase"
" b_29)"
"(module-binding-nominal-sym"
" b_29)"
"(module-binding-nominal-phase"
" b_29)))))"
" fold-var_32))))"
"(values"
" fold-var_33)))))"
"(if(not"
" #f)"
"(for-loop_26"
" fold-var_31"
" rest_30)"
" fold-var_31)))"
" fold-var_2)))))"
" for-loop_26)"
" null"
" lst_25)))))))))"
" fold-var_22))))"
"(values"
" fold-var_23)))"
" fold-var_21))))"
"(if(not"
" #f)"
"(for-loop_15"
" fold-var_20"
"(hash-iterate-next"
" ht_14"
" i_1))"
" fold-var_20)))"
" fold-var_1)))))"
" for-loop_15)"
" null"
"(hash-iterate-first"
" ht_14)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_34)"
"(lambda(fold-var_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_36)"
"(let-values(((fold-var_37)"
" fold-var_1))"
"(if(null?"
" l_13)"
" fold-var_37"
"(let-values(((fold-var_38)"
" fold-var_37))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_10"
"(let-values(((l4_41)"
" l_13)"
"((symbol<?5_42)"
" symbol<?)"
"((car6_43)"
" car))"
"(sort7.1"
" #f"
" car6_43"
" l4_41"
" symbol<?5_42))))"
" fold-var_38))))"
"(values"
" fold-var_39)))))))"
" fold-var_36))))))"
" for-loop_34)"
" fold-var_0)))))"
"(if(not #f)"
"(for-loop_7"
" fold-var_12"
"(hash-iterate-next ht_6 i_0))"
" fold-var_12)))"
" fold-var_0)))))"
" for-loop_7)"
" null"
"(hash-iterate-first ht_6)))))))"
"(let-values(((result-l1_45) result-l_5)((phase<?2_46) phase<?)((car3_47) car))"
"(sort7.1 #f car3_47 result-l1_45 phase<?2_46)))))))"
"(values"
"(extract_3(lambda(b/p_0)(not(provided-as-transformer? b/p_0))))"
"(extract_3 provided-as-transformer?))))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_0 all-vars_0)"
"(begin"
"(let-values(((result-l_51)"
"(reverse$1"
"(let-values(((ht_52) all-vars_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_52)))"
"((letrec-values(((for-loop_53)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_56 vars_57)(hash-iterate-key+value ht_52 i_0)))"
"(let-values(((fold-var_58)"
"(let-values(((fold-var_59) fold-var_0))"
"(let-values(((l_60)"
"(let-values(((syms_61)"
"(hash-ref"
" provides_0"
" phase_56"
" '#hasheq())))"
"(reverse$1"
"(let-values(((lst_62) vars_57))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_62)))"
"((letrec-values(((for-loop_63)"
"(lambda(fold-var_1"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((var-sym_66)"
"(unsafe-car"
" lst_0))"
"((rest_67)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_68)"
"(let-values(((fold-var_69)"
" fold-var_1))"
"(if(hash-ref"
" syms_61"
" var-sym_66"
" #f)"
" fold-var_69"
"(let-values(((fold-var_70)"
" fold-var_69))"
"(let-values(((fold-var_71)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_66)"
" fold-var_70))))"
"(values"
" fold-var_71)))))))"
"(if(not"
" #f)"
"(for-loop_63"
" fold-var_68"
" rest_67)"
" fold-var_68)))"
" fold-var_1)))))"
" for-loop_63)"
" null"
" lst_62)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_72)"
"(lambda(fold-var_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_74)"
"(let-values(((fold-var_75)"
" fold-var_1))"
"(if(null?"
" l_60)"
" fold-var_75"
"(let-values(((fold-var_76)"
" fold-var_75))"
"(let-values(((fold-var_77)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_56"
"(let-values(((l10_78)"
" l_60)"
"((symbol<?11_79)"
" symbol<?))"
"(sort7.1"
" #f"
" #f"
" l10_78"
" symbol<?11_79))))"
" fold-var_76))))"
"(values"
" fold-var_77)))))))"
" fold-var_74))))))"
" for-loop_72)"
" fold-var_59))))))"
"(if(not #f)"
"(for-loop_53 fold-var_58(hash-iterate-next ht_52 i_0))"
" fold-var_58)))"
" fold-var_0)))))"
" for-loop_53)"
" null"
"(hash-iterate-first ht_52)))))))"
"(let-values(((result-l7_81) result-l_51)((phase<?8_82) phase<?)((car9_83) car))"
"(sort7.1 #f car9_83 result-l7_81 phase<?8_82))))))"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_0)(begin(if(compiled-in-memory? c_0)(compiled-in-memory-linklet-directory c_0) c_0))))"
"(define-values"
"(module-compiled-current-name)"
"(lambda(c_0)"
"(begin"
"(let-values(((ld_3)(compiled->linklet-directory-or-bundle c_0)))"
"(let-values(((b_4)(if(1/linklet-bundle? ld_3) ld_3(hash-ref(1/linklet-directory->hash ld_3) #f))))"
"(hash-ref(1/linklet-bundle->hash b_4) 'name))))))"
"(define-values"
"(module-compiled-immediate-name)"
"(lambda(c_0)"
"(begin(let-values(((n_6)(module-compiled-current-name c_0)))(if(pair? n_6)(car(reverse$1 n_6)) n_6)))))"
"(define-values"
"(change-module-name)"
"(lambda(c_0 name_0 prefix_0)"
"(begin"
"(let-values(((full-name_10)(if(null? prefix_0) name_0(append prefix_0(list name_0)))))"
"(let-values(((next-prefix_11)(if(null? prefix_0)(list name_0) full-name_10)))"
"(let-values(((recur_12)"
"(lambda(sub-c_0 name_1)"
"(begin"
" 'recur"
"(if(equal?(module-compiled-current-name sub-c_0)(append next-prefix_11(list name_1)))"
" sub-c_0"
"(change-module-name sub-c_0 name_1 next-prefix_11))))))"
"(if(compiled-in-memory? c_0)"
"(let-values()"
"(let-values(((change-submodule-name_15)"
"(lambda(sub-c_0)"
"(begin"
" 'change-submodule-name"
"(recur_12 sub-c_0(module-compiled-immediate-name sub-c_0))))))"
"(let-values(((pre-compiled-in-memorys_16)"
"(map2 change-submodule-name_15(compiled-in-memory-pre-compiled-in-memorys c_0))))"
"(let-values(((post-compiled-in-memorys_17)"
"(map2 change-submodule-name_15(compiled-in-memory-post-compiled-in-memorys c_0))))"
"(let-values(((the-struct_19) c_0))"
"(if(compiled-in-memory? the-struct_19)"
"(let-values(((pre-compiled-in-memorys8_20) pre-compiled-in-memorys_16)"
"((post-compiled-in-memorys9_21) post-compiled-in-memorys_17)"
"((linklet-directory10_22)"
"(let-values(((temp11_24)"
"(update-one-name"
"(let-values(((ld_27)"
"(compiled->linklet-directory-or-bundle c_0)))"
"(if(1/linklet-bundle? ld_27)"
" ld_27"
"(hash-ref(1/linklet-directory->hash ld_27) #f)))"
" full-name_10))"
"((temp12_25)(symbol? full-name_10))"
"((temp13_26)"
"(append pre-compiled-in-memorys_16 post-compiled-in-memorys_17)))"
"(rebuild-linklet-directory5.1 temp12_25 temp11_24 temp13_26))))"
"(compiled-in-memory1.1"
" linklet-directory10_22"
"(compiled-in-memory-original-self the-struct_19)"
"(compiled-in-memory-requires the-struct_19)"
"(compiled-in-memory-provides the-struct_19)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_19)"
"(compiled-in-memory-compile-time-inspector the-struct_19)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_19)"
"(compiled-in-memory-mpis the-struct_19)"
"(compiled-in-memory-syntax-literals the-struct_19)"
" pre-compiled-in-memorys8_20"
" post-compiled-in-memorys9_21"
"(compiled-in-memory-namespace-scopes the-struct_19)"
"(compiled-in-memory-purely-functional? the-struct_19)))"
"                          (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_19)))))))"
"(if(1/linklet-directory? c_0)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_28)(1/linklet-directory->hash c_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_28)))"
"((letrec-values(((for-loop_29)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((key_32 val_33)(hash-iterate-key+value ht_28 i_0)))"
"(let-values(((table_34)"
"(let-values(((table_35) table_0))"
"(let-values(((table_36)"
"(let-values()"
"(let-values(((key_37 val_38)"
"(let-values()"
"(values"
" key_32"
"(if(not key_32)"
"(update-one-name"
" val_33"
" full-name_10)"
"(recur_12"
" val_33"
" key_32))))))"
"(hash-set table_35 key_37 val_38)))))"
"(values table_36)))))"
"(if(not #f)"
"(for-loop_29 table_34(hash-iterate-next ht_28 i_0))"
" table_34)))"
" table_0)))))"
" for-loop_29)"
" '#hasheq()"
"(hash-iterate-first ht_28))))))"
"(let-values()(update-one-name c_0 full-name_10))))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_0 name_0)(begin(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_0) 'name name_0)))))"
"(define-values"
"(rebuild-linklet-directory5.1)"
"(lambda(bundle-ok?1_0 main3_0 submods4_0)"
"(begin"
" 'rebuild-linklet-directory5"
"(let-values(((main_44) main3_0))"
"(let-values(((submods_45) submods4_0))"
"(let-values(((bundle-ok?_46) bundle-ok?1_0))"
"(let-values()"
"(if(if(null? submods_45) bundle-ok?_46 #f)"
" main_44"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_47) submods_45))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_47)))"
"((letrec-values(((for-loop_48)"
"(lambda(ht_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((submod_51)(unsafe-car lst_0))"
"((rest_52)(unsafe-cdr lst_0)))"
"(let-values(((ht_53)"
"(let-values(((ht_54) ht_0))"
"(let-values(((ht_55)"
"(let-values()"
"(let-values(((name_56)"
"(module-compiled-immediate-name"
" submod_51)))"
"(if(hash-ref ht_54 name_56 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                                       \"change would result in duplicate submodule name\""
"                                                                                       \"name\""
" name_56))"
"(let-values()"
"(hash-set"
" ht_54"
" name_56"
"(compiled->linklet-directory-or-bundle"
" submod_51))))))))"
"(values ht_55)))))"
"(if(not #f)(for-loop_48 ht_53 rest_52) ht_53)))"
" ht_0)))))"
" for-loop_48)"
" '#hasheq()"
" lst_47)))"
" #f"
" main_44))))))))))"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_0)"
"(begin"
" 'compiled-expression?"
"(let-values(((or-part_2)(compiled-in-memory? c_0)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_3)(1/linklet-directory? c_0)))(if or-part_3 or-part_3(1/linklet-bundle? c_0))))))))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_0)"
"(begin"
" 'compiled-module-expression?"
"(let-values(((ld_5)(compiled->linklet-directory-or-bundle c_0)))"
"(let-values(((or-part_6)"
"(if(1/linklet-directory? ld_5)"
"(if(let-values(((b_7)(hash-ref(1/linklet-directory->hash ld_5) #f #f)))"
"(if b_7(hash-ref(1/linklet-bundle->hash b_7) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_6"
" or-part_6"
"(if(1/linklet-bundle? ld_5)(if(hash-ref(1/linklet-bundle->hash ld_5) 'decl #f) #t #f) #f)))))))"
"(define-values"
"(1/module-compiled-name)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((c_0)"
"(begin"
" 'module-compiled-name"
"(begin"
"(if(1/compiled-module-expression? c_0)"
"(void)"
"              (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_0)))"
"(module-compiled-current-name c_0))))"
"((c_0 name_0)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_0)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_14)(symbol? name_0)))"
"(if or-part_14"
" or-part_14"
"(if(pair? name_0)(if(list? name_0)(andmap2 symbol? name_0) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                               \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_0)))"
"(values))))"
"(let-values(((i-name_12 prefix_13)"
"(if(symbol? name_0)"
"(values name_0 null)"
"(let-values(((r_15)(reverse$1 name_0)))(values(car r_15)(reverse$1(cdr r_15)))))))"
"(change-module-name c_0 i-name_12 prefix_13)))))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((c_0 non-star?_0)"
"(begin"
" 'module-compiled-submodules"
"(begin"
"(if(1/compiled-module-expression? c_0)"
"(void)"
"              (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_0)))"
"(if(compiled-in-memory? c_0)"
"(let-values()"
"(if non-star?_0"
"(compiled-in-memory-pre-compiled-in-memorys c_0)"
"(compiled-in-memory-post-compiled-in-memorys c_0)))"
"(let-values()"
"(if(1/linklet-directory? c_0)"
"(let-values()"
"(let-values(((ht_19)(1/linklet-directory->hash c_0)))"
"(let-values(((bh_20)(1/linklet-bundle->hash(hash-ref ht_19 #f))))"
"(let-values(((names_21)(hash-ref bh_20(if non-star?_0 'pre 'post) null)))"
"(reverse$1"
"(let-values(((lst_22) names_21))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_22)))"
"((letrec-values(((for-loop_23)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((name_26)(unsafe-car lst_0))"
"((rest_27)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_28)"
"(let-values(((fold-var_29) fold-var_0))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref ht_19 name_26))"
" fold-var_29))))"
"(values fold-var_30)))))"
"(if(not #f)(for-loop_23 fold-var_28 rest_27) fold-var_28)))"
" fold-var_0)))))"
" for-loop_23)"
" null"
" lst_22))))))))"
"(let-values() null)))))))"
"((c_0 non-star?_0 submods_0)"
"(begin"
"(if(1/compiled-module-expression? c_0)"
"(void)"
"            (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_0)))"
"(if(if(list? submods_0)(andmap2 1/compiled-module-expression? submods_0) #f)"
"(void)"
"(let-values()"
"              (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_0)))"
"(if(if(null? submods_0)"
"(let-values(((or-part_34)(1/linklet-bundle?(compiled->linklet-directory-or-bundle c_0))))"
"(if or-part_34"
" or-part_34"
"(if(compiled-in-memory? c_0)"
"(null?"
"(if non-star?_0"
"(compiled-in-memory-pre-compiled-in-memorys c_0)"
"(compiled-in-memory-post-compiled-in-memorys c_0)))"
" #f)))"
" #f)"
"(let-values() c_0)"
"(if(if(compiled-in-memory? c_0)(andmap2 compiled-in-memory? submods_0) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_35)"
"(if non-star?_0 submods_0(compiled-in-memory-pre-compiled-in-memorys c_0))))"
"(let-values(((post-compiled-in-memorys_36)"
"(if non-star?_0(compiled-in-memory-post-compiled-in-memorys c_0) submods_0)))"
"(let-values(((n-c_37)(normalize-to-linklet-directory c_0)))"
"(fixup-submodule-names"
"(let-values(((the-struct_38) n-c_37))"
"(if(compiled-in-memory? the-struct_38)"
"(let-values(((pre-compiled-in-memorys3_39) pre-compiled-in-memorys_35)"
"((post-compiled-in-memorys4_40) post-compiled-in-memorys_36)"
"((linklet-directory5_41)"
"(let-values(((temp6_43)"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash"
"(compiled->linklet-directory-or-bundle n-c_37))"
" #f)"
" non-star?_0"
" submods_0))"
"((temp7_44)(symbol?(module-compiled-current-name c_0)))"
"((temp8_45)"
"(append pre-compiled-in-memorys_35 post-compiled-in-memorys_36)))"
"(rebuild-linklet-directory5.1 temp7_44 temp6_43 temp8_45))))"
"(compiled-in-memory1.1"
" linklet-directory5_41"
"(compiled-in-memory-original-self the-struct_38)"
"(compiled-in-memory-requires the-struct_38)"
"(compiled-in-memory-provides the-struct_38)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_38)"
"(compiled-in-memory-compile-time-inspector the-struct_38)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_38)"
"(compiled-in-memory-mpis the-struct_38)"
"(compiled-in-memory-syntax-literals the-struct_38)"
" pre-compiled-in-memorys3_39"
" post-compiled-in-memorys4_40"
"(compiled-in-memory-namespace-scopes the-struct_38)"
"(compiled-in-memory-purely-functional? the-struct_38)))"
"                           (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_38))))))))"
"(let-values()"
"(let-values(((n-c_46)(normalize-to-linklet-directory c_0)))"
"(fixup-submodule-names"
"(let-values(((temp9_47)"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_46))"
" #f)"
" non-star?_0"
" submods_0))"
"((temp10_48)"
"(map2"
" compiled->linklet-directory-or-bundle"
"(append"
"(if non-star?_0 submods_0(1/module-compiled-submodules c_0 #t))"
"(if non-star?_0(1/module-compiled-submodules c_0 #f) submods_0)))))"
"(rebuild-linklet-directory5.1 #f temp9_47 temp10_48)))))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_0)"
"(begin"
" 'module-compiled-language-info"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_0)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_0)))"
"(values))))"
"(let-values(((h_51)(compiled-module->h c_0)))(hash-ref h_51 'language-info #f))))))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_0)"
"(begin"
" 'module-compiled-imports"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_0)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_0)))"
"(values))))"
"(let-values(((inst_54)(compiled-module->declaration-instance c_0)))"
"(1/instance-variable-value inst_54 'requires))))))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_0)"
"(begin"
" 'module-compiled-exports"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_0)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-compiled-exports \"compiled-module-expression?\" c_0)))"
"(values))))"
"(let-values(((inst_57)(compiled-module->declaration-instance c_0)))"
"(provides->api-provides"
"(1/instance-variable-value inst_57 'provides)"
"(1/instance-variable-value inst_57 'self-mpi)))))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_0)"
"(begin"
" 'module-compiled-indirect-exports"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-indirect-exports"
"                               \"compiled-module-expression?\""
" c_0)))"
"(values))))"
"(let-values(((h_60 inst_61)(compiled-module->h+declaration-instance c_0)))"
"(let-values(((min-phase_62)(hash-ref h_60 'min-phase 0)))"
"(let-values(((max-phase_63)(hash-ref h_60 'max-phase 0)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_61 'provides)"
"(let-values(((start_64) min-phase_62)((end_65)(add1 max-phase_63))((inc_66) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_64 end_65 inc_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(table_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_65)"
"(let-values(((phase-level_70) pos_0))"
"(let-values(((table_71)"
"(let-values(((table_72) table_0))"
"(let-values(((table_73)"
"(let-values()"
"(let-values(((key_74 val_75)"
"(let-values()"
"(let-values(((linklet_76)"
"(hash-ref"
" h_60"
" phase-level_70"
" #f)))"
"(values"
" phase-level_70"
"(if linklet_76"
"(1/linklet-export-variables"
" linklet_76)"
" null))))))"
"(hash-set table_72 key_74 val_75)))))"
"(values table_73)))))"
"(if(not #f)(for-loop_67 table_71(+ pos_0 inc_66)) table_71)))"
" table_0)))))"
" for-loop_67)"
" '#hash()"
" start_64)))))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_0)"
"(begin"
" 'module-compiled-cross-phase-persistent?"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                               \"compiled-module-expression?\""
" c_0)))"
"(values))))"
"(let-values(((h_79)(compiled-module->h c_0)))(hash-ref h_79 'cross-phase-persistent? #f))))))))"
"(define-values"
"(normalize-to-linklet-directory)"
"(lambda(c_0)"
"(begin"
"(if(1/linklet-directory?(compiled->linklet-directory-or-bundle c_0))"
"(let-values() c_0)"
"(if(1/linklet-bundle? c_0)"
"(let-values()(1/hash->linklet-directory(hasheq #f c_0)))"
"(let-values()"
"(let-values(((the-struct_81) c_0))"
"(if(compiled-in-memory? the-struct_81)"
"(let-values(((linklet-directory16_82)"
"(normalize-to-linklet-directory(compiled-in-memory-linklet-directory c_0))))"
"(compiled-in-memory1.1"
" linklet-directory16_82"
"(compiled-in-memory-original-self the-struct_81)"
"(compiled-in-memory-requires the-struct_81)"
"(compiled-in-memory-provides the-struct_81)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_81)"
"(compiled-in-memory-compile-time-inspector the-struct_81)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_81)"
"(compiled-in-memory-mpis the-struct_81)"
"(compiled-in-memory-syntax-literals the-struct_81)"
"(compiled-in-memory-pre-compiled-in-memorys the-struct_81)"
"(compiled-in-memory-post-compiled-in-memorys the-struct_81)"
"(compiled-in-memory-namespace-scopes the-struct_81)"
"(compiled-in-memory-purely-functional? the-struct_81)))"
"                (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_81)))))))))"
"(define-values"
"(fixup-submodule-names)"
"(lambda(c_0)(begin(1/module-compiled-name c_0(1/module-compiled-name c_0)))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_0 pre?_0 submods_0)"
"(begin"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_0)"
"(if pre?_0 'pre 'post)"
"(map2 module-compiled-immediate-name submods_0))))))"
"(define-values"
"(compile-module13.1)"
"(lambda(force-linklet-directory?1_0"
" modules-being-compiled4_0"
" need-compiled-submodule-rename?5_0"
" serializable?2_0"
" to-source?3_0"
" p11_0"
" cctx12_0)"
"(begin"
" 'compile-module13"
"(let-values(((p_13) p11_0))"
"(let-values(((cctx_14) cctx12_0))"
"(let-values(((force-linklet-directory?_15) force-linklet-directory?1_0))"
"(let-values(((serializable?_16) serializable?2_0))"
"(let-values(((to-source?_17) to-source?3_0))"
"(let-values(((modules-being-compiled_18)"
"(if(eq? modules-being-compiled4_0 unsafe-undefined)"
"(make-hasheq)"
" modules-being-compiled4_0)))"
"(let-values(((need-compiled-submodule-rename?_19) need-compiled-submodule-rename?5_0))"
"(let-values()"
"(let-values(((full-module-name_20)"
"(let-values(((parent-full-name_25)(compile-context-full-module-name cctx_14))"
"((name_26)(syntax-e$1(parsed-module-name-id p_13))))"
"(if parent-full-name_25"
"(append"
"(if(list? parent-full-name_25) parent-full-name_25(list parent-full-name_25))"
"(list name_26))"
" name_26))))"
"(let-values(((compiled-submodules_21)(parsed-module-compiled-submodules p_13)))"
"(let-values(((get-submodules_22)"
"(lambda(star?_0)"
"(begin"
" 'get-submodules"
"(reverse$1"
"(let-values(((ht_28) compiled-submodules_21))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_28)))"
"((letrec-values(((for-loop_29)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((name_32 star?+compiled_33)"
"(hash-iterate-key+value"
" ht_28"
" i_0)))"
"(let-values(((fold-var_34)"
"(let-values(((fold-var_35)"
" fold-var_0))"
"(if(eq?"
" star?_0"
"(car star?+compiled_33))"
"(let-values(((fold-var_36)"
" fold-var_35))"
"(let-values(((fold-var_37)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" name_32"
"(if(if need-compiled-submodule-rename?_19"
"(not"
"(parsed-module-compiled-module"
" p_13))"
" #f)"
"(update-submodule-names"
"(cdr"
" star?+compiled_33)"
" name_32"
" full-module-name_20)"
"(cdr"
" star?+compiled_33))))"
" fold-var_36))))"
"(values fold-var_37)))"
" fold-var_35))))"
"(if(not #f)"
"(for-loop_29"
" fold-var_34"
"(hash-iterate-next ht_28 i_0))"
" fold-var_34)))"
" fold-var_0)))))"
" for-loop_29)"
" null"
"(hash-iterate-first ht_28)))))))))"
"(let-values(((pre-submodules_23)(get-submodules_22 #f)))"
"(let-values(((post-submodules_24)(get-submodules_22 #t)))"
"(let-values(((c1_38)(parsed-module-compiled-module p_13)))"
"(if c1_38"
"((lambda(c_0)"
"(let-values(((name_40 prefix_41)"
"(if(symbol? full-module-name_20)"
"(values full-module-name_20 null)"
"(let-values(((r_43)(reverse$1 full-module-name_20)))"
"(values(car r_43)(reverse$1(cdr r_43)))))))"
"(let-values(((m_42)(change-module-name c_0 name_40 prefix_41)))"
"(1/module-compiled-submodules"
"(1/module-compiled-submodules m_42 #t(map2 cdr pre-submodules_23))"
" #f"
"(map2 cdr post-submodules_24)))))"
" c1_38)"
"(let-values()"
"(let-values(((p37_45) p_13)"
"((cctx38_46) cctx_14)"
"((full-module-name39_47) full-module-name_20)"
"((force-linklet-directory?40_48) force-linklet-directory?_15)"
"((serializable?41_49) serializable?_16)"
"((to-source?42_50) to-source?_17)"
"((modules-being-compiled43_51) modules-being-compiled_18)"
"((pre-submodules44_52) pre-submodules_23)"
"((post-submodules45_53) post-submodules_24)"
"((need-compiled-submodule-rename?46_54)"
" need-compiled-submodule-rename?_19))"
"(compile-module-from-parsed34.1"
" force-linklet-directory?40_48"
" full-module-name39_47"
" modules-being-compiled43_51"
" need-compiled-submodule-rename?46_54"
" post-submodules45_53"
" pre-submodules44_52"
" serializable?41_49"
" to-source?42_50"
" p37_45"
" cctx38_46)))))))))))))))))))))"
"(define-values"
"(compile-module-from-parsed34.1)"
"(lambda(force-linklet-directory?17_0"
" full-module-name16_0"
" modules-being-compiled20_0"
" need-compiled-submodule-rename?23_0"
" post-submodules22_0"
" pre-submodules21_0"
" serializable?18_0"
" to-source?19_0"
" p32_0"
" cctx33_0)"
"(begin"
" 'compile-module-from-parsed34"
"(let-values(((p_112) p32_0))"
"(let-values(((cctx_113) cctx33_0))"
"(let-values(((full-module-name_114) full-module-name16_0))"
"(let-values(((force-linklet-directory?_115) force-linklet-directory?17_0))"
"(let-values(((serializable?_116) serializable?18_0))"
"(let-values(((to-source?_117) to-source?19_0))"
"(let-values(((modules-being-compiled_118) modules-being-compiled20_0))"
"(let-values(((pre-submodules_119) pre-submodules21_0))"
"(let-values(((post-submodules_120) post-submodules22_0))"
"(let-values(((need-compiled-submodule-rename?_121) need-compiled-submodule-rename?23_0))"
"(let-values()"
"(let-values()"
"(let-values(((enclosing-self_122)(compile-context-module-self cctx_113)))"
"(let-values(((self_123)(parsed-module-self p_112)))"
"(let-values(((requires_124)(parsed-module-requires p_112)))"
"(let-values(((provides_125)(parsed-module-provides p_112)))"
"(let-values(((encoded-root-expand-ctx-box_126)"
"(box(parsed-module-encoded-root-ctx p_112))))"
"(let-values(((body-context-simple?_127)"
"(parsed-module-root-ctx-simple? p_112)))"
"(let-values(((language-info_128)"
"(filter-language-info"
"(syntax-property$1(parsed-s p_112) 'module-language))))"
"(let-values(((bodys_129)(parsed-module-body p_112)))"
"(let-values(((empty-result-for-module->namespace?_130) #f))"
"(let-values(((mpis_131)(make-module-path-index-table)))"
"(let-values(((body-cctx_132)"
"(let-values(((the-struct_150) cctx_113))"
"(if(compile-context? the-struct_150)"
"(let-values(((phase47_151) 0)"
"((self48_152) self_123)"
"((module-self49_153) self_123)"
"((full-module-name50_154)"
" full-module-name_114)"
"((lazy-syntax-literals?51_155) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_150)"
" phase47_151"
" self48_152"
" module-self49_153"
" full-module-name50_154"
" lazy-syntax-literals?51_155"
"(compile-context-header the-struct_150)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"compile-context?\""
" the-struct_150)))))"
"(let-values(((cross-phase-persistent?_133) #f))"
"(let-values(((side-effects_134)(make-hasheqv)))"
"(let-values(((check-side-effects!_135)"
"(lambda(e_0"
" expected-results_0"
" phase_0"
" required-reference?_0)"
"(begin"
" 'check-side-effects!"
"(if(hash-ref side-effects_134 phase_0 #f)"
"(void)"
"(let-values()"
"(if(let-values(((e52_161) e_0)"
"((expected-results53_162)"
" expected-results_0)"
"((required-reference?54_163)"
" required-reference?_0))"
"(any-side-effects?9.1"
" unsafe-undefined"
" unsafe-undefined"
" required-reference?54_163"
" e52_161"
" expected-results53_162))"
"(let-values()"
"(hash-set!"
" side-effects_134"
" phase_0"
" #t))"
"(void))))))))"
"(let-values((()"
"(begin"
"(if(if need-compiled-submodule-rename?_121"
" modules-being-compiled_118"
" #f)"
"(let-values()"
"(begin"
"(if(null? post-submodules_120)"
"(void)"
"(let-values()"
"(error"
"                                                                                     \"internal error: have post submodules, but not already compiled\")))"
"(register-compiled-submodules"
" modules-being-compiled_118"
" pre-submodules_119"
" self_123)))"
"(void))"
"(values))))"
"(let-values(((body-linklets_136"
" min-phase_137"
" max-phase_138"
" phase-to-link-module-uses_139"
" phase-to-link-module-uses-expr_140"
" phase-to-link-extra-inspectorsss_141"
" syntax-literals_142"
" root-ctx-pos_143)"
"(let-values(((bodys55_165) bodys_129)"
"((body-cctx56_166) body-cctx_132)"
"((mpis57_167) mpis_131)"
"((temp58_168)"
"(list"
"(list get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((temp59_169)"
"(list"
" empty-syntax-literals-instance"
" empty-module-body-instance))"
"((temp60_170) '((void)))"
"((temp61_171) '(0))"
"((encoded-root-expand-ctx-box62_172)"
" encoded-root-expand-ctx-box_126)"
"((body-context-simple?63_173)"
" body-context-simple?_127)"
"((check-side-effects!64_174)"
" check-side-effects!_135)"
"((temp65_175)"
"(lambda(body_0 cctx_0)"
"(if(parsed-#%declare? body_0)"
"(let-values()"
"(let-values(((ok?_181"
" _69_182"
" kw70_183)"
"(let-values(((s_197)"
"(parsed-s"
" body_0)))"
"(let-values(((orig-s_198)"
" s_197))"
"(let-values(((_69_199"
" kw70_200)"
"(let-values(((s_201)"
"(if(syntax?$1"
" s_197)"
"(syntax-e$1"
" s_197)"
" s_197)))"
"(if(pair?"
" s_201)"
"(let-values(((_71_202)"
"(let-values(((s_204)"
"(car"
" s_201)))"
" s_204))"
"((kw72_203)"
"(let-values(((s_205)"
"(cdr"
" s_201)))"
"(let-values(((s_206)"
"(if(syntax?$1"
" s_205)"
"(syntax-e$1"
" s_205)"
" s_205)))"
"(let-values(((flat-s_207)"
"(to-syntax-list.1"
" s_206)))"
"(if(not"
" flat-s_207)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_198))"
"(let-values()"
" flat-s_207)))))))"
"(values"
" _71_202"
" kw72_203))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_198)))))"
"(values"
" #t"
" _69_199"
" kw70_200))))))"
"(begin"
"(let-values(((lst_208)"
" kw70_183))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_208)))"
"((letrec-values(((for-loop_209)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((kw_211)"
"(unsafe-car"
" lst_0))"
"((rest_212)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_211)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_133"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_211)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_130"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_126"
" #f)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_209"
" rest_212)"
"(values))))"
"(values))))))"
" for-loop_209)"
" lst_208)))"
"(void)"
" #f)))"
"(let-values() #f))))"
"((temp66_176)"
"(lambda(mod-name_0 phase_0)"
"(let-values(((ht_215)"
"(if modules-being-compiled_118"
"(hash-ref"
" modules-being-compiled_118"
" mod-name_0"
" #f)"
" #f)))"
"(if ht_215"
"(hash-ref"
" ht_215"
" phase_0"
" #f)"
" #f))))"
"((to-source?67_177)"
" to-source?_117)"
"((serializable?68_178)"
" serializable?_116))"
"(compile-forms31.1"
" temp59_169"
" temp58_168"
" temp60_170"
" check-side-effects!64_174"
" #t"
" unsafe-undefined"
" encoded-root-expand-ctx-box62_172"
" temp61_171"
" temp66_176"
" temp65_175"
" body-context-simple?63_173"
" serializable?68_178"
" to-source?67_177"
" bodys55_165"
" body-cctx56_166"
" mpis57_167))))"
"(let-values((()"
"(begin"
"(if modules-being-compiled_118"
"(let-values()"
"(hash-set!"
" modules-being-compiled_118"
"(1/module-path-index-resolve"
" self_123)"
"(let-values(((ht_216)"
" body-linklets_136))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_216)))"
"((letrec-values(((for-loop_217)"
"(lambda(table_0"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_220"
" linklet_221)"
"(hash-iterate-key+value"
" ht_216"
" i_0)))"
"(let-values(((table_222)"
"(let-values(((table_223)"
" table_0))"
"(let-values(((table_224)"
"(let-values()"
"(let-values(((key_225"
" val_226)"
"(let-values()"
"(values"
" phase_220"
"(module-linklet-info2.1"
" linklet_221"
"(hash-ref"
" phase-to-link-module-uses_139"
" phase_220"
" #f)"
" self_123"
" #f"
" #f"
"(if phase-to-link-extra-inspectorsss_141"
"(hash-ref"
" phase-to-link-extra-inspectorsss_141"
" phase_220"
" #f)"
" #f))))))"
"(hash-set"
" table_223"
" key_225"
" val_226)))))"
"(values"
" table_224)))))"
"(if(not"
" #f)"
"(for-loop_217"
" table_222"
"(hash-iterate-next"
" ht_216"
" i_0))"
" table_222)))"
" table_0)))))"
" for-loop_217)"
" '#hasheq()"
"(hash-iterate-first ht_216))))))"
"(void))"
"(values))))"
"(let-values(((declaration-linklet_144)"
"(if serializable?_116"
"((if to-source?_117"
" values"
"(lambda(s_0)"
"(let-values()"
"(1/compile-linklet s_0 'decl))))"
"(list"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" phase-to-link-modules)"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index!"
" mpis_131"
" self_123))"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((requires73_229)"
" requires_124)"
"((mpis74_230) mpis_131)"
"((temp75_231) #f))"
"(generate-deserialize6.1"
" temp75_231"
" requires73_229"
" mpis74_230)))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((provides76_233)"
" provides_125)"
"((mpis77_234) mpis_131)"
"((temp78_235) #f))"
"(generate-deserialize6.1"
" temp78_235"
" provides76_233"
" mpis77_234)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_140)))"
" #f)))"
"(let-values(((syntax-literals-linklet_145)"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_142))"
"((if to-source?_117"
" values"
"(lambda(s_0)"
"(let-values()"
"(let-values(((linklet_237"
" new-keys_238)"
"(1/compile-linklet"
" s_0"
" 'syntax-literals"
"(vector"
" deserialize-instance"
" empty-top-syntax-literal-instance"
" empty-syntax-literals-data-instance"
" empty-instance-instance)"
"(lambda(inst_0)"
"(values"
" inst_0"
" #f))"
"(if serializable?_116"
" '(serializable)"
" '()))))"
" linklet_237))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_116"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((syntax-literals79_241)"
" syntax-literals_142)"
"((mpis80_242)"
" mpis_131)"
"((self81_243)"
" self_123)"
"((temp82_244)"
"(not"
" serializable?_116)))"
"(generate-lazy-syntax-literals!9.1"
" temp82_244"
" syntax-literals79_241"
" mpis80_242"
" self81_243))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-pos_143"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
" root-ctx-pos_143)))"
"(if empty-result-for-module->namespace?_130"
"(let-values() ''empty)"
"(let-values() ''#f))))))))"
" #f)))"
"(let-values(((syntax-literals-data-linklet_146)"
"(if serializable?_116"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_142))"
"((if to-source?_117"
" values"
"(lambda(s_0)"
"(let-values()"
"(1/compile-linklet"
" s_0"
" 'syntax-literals-data))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(syntax-literals-count"
" syntax-literals_142)"
" '(#f)))"
"(let-values()"
"(generate-lazy-syntax-literals-data!"
" syntax-literals_142"
" mpis_131))))"
" #f)"
" #f)))"
"(let-values(((data-linklet_147)"
"(if serializable?_116"
"((if to-source?_117"
" values"
"(lambda(s_0)"
"(let-values()"
"(1/compile-linklet"
" s_0"
" 'data))))"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_131))))"
" #f)))"
"(let-values(((bundle_148)"
"(let-values(((bundle_247)"
"(hash-set"
" body-linklets_136"
" 'name"
" full-module-name_114)))"
"(let-values(((bundle_248)"
"(hash-set"
" bundle_247"
" 'decl"
"(let-values(((or-part_249)"
" declaration-linklet_144))"
"(if or-part_249"
" or-part_249"
" 'in-memory)))))"
"(let-values(((bundle_250)"
"(if data-linklet_147"
"(hash-set"
" bundle_248"
" 'data"
" data-linklet_147)"
" bundle_248)))"
"(let-values(((bundle_251)"
"(if syntax-literals-linklet_145"
"(hash-set"
" bundle_250"
" 'stx"
" syntax-literals-linklet_145)"
" bundle_250)))"
"(let-values(((bundle_252)"
"(if syntax-literals-data-linklet_146"
"(hash-set"
" bundle_251"
" 'stx-data"
" syntax-literals-data-linklet_146)"
" bundle_251)))"
"(let-values(((bundle_253)"
"(if(null?"
" pre-submodules_119)"
" bundle_252"
"(hash-set"
" bundle_252"
" 'pre"
"(map2"
" car"
" pre-submodules_119)))))"
"(let-values(((bundle_254)"
"(if(null?"
" post-submodules_120)"
" bundle_253"
"(hash-set"
" bundle_253"
" 'post"
"(map2"
" car"
" post-submodules_120)))))"
"(let-values(((bundle_255)"
"(if cross-phase-persistent?_133"
"(hash-set"
" bundle_254"
" 'cross-phase-persistent?"
" #t)"
" bundle_254)))"
"(let-values(((bundle_256)"
"(if language-info_128"
"(hash-set"
" bundle_255"
" 'language-info"
" language-info_128)"
" bundle_255)))"
"(let-values(((bundle_257)"
"(if(zero?"
" min-phase_137)"
" bundle_256"
"(hash-set"
" bundle_256"
" 'min-phase"
" min-phase_137))))"
"(let-values(((bundle_258)"
"(if(zero?"
" max-phase_138)"
" bundle_257"
"(hash-set"
" bundle_257"
" 'max-phase"
" max-phase_138))))"
"(let-values(((bundle_259)"
"(if(hash-count"
" side-effects_134)"
"(hash-set"
" bundle_258"
" 'side-effects"
"(let-values(((temp83_260)"
"(hash-keys"
" side-effects_134))"
"((<84_261)"
" <))"
"(sort7.1"
" #f"
" #f"
" temp83_260"
" <84_261)))"
" bundle_258)))"
"(let-values(((bundle_262)"
"(if empty-result-for-module->namespace?_130"
"(hash-set"
" bundle_259"
" 'module->namespace"
" 'empty)"
" bundle_259)))"
"(1/hash->linklet-bundle"
" bundle_262))))))))))))))))"
"(let-values(((ld_149)"
"(if(if(null?"
" pre-submodules_119)"
"(if(null?"
" post-submodules_120)"
"(not"
" force-linklet-directory?_115)"
" #f)"
" #f)"
"(let-values() bundle_148)"
"(let-values()"
"((if to-source?_117"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_263)"
"(append"
" pre-submodules_119"
" post-submodules_120)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_263)))"
"((letrec-values(((for-loop_264)"
"(lambda(ht_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((sm_267)"
"(unsafe-car"
" lst_0))"
"((rest_268)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((ht_269)"
"(let-values(((ht_270)"
" ht_0))"
"(let-values(((ht_271)"
"(let-values()"
"(hash-set"
" ht_270"
"(car"
" sm_267)"
"((if to-source?_117"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_267))))))"
"(values"
" ht_271)))))"
"(if(not"
" #f)"
"(for-loop_264"
" ht_269"
" rest_268)"
" ht_269)))"
" ht_0)))))"
" for-loop_264)"
"(hasheq #f bundle_148)"
" lst_263))))))))"
"(if to-source?_117"
"(let-values() ld_149)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_149"
" self_123"
" requires_124"
" provides_125"
" phase-to-link-module-uses_139"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_141"
"(mpis-as-vector mpis_131)"
"(syntax-literals-as-vector"
" syntax-literals_142)"
"(map2 cdr pre-submodules_119)"
"(map2 cdr post-submodules_120)"
" #f"
" #f)))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(update-submodule-names)"
"(lambda(cim_0 name_0 full-module-name_0)"
"(begin"
"(change-module-name"
" cim_0"
" name_0"
"(if(symbol? full-module-name_0)(list full-module-name_0)(reverse$1(cdr(reverse$1 full-module-name_0))))))))"
"(define-values"
"(register-compiled-submodules)"
"(lambda(modules-being-compiled_0 pre-submodules_0 self_0)"
"(begin"
"(begin"
"(let-values(((lst_318) pre-submodules_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_318)))"
"((letrec-values(((for-loop_319)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_321)(unsafe-car lst_0))((rest_322)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name_323)(car s_321)))"
"(let-values(((cim_324)(cdr s_321)))"
"(let-values(((phase-to-link-module-uses_325)"
"(compiled-in-memory-phase-to-link-module-uses"
" cim_324)))"
"(let-values(((ld_326)"
"(compiled-in-memory-linklet-directory"
" cim_324)))"
"(let-values(((sm-self_327)"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                  \".\""
" name_323)"
" self_0)))"
"(let-values(((phase-to-extra-inspectorsss_328)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss"
" cim_324)))"
"(hash-set!"
" modules-being-compiled_0"
"(1/module-path-index-resolve"
" sm-self_327)"
"(let-values(((ht_329)"
"(1/linklet-bundle->hash"
"(if(1/linklet-directory?"
" ld_326)"
"(hash-ref"
"(1/linklet-directory->hash"
" ld_326)"
" #f)"
" ld_326))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_329)))"
"((letrec-values(((for-loop_330)"
"(lambda(table_0"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_333"
" linklet_334)"
"(hash-iterate-key+value"
" ht_329"
" i_0)))"
"(let-values(((table_335)"
"(let-values(((table_336)"
" table_0))"
"(if(number?"
" phase_333)"
"(let-values(((table_337)"
" table_336))"
"(let-values(((table_338)"
"(let-values()"
"(let-values(((key_339"
" val_340)"
"(let-values()"
"(values"
" phase_333"
"(module-linklet-info2.1"
" linklet_334"
"(hash-ref"
" phase-to-link-module-uses_325"
" phase_333"
" #f)"
"(compiled-in-memory-original-self"
" cim_324)"
" #f"
"(compiled-in-memory-compile-time-inspector"
" cim_324)"
"(if phase-to-extra-inspectorsss_328"
"(hash-ref"
" phase-to-extra-inspectorsss_328"
" phase_333"
" #f)"
" #f))))))"
"(hash-set"
" table_337"
" key_339"
" val_340)))))"
"(values"
" table_338)))"
" table_336))))"
"(if(not"
" #f)"
"(for-loop_330"
" table_335"
"(hash-iterate-next"
" ht_329"
" i_0))"
" table_335)))"
" table_0)))))"
" for-loop_330)"
" '#hasheq()"
"(hash-iterate-first"
" ht_329))))))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_319 rest_322)(values))))"
"(values))))))"
" for-loop_319)"
" lst_318)))"
"(void)))))"
"(define-values"
"(filter-language-info)"
"(lambda(li_0)"
"(begin"
"(if(vector? li_0)"
"(if(= 3(vector-length li_0))"
"(if(1/module-path?(vector-ref li_0 0))(if(symbol?(vector-ref li_0 1)) li_0 #f) #f)"
" #f)"
" #f))))"
"(define-values"
"(1/compiled-expression-recompile)"
"(lambda(c_0)"
"(begin"
" 'compiled-expression-recompile"
"(begin"
"(if(1/compiled-expression? c_0)"
"(void)"
"          (let-values () (raise-argument-error 'compiled-expression-recompile \"compiled-expression?\" c_0)))"
"(if(1/linklet-bundle? c_0)"
"(let-values()"
"(1/hash->linklet-bundle"
"(let-values(((ht_2)(1/linklet-bundle->hash c_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_2)))"
"((letrec-values(((for-loop_3)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_6 v_7)(hash-iterate-key+value ht_2 i_0)))"
"(let-values(((table_8)"
"(let-values(((table_9) table_0))"
"(let-values(((table_10)"
"(let-values()"
"(let-values(((key_11 val_12)"
"(let-values()"
"(if(1/linklet? v_7)"
"(let-values()"
"(values"
" k_6"
"(1/recompile-linklet"
" v_7)))"
"(let-values()"
"(values k_6 v_7))))))"
"(hash-set table_9 key_11 val_12)))))"
"(values table_10)))))"
"(if(not #f)(for-loop_3 table_8(hash-iterate-next ht_2 i_0)) table_8)))"
" table_0)))))"
" for-loop_3)"
" '#hasheq()"
"(hash-iterate-first ht_2))))))"
"(if(1/linklet-directory? c_0)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_13)(1/linklet-directory->hash c_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_13)))"
"((letrec-values(((for-loop_14)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_17 v_18)(hash-iterate-key+value ht_13 i_0)))"
"(let-values(((table_19)"
"(let-values(((table_20) table_0))"
"(let-values(((table_21)"
"(let-values()"
"(let-values(((key_22 val_23)"
"(let-values()"
"(if(1/compiled-expression?"
" v_18)"
"(let-values()"
"(values"
" k_17"
"(1/compiled-expression-recompile"
" v_18)))"
"(let-values()"
"(values k_17 v_18))))))"
"(hash-set table_20 key_22 val_23)))))"
"(values table_21)))))"
"(if(not #f)"
"(for-loop_14 table_19(hash-iterate-next ht_13 i_0))"
" table_19)))"
" table_0)))))"
" for-loop_14)"
" '#hasheq()"
"(hash-iterate-first ht_13))))))"
"(let-values() c_0)))))))"
"(define-values"
"(create-compiled-in-memorys-using-shared-data)"
"(lambda(tops_0 data-linklet_0 ns_0)"
"(begin"
"(let-values(((data-instance_4)"
"(1/instantiate-linklet"
" data-linklet_0"
"(list"
" deserialize-instance"
"(let-values(((ns1_15) ns_0)"
"((temp2_16)(namespace-phase ns_0))"
"((temp3_17)(namespace-mpi ns_0))"
"((temp4_18)(namespace-bulk-binding-registry ns_0))"
"((temp5_19)(current-code-inspector)))"
"(make-eager-instance-instance11.1 temp4_18 temp2_16 temp5_19 ns1_15 temp3_17))))))"
"(let-values(((data_5)(lambda(key_0)(begin 'data(1/instance-variable-value data-instance_4 key_0)))))"
"(let-values(((mpi-vector_6)(data_5 mpi-vector-id)))"
"(let-values(((mpi-vector-trees_7)(data_5 'mpi-vector-trees)))"
"(let-values(((phase-to-link-modules-vector_8)(data_5 'phase-to-link-modules-vector)))"
"(let-values(((phase-to-link-modules-trees_9)(data_5 'phase-to-link-modules-trees)))"
"(let-values(((syntax-literals_10)(data_5 'syntax-literals)))"
"(let-values(((syntax-literals-trees_11)(data_5 'syntax-literals-trees)))"
"(let-values(((namespace-scopes_12)(extract-namespace-scopes ns_0)))"
"(letrec-values(((construct-compiled-in-memory_13)"
"(lambda(ld_0"
" mpi-vector-tree_0"
" phase-to-link-modules-tree_0"
" syntax-literals-tree_0)"
"(begin"
" 'construct-compiled-in-memory"
"(let-values(((is-module?_25)"
"(let-values(((or-part_31)(1/linklet-bundle? ld_0)))"
"(if or-part_31"
" or-part_31"
"(let-values(((b_32)"
"(hash-ref"
"(1/linklet-directory->hash ld_0)"
" #f"
" #f)))"
"(if b_32"
"(hash-ref(1/linklet-bundle->hash b_32) 'decl #f)"
" #f))))))"
"(let-values(((mpi-pos-vec_26)(vector-ref mpi-vector-tree_0 0)))"
"(let-values(((syntax-literals-spec_27)"
"(vector-ref syntax-literals-tree_0 0)))"
"(let-values(((pres_28)"
"(if is-module?_25"
"(extract-submodules ld_0 'pre)"
"(compiled-top->compiled-tops ld_0))))"
"(let-values(((posts_29)"
"(if is-module?_25"
"(extract-submodules ld_0 'post)"
" null)))"
"(let-values(((map-construct-compiled-in-memory_30)"
"(lambda(l_0 vec-pos_0)"
"(begin"
" 'map-construct-compiled-in-memory"
"(reverse$1"
"(let-values(((lst_35) l_0)"
"((lst_36)"
"(vector-ref"
" mpi-vector-tree_0"
" vec-pos_0))"
"((lst_37)"
"(vector-ref"
" phase-to-link-modules-tree_0"
" vec-pos_0))"
"((lst_38)"
"(vector-ref"
" syntax-literals-tree_0"
" vec-pos_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_35)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_36)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_37)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(fold-var_0"
" lst_0"
" lst_1"
" lst_2"
" lst_3)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
"(if(pair?"
" lst_1)"
"(if(pair?"
" lst_2)"
"(pair?"
" lst_3)"
" #f)"
" #f)"
" #f)"
"(let-values(((sub-ld_45)"
"(unsafe-car"
" lst_0))"
"((rest_46)"
"(unsafe-cdr"
" lst_0))"
"((mpi-vector-tree_47)"
"(unsafe-car"
" lst_1))"
"((rest_48)"
"(unsafe-cdr"
" lst_1))"
"((phase-to-link-modules-tree_49)"
"(unsafe-car"
" lst_2))"
"((rest_50)"
"(unsafe-cdr"
" lst_2))"
"((syntax-literals-tree_51)"
"(unsafe-car"
" lst_3))"
"((rest_52)"
"(unsafe-cdr"
" lst_3)))"
"(let-values(((fold-var_53)"
"(let-values(((fold-var_54)"
" fold-var_0))"
"(let-values(((fold-var_55)"
"(let-values()"
"(cons"
"(let-values()"
"(construct-compiled-in-memory_13"
" sub-ld_45"
" mpi-vector-tree_47"
" phase-to-link-modules-tree_49"
" syntax-literals-tree_51))"
" fold-var_54))))"
"(values"
" fold-var_55)))))"
"(if(not #f)"
"(for-loop_39"
" fold-var_53"
" rest_46"
" rest_48"
" rest_50"
" rest_52)"
" fold-var_53)))"
" fold-var_0)))))"
" for-loop_39)"
" null"
" lst_35"
" lst_36"
" lst_37"
" lst_38))))))))"
"(compiled-in-memory1.1"
" ld_0"
" #f"
" #f"
" #f"
"(vector-ref"
" phase-to-link-modules-vector_8"
"(vector-ref phase-to-link-modules-tree_0 0))"
" #f"
" '#hasheqv()"
"(let-values(((len_56)(vector-length mpi-pos-vec_26)))"
"(begin"
"(if(exact-nonnegative-integer? len_56)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                   \"exact-nonnegative-integer?\""
" len_56)))"
"(let-values(((v_57)(make-vector len_56 0)))"
"(begin"
"(if(zero? len_56)"
"(void)"
"(let-values()"
"(let-values(((vec_58 len_59)"
"(let-values(((vec_60)"
" mpi-pos-vec_26))"
"(begin"
"(check-vector vec_60)"
"(values"
" vec_60"
"(unsafe-vector-length"
" vec_60))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_61)"
"(lambda(i_0 pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_0"
" len_59)"
"(let-values(((pos_64)"
"(unsafe-vector-ref"
" vec_58"
" pos_0)))"
"(let-values(((i_65)"
"(let-values(((i_66)"
" i_0))"
"(let-values(((i_67)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_57"
" i_66"
"(let-values()"
"(vector-ref"
" mpi-vector_6"
" pos_64)))"
"(unsafe-fx+"
" 1"
" i_66)))))"
"(values"
" i_67)))))"
"(if(if(not"
"((lambda x_0"
"(unsafe-fx="
" i_65"
" len_56))"
" pos_64))"
"(not #f)"
" #f)"
"(for-loop_61"
" i_65"
"(unsafe-fx+"
" 1"
" pos_0))"
" i_65)))"
" i_0)))))"
" for-loop_61)"
" 0"
" 0)))))"
" v_57))))"
"(let-values(((len_69)(cdr syntax-literals-spec_27)))"
"(begin"
"(if(exact-nonnegative-integer? len_69)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                   \"exact-nonnegative-integer?\""
" len_69)))"
"(let-values(((v_70)(make-vector len_69 0)))"
"(begin"
"(if(zero? len_69)"
"(void)"
"(let-values()"
"(let-values(((start_71) 0)"
"((end_72)"
"(cdr syntax-literals-spec_27))"
"((inc_73) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range start_71 end_72 inc_73)))"
"((letrec-values(((for-loop_74)"
"(lambda(i_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_72)"
"(let-values(((i_77)"
" pos_0))"
"(let-values(((i_78)"
"(let-values(((i_79)"
" i_0))"
"(let-values(((i_80)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_70"
" i_79"
"(let-values()"
"(if syntax-literals_10"
"(vector-ref"
" syntax-literals_10"
"(+"
"(car"
" syntax-literals-spec_27)"
" i_77))"
" #f)))"
"(unsafe-fx+"
" 1"
" i_79)))))"
"(values"
" i_80)))))"
"(if(if(not"
"((lambda x_0"
"(unsafe-fx="
" i_78"
" len_69))"
" i_77))"
"(not #f)"
" #f)"
"(for-loop_74"
" i_78"
"(+"
" pos_0"
" inc_73))"
" i_78)))"
" i_0)))))"
" for-loop_74)"
" 0"
" start_71)))))"
" v_70))))"
"(map-construct-compiled-in-memory_30 pres_28 1)"
"(map-construct-compiled-in-memory_30 posts_29 2)"
" namespace-scopes_12"
" #f)))))))))))"
"(map2"
" construct-compiled-in-memory_13"
" tops_0"
" mpi-vector-trees_7"
" phase-to-link-modules-trees_9"
" syntax-literals-trees_11))))))))))))))"
"(define-values"
"(extract-submodules)"
"(lambda(ld_0 names-key_0)"
"(begin"
"(if(1/linklet-bundle? ld_0)"
"(let-values() null)"
"(let-values()"
"(let-values(((h_84)(1/linklet-directory->hash ld_0)))"
"(let-values(((mod_85)(hash-ref h_84 #f #f)))"
"              (let-values ((() (begin (if mod_85 (void) (let-values () (error \"missing main module\"))) (values))))"
"(let-values(((mh_86)(1/linklet-bundle->hash mod_85)))"
"(let-values(((names_87)(hash-ref mh_86 names-key_0 null)))"
"(reverse$1"
"(let-values(((lst_88) names_87))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((name_92)(unsafe-car lst_0))"
"((rest_93)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_94)"
"(let-values(((fold-var_95) fold-var_0))"
"(let-values(((fold-var_96)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" h_84"
" name_92"
"(lambda()"
"(error"
"                                                                                          \"missing submodule declaration:\""
" name_92))))"
" fold-var_95))))"
"(values fold-var_96)))))"
"(if(not #f)(for-loop_89 fold-var_94 rest_93) fold-var_94)))"
" fold-var_0)))))"
" for-loop_89)"
" null"
" lst_88))))))))))))))"
"(define-values"
"(eval-single-top)"
"(lambda(c_0 ns_0)"
"(begin(let-values(((c15_4) c_0)((ns16_5) ns_0)((temp17_6) #t))(eval-one-top12.1 temp17_6 c15_4 ns16_5 #t)))))"
"(define-values"
"(compiled-multiple-top?)"
"(lambda(c_0)"
"(begin"
"(let-values(((ld_8)(if(compiled-in-memory? c_0)(compiled-in-memory-linklet-directory c_0) c_0)))"
"(if(1/linklet-directory? ld_8)(not(hash-ref(1/linklet-directory->hash ld_8) #f #f)) #f)))))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top5_9)"
"(lambda(c3_0 ns4_0 eval-compiled1_0 as-tail?2_0)"
"(begin"
" 'eval-top5"
"(let-values(((c_14) c3_0))"
"(let-values(((ns_15) ns4_0))"
"(let-values(((eval-compiled_16)"
"(if(eq? eval-compiled1_0 unsafe-undefined) eval-top eval-compiled1_0)))"
"(let-values(((as-tail?_17) as-tail?2_0))"
"(let-values()"
"(if(compiled-multiple-top? c_14)"
"(eval-multiple-tops c_14 ns_15 eval-compiled_16 as-tail?_17)"
"(let-values(((c18_18) c_14)((ns19_19) ns_15)((as-tail?20_20) as-tail?_17))"
"(eval-one-top12.1 #f c18_18 ns19_19 as-tail?20_20))))))))))))"
"(case-lambda"
"((c_0 ns_0)(begin(eval-top5_9 c_0 ns_0 unsafe-undefined #t)))"
"((c_0 ns_0 eval-compiled_0 as-tail?2_0)(eval-top5_9 c_0 ns_0 eval-compiled_0 as-tail?2_0))"
"((c_0 ns_0 eval-compiled1_0)(eval-top5_9 c_0 ns_0 eval-compiled1_0 #t)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_0 ns_0 eval-compiled_0 as-tail?_0)"
"(begin"
"(let-values(((eval-compiled-parts_34)"
"(lambda(l_0)"
"(begin"
" 'eval-compiled-parts"
"((letrec-values(((loop_36)"
"(lambda(l_1)"
"(begin"
" 'loop"
"(if(null? l_1)"
"(let-values() void)"
"(if(null?(cdr l_1))"
"(let-values()(eval-compiled_0(car l_1) ns_0 as-tail?_0))"
"(let-values()"
"(begin"
"(eval-compiled_0(car l_1) ns_0 #f)"
"(loop_36(cdr l_1))))))))))"
" loop_36)"
" l_0)))))"
"(if(compiled-in-memory? c_0)"
"(let-values()(eval-compiled-parts_34(compiled-in-memory-pre-compiled-in-memorys c_0)))"
"(let-values(((c1_38)(hash-ref(1/linklet-directory->hash c_0) 'data #f)))"
"(if c1_38"
"((lambda(data-ld_0)"
"(eval-compiled-parts_34"
"(create-compiled-in-memorys-using-shared-data"
"(compiled-top->compiled-tops c_0)"
"(hash-ref(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash data-ld_0) #f)) 0)"
" ns_0)))"
" c1_38)"
"(let-values()(eval-compiled-parts_34(compiled-top->compiled-tops c_0))))))))))"
"(define-values"
"(eval-one-top12.1)"
"(lambda(single-expression?7_0 c10_0 ns11_0 as-tail?9_0)"
"(begin"
" 'eval-one-top12"
"(let-values(((c_44) c10_0))"
"(let-values(((ns_45) ns11_0))"
"(let-values(((as-tail?_46) as-tail?9_0))"
"(let-values(((single-expression?_47) single-expression?7_0))"
"(let-values()"
"(let-values()"
"(let-values(((ld_48)"
"(if(compiled-in-memory? c_44)(compiled-in-memory-linklet-directory c_44) c_44)))"
"(let-values(((h_49)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_48) #f))))"
"(let-values(((link-instance_50)"
"(if(compiled-in-memory? c_44)"
"(link-instance-from-compiled-in-memory"
" c_44"
"(if(not single-expression?_47) ns_45 #f))"
"(1/instantiate-linklet"
"(hash-ref h_49 'link)"
"(list"
" deserialize-instance"
"(let-values(((ns21_59) ns_45)"
"((temp22_60)(namespace-phase ns_45))"
"((temp23_61)(namespace-mpi ns_45))"
"((temp24_62)(namespace-bulk-binding-registry ns_45))"
"((temp25_63)(current-code-inspector)))"
"(make-eager-instance-instance11.1"
" temp24_62"
" temp22_60"
" temp25_63"
" ns21_59"
" temp23_61)))))))"
"(let-values(((orig-phase_51)(hash-ref h_49 'original-phase)))"
"(let-values(((max-phase_52)(hash-ref h_49 'max-phase)))"
"(let-values(((phase-shift_53)(phase-(namespace-phase ns_45) orig-phase_51)))"
"(let-values(((extra-inspector_54)"
"(if(compiled-in-memory? c_44)"
"(compiled-in-memory-compile-time-inspector c_44)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_55)"
"(if(compiled-in-memory? c_44)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_44)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_56)"
"(if(compiled-in-memory? c_44)"
"(compiled-in-memory-phase-to-link-module-uses c_44)"
"(1/instance-variable-value link-instance_50 'phase-to-link-modules))))"
"(let-values(((thunk_57)"
"(let-values(((start_64) max-phase_52)"
"((end_65)(sub1 orig-phase_51))"
"((inc_66) -1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_64 end_65 inc_66)))"
"((letrec-values(((for-loop_67)"
"(lambda(prev-thunk_0 pos_0)"
"(begin"
" 'for-loop"
"(if(> pos_0 end_65)"
"(let-values(((phase_70) pos_0))"
"(let-values(((prev-thunk_71)"
"(let-values(((prev-thunk_72)"
" prev-thunk_0))"
"(let-values(((prev-thunk_73)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_72"
" #f)"
"(values))))"
"(let-values(((module-uses_74)"
"(hash-ref"
" phase-to-link-modules_56"
" phase_70"
" null)))"
"(let-values(((import-module-instances_75"
" import-instances_76)"
"(let-values(((mis_80"
" is_81)"
"(let-values(((lst_82)"
" module-uses_74))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_82)))"
"((letrec-values(((for-loop_83)"
"(lambda(mis_0"
" is_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((mu_87)"
"(unsafe-car"
" lst_0))"
"((rest_88)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((mis_89"
" is_90)"
"(let-values(((mis_91)"
" mis_0)"
"((is_92)"
" is_0))"
"(let-values(((mis_93"
" is_94)"
"(let-values()"
"(let-values(((mis26_95"
" is27_96)"
"(let-values()"
"(let-values(((ns28_98)"
" ns_45)"
"((mu29_99)"
" mu_87)"
"((temp30_100)"
"(phase-"
"(phase+"
" phase_70"
" phase-shift_53)"
"(module-use-phase"
" mu_87))))"
"(namespace-module-use->module+linklet-instances144.1"
" temp30_100"
" #f"
" #f"
" ns28_98"
" mu29_99)))))"
"(values"
"(cons"
" mis26_95"
" mis_91)"
"(cons"
" is27_96"
" is_92))))))"
"(values"
" mis_93"
" is_94)))))"
"(if(not"
" #f)"
"(for-loop_83"
" mis_89"
" is_90"
" rest_88)"
"(values"
" mis_89"
" is_90))))"
"(values"
" mis_0"
" is_0))))))"
" for-loop_83)"
" null"
" null"
" lst_82)))))"
"(values"
"(reverse$1"
" mis_80)"
"(reverse$1"
" is_81)))))"
"(let-values(((phase-ns_77)"
"(namespace->namespace-at-phase"
" ns_45"
"(phase+"
" phase_70"
" phase-shift_53))))"
"(let-values(((inst_78)"
"(if single-expression?_47"
" link-instance_50"
"(let-values(((phase-ns31_102)"
" phase-ns_77)"
"((phase-shift32_103)"
" phase-shift_53)"
"((temp33_104)"
"(namespace-mpi"
" ns_45))"
"((temp34_105)"
"(namespace-inspector"
" ns_45))"
"((temp35_106)"
"(namespace-bulk-binding-registry"
" ns_45))"
"((temp36_107)"
"(lambda(name_0"
" val_0)"
"(namespace-set-transformer!"
" ns_45"
"(phase+"
"(sub1"
" phase_70)"
" phase-shift_53)"
" name_0"
" val_0))))"
"(make-instance-instance13.1"
" temp35_106"
" temp34_105"
" phase-ns31_102"
" phase-shift32_103"
" temp33_104"
" temp36_107)))))"
"(let-values(((linklet_79)"
"(hash-ref"
" h_49"
" phase_70"
" #f)))"
"(if linklet_79"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((linklet37_112)"
" linklet_79)"
"((temp38_113)"
" 3)"
"((module-uses39_114)"
" module-uses_74)"
"((import-module-instances40_115)"
" import-module-instances_75)"
"((temp41_116)"
"(current-code-inspector))"
"((extra-inspector42_117)"
" extra-inspector_54)"
"((temp43_118)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_55"
" phase_70"
" #f)))"
"(check-require-access9.1"
" temp38_113"
" linklet37_112"
" module-uses39_114"
" import-module-instances40_115"
" temp41_116"
" extra-inspector42_117"
" temp43_118))"
"(values))))"
"(let-values(((instantiate_110)"
"(lambda(tail?_0)"
"(begin"
" 'instantiate"
"(1/instantiate-linklet"
" linklet_79"
"(list*"
" top-level-instance"
" link-instance_50"
" inst_78"
" import-instances_76)"
"(namespace->instance"
" ns_45"
"(phase-"
"(phase+"
" phase_70"
" phase-shift_53)"
"(namespace-0-phase"
" ns_45)))"
"(not"
" tail?_0))))))"
"(if(zero-phase?"
" phase_70)"
"(let-values()"
" instantiate_110)"
"(if single-expression?_47"
"(let-values()"
"(lambda(tail?_0)"
"(begin"
" 'prev-thunk"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_77)"
"(let-values()"
"(instantiate_110"
" tail?_0))))))"
"(let-values()"
"(let-values(((ns-1_121)"
"(namespace->namespace-at-phase"
" phase-ns_77"
"(sub1"
" phase_70))))"
"(lambda(tail?_0)"
"(begin"
" 'prev-thunk"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(let-values(((ns-144_123)"
" ns-1_121))"
"(make-expand-context10.1"
" #f"
" #f"
" #f"
" ns-144_123))"
" 1/current-namespace"
" phase-ns_77)"
"(let-values()"
"(instantiate_110"
" tail?_0))))))))))))"
"(let-values()"
" void)))))))))))"
"(values"
" prev-thunk_73)))))"
"(if(not #f)"
"(for-loop_67"
" prev-thunk_71"
"(+ pos_0 inc_66))"
" prev-thunk_71)))"
" prev-thunk_0)))))"
" for-loop_67)"
" void"
" start_64)))))"
"(thunk_57 as-tail?_46))))))))))))))))))))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_0 to-ns_0)"
"(begin"
"(let-values(((orig-syntax-literals_152)(compiled-in-memory-syntax-literals cim_0)))"
"(let-values(((syntax-literals_153)"
"(if(not to-ns_0)"
"(let-values() orig-syntax-literals_152)"
"(if(namespace-scopes=?"
"(compiled-in-memory-namespace-scopes cim_0)"
"(extract-namespace-scopes to-ns_0))"
"(let-values() orig-syntax-literals_152)"
"(let-values()"
"(let-values(((len_154)(vector-length orig-syntax-literals_152)))"
"(begin"
"(if(exact-nonnegative-integer? len_154)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_154)))"
"(let-values(((v_155)(make-vector len_154 0)))"
"(begin"
"(if(zero? len_154)"
"(void)"
"(let-values()"
"(let-values(((vec_156 len_157)"
"(let-values(((vec_158) orig-syntax-literals_152))"
"(begin"
"(check-vector vec_158)"
"(values vec_158(unsafe-vector-length vec_158))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_159)"
"(lambda(i_0 pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_157)"
"(let-values(((s_162)"
"(unsafe-vector-ref vec_156 pos_0)))"
"(let-values(((i_163)"
"(let-values(((i_164) i_0))"
"(let-values(((i_165)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_155"
" i_164"
"(let-values()"
"(swap-top-level-scopes"
" s_162"
"(compiled-in-memory-namespace-scopes"
" cim_0)"
" to-ns_0)))"
"(unsafe-fx+"
" 1"
" i_164)))))"
"(values i_165)))))"
"(if(if(not"
"((lambda x_0"
"(unsafe-fx= i_163 len_154))"
" s_162))"
"(not #f)"
" #f)"
"(for-loop_159 i_163(unsafe-fx+ 1 pos_0))"
" i_163)))"
" i_0)))))"
" for-loop_159)"
" 0"
" 0)))))"
" v_155)))))))))"
"(1/make-instance"
" 'link"
" #f"
" 'constant"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_0)"
" syntax-literals-id"
" syntax-literals_153))))))"
"(define-values(not-available)(gensym 'not-available))"
"(define-values(get-not-available)(lambda()(begin not-available)))"
"(define-values"
"(can-direct-eval?)"
"(lambda(p_0 ns_0 self-mpi_0)"
"(begin"
"(if(parsed-app? p_0)"
"(let-values()"
"(if(can-direct-eval?(parsed-app-rator p_0) ns_0 self-mpi_0)"
"(let-values(((lst_4)(parsed-app-rands p_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((r_8)(unsafe-car lst_0))((rest_9)(unsafe-cdr lst_0)))"
"(let-values(((result_10)"
"(let-values()"
"(let-values(((result_12)"
"(let-values()"
"(let-values()"
"(can-direct-eval? r_8 ns_0 self-mpi_0)))))"
"(values result_12)))))"
"(if(if(not((lambda x_0(not result_10)) r_8))(not #f) #f)"
"(for-loop_5 result_10 rest_9)"
" result_10)))"
" result_0)))))"
" for-loop_5)"
" #t"
" lst_4)))"
" #f))"
"(if(parsed-id? p_0)"
"(let-values()(not(eq?(get-id-value p_0 ns_0 self-mpi_0) not-available)))"
"(if(parsed-quote? p_0)"
"(let-values() #t)"
"(if(parsed-quote-syntax? p_0)(let-values() #t)(let-values() #f))))))))"
"(define-values"
"(direct-eval)"
"(lambda(p_0 ns_0 self-mpi_0)"
"(begin"
"(if(parsed-app? p_0)"
"(let-values()"
"(apply"
"(direct-eval(parsed-app-rator p_0) ns_0 self-mpi_0)"
"(reverse$1"
"(let-values(((lst_17)(parsed-app-rands p_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((r_21)(unsafe-car lst_0))((rest_22)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_23)"
"(let-values(((fold-var_24) fold-var_0))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(direct-eval r_21 ns_0 self-mpi_0))"
" fold-var_24))))"
"(values fold-var_25)))))"
"(if(not #f)(for-loop_18 fold-var_23 rest_22) fold-var_23)))"
" fold-var_0)))))"
" for-loop_18)"
" null"
" lst_17))))))"
"(if(parsed-id? p_0)"
"(let-values()(get-id-value p_0 ns_0 self-mpi_0))"
"(if(parsed-quote? p_0)"
"(let-values()(parsed-quote-datum p_0))"
"(if(parsed-quote-syntax? p_0)(let-values()(parsed-quote-syntax-datum p_0))(let-values() #f))))))))"
"(define-values"
"(get-id-value)"
"(lambda(p_0 ns_0 self-mpi_0)"
"(begin"
"(let-values(((b_29)(parsed-id-binding p_0)))"
"(if(parsed-primitive-id? p_0)"
"(let-values()(hash-ref(1/primitive-table '#%kernel)(module-binding-sym b_29) get-not-available))"
"(if(let-values(((or-part_30)(parsed-top-id? p_0)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(not b_29)))"
"(if or-part_31 or-part_31(eq? self-mpi_0(module-binding-module b_29))))))"
"(let-values()"
"(namespace-get-variable"
" ns_0"
"(if b_29(module-binding-phase b_29)(namespace-phase ns_0))"
"(if b_29(module-binding-sym b_29)(syntax-e$1(parsed-s p_0)))"
" get-not-available))"
"(let-values()"
"(let-values(((mi_32)"
"(let-values(((ns1_33) ns_0)"
"((temp2_34)(1/module-path-index-resolve(module-binding-module b_29)))"
"((temp3_35)(phase-(namespace-phase ns_0)(module-binding-phase b_29))))"
"(namespace->module-instance70.1 #f #f unsafe-undefined ns1_33 temp2_34 temp3_35))))"
"(if(not mi_32)"
"(let-values() not-available)"
"(if(check-single-require-access"
" mi_32"
"(module-binding-phase b_29)"
"(module-binding-sym b_29)"
"(module-binding-extra-inspector b_29))"
"(let-values()"
"(namespace-get-variable"
"(module-instance-namespace mi_32)"
"(module-binding-phase b_29)"
"(module-binding-sym b_29)"
" get-not-available))"
"(let-values() not-available)))))))))))"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_0)"
"(begin"
"(let-values(((temp1_2)(syntax-scope-set runtime-stx 0))"
"((sym2_3) sym_0)"
"((temp3_4)"
"(let-values(((runtime-mpi4_5) runtime-mpi)((temp5_6) 0)((sym6_7) sym_0))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" runtime-mpi4_5"
" temp5_6"
" sym6_7))))"
"(add-binding-in-scopes!20.1 #f temp1_2 sym2_3 temp3_4)))))"
"(void"
"(begin"
"(add-runtime-primitive! 'values)"
"(add-runtime-primitive! 'cons)"
"(add-runtime-primitive! 'list)"
"(add-runtime-primitive! 'make-struct-type)"
"(add-runtime-primitive! 'make-struct-type-property)"
"(add-runtime-primitive! 'gensym)"
"(add-runtime-primitive! 'string->uninterned-symbol)))"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(define-values(box-cons!)(lambda(b_0 v_0)(begin(set-box! b_0(cons v_0(unbox b_0))))))"
"(define-values(box-clear!)(lambda(b_0)(begin(begin0(reverse$1(unbox b_0))(set-box! b_0 null)))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_9 make-_10 ?_11 -ref_12 -set!_13)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lift-context"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'lift-context)))))"
"(values"
" struct:_9"
" make-_10"
" ?_11"
"(make-struct-field-accessor -ref_12 0 'convert)"
"(make-struct-field-accessor -ref_12 1 'lifts)"
"(make-struct-field-accessor -ref_12 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-keys lifted-bind-rhs)"
"(let-values(((struct:_39 make-_40 ?_41 -ref_42 -set!_43)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lifted-bind"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'lifted-bind)))))"
"(values"
" struct:_39"
" make-_40"
" ?_41"
"(make-struct-field-accessor -ref_42 0 'ids)"
"(make-struct-field-accessor -ref_42 1 'keys)"
"(make-struct-field-accessor -ref_42 2 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_0 convert5_0)"
"(begin"
" 'make-lift-context6"
"(let-values(((convert_71) convert5_0))"
"(let-values(((module*-ok?_72) module*-ok?3_0))"
"(let-values()(lift-context1.1 convert_71(box null) module*-ok?_72)))))))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_0 ids_0 rhs_0 phase_0)"
"(begin"
"(let-values(((lifted-ids_91 lifted_92)((lift-context-convert lifts_0) ids_0 rhs_0 phase_0)))"
"(begin(box-cons!(lift-context-lifts lifts_0) lifted_92) lifted-ids_91)))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_0)(begin(box-clear!(lift-context-lifts lifts_0)))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_0 counter_0)"
"(begin"
"(lambda(ids_0 rhs_0 phase_0)"
"(let-values(((keys_99)"
"(reverse$1"
"(let-values(((lst_100) ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_100)))"
"((letrec-values(((for-loop_101)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_104)(unsafe-car lst_0))"
"((rest_105)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_106)"
"(let-values(((fold-var_107) fold-var_0))"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((key_109)"
"(let-values(((id32_110)"
" id_104)"
"((phase33_111)"
" phase_0)"
"((counter34_112)"
" counter_0))"
"(add-local-binding!37.1"
" #f"
" #f"
" id32_110"
" phase33_111"
" counter34_112))))"
"(begin"
"(set-box!"
" lift-env_0"
"(hash-set"
"(unbox lift-env_0)"
" key_109"
" variable))"
" key_109)))"
" fold-var_107))))"
"(values fold-var_108)))))"
"(if(not #f)(for-loop_101 fold-var_106 rest_105) fold-var_106)))"
" fold-var_0)))))"
" for-loop_101)"
" null"
" lst_100))))))"
"(values ids_0(lifted-bind2.1 ids_0 keys_99 rhs_0)))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_0)"
"(begin"
"(lambda(ids_0 rhs_0 phase_0)"
"(let-values(((post-scope_117)"
"(post-expansion-scope"
"(root-expand-context-post-expansion"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_0))))))"
"(let-values(((tl-ids_118)"
"(reverse$1"
"(let-values(((lst_120) ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_120)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_124)(unsafe-car lst_0))"
"((rest_125)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_126)"
"(let-values(((fold-var_127) fold-var_0))"
"(let-values(((fold-var_128)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_124"
" post-scope_117))"
" fold-var_127))))"
"(values fold-var_128)))))"
"(if(not #f)"
"(for-loop_121 fold-var_126 rest_125)"
" fold-var_126)))"
" fold-var_0)))))"
" for-loop_121)"
" null"
" lst_120))))))"
"(let-values(((syms_119)(select-defined-syms-and-bind!/ctx tl-ids_118 ctx_0)))"
"(values tl-ids_118(lifted-bind2.1 tl-ids_118 syms_119 rhs_0)))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_0 body_0 phase_0)"
"(begin"
"(datum->syntax$1"
" #f"
"(let-values(((lst_132)(reverse$1 lifts_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_132)))"
"((letrec-values(((for-loop_133)"
"(lambda(body_1 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((lift_136)(unsafe-car lst_0))((rest_137)(unsafe-cdr lst_0)))"
"(let-values(((body_138)"
"(let-values(((body_139) body_1))"
"(let-values(((body_140)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_136)"
"(void)"
"(let-values()"
"                                                                           (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_0)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_136)"
"(lifted-bind-rhs lift_136)))"
" body_139)))))"
"(values body_140)))))"
"(if(not #f)(for-loop_133 body_138 rest_137) body_138)))"
" body_1)))))"
" for-loop_133)"
" body_0"
" lst_132)))))))"
"(define-values"
"(wrap-lifts-as-begin16.1)"
"(lambda(adjust-body10_0 adjust-form9_0 lifts13_0 body14_0 phase15_0)"
"(begin"
" 'wrap-lifts-as-begin16"
"(let-values(((lifts_146) lifts13_0))"
"(let-values(((body_147) body14_0))"
"(let-values(((phase_148) phase15_0))"
"(let-values(((adjust-form_149)(if(eq? adjust-form9_0 unsafe-undefined) values adjust-form9_0)))"
"(let-values(((adjust-body_150)(if(eq? adjust-body10_0 unsafe-undefined) values adjust-body10_0)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_148) 'begin)"
"(append"
"(reverse$1"
"(let-values(((lst_151) lifts_146))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_151)))"
"((letrec-values(((for-loop_152)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((lift_155)(unsafe-car lst_0))"
"((rest_156)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_157)"
"(let-values(((fold-var_158) fold-var_0))"
"(let-values(((fold-var_159)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_149"
"(if(lifted-bind? lift_155)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_148)"
" 'define-values)"
"(lifted-bind-ids lift_155)"
"(lifted-bind-rhs"
" lift_155))))"
"(let-values() lift_155))))"
" fold-var_158))))"
"(values fold-var_159)))))"
"(if(not #f)(for-loop_152 fold-var_157 rest_156) fold-var_157)))"
" fold-var_0)))))"
" for-loop_152)"
" null"
" lst_151))))"
"(list(adjust-body_150 body_147))))))))))))))"
"(define-values"
"(get-lifts-as-lists)"
"(lambda(lifts_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_187) lifts_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_187)))"
"((letrec-values(((for-loop_188)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((lift_191)(unsafe-car lst_0))((rest_192)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_193)"
"(let-values(((fold-var_194) fold-var_0))"
"(let-values(((fold-var_195)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(lifted-bind-ids lift_191)"
"(lifted-bind-keys lift_191)"
"(lifted-bind-rhs lift_191)))"
" fold-var_194))))"
"(values fold-var_195)))))"
"(if(not #f)(for-loop_188 fold-var_193 rest_192) fold-var_193)))"
" fold-var_0)))))"
" for-loop_188)"
" null"
" lst_187)))))))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context19.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_196 make-_197 ?_198 -ref_199 -set!_200)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))))"
"(values"
" struct:_196"
" make-_197"
" ?_198"
"(make-struct-field-accessor -ref_199 0 'wrt-phase)"
"(make-struct-field-accessor -ref_199 1 'lifts)"
"(make-struct-field-accessor -ref_199 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_0 module*-ok?_0)(begin(module-lift-context19.1 phase_0(box null) module*-ok?_0))))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_0)(begin(box-clear!(module-lift-context-lifts module-lifts_0)))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_0 s_0 phase_0)"
"(begin"
"(begin"
"(if(let-values(((or-part_232)"
"(if(module-lift-context? module-lifts_0)"
"(module-lift-context-module*-ok? module-lifts_0)"
" #f)))"
"(if or-part_232"
" or-part_232"
"(if(lift-context? module-lifts_0)(lift-context-module*-ok? module-lifts_0) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_233)(core-form-sym s_0 phase_0)))"
"(if(equal? tmp_233 'module)"
"(let-values()(void))"
"(if(equal? tmp_233 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                     \"cannot lift `module*' to a top-level context\""
"                     \"syntax\""
" s_0))"
"(let-values()"
"                    (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_0)))))))"
"(if(module-lift-context? module-lifts_0)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_0) s_0))"
"(if(lift-context? module-lifts_0)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_0) s_0))"
"            (let-values () (error \"internal error: unrecognized lift-context type for module lift\"))))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context20.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_234 make-_235 ?_236 -ref_237 -set!_238)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))))"
"(values"
" struct:_234"
" make-_235"
" ?_236"
"(make-struct-field-accessor -ref_237 0 'do-require)"
"(make-struct-field-accessor -ref_237 1 'wrt-phase)"
"(make-struct-field-accessor -ref_237 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_0 do-require_0)(begin(require-lift-context20.1 do-require_0 wrt-phase_0(box null)))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_0)(begin(box-clear!(require-lift-context-requires require-lifts_0)))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_0 s_0 phase_0)"
"(begin"
"(begin"
"((require-lift-context-do-require require-lifts_0) s_0 phase_0)"
"(box-cons!(require-lift-context-requires require-lifts_0) s_0)))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context21.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_270 make-_271 ?_272 -ref_273 -set!_274)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))))"
"(values"
" struct:_270"
" make-_271"
" ?_272"
"(make-struct-field-accessor -ref_273 0 'wrt-phase)"
"(make-struct-field-accessor -ref_273 1 'provides)"
"(make-struct-field-accessor -ref_273 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_273 3 'ends))))"
"(define-values"
"(make-to-module-lift-context27.1)"
"(lambda(end-as-expressions?23_0 shared-module-ends22_0 phase26_0)"
"(begin"
" 'make-to-module-lift-context27"
"(let-values(((phase_312) phase26_0))"
"(let-values(((ends_313) shared-module-ends22_0))"
"(let-values(((end-as-expressions?_314) end-as-expressions?23_0))"
"(let-values()(to-module-lift-context21.1 phase_312(box null) end-as-expressions?_314 ends_313))))))))"
"(define-values(make-shared-module-ends)(lambda()(begin(box null))))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_0)(begin(box-clear!(to-module-lift-context-ends to-module-lifts_0)))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_0)(begin(box-clear!(to-module-lift-context-provides to-module-lifts_0)))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_0 s_0 phase_0)(begin(box-cons!(to-module-lift-context-provides to-module-lifts_0) s_0))))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_0 s_0 phase_0)(begin(box-cons!(to-module-lift-context-ends to-module-lifts_0) s_0))))"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-binding-layer)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded-syntax"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'binding-layer))))"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))))"
"(values struct:_1 make-_2 ?_3)))"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_0 info_0)"
"(begin"
"(if(if(list? v_0)"
"(let-values(((lst_3) v_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_3)))"
"((letrec-values(((for-loop_4)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_7)(unsafe-car lst_0))((rest_8)(unsafe-cdr lst_0)))"
"(let-values(((result_9)"
"(let-values()"
"(let-values(((result_11)"
"(let-values()"
"(let-values()"
"(memq"
" s_7"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_11)))))"
"(if(if(not((lambda x_0(not result_9)) s_7))(not #f) #f)"
"(for-loop_4 result_9 rest_8)"
" result_9)))"
" result_0)))))"
" for-loop_4)"
" #t"
" lst_3)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_0)))"
" v_0))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_0 ctx_0)"
"(begin"
"(if(expansion-contexts? t_0)"
"(not(memq(context->symbol(expand-context-context ctx_0))(expansion-contexts-ref t_0)))"
" #f))))"
"(define-values(context->symbol)(lambda(context_0)(begin(if(symbol? context_0) context_0 'definition-context))))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_0 t_0 ctx_0)"
"(begin"
"(let-values(((wrap_19)"
"(lambda(sym_0)"
"(begin"
" 'wrap"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_0)(expand-context-phase ctx_0))"
" s_0))))))"
"(let-values(((fail_20)"
"(lambda()"
"(begin"
" 'fail"
"(raise-syntax-error$1"
" #f"
"(format"
"                            \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_0)))"
" s_0)))))"
"(let-values(((tmp_22)(context->symbol(expand-context-context ctx_0))))"
"(if(equal? tmp_22 'module-begin)"
"(let-values()(wrap_19 'begin))"
"(if(if(equal? tmp_22 'module) #t(if(equal? tmp_22 'top-level) #t(equal? tmp_22 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_0))(wrap_19 '#%expression)(fail_20)))"
"(let-values()(fail_20))))))))))"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reference-record"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '()"
" #f"
" 'reference-record)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'already-bound)"
"(make-struct-field-accessor -ref_4 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_4 2 'all-referenced?)"
"(make-struct-field-mutator -set!_5 0 'already-bound)"
"(make-struct-field-mutator -set!_5 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_5 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(begin(reference-record1.1(seteq)(seteq) #f))))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_0 key_0)"
"(begin"
"(if(set-member?(reference-record-already-bound rr_0) key_0)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_0"
"(set-add(reference-record-reference-before-bound rr_0) key_0)))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_0)"
"(begin"
"(begin"
"(let-values(((lst_34) rrs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_34)))"
"((letrec-values(((for-loop_35)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((rr_37)(unsafe-car lst_0))((rest_38)(unsafe-cdr lst_0)))"
"(let-values(((post-guard-var_39)(lambda()(begin 'post-guard-var #t))))"
"(let-values()"
"(if(reference-record-all-referenced? rr_37)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?! rr_37 #t))"
"(values)))))"
"(if(post-guard-var_39)(for-loop_35 rest_38)(values))))))))"
"(values))))))"
" for-loop_35)"
" lst_34)))"
"(void)))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_0 keys_0)"
"(begin"
"(begin"
"(set-reference-record-already-bound!"
" rr_0"
"(let-values(((lst_42) keys_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(ab_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((key_46)(unsafe-car lst_0))((rest_47)(unsafe-cdr lst_0)))"
"(let-values(((ab_48)"
"(let-values(((ab_49) ab_0))"
"(let-values(((ab_50)(let-values()(set-add ab_49 key_46))))"
"(values ab_50)))))"
"(if(not #f)(for-loop_43 ab_48 rest_47) ab_48)))"
" ab_0)))))"
" for-loop_43)"
"(reference-record-already-bound rr_0)"
" lst_42))))"
"(set-reference-record-reference-before-bound!"
" rr_0"
"(let-values(((lst_51) keys_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_51)))"
"((letrec-values(((for-loop_52)"
"(lambda(rbb_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((key_55)(unsafe-car lst_0))((rest_56)(unsafe-cdr lst_0)))"
"(let-values(((rbb_57)"
"(let-values(((rbb_58) rbb_0))"
"(let-values(((rbb_59)"
"(let-values()(set-remove rbb_58 key_55))))"
"(values rbb_59)))))"
"(if(not #f)(for-loop_52 rbb_57 rest_56) rbb_57)))"
" rbb_0)))))"
" for-loop_52)"
"(reference-record-reference-before-bound rr_0)"
" lst_51))))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_0)"
"(begin"
"(let-values(((or-part_61)(reference-record-all-referenced? rr_0)))"
"(if or-part_61 or-part_61(positive?(set-count(reference-record-reference-before-bound rr_0))))))))"
"(define-values"
"(reference-record-clear!)"
"(lambda(rr_0)"
"(begin"
"(begin(set-reference-record-already-bound! rr_0 #f)(set-reference-record-reference-before-bound! rr_0 #f)))))"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_0 key_0 . args_0)"
"(begin"
"(begin"
"(let-values(((c1_104)(hash-ref key->arity key_0 #f)))"
"(if c1_104"
"((lambda(arity_0)"
"(if(let-values(((or-part_106)(eq? arity_0 'any)))"
"(if or-part_106 or-part_106(eqv?(length args_0) arity_0)))"
"(void)"
"                 (let-values () (error 'call-expand-observe \"wrong arity for ~s: ~e\" key_0 args_0))))"
" c1_104)"
"            (let-values () (error 'call-expand-observe \"bad key: ~s\" key_0))))"
"(obs_0 key_0(if(null? args_0)(let-values() #f)(let-values()(apply list* args_0))))))))"
"(define-values"
"(key->arity)"
" '#hash((block->letrec . 1)"
"(block->list . 1)"
"(block-renames . 2)"
"(enter-bind . 0)"
"(enter-block . 1)"
"(enter-check . 1)"
"(enter-list . 1)"
"(enter-local . 1)"
"(enter-macro . 1)"
"(enter-prim . 1)"
"(exit-bind . 0)"
"(exit-check . 1)"
"(exit-list . 1)"
"(exit-local . 1)"
"(exit-local-bind . 0)"
"(exit-macro . 1)"
"(exit-prim . 1)"
"(lambda-renames . 2)"
"(let-renames . any)"
"(letlift-loop . 1)"
"(letrec-syntaxes-renames . any)"
"(lift-expr . 2)"
"(lift-loop . 1)"
"(lift-provide . 1)"
"(lift-require . 3)"
"(lift-statement . 1)"
"(local-bind . 1)"
"(local-post . 1)"
"(local-pre . 1)"
"(local-value . 1)"
"(local-value-result . 1)"
"(macro-post-x . 2)"
"(macro-pre-x . 1)"
"(module-body . 1)"
"(module-lift-end-loop . 1)"
"(module-lift-loop . 1)"
"(next . 0)"
"(next-group . 0)"
"(opaque-expr . 1)"
"(phase-up . 0)"
"(prepare-env . 0)"
"(prim-#%app . 0)"
"(prim-#%datum . 0)"
"(prim-#%expression . 0)"
"(prim-#%stratified . 0)"
"(prim-#%top . 0)"
"(prim-#%variable-reference . 0)"
"(prim-begin . 0)"
"(prim-begin-for-syntax . 0)"
"(prim-begin0 . 0)"
"(prim-case-lambda . 0)"
"(prim-define-syntaxes . 0)"
"(prim-define-values . 0)"
"(prim-if . 0)"
"(prim-lambda . 0)"
"(prim-let-values . 0)"
"(prim-letrec-syntaxes+values . 0)"
"(prim-letrec-values . 0)"
"(prim-module . 0)"
"(prim-module-begin . 0)"
"(prim-provide . 0)"
"(prim-quote . 0)"
"(prim-quote-syntax . 0)"
"(prim-require . 0)"
"(prim-set! . 0)"
"(prim-stop . 0)"
"(prim-submodule . 0)"
"(prim-submodule* . 0)"
"(prim-with-continuation-mark . 0)"
"(rename-list . 1)"
"(rename-one . 1)"
"(resolve . 1)"
"(return . 1)"
"(splice . 1)"
"(start . 0)"
"(start-top . 0)"
"(tag . 1)"
"(track-origin . 2)"
"(variable . 2)"
"(visit . 1)))"
"(define-values"
"(rebuild5.1)"
"(lambda(track?1_0 orig-s3_0 new4_0)"
"(begin"
" 'rebuild5"
"(let-values(((orig-s_4) orig-s3_0))"
"(let-values(((new_5) new4_0))"
"(let-values(((track?_6) track?1_0))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 orig-s_4) new_5 orig-s_4(if track?_6 orig-s_4 #f))"
" orig-s_4))))))))"
"(define-values"
"(struct:expanded+parsed expanded+parsed1.1 expanded+parsed? expanded+parsed-s expanded+parsed-parsed)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded+parsed"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'expanded+parsed)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 's)"
"(make-struct-field-accessor -ref_4 1 'parsed))))"
"(define-values"
"(struct:semi-parsed-define-values"
" semi-parsed-define-values2.1"
" semi-parsed-define-values?"
" semi-parsed-define-values-s"
" semi-parsed-define-values-syms"
" semi-parsed-define-values-ids"
" semi-parsed-define-values-rhs)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-define-values"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'semi-parsed-define-values)))))"
"(values"
" struct:_26"
" make-_27"
" ?_28"
"(make-struct-field-accessor -ref_29 0 's)"
"(make-struct-field-accessor -ref_29 1 'syms)"
"(make-struct-field-accessor -ref_29 2 'ids)"
"(make-struct-field-accessor -ref_29 3 'rhs))))"
"(define-values"
"(struct:semi-parsed-begin-for-syntax"
" semi-parsed-begin-for-syntax3.1"
" semi-parsed-begin-for-syntax?"
" semi-parsed-begin-for-syntax-s"
" semi-parsed-begin-for-syntax-body)"
"(let-values(((struct:_61 make-_62 ?_63 -ref_64 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-begin-for-syntax"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'semi-parsed-begin-for-syntax)))))"
"(values"
" struct:_61"
" make-_62"
" ?_63"
"(make-struct-field-accessor -ref_64 0 's)"
"(make-struct-field-accessor -ref_64 1 'body))))"
"(define-values(extract-syntax)(lambda(s_0)(begin(if(expanded+parsed? s_0)(expanded+parsed-s s_0) s_0))))"
"(define-values"
"(parsed-only)"
"(lambda(l_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_88) l_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((i_92)(unsafe-car lst_0))((rest_93)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_94)"
"(let-values(((fold-var_95) fold-var_0))"
"(if(let-values(((or-part_96)(parsed? i_92)))"
"(if or-part_96"
" or-part_96"
"(let-values(((or-part_97)(expanded+parsed? i_92)))"
"(if or-part_97"
" or-part_97"
"(semi-parsed-begin-for-syntax? i_92)))))"
"(let-values(((fold-var_98) fold-var_95))"
"(let-values(((fold-var_99)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_92)"
"(let-values()"
"(expanded+parsed-parsed i_92))"
"(if(semi-parsed-begin-for-syntax? i_92)"
"(let-values()"
"(parsed-begin-for-syntax21.1"
"(semi-parsed-begin-for-syntax-s i_92)"
"(parsed-only"
"(semi-parsed-begin-for-syntax-body"
" i_92))))"
"(let-values() i_92))))"
" fold-var_98))))"
"(values fold-var_99)))"
" fold-var_95))))"
"(if(not #f)(for-loop_89 fold-var_94 rest_93) fold-var_94)))"
" fold-var_0)))))"
" for-loop_89)"
" null"
" lst_88)))))))"
"(define-values"
"(syntax-only)"
"(lambda(l_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_101) l_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((i_105)(unsafe-car lst_0))((rest_106)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_107)"
"(let-values(((fold-var_108) fold-var_0))"
"(if(let-values(((or-part_109)(syntax?$1 i_105)))"
"(if or-part_109"
" or-part_109"
"(let-values(((or-part_110)(expanded+parsed? i_105)))"
"(if or-part_110"
" or-part_110"
"(semi-parsed-begin-for-syntax? i_105)))))"
"(let-values(((fold-var_111) fold-var_108))"
"(let-values(((fold-var_112)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_105)"
"(let-values()(expanded+parsed-s i_105))"
"(if(semi-parsed-begin-for-syntax? i_105)"
"(let-values()"
"(let-values(((s_113)"
"(semi-parsed-begin-for-syntax-s"
" i_105)))"
"(let-values(((nested-bodys_114)"
"(semi-parsed-begin-for-syntax-body"
" i_105)))"
"(let-values(((disarmed-s_115)"
"(syntax-disarm$1"
" s_113)))"
"(let-values(((ok?_116"
" begin-for-syntax7_117"
" _8_118)"
"(let-values(((s_132)"
" disarmed-s_115))"
"(let-values(((orig-s_133)"
" s_132))"
"(let-values(((begin-for-syntax7_134"
" _8_135)"
"(let-values(((s_136)"
"(if(syntax?$1"
" s_132)"
"(syntax-e$1"
" s_132)"
" s_132)))"
"(if(pair?"
" s_136)"
"(let-values(((begin-for-syntax9_137)"
"(let-values(((s_139)"
"(car"
" s_136)))"
" s_139))"
"((_10_138)"
"(let-values(((s_140)"
"(cdr"
" s_136)))"
"(let-values(((s_141)"
"(if(syntax?$1"
" s_140)"
"(syntax-e$1"
" s_140)"
" s_140)))"
"(let-values(((flat-s_142)"
"(to-syntax-list.1"
" s_141)))"
"(if(not"
" flat-s_142)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_133))"
"(let-values()"
" flat-s_142)))))))"
"(values"
" begin-for-syntax9_137"
" _10_138))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_133)))))"
"(values"
" #t"
" begin-for-syntax7_134"
" _8_135))))))"
"(let-values(((s11_143) s_113)"
"((temp12_144)"
"(list*"
" begin-for-syntax7_117"
"(syntax-only"
" nested-bodys_114))))"
"(rebuild5.1"
" #t"
" s11_143"
" temp12_144)))))))"
"(let-values() i_105))))"
" fold-var_111))))"
"(values fold-var_112)))"
" fold-var_108))))"
"(if(not #f)(for-loop_102 fold-var_107 rest_106) fold-var_107)))"
" fold-var_0)))))"
" for-loop_102)"
" null"
" lst_101)))))))"
"(define-values"
"(expand9.1)"
"(lambda(alternate-id1_0 fail-non-transformer3_0 skip-log?2_0 s7_0 ctx8_0)"
"(begin"
" 'expand9"
"(let-values(((s_37) s7_0))"
"(let-values(((ctx_38) ctx8_0))"
"(let-values(((alternate-id_39) alternate-id1_0))"
"(let-values(((skip-log?_40) skip-log?2_0))"
"(let-values(((fail-non-transformer_41) fail-non-transformer3_0))"
"(let-values()"
"(begin"
"(let-values(((obs_42)(expand-context-observer ctx_38)))"
"(if obs_42"
"(let-values()"
"(if(not skip-log?_40)"
"(let-values()"
"(call-expand-observe"
" obs_42"
"(if(expand-context-only-immediate? ctx_38) 'enter-check 'visit)"
" s_37))"
"(void)))"
"(void)))"
"(if(syntax-identifier? s_37)"
"(let-values()(expand-identifier s_37 ctx_38 alternate-id_39))"
"(if(if(pair?(syntax-content s_37))(syntax-identifier?(car(syntax-content s_37))) #f)"
"(let-values()"
"(let-values(((s122_44) s_37)"
"((ctx123_45) ctx_38)"
"((alternate-id124_46) alternate-id_39)"
"((fail-non-transformer125_47) fail-non-transformer_41))"
"(expand-id-application-form17.1"
" fail-non-transformer125_47"
" s122_44"
" ctx123_45"
" alternate-id124_46)))"
"(if(let-values(((or-part_48)(pair?(syntax-content s_37))))"
"(if or-part_48 or-part_48(null?(syntax-content s_37))))"
"(let-values()(expand-implicit '#%app s_37 ctx_38 #f))"
"(if(already-expanded?(syntax-content s_37))"
"(let-values()(expand-already-expanded s_37 ctx_38))"
"(let-values()(expand-implicit '#%datum s_37 ctx_38 #f))))))))))))))))"
"(define-values"
"(expand-identifier)"
"(lambda(s_0 ctx_0 alternate-id_0)"
"(begin"
"(let-values(((id_81)(let-values(((or-part_82) alternate-id_0))(if or-part_82 or-part_82 s_0))))"
"(if(if(not(free-id-set-empty?(expand-context-stops ctx_0)))"
"(free-id-set-member?(expand-context-stops ctx_0)(expand-context-phase ctx_0) id_81)"
" #f)"
"(let-values()"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_0)))"
"(if obs_83"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_0))"
"(let-values()"
"(begin"
"(call-expand-observe obs_83 'resolve id_81)"
"(call-expand-observe obs_83 'enter-prim s_0)"
"(call-expand-observe obs_83 'prim-stop)"
"(call-expand-observe obs_83 'exit-prim s_0)"
"(call-expand-observe obs_83 'return s_0)))"
"(void)))"
"(void)))"
" s_0))"
"(let-values()"
"(let-values(((binding_84)"
"(let-values(((id126_86) id_81)"
"((temp127_87)(expand-context-phase ctx_0))"
"((temp128_88) 'ambiguous)"
"((temp129_89) #t))"
"(resolve+shift28.1 temp128_88 #f null temp129_89 #f id126_86 temp127_87))))"
"(begin"
"(let-values(((obs_90)(expand-context-observer ctx_0)))"
"(if obs_90"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_0))"
"(let-values()(call-expand-observe obs_90 'resolve id_81))"
"(void)))"
"(void)))"
"(if(eq? binding_84 'ambiguous)"
"(let-values()(raise-ambiguous-error id_81 ctx_0))"
"(if(not binding_84)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_0 alternate-id_0) ctx_0 s_0))"
"(let-values()"
"(let-values(((t_91 primitive?_92 insp-of-t_93 protected?_94)"
"(let-values(((binding138_96) binding_84)"
"((ctx139_97) ctx_0)"
"((id140_98) id_81)"
"((temp141_99)(if alternate-id_0 s_0 #f))"
"((temp142_100)(expand-context-in-local-expand? ctx_0)))"
"(lookup62.1 temp141_99 temp142_100 binding138_96 ctx139_97 id140_98))))"
"(let-values(((t130_101) t_91)"
"((insp-of-t131_102) insp-of-t_93)"
"((s132_103) s_0)"
"((id133_104) id_81)"
"((ctx134_105) ctx_0)"
"((binding135_106) binding_84)"
"((primitive?136_107) primitive?_92)"
"((protected?137_108) protected?_94))"
"(dispatch30.1"
" #f"
" t130_101"
" insp-of-t131_102"
" s132_103"
" id133_104"
" ctx134_105"
" binding135_106"
" primitive?136_107"
" protected?137_108))))))))))))))"
"(define-values"
"(expand-id-application-form17.1)"
"(lambda(fail-non-transformer12_0 s14_0 ctx15_0 alternate-id16_0)"
"(begin"
" 'expand-id-application-form17"
"(let-values(((s_121) s14_0))"
"(let-values(((ctx_122) ctx15_0))"
"(let-values(((alternate-id_123) alternate-id16_0))"
"(let-values(((fail-non-transformer_124) fail-non-transformer12_0))"
"(let-values()"
"(let-values(((id_125)"
"(let-values(((or-part_126) alternate-id_123))"
"(if or-part_126 or-part_126(car(syntax-e/no-taint s_121))))))"
"(if(if(not(free-id-set-empty?(expand-context-stops ctx_122)))"
"(free-id-set-member?(expand-context-stops ctx_122)(expand-context-phase ctx_122) id_125)"
" #f)"
"(let-values()"
"(begin"
"(let-values(((obs_127)(expand-context-observer ctx_122)))"
"(if obs_127"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_122))"
"(let-values()"
"(begin"
"(call-expand-observe obs_127 'resolve id_125)"
"(call-expand-observe obs_127 'enter-prim s_121)"
"(call-expand-observe obs_127 'prim-stop)"
"(call-expand-observe obs_127 'exit-prim s_121)"
"(call-expand-observe obs_127 'return s_121)))"
"(void)))"
"(void)))"
" s_121))"
"(let-values()"
"(let-values(((binding_128)"
"(let-values(((id143_130) id_125)"
"((temp144_131)(expand-context-phase ctx_122))"
"((temp145_132) 'ambiguous)"
"((temp146_133) #t))"
"(resolve+shift28.1 temp145_132 #f null temp146_133 #f id143_130 temp144_131))))"
"(begin"
"(let-values(((obs_134)(expand-context-observer ctx_122)))"
"(if obs_134"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_122))"
"(let-values()(call-expand-observe obs_134 'resolve id_125))"
"(void)))"
"(void)))"
"(if(eq? binding_128 'ambiguous)"
"(let-values()"
"(begin"
"(if fail-non-transformer_124(let-values()(fail-non-transformer_124))(void))"
"(raise-ambiguous-error id_125 ctx_122)))"
"(if(not binding_128)"
"(let-values()"
"(begin"
"(if fail-non-transformer_124(let-values()(fail-non-transformer_124))(void))"
"(expand-implicit"
" '#%app"
"(substitute-alternate-id s_121 alternate-id_123)"
" ctx_122"
" id_125)))"
"(let-values()"
"(let-values(((t_135 primitive?_136 insp-of-t_137 protected?_138)"
"(let-values(((binding147_140) binding_128)"
"((ctx148_141) ctx_122)"
"((id149_142) id_125)"
"((temp150_143)"
"(if alternate-id_123(car(syntax-e/no-taint s_121)) #f))"
"((temp151_144)(expand-context-in-local-expand? ctx_122)))"
"(lookup62.1"
" temp150_143"
" temp151_144"
" binding147_140"
" ctx148_141"
" id149_142))))"
"(if(variable? t_135)"
"(let-values()"
"(begin"
"(if fail-non-transformer_124(let-values()(fail-non-transformer_124))(void))"
"(expand-implicit"
" '#%app"
"(substitute-alternate-id s_121 alternate-id_123)"
" ctx_122"
" id_125)))"
"(let-values()"
"(let-values(((t152_146) t_135)"
"((insp-of-t153_147) insp-of-t_137)"
"((s154_148) s_121)"
"((id155_149) id_125)"
"((ctx156_150) ctx_122)"
"((binding157_151) binding_128)"
"((primitive?158_152) primitive?_136)"
"((protected?159_153) protected?_138)"
"((fail-non-transformer160_154) fail-non-transformer_124))"
"(dispatch30.1"
" fail-non-transformer160_154"
" t152_146"
" insp-of-t153_147"
" s154_148"
" id155_149"
" ctx156_150"
" binding157_151"
" primitive?158_152"
" protected?159_153)))))))))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_0 s_0 ctx_0 trigger-id_0)"
"(begin"
"(if(expand-context-only-immediate? ctx_0)"
"(let-values()"
"(begin"
"(let-values(((obs_173)(expand-context-observer ctx_0)))"
"(if obs_173(let-values()(let-values()(call-expand-observe obs_173 'exit-check s_0)))(void)))"
" s_0))"
"(let-values()"
"(let-values(((disarmed-s_174)(syntax-disarm$1 s_0)))"
"(let-values(((id_175)(datum->syntax$1 disarmed-s_174 sym_0)))"
"(if(if(not(free-id-set-empty?(expand-context-stops ctx_0)))"
"(free-id-set-member?(expand-context-stops ctx_0)(expand-context-phase ctx_0) id_175)"
" #f)"
"(let-values()"
"(begin"
"(let-values(((obs_176)(expand-context-observer ctx_0)))"
"(if obs_176"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_0))"
"(let-values()"
"(begin"
"(call-expand-observe obs_176 'resolve id_175)"
"(call-expand-observe obs_176 'enter-prim s_0)"
"(call-expand-observe obs_176 'prim-stop)"
"(call-expand-observe obs_176 'exit-prim s_0)"
"(call-expand-observe obs_176 'return s_0)))"
"(void)))"
"(void)))"
" s_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_178)(expand-context-observer ctx_0)))"
"(if obs_178"
"(let-values()(let-values()(call-expand-observe obs_178 'resolve id_175)))"
"(void)))"
"(values))))"
"(let-values(((b_177)"
"(let-values(((id161_180) id_175)"
"((temp162_181)(expand-context-phase ctx_0))"
"((temp163_182) 'ambiguous)"
"((temp164_183) #t))"
"(resolve+shift28.1 temp163_182 #f null temp164_183 #f id161_180 temp162_181))))"
"(if(eq? b_177 'ambiguous)"
"(let-values()(raise-ambiguous-error id_175 ctx_0))"
"(let-values()"
"(let-values(((t_184 primitive?_185 insp-of-t_186 protected?_187)"
"(if b_177"
"(let-values(((b165_188) b_177)((ctx166_189) ctx_0)((id167_190) id_175))"
"(lookup62.1 #f #f b165_188 ctx166_189 id167_190))"
"(values #f #f #f #f))))"
"(if(transformer? t_184)"
"(let-values()"
"(let-values(((fail-non-transformer_191)"
"(if(1/rename-transformer? t_184)"
"(lambda()"
"(begin"
" 'fail-non-transformer"
"(raise-syntax-implicit-error s_0 sym_0 trigger-id_0 ctx_0)))"
" #f)))"
"(let-values(((t168_193) t_184)"
"((insp-of-t169_194) insp-of-t_186)"
"((temp170_195)(make-explicit ctx_0 sym_0 s_0 disarmed-s_174))"
"((id171_196) id_175)"
"((ctx172_197) ctx_0)"
"((b173_198) b_177)"
"((fail-non-transformer174_199) fail-non-transformer_191))"
"(dispatch-transformer41.1"
" fail-non-transformer174_199"
" t168_193"
" insp-of-t169_194"
" temp170_195"
" id171_196"
" ctx172_197"
" b173_198))))"
"(if(core-form? t_184)"
"(let-values()"
"(if(if(eq? sym_0 '#%top)"
"(if(eq?(core-form-name t_184) '#%top)"
"(expand-context-in-local-expand? ctx_0)"
" #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_184 s_0 ctx_0))"
"(let-values()"
"(dispatch-core-form t_184(make-explicit ctx_0 sym_0 s_0 disarmed-s_174) ctx_0))))"
"(let-values()"
"(let-values(((tl-id_200)"
"(if(eq? sym_0 '#%top)"
"(if(root-expand-context-top-level-bind-scope ctx_0)"
"(add-scope s_0(root-expand-context-top-level-bind-scope ctx_0))"
" #f)"
" #f)))"
"(let-values(((tl-b_201)"
"(if tl-id_200"
"(let-values(((tl-id175_202) tl-id_200)"
"((temp176_203)(expand-context-phase ctx_0)))"
"(resolve40.1 #f #f null #f tl-id175_202 temp176_203))"
" #f)))"
"(if tl-b_201"
"(let-values()"
"(if(if(expand-context-to-parsed? ctx_0)"
"(free-id-set-empty?(expand-context-stops ctx_0))"
" #f)"
"(parsed-id2.1 tl-id_200 tl-b_201 #f)"
" tl-id_200))"
"(let-values()"
"(raise-syntax-implicit-error"
" s_0"
" sym_0"
" trigger-id_0"
" ctx_0))))))))))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_0 ctx_0)"
"(begin"
"(let-values(((ae_206)(syntax-e$1 s_0)))"
"(let-values(((exp-s_207)(already-expanded-s ae_206)))"
"(begin"
"(if(let-values(((or-part_208)(syntax-any-macro-scopes? s_0)))"
"(if or-part_208"
" or-part_208"
"(let-values(((or-part_209)"
"(not"
"(eq?(expand-context-binding-layer ctx_0)(already-expanded-binding-layer ae_206)))))"
"(if or-part_209"
" or-part_209"
"(if(parsed? exp-s_207)"
"(not"
"(if(expand-context-to-parsed? ctx_0)(free-id-set-empty?(expand-context-stops ctx_0)) #f))"
" #f)))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                  \"expanded syntax not in its original lexical context;\\n\""
"                  \" extra bindings or scopes in the current context\")"
"(if(not(parsed? exp-s_207)) exp-s_207 #f)))"
"(void))"
"(if(expand-context-only-immediate? ctx_0)"
"(let-values() s_0)"
"(if(parsed? exp-s_207)"
"(let-values() exp-s_207)"
"(let-values()"
"(let-values(((result-s_210)(syntax-track-origin$1 exp-s_207 s_0)))"
"(begin"
"(let-values(((obs_211)(expand-context-observer ctx_0)))"
"(if obs_211"
"(let-values()(let-values()(call-expand-observe obs_211 'opaque-expr result-s_210)))"
"(void)))"
"(if(if(expand-context-to-parsed? ctx_0)(free-id-set-empty?(expand-context-stops ctx_0)) #f)"
"(let-values(((result-s177_212) result-s_210)((ctx178_213) ctx_0))"
"(expand9.1 #f #f #f result-s177_212 ctx178_213))"
" result-s_210))))))))))))"
"(define-values"
"(make-explicit)"
"(lambda(ctx_0 sym_0 s_0 disarmed-s_0)"
"(begin"
"(let-values(((new-s_218)(syntax-rearm$1(datum->syntax$1 disarmed-s_0(cons sym_0 disarmed-s_0) s_0 s_0) s_0)))"
"(begin"
"(let-values(((obs_219)(expand-context-observer ctx_0)))"
"(if obs_219(let-values()(let-values()(call-expand-observe obs_219 'tag new-s_218)))(void)))"
" new-s_218)))))"
"(define-values"
"(dispatch30.1)"
"(lambda(fail-non-transformer20_0 t22_0 insp-of-t23_0 s24_0 id25_0 ctx26_0 binding27_0 primitive?28_0 protected?29_0)"
"(begin"
" 'dispatch30"
"(let-values(((t_229) t22_0))"
"(let-values(((insp-of-t_230) insp-of-t23_0))"
"(let-values(((s_231) s24_0))"
"(let-values(((id_232) id25_0))"
"(let-values(((ctx_233) ctx26_0))"
"(let-values(((binding_234) binding27_0))"
"(let-values(((primitive?_235) primitive?28_0))"
"(let-values(((protected?_236) protected?29_0))"
"(let-values(((fail-non-transformer_237) fail-non-transformer20_0))"
"(let-values()"
"(if(core-form? t_229)"
"(let-values()(dispatch-core-form t_229 s_231 ctx_233))"
"(if(transformer? t_229)"
"(let-values()"
"(let-values(((t179_239) t_229)"
"((insp-of-t180_240) insp-of-t_230)"
"((s181_241) s_231)"
"((id182_242) id_232)"
"((ctx183_243) ctx_233)"
"((binding184_244) binding_234)"
"((fail-non-transformer185_245) fail-non-transformer_237))"
"(dispatch-transformer41.1"
" fail-non-transformer185_245"
" t179_239"
" insp-of-t180_240"
" s181_241"
" id182_242"
" ctx183_243"
" binding184_244)))"
"(if(variable? t_229)"
"(let-values()"
"(dispatch-variable"
" t_229"
" s_231"
" id_232"
" ctx_233"
" binding_234"
" primitive?_235"
" protected?_236))"
"                                (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" s_231))))))))))))))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_0 s_0 ctx_0)"
"(begin"
"(if(expand-context-only-immediate? ctx_0)"
"(let-values()"
"(begin"
"(let-values(((obs_284)(expand-context-observer ctx_0)))"
"(if obs_284(let-values()(let-values()(call-expand-observe obs_284 'exit-check s_0)))(void)))"
" s_0))"
"(if(expand-context-observer ctx_0)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_286)(expand-context-observer ctx_0)))"
"(if obs_286"
"(let-values()(let-values()(call-expand-observe obs_286 'enter-prim s_0)))"
"(void)))"
"(values))))"
"(let-values(((result-s_285)((core-form-expander t_0) s_0 ctx_0)))"
"(begin"
"(let-values(((obs_287)(expand-context-observer ctx_0)))"
"(if obs_287"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_287 'exit-prim(extract-syntax result-s_285))"
"(call-expand-observe obs_287 'return(extract-syntax result-s_285)))))"
"(void)))"
" result-s_285))))"
"(let-values()((core-form-expander t_0) s_0 ctx_0)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_0 s_0 ctx_0)"
"(begin"
"(let-values((()"
"(begin"
"(let-values(((obs_292)(expand-context-observer ctx_0)))"
"(if obs_292"
"(let-values()(let-values()(call-expand-observe obs_292 'enter-prim s_0)))"
"(void)))"
"(values))))"
"(let-values(((result-s_291)((core-form-expander t_0) s_0 ctx_0 #t)))"
"(begin"
"(let-values(((obs_293)(expand-context-observer ctx_0)))"
"(if obs_293"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_293 'exit-prim result-s_291)"
"(call-expand-observe obs_293 'return result-s_291))))"
"(void)))"
" result-s_291))))))"
"(define-values"
"(dispatch-transformer41.1)"
"(lambda(fail-non-transformer33_0 t35_0 insp-of-t36_0 s37_0 id38_0 ctx39_0 binding40_0)"
"(begin"
" 'dispatch-transformer41"
"(let-values(((t_315) t35_0))"
"(let-values(((insp-of-t_316) insp-of-t36_0))"
"(let-values(((s_317) s37_0))"
"(let-values(((id_318) id38_0))"
"(let-values(((ctx_319) ctx39_0))"
"(let-values(((binding_320) binding40_0))"
"(let-values(((fail-non-transformer_321) fail-non-transformer33_0))"
"(let-values()"
"(if(not-in-this-expand-context? t_315 ctx_319)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_323)(expand-context-observer ctx_319)))"
"(if obs_323"
"(let-values()"
"(let-values()(call-expand-observe obs_323 'enter-macro s_317)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_322)"
"(avoid-current-expand-context"
"(substitute-alternate-id s_317 id_318)"
" t_315"
" ctx_319)))"
"(begin"
"(let-values(((obs_324)(expand-context-observer ctx_319)))"
"(if obs_324"
"(let-values()(let-values()(call-expand-observe obs_324 'exit-macro s_317)))"
"(void)))"
"(let-values(((adj-s186_325) adj-s_322)((ctx187_326) ctx_319))"
"(expand9.1 #f #f #f adj-s186_325 ctx187_326))))))"
"(if(if(expand-context-should-not-encounter-macros? ctx_319)"
"(not(1/rename-transformer? t_315))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                             \"encountered a macro binding in form that should be fully expanded\""
" s_317))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_329)(expand-context-observer ctx_319)))"
"(if obs_329"
"(let-values()"
"(if(if(expand-context-only-immediate? ctx_319)"
"(not(1/rename-transformer? t_315))"
" #f)"
"(let-values()"
"(begin"
"(call-expand-observe obs_329 'visit s_317)"
"(call-expand-observe obs_329 'resolve id_318)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_327 re-ctx_328)"
"(if(1/rename-transformer? t_315)"
"(values s_317 ctx_319)"
"(let-values(((t188_330) t_315)"
"((insp-of-t189_331) insp-of-t_316)"
"((s190_332) s_317)"
"((id191_333) id_318)"
"((ctx192_334) ctx_319)"
"((binding193_335) binding_320))"
"(apply-transformer52.1"
" #f"
" t188_330"
" insp-of-t189_331"
" s190_332"
" id191_333"
" ctx192_334"
" binding193_335)))))"
"(begin"
"(let-values(((obs_336)(expand-context-observer ctx_319)))"
"(if obs_336"
"(let-values()"
"(if(if(expand-context-only-immediate? ctx_319)"
"(not(1/rename-transformer? t_315))"
" #f)"
"(let-values()(call-expand-observe obs_336 'return exp-s_327))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_319)"
"(let-values() exp-s_327)"
"(let-values()"
"(let-values(((exp-s194_338) exp-s_327)"
"((re-ctx195_339) re-ctx_328)"
"((temp196_340)"
"(if(1/rename-transformer? t_315)"
"(syntax-track-origin$1"
"(transfer-srcloc"
"(rename-transformer-target-in-context t_315 ctx_319)"
" id_318)"
" id_318"
" id_318)"
" #f))"
"((temp197_341)"
"(let-values(((or-part_343)"
"(expand-context-only-immediate? ctx_319)))"
"(if or-part_343 or-part_343(1/rename-transformer? t_315))))"
"((temp198_342)"
"(if(1/rename-transformer? t_315) fail-non-transformer_321 #f)))"
"(expand9.1"
" temp196_340"
" temp198_342"
" temp197_341"
" exp-s194_338"
" re-ctx195_339)))))))))))))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_0 s_0 id_0 ctx_0 binding_0 primitive?_0 protected?_0)"
"(begin"
"(if(expand-context-only-immediate? ctx_0)"
"(let-values()"
"(begin"
"(let-values(((obs_371)(expand-context-observer ctx_0)))"
"(if obs_371(let-values()(let-values()(call-expand-observe obs_371 'exit-check s_0)))(void)))"
" id_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_373)(expand-context-observer ctx_0)))"
"(if obs_373"
"(let-values()(let-values()(call-expand-observe obs_373 'variable s_0 id_0)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_0)(values))))"
"(let-values(((result-s_372)"
"(let-values(((id199_375) id_0)"
"((t200_376) t_0)"
"((temp201_377)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops ctx_0)"
"(expand-context-phase ctx_0))))"
"(substitute-variable6.1 temp201_377 id199_375 t200_376))))"
"(if(if(expand-context-to-parsed? ctx_0)(free-id-set-empty?(expand-context-stops ctx_0)) #f)"
"(let-values()"
"(let-values(((prop-s_378)(keep-properties-only~ result-s_372)))"
"(let-values(((insp_379)(syntax-inspector result-s_372)))"
"(if primitive?_0"
"(parsed-primitive-id3.1 prop-s_378 binding_0 insp_379)"
"(parsed-id2.1 prop-s_378 binding_0 insp_379)))))"
"(let-values()"
"(let-values(((protected-result-s_380)"
"(if protected?_0(syntax-property$1 result-s_372 'protected #t) result-s_372)))"
"(begin"
"(let-values(((obs_381)(expand-context-observer ctx_0)))"
"(if obs_381"
"(let-values()(let-values()(call-expand-observe obs_381 'return protected-result-s_380)))"
"(void)))"
" protected-result-s_380))))))))))))"
"(define-values"
"(apply-transformer52.1)"
"(lambda(origin-id44_0 t46_0 insp-of-t47_0 s48_0 id49_0 ctx50_0 binding51_0)"
"(begin"
" 'apply-transformer52"
"(let-values(((t_389) t46_0))"
"(let-values(((insp-of-t_390) insp-of-t47_0))"
"(let-values(((s_391) s48_0))"
"(let-values(((id_392) id49_0))"
"(let-values(((ctx_393) ctx50_0))"
"(let-values(((binding_394) binding51_0))"
"(let-values(((origin-id_395) origin-id44_0))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_408)(expand-context-observer ctx_393)))"
"(if obs_408"
"(let-values()"
"(let-values()(call-expand-observe obs_408 'enter-macro s_391)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_396)(syntax-disarm$1 s_391)))"
"(let-values(((intro-scope_397)(new-scope 'macro)))"
"(let-values(((intro-s_398)(flip-scope disarmed-s_396 intro-scope_397)))"
"(let-values(((use-s_399 use-scopes_400)"
"(maybe-add-use-site-scope intro-s_398 ctx_393 binding_394)))"
"(let-values(((cleaned-s_401)(syntax-remove-taint-dispatch-properties use-s_399)))"
"(let-values(((def-ctx-scopes_402)(box null)))"
"(let-values(((transformed-s_403)"
"(apply-transformer-in-context"
" t_389"
" cleaned-s_401"
" ctx_393"
" insp-of-t_390"
" intro-scope_397"
" use-scopes_400"
" def-ctx-scopes_402"
" id_392)))"
"(let-values(((result-s_404)(flip-scope transformed-s_403 intro-scope_397)))"
"(let-values(((post-s_405)(maybe-add-post-expansion result-s_404 ctx_393)))"
"(let-values(((tracked-s_406)"
"(syntax-track-origin$1"
" post-s_405"
" cleaned-s_401"
"(let-values(((or-part_409) origin-id_395))"
"(if or-part_409"
" or-part_409"
"(if(syntax-identifier? s_391)"
" s_391"
"(car(syntax-e$1 s_391))))))))"
"(let-values(((rearmed-s_407)"
"(taint-dispatch"
" tracked-s_406"
"(lambda(t-s_0)(syntax-rearm$1 t-s_0 s_391))"
"(expand-context-phase ctx_393))))"
"(begin"
"(let-values(((obs_411)(expand-context-observer ctx_393)))"
"(if obs_411"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_411 'exit-macro rearmed-s_407)))"
"(void)))"
"(values"
" rearmed-s_407"
"(accumulate-def-ctx-scopes"
" ctx_393"
" def-ctx-scopes_402)))))))))))))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_0 cleaned-s_0 ctx_0 insp-of-t_0 intro-scope_0 use-scopes_0 def-ctx-scopes_0 id_0)"
"(begin"
"(let-values((()"
"(begin"
"(let-values(((obs_453)(expand-context-observer ctx_0)))"
"(if obs_453"
"(let-values()(let-values()(call-expand-observe obs_453 'macro-pre-x cleaned-s_0)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_449)"
"(not"
"(let-values(((or-part_454)(expand-context-only-immediate? ctx_0)))"
"(if or-part_454"
" or-part_454"
"(not"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops ctx_0)"
"(expand-context-phase ctx_0))))))))"
"(let-values(((accum-ctx_450)"
"(if(if confine-def-ctx-scopes?_449"
"(if(expand-context-def-ctx-scopes ctx_0)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_0))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_0(expand-context-def-ctx-scopes ctx_0))"
" ctx_0)))"
"(let-values(((m-ctx_451)"
"(let-values(((v_455) accum-ctx_450))"
"(let-values(((the-struct_456) v_455))"
"(if(expand-context/outer? the-struct_456)"
"(let-values(((current-introduction-scopes202_457)(list intro-scope_0))"
"((current-use-scopes203_458) use-scopes_0)"
"((def-ctx-scopes204_459)"
"(if confine-def-ctx-scopes?_449"
" def-ctx-scopes_0"
"(expand-context-def-ctx-scopes ctx_0)))"
"((inner205_460)(root-expand-context/outer-inner v_455)))"
"(expand-context/outer1.1"
" inner205_460"
"(root-expand-context/outer-post-expansion the-struct_456)"
"(root-expand-context/outer-use-site-scopes the-struct_456)"
"(root-expand-context/outer-frame-id the-struct_456)"
"(expand-context/outer-context the-struct_456)"
"(expand-context/outer-env the-struct_456)"
"(expand-context/outer-scopes the-struct_456)"
" def-ctx-scopes204_459"
"(expand-context/outer-binding-layer the-struct_456)"
"(expand-context/outer-reference-records the-struct_456)"
"(expand-context/outer-only-immediate? the-struct_456)"
"(expand-context/outer-need-eventually-defined the-struct_456)"
" current-introduction-scopes202_457"
" current-use-scopes203_458"
"(expand-context/outer-name the-struct_456)))"
"                                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_456))))))"
"(let-values(((transformed-s_452)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_451"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_0)"
"(add1(expand-context-phase ctx_0)))"
" current-module-code-inspector"
" insp-of-t_0)"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_0) cleaned-s_0)))))))"
"(begin"
"(let-values(((obs_461)(expand-context-observer ctx_0)))"
"(if obs_461"
"(let-values()"
"(let-values()(call-expand-observe obs_461 'macro-post-x transformed-s_452 cleaned-s_0)))"
"(void)))"
"(if(syntax?$1 transformed-s_452)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_0)"
"                       \"received value from syntax expander was not syntax\""
"                       \"received\""
" transformed-s_452)))"
" transformed-s_452)))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_0 ctx_0 binding_0)"
"(begin"
"(if(if(root-expand-context-use-site-scopes ctx_0)"
"(matching-frame?(root-expand-context-frame-id ctx_0)(binding-frame-id binding_0))"
" #f)"
"(let-values()"
"(let-values(((sc_465)(new-scope 'use-site)))"
"(let-values(((b_466)(root-expand-context-use-site-scopes ctx_0)))"
"(begin(set-box! b_466(cons sc_465(unbox b_466)))(values(add-scope s_0 sc_465)(list sc_465))))))"
"(let-values()(values s_0 null))))))"
"(define-values"
"(matching-frame?)"
"(lambda(current-frame-id_0 bind-frame-id_0)"
"(begin"
"(if current-frame-id_0"
"(let-values(((or-part_469)(eq? current-frame-id_0 bind-frame-id_0)))"
"(if or-part_469 or-part_469(eq? current-frame-id_0 'all)))"
" #f))))"
"(define-values"
"(maybe-add-post-expansion)"
"(lambda(s_0 ctx_0)(begin(apply-post-expansion(root-expand-context-post-expansion ctx_0) s_0))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_0 def-ctx-scopes_0)"
"(begin"
"(if(null?(unbox def-ctx-scopes_0))"
" ctx_0"
"(let-values(((v_474) ctx_0))"
"(let-values(((the-struct_475) v_474))"
"(if(expand-context/outer? the-struct_475)"
"(let-values(((scopes206_476)(append(unbox def-ctx-scopes_0)(expand-context-scopes ctx_0)))"
"((inner207_477)(root-expand-context/outer-inner v_474)))"
"(expand-context/outer1.1"
" inner207_477"
"(root-expand-context/outer-post-expansion the-struct_475)"
"(root-expand-context/outer-use-site-scopes the-struct_475)"
"(root-expand-context/outer-frame-id the-struct_475)"
"(expand-context/outer-context the-struct_475)"
"(expand-context/outer-env the-struct_475)"
" scopes206_476"
"(expand-context/outer-def-ctx-scopes the-struct_475)"
"(expand-context/outer-binding-layer the-struct_475)"
"(expand-context/outer-reference-records the-struct_475)"
"(expand-context/outer-only-immediate? the-struct_475)"
"(expand-context/outer-need-eventually-defined the-struct_475)"
"(expand-context/outer-current-introduction-scopes the-struct_475)"
"(expand-context/outer-current-use-scopes the-struct_475)"
"(expand-context/outer-name the-struct_475)))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_475))))))))"
"(define-values"
"(lookup62.1)"
"(lambda(in55_0 out-of-context-as-variable?56_0 b59_0 ctx60_0 id61_0)"
"(begin"
" 'lookup62"
"(let-values(((b_483) b59_0))"
"(let-values(((ctx_484) ctx60_0))"
"(let-values(((id_485) id61_0))"
"(let-values(((in-s_486) in55_0))"
"(let-values(((out-of-context-as-variable?_487) out-of-context-as-variable?56_0))"
"(let-values()"
"(let-values(((b208_489) b_483)"
"((temp209_490)(expand-context-env ctx_484))"
"((temp210_491)(expand-context-lift-envs ctx_484))"
"((temp211_492)(expand-context-namespace ctx_484))"
"((temp212_493)(expand-context-phase ctx_484))"
"((id213_494) id_485)"
"((in-s214_495) in-s_486)"
"((out-of-context-as-variable?215_496) out-of-context-as-variable?_487))"
"(binding-lookup50.1"
" in-s214_495"
" out-of-context-as-variable?215_496"
" b208_489"
" temp209_490"
" temp210_491"
" temp211_492"
" temp212_493"
" id213_494)))))))))))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_0 alternate-id_0)"
"(begin"
"(if(not alternate-id_0)"
"(let-values() s_0)"
"(if(syntax-identifier? s_0)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_0 s_0) s_0))"
"(let-values()"
"(let-values(((disarmed-s_525)(syntax-disarm$1 s_0)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_525(cons alternate-id_0(cdr(syntax-e$1 disarmed-s_525))) s_0)"
" s_0)"
" s_0))))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_0)"
"(begin"
"(if(if(local-binding? binding_0)(reference-record?(binding-frame-id binding_0)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_0)(local-binding-key binding_0)))"
"(void)))))"
"(define-values"
"(expand/capture-lifts75.1)"
"(lambda(always-wrap?68_0 begin-form?66_0 expand-lifts?65_0 lift-key67_0 s73_0 ctx74_0)"
"(begin"
" 'expand/capture-lifts75"
"(let-values(((s_533) s73_0))"
"(let-values(((ctx_534) ctx74_0))"
"(let-values(((expand-lifts?_535) expand-lifts?65_0))"
"(let-values(((begin-form?_536) begin-form?66_0))"
"(let-values(((lift-key_537)(if(eq? lift-key67_0 unsafe-undefined)(generate-lift-key) lift-key67_0)))"
"(let-values(((always-wrap?_538) always-wrap?68_0))"
"(let-values()"
"(let-values(((context_539)(expand-context-context ctx_534)))"
"(let-values(((phase_540)(expand-context-phase ctx_534)))"
"(let-values(((local?_541)(not begin-form?_536)))"
"((letrec-values(((loop_542)"
"(lambda(s_0 always-wrap?_0 ctx_0)"
"(begin"
" 'loop"
"(let-values(((lift-env_546)(if local?_541(box empty-env) #f)))"
"(let-values(((lift-ctx_547)"
"(let-values(((temp216_554)"
"(if local?_541"
"(make-local-lift"
" lift-env_546"
"(root-expand-context-counter ctx_0))"
"(make-top-level-lift ctx_0)))"
"((temp217_555)"
"(if(not local?_541)"
"(eq? context_539 'module)"
" #f)))"
"(make-lift-context6.1 temp217_555 temp216_554))))"
"(let-values(((capture-ctx_548)"
"(let-values(((v_556) ctx_0))"
"(let-values(((the-struct_557) v_556))"
"(if(expand-context/outer? the-struct_557)"
"(let-values(((inner218_558)"
"(let-values(((the-struct_559)"
"(root-expand-context/outer-inner"
" v_556)))"
"(if(expand-context/inner?"
" the-struct_559)"
"(let-values(((lift-key219_560)"
" lift-key_537)"
"((lifts220_561)"
" lift-ctx_547)"
"((lift-envs221_562)"
"(if local?_541"
"(cons"
" lift-env_546"
"(expand-context-lift-envs"
" ctx_0))"
"(expand-context-lift-envs"
" ctx_0)))"
"((module-lifts222_563)"
"(if(let-values(((or-part_564)"
" local?_541))"
"(if or-part_564"
" or-part_564"
"(not"
"(memq"
" context_539"
" '(top-level"
" module)))))"
"(expand-context-module-lifts"
" ctx_0)"
" lift-ctx_547)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_559)"
"(root-expand-context/inner-module-scopes"
" the-struct_559)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_559)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_559)"
"(root-expand-context/inner-defined-syms"
" the-struct_559)"
"(root-expand-context/inner-counter"
" the-struct_559)"
" lift-key219_560"
"(expand-context/inner-to-parsed?"
" the-struct_559)"
"(expand-context/inner-phase"
" the-struct_559)"
"(expand-context/inner-namespace"
" the-struct_559)"
"(expand-context/inner-just-once?"
" the-struct_559)"
"(expand-context/inner-module-begin-k"
" the-struct_559)"
"(expand-context/inner-allow-unbound?"
" the-struct_559)"
"(expand-context/inner-in-local-expand?"
" the-struct_559)"
"(expand-context/inner-keep-#%expression?"
" the-struct_559)"
"(expand-context/inner-stops"
" the-struct_559)"
"(expand-context/inner-declared-submodule-names"
" the-struct_559)"
" lifts220_561"
" lift-envs221_562"
" module-lifts222_563"
"(expand-context/inner-require-lifts"
" the-struct_559)"
"(expand-context/inner-to-module-lifts"
" the-struct_559)"
"(expand-context/inner-requires+provides"
" the-struct_559)"
"(expand-context/inner-observer"
" the-struct_559)"
"(expand-context/inner-for-serializable?"
" the-struct_559)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_559)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                           \"expand-context/inner?\""
" the-struct_559)))))"
"(expand-context/outer1.1"
" inner218_558"
"(root-expand-context/outer-post-expansion"
" the-struct_557)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_557)"
"(root-expand-context/outer-frame-id"
" the-struct_557)"
"(expand-context/outer-context the-struct_557)"
"(expand-context/outer-env the-struct_557)"
"(expand-context/outer-scopes the-struct_557)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_557)"
"(expand-context/outer-binding-layer"
" the-struct_557)"
"(expand-context/outer-reference-records"
" the-struct_557)"
"(expand-context/outer-only-immediate?"
" the-struct_557)"
"(expand-context/outer-need-eventually-defined"
" the-struct_557)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_557)"
"(expand-context/outer-current-use-scopes"
" the-struct_557)"
"(expand-context/outer-name the-struct_557)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                         \"expand-context/outer?\""
" the-struct_557))))))"
"(let-values(((rebuild-s_549)(keep-properties-only s_0)))"
"(let-values(((exp-s_550)"
"(let-values(((s223_565) s_0)"
"((capture-ctx224_566)"
" capture-ctx_548))"
"(expand9.1"
" #f"
" #f"
" #f"
" s223_565"
" capture-ctx224_566))))"
"(let-values(((lifts_551)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_548))))"
"(let-values(((with-lifts-s_552)"
"(if(let-values(((or-part_567)"
"(pair? lifts_551)))"
"(if or-part_567"
" or-part_567"
" always-wrap?_0))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_0)"
"(let-values()"
"(begin"
"(if expand-lifts?_535"
"(void)"
"(let-values()"
"(error"
"                                                                                         \"internal error: to-parsed mode without expanding lifts\")))"
"(wrap-lifts-as-parsed-let"
" lifts_551"
" exp-s_550"
" rebuild-s_549"
" ctx_0"
"(lambda(rhs_0 rhs-ctx_0)"
"(loop_542 rhs_0 #f rhs-ctx_0)))))"
"(let-values()"
"(if begin-form?_536"
"(let-values(((lifts225_570)"
" lifts_551)"
"((exp-s226_571)"
" exp-s_550)"
"((phase227_572)"
" phase_540))"
"(wrap-lifts-as-begin16.1"
" unsafe-undefined"
" unsafe-undefined"
" lifts225_570"
" exp-s226_571"
" phase227_572))"
"(wrap-lifts-as-let"
" lifts_551"
" exp-s_550"
" phase_540)))))"
"(let-values() exp-s_550))))"
"(if(let-values(((or-part_573)(not expand-lifts?_535)))"
"(if or-part_573"
" or-part_573"
"(let-values(((or-part_574)(null? lifts_551)))"
"(if or-part_574"
" or-part_574"
"(expand-context-to-parsed? ctx_0)))))"
"(let-values() with-lifts-s_552)"
"(let-values()"
"(begin"
"(let-values(((obs_575)"
"(expand-context-observer ctx_0)))"
"(if obs_575"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_575"
" 'letlift-loop"
" with-lifts-s_552)))"
"(void)))"
"(loop_542 with-lifts-s_552 #f ctx_0)))))))))))))))"
" loop_542)"
" s_533"
" always-wrap?_538"
" ctx_534))))))))))))))"
"(define-values"
"(expand-transformer92.1)"
"(lambda(always-wrap?82_0 begin-form?79_0 context78_0 expand-lifts?80_0 keep-stops?83_0 lift-key81_0 s90_0 ctx91_0)"
"(begin"
" 'expand-transformer92"
"(let-values(((s_619) s90_0))"
"(let-values(((ctx_620) ctx91_0))"
"(let-values(((context_621) context78_0))"
"(let-values(((begin-form?_622) begin-form?79_0))"
"(let-values(((expand-lifts?_623) expand-lifts?80_0))"
"(let-values(((lift-key_624)(if(eq? lift-key81_0 unsafe-undefined)(generate-lift-key) lift-key81_0)))"
"(let-values(((always-wrap?_625) always-wrap?82_0))"
"(let-values(((keep-stops?_626) keep-stops?83_0))"
"(let-values()"
"(let-values()"
"(let-values(((trans-ctx_627)"
"(let-values(((ctx234_629) ctx_620)"
"((context235_630) context_621)"
"((keep-stops?236_631) keep-stops?_626))"
"(context->transformer-context99.1"
" keep-stops?236_631"
" ctx234_629"
" context235_630))))"
"(let-values(((s228_633) s_619)"
"((trans-ctx229_634) trans-ctx_627)"
"((expand-lifts?230_635) expand-lifts?_623)"
"((begin-form?231_636) begin-form?_622)"
"((lift-key232_637) lift-key_624)"
"((always-wrap?233_638) always-wrap?_625))"
"(expand/capture-lifts75.1"
" always-wrap?233_638"
" begin-form?231_636"
" expand-lifts?230_635"
" lift-key232_637"
" s228_633"
" trans-ctx229_634))))))))))))))))"
"(define-values"
"(context->transformer-context99.1)"
"(lambda(keep-stops?95_0 ctx98_0 context97_0)"
"(begin"
" 'context->transformer-context99"
"(let-values(((ctx_689) ctx98_0))"
"(let-values(((context_690) context97_0))"
"(let-values(((keep-stops?_691) keep-stops?95_0))"
"(let-values()"
"(let-values(((phase_692)(add1(expand-context-phase ctx_689))))"
"(let-values(((ns_693)(namespace->namespace-at-phase(expand-context-namespace ctx_689) phase_692)))"
"(begin"
"(namespace-visit-available-modules! ns_693 phase_692)"
"(let-values(((v_694) ctx_689))"
"(let-values(((the-struct_695) v_694))"
"(if(expand-context/outer? the-struct_695)"
"(let-values(((context237_696) context_690)"
"((scopes238_697) null)"
"((env239_698) empty-env)"
"((only-immediate?240_699)"
"(if keep-stops?_691(expand-context-only-immediate? ctx_689) #f))"
"((def-ctx-scopes241_700) #f)"
"((post-expansion242_701) #f)"
"((inner243_702)"
"(let-values(((the-struct_703)(root-expand-context/outer-inner v_694)))"
"(if(expand-context/inner? the-struct_703)"
"(let-values(((phase244_704) phase_692)"
"((namespace245_705) ns_693)"
"((stops246_706)"
"(if keep-stops?_691"
"(expand-context-stops ctx_689)"
" empty-free-id-set)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_703)"
"(root-expand-context/inner-module-scopes the-struct_703)"
"(root-expand-context/inner-top-level-bind-scope the-struct_703)"
"(root-expand-context/inner-all-scopes-stx the-struct_703)"
"(root-expand-context/inner-defined-syms the-struct_703)"
"(root-expand-context/inner-counter the-struct_703)"
"(root-expand-context/inner-lift-key the-struct_703)"
"(expand-context/inner-to-parsed? the-struct_703)"
" phase244_704"
" namespace245_705"
"(expand-context/inner-just-once? the-struct_703)"
"(expand-context/inner-module-begin-k the-struct_703)"
"(expand-context/inner-allow-unbound? the-struct_703)"
"(expand-context/inner-in-local-expand? the-struct_703)"
"(expand-context/inner-keep-#%expression? the-struct_703)"
" stops246_706"
"(expand-context/inner-declared-submodule-names the-struct_703)"
"(expand-context/inner-lifts the-struct_703)"
"(expand-context/inner-lift-envs the-struct_703)"
"(expand-context/inner-module-lifts the-struct_703)"
"(expand-context/inner-require-lifts the-struct_703)"
"(expand-context/inner-to-module-lifts the-struct_703)"
"(expand-context/inner-requires+provides the-struct_703)"
"(expand-context/inner-observer the-struct_703)"
"(expand-context/inner-for-serializable? the-struct_703)"
"(expand-context/inner-should-not-encounter-macros? the-struct_703)))"
"(raise-argument-error"
" 'struct-copy"
"                                             \"expand-context/inner?\""
" the-struct_703)))))"
"(expand-context/outer1.1"
" inner243_702"
" post-expansion242_701"
"(root-expand-context/outer-use-site-scopes the-struct_695)"
"(root-expand-context/outer-frame-id the-struct_695)"
" context237_696"
" env239_698"
" scopes238_697"
" def-ctx-scopes241_700"
"(expand-context/outer-binding-layer the-struct_695)"
"(expand-context/outer-reference-records the-struct_695)"
" only-immediate?240_699"
"(expand-context/outer-need-eventually-defined the-struct_695)"
"(expand-context/outer-current-introduction-scopes the-struct_695)"
"(expand-context/outer-current-use-scopes the-struct_695)"
"(expand-context/outer-name the-struct_695)))"
"                          (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_695))))))))))))))"
"(define-values"
"(expand+eval-for-syntaxes-binding108.1)"
"(lambda(log-next?102_0 who104_0 rhs105_0 ids106_0 ctx107_0)"
"(begin"
" 'expand+eval-for-syntaxes-binding108"
"(let-values(((who_733) who104_0))"
"(let-values(((rhs_734) rhs105_0))"
"(let-values(((ids_735) ids106_0))"
"(let-values(((ctx_736) ctx107_0))"
"(let-values(((log-next?_737) log-next?102_0))"
"(let-values()"
"(let-values(((exp-rhs_738)"
"(let-values(((rhs247_741) rhs_734)((temp248_742)(as-named-context ctx_736 ids_735)))"
"(expand-transformer92.1"
" #f"
" #f"
" 'expression"
" #t"
" #f"
" unsafe-undefined"
" rhs247_741"
" temp248_742))))"
"(let-values(((phase_739)(add1(expand-context-phase ctx_736))))"
"(let-values(((parsed-rhs_740)"
"(if(expand-context-to-parsed? ctx_736)"
" exp-rhs_738"
"(let-values(((exp-rhs249_743) exp-rhs_738)"
"((temp250_744)"
"(let-values(((temp251_745)(as-to-parsed-context ctx_736)))"
"(context->transformer-context99.1 #f temp251_745 'expression))))"
"(expand9.1 #f #f #f exp-rhs249_743 temp250_744)))))"
"(begin"
"(if log-next?_737"
"(let-values()"
"(let-values(((obs_746)(expand-context-observer ctx_736)))"
"(if obs_746"
"(let-values()(let-values()(call-expand-observe obs_746 'next)))"
"(void))))"
"(void))"
"(values"
" exp-rhs_738"
" parsed-rhs_740"
"(eval-for-bindings"
" who_733"
" ids_735"
" parsed-rhs_740"
" phase_739"
"(namespace->namespace-at-phase(expand-context-namespace ctx_736) phase_739)"
" ctx_736)))))))))))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(who_0 rhs_0 ids_0 ctx_0)"
"(begin"
"(let-values(((exp-rhs_774 parsed-rhs_775 vals_776)"
"(let-values(((who252_777) who_0)((rhs253_778) rhs_0)((ids254_779) ids_0)((ctx255_780) ctx_0))"
"(expand+eval-for-syntaxes-binding108.1 #t who252_777 rhs253_778 ids254_779 ctx255_780))))"
" vals_776))))"
"(define-values"
"(eval-for-bindings)"
"(lambda(who_0 ids_0 p_0 phase_0 ns_0 ctx_0)"
"(begin"
"(let-values(((compiled_787)"
"(if(can-direct-eval? p_0 ns_0(root-expand-context-self-mpi ctx_0))"
" #f"
"(compile-single"
" p_0"
"(let-values(((ns256_790) ns_0)((phase257_791) phase_0))"
"(make-compile-context14.1 #f unsafe-undefined #f ns256_790 phase257_791 unsafe-undefined))))))"
"(let-values(((vals_788)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_0"
" 1/current-namespace"
" ns_0"
" eval-jit-enabled"
" #f)"
"(let-values()"
"(if compiled_787"
"(eval-single-top compiled_787 ns_0)"
"(direct-eval p_0 ns_0(root-expand-context-self-mpi ctx_0))))))"
" list)))"
"(begin"
"(if(=(length vals_788)(length ids_0))"
"(void)"
"(let-values()"
"(apply"
" raise-result-arity-error"
" who_0"
"(length ids_0)"
"(if(null? ids_0)"
"                   (let-values () \"\")"
"(let-values()"
"                     (format \"\\n  in: definition of ~a~a\" (syntax-e$1 (car ids_0)) (if (pair? (cdr ids_0)) \" ...\" \"\"))))"
" vals_788)))"
" vals_788))))))"
"(define-values(keep-properties-only)(lambda(s_0)(begin(datum->syntax$1 #f 'props s_0 s_0))))"
"(define-values(keep-properties-only~)(lambda(s_0)(begin #f)))"
"(define-values"
"(keep-as-needed119.1)"
"(lambda(for-track?111_0 keep-for-error?113_0 keep-for-parsed?112_0 ctx117_0 s118_0)"
"(begin"
" 'keep-as-needed119"
"(let-values(((ctx_799) ctx117_0))"
"(let-values(((s_800) s118_0))"
"(let-values()"
"(let-values(((keep-for-parsed?_802) keep-for-parsed?112_0))"
"(let-values(((keep-for-error?_803) keep-for-error?113_0))"
"(let-values()"
"(let-values(((d_804)(syntax-e$1 s_800)))"
"(let-values(((keep-e_805)"
"(if(symbol? d_804)"
"(let-values() d_804)"
"(if(if(pair? d_804)(syntax-identifier?(car d_804)) #f)"
"(let-values()(syntax-e$1(car d_804)))"
"(let-values() #f)))))"
"(if(expand-context-to-parsed? ctx_799)"
"(let-values()"
"(if(let-values(((or-part_806) keep-for-parsed?_802))"
"(if or-part_806 or-part_806 keep-for-error?_803))"
"(datum->syntax$1 #f keep-e_805 s_800 s_800)"
" #f))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 s_800) keep-e_805 s_800 s_800)"
" s_800))))))))))))))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_0 trans-idss_0)"
"(begin"
"(if(null? trans-idss_0)"
"(let-values() s_0)"
"(let-values()"
"(syntax-property$1"
" s_0"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_0)"
"(let-values(((or-part_838)(syntax-property$1 s_0 'disappeared-binding)))"
"(if or-part_838 or-part_838 null)))))))))"
"(define-values"
"(increment-binding-layer)"
"(lambda(ids_0 ctx_0 layer-val_0)"
"(begin"
"(if((letrec-values(((loop_842)"
"(lambda(ids_1)"
"(begin"
" 'loop"
"(let-values(((or-part_844)(identifier? ids_1)))"
"(if or-part_844"
" or-part_844"
"(if(pair? ids_1)"
"(let-values(((or-part_845)(loop_842(car ids_1))))"
"(if or-part_845 or-part_845(loop_842(cdr ids_1))))"
" #f)))))))"
" loop_842)"
" ids_0)"
" layer-val_0"
"(expand-context-binding-layer ctx_0)))))"
"(define-values"
"(wrap-lifts-as-parsed-let)"
"(lambda(lifts_0 exp-s_0 rebuild-s_0 ctx_0 parse-rhs_0)"
"(begin"
"(let-values(((idss+keyss+rhss_851)(get-lifts-as-lists lifts_0)))"
"((letrec-values(((lets-loop_852)"
"(lambda(idss+keyss+rhss_0 rhs-ctx_0)"
"(begin"
" 'lets-loop"
"(if(null? idss+keyss+rhss_0)"
"(let-values() exp-s_0)"
"(let-values()"
"(let-values(((ids_855)(caar idss+keyss+rhss_0)))"
"(let-values(((keys_856)(cadar idss+keyss+rhss_0)))"
"(let-values(((rhs_857)(caddar idss+keyss+rhss_0)))"
"(let-values(((exp-rhs_858)(parse-rhs_0 rhs_857 rhs-ctx_0)))"
"(parsed-let-values17.1"
" rebuild-s_0"
"(list ids_855)"
"(list(list keys_856 exp-rhs_858))"
"(list"
"(lets-loop_852"
"(cdr idss+keyss+rhss_0)"
"(let-values(((v_859) rhs-ctx_0))"
"(let-values(((the-struct_860) v_859))"
"(if(expand-context/outer? the-struct_860)"
"(let-values(((env258_861)"
"(let-values(((lst_863) ids_855)((lst_864) keys_856))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_863)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_864)))"
"((letrec-values(((for-loop_865)"
"(lambda(env_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)"
"(pair? lst_1)"
" #f)"
"(let-values(((id_869)"
"(unsafe-car"
" lst_0))"
"((rest_870)"
"(unsafe-cdr"
" lst_0))"
"((key_871)"
"(unsafe-car"
" lst_1))"
"((rest_872)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((env_873)"
"(let-values(((env_874)"
" env_0))"
"(let-values(((env_875)"
"(let-values()"
"(env-extend"
" env_874"
" key_871"
"(local-variable1.1"
" id_869)))))"
"(values"
" env_875)))))"
"(if(not #f)"
"(for-loop_865"
" env_873"
" rest_870"
" rest_872)"
" env_873)))"
" env_0)))))"
" for-loop_865)"
"(expand-context-env rhs-ctx_0)"
" lst_863"
" lst_864))))"
"((inner259_862)"
"(root-expand-context/outer-inner v_859)))"
"(expand-context/outer1.1"
" inner259_862"
"(root-expand-context/outer-post-expansion the-struct_860)"
"(root-expand-context/outer-use-site-scopes the-struct_860)"
"(root-expand-context/outer-frame-id the-struct_860)"
"(expand-context/outer-context the-struct_860)"
" env258_861"
"(expand-context/outer-scopes the-struct_860)"
"(expand-context/outer-def-ctx-scopes the-struct_860)"
"(expand-context/outer-binding-layer the-struct_860)"
"(expand-context/outer-reference-records the-struct_860)"
"(expand-context/outer-only-immediate? the-struct_860)"
"(expand-context/outer-need-eventually-defined the-struct_860)"
"(expand-context/outer-current-introduction-scopes the-struct_860)"
"(expand-context/outer-current-use-scopes the-struct_860)"
"(expand-context/outer-name the-struct_860)))"
"(raise-argument-error"
" 'struct-copy"
"                                                    \"expand-context/outer?\""
" the-struct_860)))))))))))))))))"
" lets-loop_852)"
" idss+keyss+rhss_851"
" ctx_0)))))"
"(define-values"
"(rename-transformer-target-in-context)"
"(lambda(t_0 ctx_0)"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_0)"
"(let-values()(1/rename-transformer-target t_0))))))"
"(define-values"
"(maybe-install-free=id-in-context!)"
"(lambda(val_0 id_0 phase_0 ctx_0)"
"(begin"
"(if(1/rename-transformer? val_0)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_0)"
"(let-values()(maybe-install-free=id! val_0 id_0 phase_0))))"
"(void)))))"
"(define-values"
"(transfer-srcloc)"
"(lambda(new-s_0 old-s_0)"
"(begin"
"(let-values(((srcloc_884)(syntax-srcloc old-s_0)))"
"(if srcloc_884"
"(let-values(((the-struct_885) new-s_0))"
"(if(syntax?$1 the-struct_885)"
"(let-values(((srcloc260_886) srcloc_884))"
"(syntax1.1"
"(syntax-content the-struct_885)"
"(syntax-scopes the-struct_885)"
"(syntax-shifted-multi-scopes the-struct_885)"
"(syntax-scope-propagations+tamper the-struct_885)"
"(syntax-mpi-shifts the-struct_885)"
" srcloc260_886"
"(syntax-props the-struct_885)"
"(syntax-inspector the-struct_885)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_885)))"
" new-s_0)))))"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_0 phase_0)"
"(begin"
"(if(null? stop-ids_0)"
"(let-values() stop-ids_0)"
"(let-values()"
"(let-values(((p-core-stx_3)(syntax-shift-phase-level$1 core-stx phase_0)))"
"(if(if(= 1(length stop-ids_0))"
"(free-identifier=?$1(car stop-ids_0)(datum->syntax$1 p-core-stx_3 'module*) phase_0 phase_0)"
" #f)"
"(let-values() stop-ids_0)"
"(let-values()"
"(append"
" stop-ids_0"
"(reverse$1"
"(let-values(((lst_4) auto-stop-syms))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_4)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((sym_8)(unsafe-car lst_0))((rest_9)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_10)"
"(let-values(((fold-var_11) fold-var_0))"
"(let-values(((fold-var_12)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_3 sym_8))"
" fold-var_11))))"
"(values fold-var_12)))))"
"(if(not #f)(for-loop_5 fold-var_10 rest_9) fold-var_10)))"
" fold-var_0)))))"
" for-loop_5)"
" null"
" lst_4)))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(define-values"
"(module-expand-stop-ids)"
"(lambda(phase_0)"
"(begin"
"(let-values(((p-core-stx_14)(syntax-shift-phase-level$1 core-stx phase_0)))"
"(reverse$1"
"(let-values(((lst_15) module-stop-syms))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((sym_19)(unsafe-car lst_0))((rest_20)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_21)"
"(let-values(((fold-var_22) fold-var_0))"
"(let-values(((fold-var_23)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_14 sym_19))"
" fold-var_22))))"
"(values fold-var_23)))))"
"(if(not #f)(for-loop_16 fold-var_21 rest_20) fold-var_21)))"
" fold-var_0)))))"
" for-loop_16)"
" null"
" lst_15))))))))"
"(define-values"
"(module-stop-syms)"
"(append"
" auto-stop-syms"
" '(define-values define-syntaxes begin-for-syntax #%require #%provide module module* #%declare #%stratified-body)))"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins"
" internal-definition-context-parent-ctx)"
"(let-values(((struct:_15 make-_16 ?_17 -ref_18 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 5"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'internal-definition-context)))))"
"(values"
" struct:_15"
" make-_16"
" ?_17"
"(make-struct-field-accessor -ref_18 0 'frame-id)"
"(make-struct-field-accessor -ref_18 1 'scope)"
"(make-struct-field-accessor -ref_18 2 'add-scope?)"
"(make-struct-field-accessor -ref_18 3 'env-mixins)"
"(make-struct-field-accessor -ref_18 4 'parent-ctx))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_55 make-_56 ?_57 -ref_58 -set!_59)"
"(let-values()"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))))"
"(values"
" struct:_55"
" make-_56"
" ?_57"
"(make-struct-field-accessor -ref_58 0 'id)"
"(make-struct-field-accessor -ref_58 1 'sym)"
"(make-struct-field-accessor -ref_58 2 'value)"
"(make-struct-field-accessor -ref_58 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context5_90)"
"(lambda(parent-ctx3_0 add-scope?4_0)"
"(begin"
" 'syntax-local-make-definition-context5"
"(let-values(((parent-ctx_93) parent-ctx3_0))"
"(let-values(((add-scope?_94) add-scope?4_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_99)(not parent-ctx_93)))"
"(if or-part_99"
" or-part_99"
"(1/internal-definition-context? parent-ctx_93)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-make-definition-context"
"                                               \"(or/c #f internal-definition-context?)\""
" parent-ctx_93)))"
"(values))))"
"(let-values(((ctx_95)"
"(let-values(((temp49_100) 'syntax-local-make-definition-context))"
"(get-current-expand-context16.1 #f temp49_100))))"
"(let-values(((frame-id_96)"
"(let-values(((or-part_101)(root-expand-context-frame-id ctx_95)))"
"(if or-part_101"
" or-part_101"
"(let-values(((or-part_102)"
"(if parent-ctx_93"
"(internal-definition-context-frame-id parent-ctx_93)"
" #f)))"
"(if or-part_102 or-part_102(gensym)))))))"
"(let-values(((sc_97)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_98)(expand-context-def-ctx-scopes ctx_95)))"
"(begin"
"(if def-ctx-scopes_98"
"(let-values()"
"(set-box! def-ctx-scopes_98(cons sc_97(unbox def-ctx-scopes_98))))"
"(void))"
"(internal-definition-context1.1"
" frame-id_96"
" sc_97"
" add-scope?_94"
"(box null)"
" parent-ctx_93))))))))))))))"
"(case-lambda"
"(()(begin 'syntax-local-make-definition-context(syntax-local-make-definition-context5_90 #f #t)))"
"((parent-ctx_0 add-scope?4_0)(syntax-local-make-definition-context5_90 parent-ctx_0 add-scope?4_0))"
"((parent-ctx3_0)(syntax-local-make-definition-context5_90 parent-ctx3_0 #t)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(let-values(((syntax-local-bind-syntaxes11_106)"
"(lambda(ids8_0 s9_0 intdef10_0 extra-intdefs7_0)"
"(begin"
" 'syntax-local-bind-syntaxes11"
"(let-values(((ids_111) ids8_0))"
"(let-values(((s_112) s9_0))"
"(let-values(((intdef_113) intdef10_0))"
"(let-values(((extra-intdefs_114) extra-intdefs7_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(list? ids_111)(andmap2 identifier? ids_111) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                                                   \"(listof identifier?)\""
" ids_111)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_122)(not s_112)))"
"(if or-part_122 or-part_122(syntax?$1 s_112)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                                                     \"(or/c syntax? #f)\""
" s_112)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_113)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                                                       \"internal-definition-context?\""
" intdef_113)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(intdefs? extra-intdefs_114)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
" intdefs?-string"
" extra-intdefs_114)))"
"(values))))"
"(let-values(((ctx_115)"
"(let-values(((temp50_123) 'local-expand))"
"(get-current-expand-context16.1 #f temp50_123))))"
"(let-values((()"
"(begin"
"(let-values(((obs_124)(expand-context-observer ctx_115)))"
"(if obs_124"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_124 'local-bind ids_111)))"
"(void)))"
"(values))))"
"(let-values(((phase_116)(expand-context-phase ctx_115)))"
"(let-values(((all-intdefs_117)"
"(if(list? extra-intdefs_114)"
"(cons intdef_113 extra-intdefs_114)"
"(list intdef_113 extra-intdefs_114))))"
"(let-values(((intdef-ids_118)"
"(reverse$1"
"(let-values(((lst_125) ids_111))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_125)))"
"((letrec-values(((for-loop_126)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_129)"
"(unsafe-car"
" lst_0))"
"((rest_130)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_131)"
"(let-values(((fold-var_132)"
" fold-var_0))"
"(let-values(((fold-var_133)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_134)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_129"
" ctx_115)"
" ctx_115)))"
"(let-values(((temp51_135)"
"(let-values(((pre-id53_138)"
" pre-id_134)"
"((intdef54_139)"
" intdef_113)"
"((temp55_140)"
" #t))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" temp55_140"
" pre-id53_138"
" intdef54_139)))"
"((extra-intdefs52_136)"
" extra-intdefs_114))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" #f"
" temp51_135"
" extra-intdefs52_136))))"
" fold-var_132))))"
"(values"
" fold-var_133)))))"
"(if(not #f)"
"(for-loop_126"
" fold-var_131"
" rest_130)"
" fold-var_131)))"
" fold-var_0)))))"
" for-loop_126)"
" null"
" lst_125))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_141)"
"(expand-context-observer ctx_115)))"
"(if obs_141"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_141"
" 'rename-list"
" intdef-ids_118)))"
"(void)))"
"(values))))"
"(let-values(((syms_119)"
"(reverse$1"
"(let-values(((lst_142) intdef-ids_118))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_142)))"
"((letrec-values(((for-loop_143)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((intdef-id_146)"
"(unsafe-car"
" lst_0))"
"((rest_147)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_148)"
"(let-values(((fold-var_149)"
" fold-var_0))"
"(let-values(((fold-var_150)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((intdef-id56_152)"
" intdef-id_146)"
"((phase57_153)"
" phase_116)"
"((temp58_154)"
"(root-expand-context-counter"
" ctx_115))"
"((temp59_155)"
"(internal-definition-context-frame-id"
" intdef_113)))"
"(add-local-binding!37.1"
" temp59_155"
" #f"
" intdef-id56_152"
" phase57_153"
" temp58_154)))"
" fold-var_149))))"
"(values"
" fold-var_150)))))"
"(if(not #f)"
"(for-loop_143"
" fold-var_148"
" rest_147)"
" fold-var_148)))"
" fold-var_0)))))"
" for-loop_143)"
" null"
" lst_142))))))"
"(let-values(((vals_120)"
"(if s_112"
"(let-values()"
"(let-values(((input-s_156)"
"(flip-introduction-scopes"
"(let-values(((s60_159) s_112)"
"((all-intdefs61_160)"
" all-intdefs_117))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" #f"
" s60_159"
" all-intdefs61_160))"
" ctx_115)))"
"(let-values(((tmp-env_157)"
"(let-values(((lst_161) syms_119)"
"((lst_162)"
" intdef-ids_118))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_161)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_162)))"
"((letrec-values(((for-loop_163)"
"(lambda(env_0"
" lst_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
"(pair?"
" lst_1)"
" #f)"
"(let-values(((sym_167)"
"(unsafe-car"
" lst_0))"
"((rest_168)"
"(unsafe-cdr"
" lst_0))"
"((intdef-id_169)"
"(unsafe-car"
" lst_1))"
"((rest_170)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((env_171)"
"(let-values(((env_172)"
" env_0))"
"(let-values(((env_173)"
"(let-values()"
"(hash-set"
" env_172"
" sym_167"
"(local-variable1.1"
" intdef-id_169)))))"
"(values"
" env_173)))))"
"(if(not"
" #f)"
"(for-loop_163"
" env_171"
" rest_168"
" rest_170)"
" env_171)))"
" env_0)))))"
" for-loop_163)"
"(expand-context-env ctx_115)"
" lst_161"
" lst_162)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_174)"
"(expand-context-observer"
" ctx_115)))"
"(if obs_174"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_174"
" 'enter-bind)))"
"(void)))"
"(values))))"
"(let-values(((vals_158)"
"(eval-for-syntaxes-binding"
" 'syntax-local-bind-syntaxes"
" input-s_156"
" ids_111"
"(let-values(((temp62_176)"
"(let-values(((v_179)"
" ctx_115))"
"(let-values(((the-struct_180)"
" v_179))"
"(if(expand-context/outer?"
" the-struct_180)"
"(let-values(((env65_181)"
" tmp-env_157)"
"((inner66_182)"
"(root-expand-context/outer-inner"
" v_179)))"
"(expand-context/outer1.1"
" inner66_182"
"(root-expand-context/outer-post-expansion"
" the-struct_180)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_180)"
"(root-expand-context/outer-frame-id"
" the-struct_180)"
"(expand-context/outer-context"
" the-struct_180)"
" env65_181"
"(expand-context/outer-scopes"
" the-struct_180)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_180)"
"(expand-context/outer-binding-layer"
" the-struct_180)"
"(expand-context/outer-reference-records"
" the-struct_180)"
"(expand-context/outer-only-immediate?"
" the-struct_180)"
"(expand-context/outer-need-eventually-defined"
" the-struct_180)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_180)"
"(expand-context/outer-current-use-scopes"
" the-struct_180)"
"(expand-context/outer-name"
" the-struct_180)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                \"expand-context/outer?\""
" the-struct_180)))))"
"((temp63_177)"
" 'expression)"
"((all-intdefs64_178)"
" all-intdefs_117))"
"(make-local-expand-context44.1"
" temp63_177"
" #t"
" all-intdefs64_178"
" #t"
" unsafe-undefined"
" #f"
" #f"
" #f"
" temp62_176)))))"
"(begin"
"(let-values(((obs_183)"
"(expand-context-observer"
" ctx_115)))"
"(if obs_183"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_183"
" 'exit-bind)))"
"(void)))"
" vals_158))))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_184) intdef-ids_118))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_184)))"
"((letrec-values(((for-loop_185)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((intdef-id_188)"
"(unsafe-car"
" lst_0))"
"((rest_189)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_190)"
"(let-values(((fold-var_191)"
" fold-var_0))"
"(let-values(((fold-var_192)"
"(let-values()"
"(cons"
"(let-values()"
"(local-variable1.1"
" intdef-id_188))"
" fold-var_191))))"
"(values"
" fold-var_192)))))"
"(if(not #f)"
"(for-loop_185"
" fold-var_190"
" rest_189)"
" fold-var_190)))"
" fold-var_0)))))"
" for-loop_185)"
" null"
" lst_184))))))))"
"(let-values(((env-mixins_121)"
"(internal-definition-context-env-mixins"
" intdef_113)))"
"(begin"
"(set-box!"
" env-mixins_121"
"(append"
"(reverse$1"
"(let-values(((lst_193) intdef-ids_118)"
"((lst_194) syms_119)"
"((lst_195) vals_120))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_193)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_194)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_195)))"
"((letrec-values(((for-loop_196)"
"(lambda(fold-var_0"
" lst_0"
" lst_1"
" lst_2)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)"
"(if(pair? lst_1)"
"(pair? lst_2)"
" #f)"
" #f)"
"(let-values(((intdef-id_201)"
"(unsafe-car"
" lst_0))"
"((rest_202)"
"(unsafe-cdr"
" lst_0))"
"((sym_203)"
"(unsafe-car"
" lst_1))"
"((rest_204)"
"(unsafe-cdr"
" lst_1))"
"((val_205)"
"(unsafe-car"
" lst_2))"
"((rest_206)"
"(unsafe-cdr"
" lst_2)))"
"(let-values(((fold-var_207)"
"(let-values(((fold-var_208)"
" fold-var_0))"
"(let-values(((fold-var_209)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_205"
" intdef-id_201"
" phase_116"
" ctx_115)"
"(env-mixin2.1"
" intdef-id_201"
" sym_203"
" val_205"
"(make-weak-hasheq))))"
" fold-var_208))))"
"(values"
" fold-var_209)))))"
"(if(not #f)"
"(for-loop_196"
" fold-var_207"
" rest_202"
" rest_204"
" rest_206)"
" fold-var_207)))"
" fold-var_0)))))"
" for-loop_196)"
" null"
" lst_193"
" lst_194"
" lst_195))))"
"(unbox env-mixins_121)))"
"(let-values(((obs_210)(expand-context-observer ctx_115)))"
"(if obs_210"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_210 'exit-local-bind)))"
"(void))))))))))))))))))))))))))"
"(case-lambda"
"((ids_0 s_0 intdef_0)"
"(begin 'syntax-local-bind-syntaxes(syntax-local-bind-syntaxes11_106 ids_0 s_0 intdef_0 '())))"
"((ids_0 s_0 intdef_0 extra-intdefs7_0)(syntax-local-bind-syntaxes11_106 ids_0 s_0 intdef_0 extra-intdefs7_0)))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_0)"
"(begin"
" 'internal-definition-context-binding-identifiers"
"(begin"
"(if(1/internal-definition-context? intdef_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"             \"internal-definition-context?\""
" intdef_0)))"
"(reverse$1"
"(let-values(((lst_219)(unbox(internal-definition-context-env-mixins intdef_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_219)))"
"((letrec-values(((for-loop_220)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((env-mixin_223)(unsafe-car lst_0))((rest_224)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_225)"
"(let-values(((fold-var_226) fold-var_0))"
"(let-values(((fold-var_227)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_223))"
" fold-var_226))))"
"(values fold-var_227)))))"
"(if(not #f)(for-loop_220 fold-var_225 rest_224) fold-var_225)))"
" fold-var_0)))))"
" for-loop_220)"
" null"
" lst_219))))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce16_228)"
"(lambda(intdef14_0 s15_0 mode13_0)"
"(begin"
" 'internal-definition-context-introduce16"
"(let-values(((intdef_232) intdef14_0))"
"(let-values(((s_233) s15_0))"
"(let-values(((mode_234) mode13_0))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_232)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                   \"internal-definition-context?\""
" intdef_232)))"
"(if(syntax?$1 s_233)"
"(void)"
"(let-values()"
"                                  (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_233)))"
"(let-values(((s67_236) s_233)"
"((intdef68_237) intdef_232)"
"((temp69_238) #t)"
"((temp70_239)"
"(let-values(((tmp_240) mode_234))"
"(if(equal? tmp_240 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_240 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_240 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                                       \"(or/c 'add 'remove 'flip)\""
" mode_234))))))))"
"(add-intdef-scopes24.1 temp70_239 temp69_238 s67_236 intdef68_237)))))))))))"
"(case-lambda"
"((intdef_0 s_0)"
"(begin 'internal-definition-context-introduce(internal-definition-context-introduce16_228 intdef_0 s_0 'flip)))"
"((intdef_0 s_0 mode13_0)(internal-definition-context-introduce16_228 intdef_0 s_0 mode13_0)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_0)"
"(begin"
" 'internal-definition-context-seal"
"(begin"
"(if(1/internal-definition-context? intdef_0)"
"(void)"
"(let-values()"
"            (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_0)))"
"(void)))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_0 intdef_0)"
"(begin"
" 'identifier-remove-from-definition-context"
"(begin"
"(if(identifier? id_0)"
"(void)"
"          (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_0)))"
"(if(let-values(((or-part_249)(1/internal-definition-context? intdef_0)))"
"(if or-part_249 or-part_249(if(list? intdef_0)(andmap2 1/internal-definition-context? intdef_0) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"             \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_0)))"
"(let-values(((x_250)"
"(let-values(((a_251) intdef_0))"
"(if(list? a_251)"
"(let-values()(reverse$1 a_251))"
"(if(not a_251)(let-values() null)(let-values()(list a_251)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_252)"
"(lambda(id_1 a_0)"
"(begin"
" 'for-loop"
"(if(pair? a_0)"
"(let-values(((intdef_255)(car a_0)))"
"(let-values(((id_256)"
"(let-values(((id_257) id_1))"
"(let-values(((id_258)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_255"
" id_257"
" 'remove))))"
"(values id_258)))))"
"(if(not #f)(for-loop_252 id_256(cdr a_0)) id_256)))"
" id_1)))))"
" for-loop_252)"
" id_0"
" x_250)))))))"
"(define-values"
"(intdefs?)"
"(lambda(x_0)"
"(begin"
"(let-values(((or-part_260)(1/internal-definition-context? x_0)))"
"(if or-part_260 or-part_260(if(list? x_0)(andmap2 1/internal-definition-context? x_0) #f))))))"
" (define-values (intdefs?-string) \"(or/c internal-definition-context? (listof internal-definition-context?))\")"
"(define-values"
"(intdefs-or-false?)"
"(lambda(x_0)(begin(let-values(((or-part_262)(not x_0)))(if or-part_262 or-part_262(intdefs? x_0))))))"
"(define-values"
"(intdefs-or-false?-string)"
"  \"(or/c internal-definition-context? (listof internal-definition-context?) #f)\")"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_0 intdefs_0)"
"(begin"
"(let-values(((x_265)"
"(let-values(((a_266) intdefs_0))"
"(if(list? a_266)"
"(let-values()(reverse$1 a_266))"
"(if(not a_266)(let-values() null)(let-values()(list a_266)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_267)"
"(lambda(env_1 a_0)"
"(begin"
" 'for-loop"
"(if(pair? a_0)"
"(let-values(((intdef_270)(car a_0)))"
"(let-values(((env_271)"
"(let-values(((env_272) env_1))"
"(let-values(((env_273)"
"(let-values()"
"(let-values(((parent-ctx_274)"
"(internal-definition-context-parent-ctx"
" intdef_270)))"
"(let-values(((parent-env_275)"
"(if parent-ctx_274"
"(add-intdef-bindings"
" env_272"
" parent-ctx_274)"
" env_272)))"
"(let-values(((env-mixins_276)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_270))))"
"((letrec-values(((loop_277)"
"(lambda(env_2 env-mixins_0)"
"(begin"
" 'loop"
"(if(null? env-mixins_0)"
"(let-values() env_2)"
"(let-values()"
"(let-values(((env-mixin_280)"
"(car"
" env-mixins_0)))"
"(let-values(((or-part_281)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_280)"
" env_2"
" #f)))"
"(if or-part_281"
" or-part_281"
"(let-values(((new-env_282)"
"(env-extend"
"(loop_277"
" env_2"
"(cdr"
" env-mixins_0))"
"(env-mixin-sym"
" env-mixin_280)"
"(env-mixin-value"
" env-mixin_280))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_280)"
" env_2"
" new-env_282)"
" new-env_282)))))))))))"
" loop_277)"
" parent-env_275"
" env-mixins_276)))))))"
"(values env_273)))))"
"(if(not #f)(for-loop_267 env_271(cdr a_0)) env_271)))"
" env_1)))))"
" for-loop_267)"
" env_0"
" x_265))))))"
"(define-values"
"(add-intdef-scopes24.1)"
"(lambda(action19_0 always?18_0 s22_0 intdefs23_0)"
"(begin"
" 'add-intdef-scopes24"
"(let-values(((s_287) s22_0))"
"(let-values(((intdefs_288) intdefs23_0))"
"(let-values(((always?_289) always?18_0))"
"(let-values(((action_290)(if(eq? action19_0 unsafe-undefined) add-scope action19_0)))"
"(let-values()"
"(let-values(((x_291)"
"(let-values(((a_292) intdefs_288))"
"(if(list? a_292)"
"(let-values()(reverse$1 a_292))"
"(if(not a_292)(let-values() null)(let-values()(list a_292)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_293)"
"(lambda(s_0 a_0)"
"(begin"
" 'for-loop"
"(if(pair? a_0)"
"(let-values(((intdef_296)(car a_0)))"
"(let-values(((s_297)"
"(let-values(((s_298) s_0))"
"(if(let-values(((or-part_299) always?_289))"
"(if or-part_299"
" or-part_299"
"(internal-definition-context-add-scope?"
" intdef_296)))"
"(let-values(((s_300) s_298))"
"(let-values(((s_301)"
"(let-values()"
"(action_290"
" s_300"
"(internal-definition-context-scope"
" intdef_296)))))"
"(values s_301)))"
" s_298))))"
"(if(not #f)(for-loop_293 s_297(cdr a_0)) s_297)))"
" s_0)))))"
" for-loop_293)"
" s_287"
" x_291)))))))))))"
"(define-values"
"(make-local-expand-context44.1)"
"(lambda(context27_0"
" extend-stops?31_0"
" intdefs29_0"
" keep-#%expression?34_0"
" phase28_0"
" stop-ids30_0"
" to-parsed-ok?32_0"
" track-to-be-defined?33_0"
" ctx43_0)"
"(begin"
" 'make-local-expand-context44"
"(let-values(((ctx_338) ctx43_0))"
"(let-values(((context_339) context27_0))"
"(let-values(((phase_340)(if(eq? phase28_0 unsafe-undefined)(expand-context-phase ctx_338) phase28_0)))"
"(let-values(((intdefs_341) intdefs29_0))"
"(let-values(((stop-ids_342) stop-ids30_0))"
"(let-values(((extend-stops?_343) extend-stops?31_0))"
"(let-values(((to-parsed-ok?_344) to-parsed-ok?32_0))"
"(let-values(((track-to-be-defined?_345) track-to-be-defined?33_0))"
"(let-values(((keep-#%expression?_346) keep-#%expression?34_0))"
"(let-values()"
"(let-values(((same-kind?_347)"
"(let-values(((or-part_350)(eq? context_339(expand-context-context ctx_338))))"
"(if or-part_350"
" or-part_350"
"(if(list? context_339)(list?(expand-context-context ctx_338)) #f)))))"
"(let-values(((all-stop-ids_348)"
"(if stop-ids_342"
"(if extend-stops?_343"
"(stop-ids->all-stop-ids stop-ids_342 phase_340)"
" stop-ids_342)"
" null)))"
"(let-values(((def-ctx-scopes_349)"
"(if(expand-context-def-ctx-scopes ctx_338)"
"(unbox(expand-context-def-ctx-scopes ctx_338))"
" null)))"
"(let-values(((v_351) ctx_338))"
"(let-values(((the-struct_352) v_351))"
"(if(expand-context/outer? the-struct_352)"
"(let-values(((context71_353) context_339)"
"((env72_354)"
"(add-intdef-bindings(expand-context-env ctx_338) intdefs_341))"
"((use-site-scopes73_355)"
"(if(let-values(((or-part_363)(eq? context_339 'module)))"
"(if or-part_363"
" or-part_363"
"(let-values(((or-part_364)"
"(eq? context_339 'module-begin)))"
"(if or-part_364 or-part_364(list? context_339)))))"
"(let-values(((or-part_365)"
"(root-expand-context-use-site-scopes ctx_338)))"
"(if or-part_365 or-part_365(box null)))"
" #f))"
"((frame-id74_356)"
"(let-values(((x_366)"
"(let-values(((a_367) intdefs_341))"
"(if(list? a_367)"
"(let-values()(reverse$1 a_367))"
"(if(not a_367)"
"(let-values() null)"
"(let-values()(list a_367)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_368)"
"(lambda(frame-id_0 a_0)"
"(begin"
" 'for-loop"
"(if(pair? a_0)"
"(let-values(((intdef_371)(car a_0)))"
"(let-values(((frame-id_372)"
"(let-values(((frame-id_373)"
" frame-id_0))"
"(let-values(((frame-id_374)"
"(let-values()"
"(let-values(((i-frame-id_375)"
"(internal-definition-context-frame-id"
" intdef_371)))"
"(if(if frame-id_373"
"(if i-frame-id_375"
"(not"
"(eq?"
" frame-id_373"
" i-frame-id_375))"
" #f)"
" #f)"
"(let-values()"
" 'all)"
"(let-values()"
"(let-values(((or-part_376)"
" frame-id_373))"
"(if or-part_376"
" or-part_376"
" i-frame-id_375))))))))"
"(values"
" frame-id_374)))))"
"(if(not #f)"
"(for-loop_368"
" frame-id_372"
"(cdr a_0))"
" frame-id_372)))"
" frame-id_0)))))"
" for-loop_368)"
"(root-expand-context-frame-id ctx_338)"
" x_366))))"
"((post-expansion75_357)"
"(let-values(((pe_377)"
"(if same-kind?_347"
"(if(let-values(((or-part_378)"
"(pair? context_339)))"
"(if or-part_378"
" or-part_378"
"(memq"
" context_339"
" '(module module-begin top-level))))"
"(root-expand-context-post-expansion ctx_338)"
" #f)"
" #f)))"
"(if(if intdefs_341(not(null? intdefs_341)) #f)"
"(let-values()"
"(lambda(s_0)"
"(begin"
" 'post-expansion75"
"(let-values(((temp81_380)"
"(apply-post-expansion pe_377 s_0))"
"((intdefs82_381) intdefs_341))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" #f"
" temp81_380"
" intdefs82_381)))))"
"(let-values() pe_377))))"
"((scopes76_358)"
"(append def-ctx-scopes_349(expand-context-scopes ctx_338)))"
"((only-immediate?77_359)(not stop-ids_342))"
"((current-introduction-scopes78_360) null)"
"((need-eventually-defined79_361)"
"(let-values(((ht_382)"
"(expand-context-need-eventually-defined ctx_338)))"
"(if track-to-be-defined?_345"
"(let-values() ht_382)"
"(if ht_382(let-values()(make-hasheqv))(let-values() #f)))))"
"((inner80_362)"
"(let-values(((the-struct_383)"
"(root-expand-context/outer-inner v_351)))"
"(if(expand-context/inner? the-struct_383)"
"(let-values(((to-parsed?83_384)"
"(if to-parsed-ok?_344"
"(expand-context-to-parsed? ctx_338)"
" #f))"
"((just-once?84_385) #f)"
"((in-local-expand?85_386) #t)"
"((keep-#%expression?86_387) keep-#%expression?_346)"
"((stops87_388)"
"(free-id-set phase_340 all-stop-ids_348)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_383)"
"(root-expand-context/inner-module-scopes the-struct_383)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_383)"
"(root-expand-context/inner-all-scopes-stx the-struct_383)"
"(root-expand-context/inner-defined-syms the-struct_383)"
"(root-expand-context/inner-counter the-struct_383)"
"(root-expand-context/inner-lift-key the-struct_383)"
" to-parsed?83_384"
"(expand-context/inner-phase the-struct_383)"
"(expand-context/inner-namespace the-struct_383)"
" just-once?84_385"
"(expand-context/inner-module-begin-k the-struct_383)"
"(expand-context/inner-allow-unbound? the-struct_383)"
" in-local-expand?85_386"
" keep-#%expression?86_387"
" stops87_388"
"(expand-context/inner-declared-submodule-names"
" the-struct_383)"
"(expand-context/inner-lifts the-struct_383)"
"(expand-context/inner-lift-envs the-struct_383)"
"(expand-context/inner-module-lifts the-struct_383)"
"(expand-context/inner-require-lifts the-struct_383)"
"(expand-context/inner-to-module-lifts the-struct_383)"
"(expand-context/inner-requires+provides the-struct_383)"
"(expand-context/inner-observer the-struct_383)"
"(expand-context/inner-for-serializable? the-struct_383)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_383)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"expand-context/inner?\""
" the-struct_383)))))"
"(expand-context/outer1.1"
" inner80_362"
" post-expansion75_357"
" use-site-scopes73_355"
" frame-id74_356"
" context71_353"
" env72_354"
" scopes76_358"
"(expand-context/outer-def-ctx-scopes the-struct_352)"
"(expand-context/outer-binding-layer the-struct_352)"
"(expand-context/outer-reference-records the-struct_352)"
" only-immediate?77_359"
" need-eventually-defined79_361"
" current-introduction-scopes78_360"
"(expand-context/outer-current-use-scopes the-struct_352)"
"(expand-context/outer-name the-struct_352)))"
"(raise-argument-error"
" 'struct-copy"
"                                       \"expand-context/outer?\""
" the-struct_352))))))))))))))))))))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_0 ctx_0)(begin(flip-scopes s_0(expand-context-current-introduction-scopes ctx_0)))))"
"(define-values"
"(flip-introduction-and-use-scopes)"
"(lambda(s_0 ctx_0)"
"(begin(flip-scopes(flip-introduction-scopes s_0 ctx_0)(expand-context-current-use-scopes ctx_0)))))"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()"
"(begin"
" 'syntax-transforming?"
"(if(let-values(((temp55_12) #t))(get-current-expand-context16.1 temp55_12 'unexpected)) #t #f))))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(begin"
" 'syntax-transforming-with-lifts?"
"(let-values(((ctx_13)(let-values(((temp56_15) #t))(get-current-expand-context16.1 temp56_15 'unexpected))))"
"(if ctx_13(if(expand-context-lifts ctx_13) #t #f) #f)))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(begin"
" 'syntax-transforming-module-expression?"
"(let-values(((ctx_16)(let-values(((temp57_18) #t))(get-current-expand-context16.1 temp57_18 'unexpected))))"
"(if ctx_16(if(expand-context-to-module-lifts ctx_16) #t #f) #f)))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(begin"
" 'syntax-local-transforming-module-provides?"
"(let-values(((ctx_19)(let-values(((temp58_21) #t))(get-current-expand-context16.1 temp58_21 'unexpected))))"
"(if ctx_19(if(expand-context-requires+provides ctx_19) #t #f) #f)))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(begin"
" 'syntax-local-context"
"(let-values(((ctx_22)"
"(let-values(((temp59_23) 'syntax-local-context))(get-current-expand-context16.1 #f temp59_23))))"
"(expand-context-context ctx_22)))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_0)"
"(begin"
" 'syntax-local-introduce"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_0)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_0)))"
"(values))))"
"(let-values(((ctx_26)"
"(let-values(((temp61_27) 'syntax-local-introduce))"
"(get-current-expand-context16.1 #f temp61_27))))"
"(flip-introduction-and-use-scopes s_0 ctx_26))))))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_0)"
"(begin"
" 'syntax-local-identifier-as-binding"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_0)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'syntax-local-identifier-as-binding \"identifier?\" id_0)))"
"(values))))"
"(let-values(((ctx_30)"
"(let-values(((temp63_31) 'syntax-local-identifier-as-binding))"
"(get-current-expand-context16.1 #f temp63_31))))"
"(remove-use-site-scopes id_0 ctx_30))))))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(begin"
" 'syntax-local-phase-level"
"(let-values(((ctx_32)(let-values(((temp64_34) #t))(get-current-expand-context16.1 temp64_34 'unexpected))))"
"(if ctx_32(expand-context-phase ctx_32) 0)))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(begin"
" 'syntax-local-name"
"(let-values()"
"(let-values()"
"(let-values(((ctx_36)"
"(let-values(((who66_38) 'syntax-local-name))(get-current-expand-context16.1 #f who66_38))))"
"(let-values(((id_37)(expand-context-name ctx_36)))"
"(if id_37(datum->syntax$1 #f(syntax-e$1 id_37) id_37) #f))))))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer2_39)"
"(lambda(as-use-site?1_0)"
"(begin"
" 'make-syntax-introducer2"
"(let-values(((as-use-site?_41) as-use-site?1_0))"
"(let-values()(do-make-syntax-introducer(new-scope(if as-use-site?_41 'use-site 'macro)))))))))"
"(case-lambda"
"(()(begin 'make-syntax-introducer(make-syntax-introducer2_39 #f)))"
"((as-use-site?1_0)(make-syntax-introducer2_39 as-use-site?1_0)))))"
"(define-values"
"(1/make-interned-syntax-introducer)"
"(lambda(sym-key_0)"
"(begin"
" 'make-interned-syntax-introducer"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym-key_0)"
"(void)"
"              (let-values () (raise-argument-error 'make-interned-syntax-introducer \"symbol?\" sym-key_0)))"
"(do-make-syntax-introducer(make-interned-scope sym-key_0))))))))"
"(define-values"
"(do-make-syntax-introducer)"
"(lambda(sc_0)"
"(begin"
"(let-values(((core70_46)"
"(lambda(s69_0 mode68_0)"
"(begin"
" 'core70"
"(let-values(((s_49) s69_0))"
"(let-values(((mode_50) mode68_0))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_49)"
"(void)"
"                                  (let-values () (raise-argument-error 'syntax-introducer \"syntax?\" s_49)))"
"(let-values(((tmp_51) mode_50))"
"(if(equal? tmp_51 'add)"
"(let-values()(add-scope s_49 sc_0))"
"(if(equal? tmp_51 'remove)"
"(let-values()(remove-scope s_49 sc_0))"
"(if(equal? tmp_51 'flip)"
"(let-values()(flip-scope s_49 sc_0))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                           \"(or/c 'add 'remove 'flip)\""
" mode_50))))))))))))))"
"(case-lambda((s_0)(core70_46 s_0 'flip))((s_0 mode68_0)(core70_46 s_0 mode68_0)))))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer7_55)"
"(lambda(ext-s5_0 base-s6_0 phase4_0)"
"(begin"
" 'make-syntax-delta-introducer7"
"(let-values(((ext-s_59) ext-s5_0))"
"(let-values(((base-s_60) base-s6_0))"
"(let-values(((phase_61)"
"(if(eq? phase4_0 unsafe-undefined)(1/syntax-local-phase-level) phase4_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_59)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                     \"syntax?\""
" ext-s_59)))"
"(values))))"
"(let-values((()"
"(begin"
"(if((lambda(x_0)"
"(let-values(((or-part_69)(not x_0)))"
"(if or-part_69 or-part_69(syntax?$1 x_0))))"
" base-s_60)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                       \"(or/c syntax? #f)\""
" base-s_60)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_61)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_61)))"
"(values))))"
"(let-values(((ext-scs_63)(syntax-scope-set ext-s_59 phase_61)))"
"(let-values(((base-scs_64)"
"(syntax-scope-set"
"(let-values(((or-part_70) base-s_60))"
"(if or-part_70 or-part_70 empty-syntax))"
" phase_61)))"
"(let-values(((use-base-scs_65)"
"(if(subset? base-scs_64 ext-scs_63)"
" base-scs_64"
"(let-values(((or-part_71)"
"(if(identifier? base-s_60)"
"(let-values(((base-s73_73) base-s_60)"
"((phase74_74) phase_61)"
"((temp75_75) #t))"
"(resolve40.1"
" #f"
" #f"
" null"
" temp75_75"
" base-s73_73"
" phase74_74))"
" #f)))"
"(if or-part_71 or-part_71(seteq))))))"
"(let-values(((delta-scs_66)"
"(set->list(set-subtract ext-scs_63 use-base-scs_65))))"
"(let-values(((maybe-taint_67)"
"(if(syntax-clean? ext-s_59) values syntax-taint$1)))"
"(let-values(((core78_76)"
"(lambda(s77_0 mode76_0)"
"(begin"
" 'core78"
"(let-values(((s_79) s77_0))"
"(let-values(((mode_80) mode76_0))"
"(let-values()"
"(maybe-taint_67"
"(let-values(((tmp_81) mode_80))"
"(if(equal? tmp_81 'add)"
"(let-values()"
"(add-scopes s_79 delta-scs_66))"
"(if(equal? tmp_81 'remove)"
"(let-values()"
"(remove-scopes s_79 delta-scs_66))"
"(if(equal? tmp_81 'flip)"
"(let-values()"
"(flip-scopes s_79 delta-scs_66))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                                    \"(or/c 'add 'remove 'flip)\""
" mode_80))))))))))))))"
"(case-lambda"
"((s_0)(core78_76 s_0 'add))"
"((s_0 mode76_0)(core78_76 s_0 mode76_0))))))))))))))))))))))"
"(case-lambda"
"((ext-s_0 base-s_0)"
"(begin 'make-syntax-delta-introducer(make-syntax-delta-introducer7_55 ext-s_0 base-s_0 unsafe-undefined)))"
"((ext-s_0 base-s_0 phase4_0)(make-syntax-delta-introducer7_55 ext-s_0 base-s_0 phase4_0)))))"
"(define-values"
"(1/syntax-local-make-delta-introducer)"
"(lambda(id-stx_0)"
"(begin"
" 'syntax-local-make-delta-introducer"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id-stx_0)"
"(void)"
"              (let-values () (raise-argument-error 'syntax-local-make-delta-introducer \"identifier?\" id-stx_0)))"
"(raise"
"(exn:fail:unsupported"
"              \"syntax-local-make-delta-introducer: not supported anymore\""
"(current-continuation-marks)))))))))"
"(define-values"
"(do-syntax-local-value15.1)"
"(lambda(immediate?9_0 who11_0 id12_0 intdefs13_0 failure-thunk14_0)"
"(begin"
" 'do-syntax-local-value15"
"(let-values(((who_107) who11_0))"
"(let-values(((id_108) id12_0))"
"(let-values(((intdefs_109) intdefs13_0))"
"(let-values(((failure-thunk_110) failure-thunk14_0))"
"(let-values(((immediate?_111) immediate?9_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_108)"
"(void)"
"                                    (let-values () (raise-argument-error who_107 \"identifier?\" id_108)))"
"(values))))"
"(let-values((()"
"(begin"
"(if((lambda(x_0)"
"(let-values(((or-part_116)(not x_0)))"
"(if or-part_116"
" or-part_116"
"((lambda(p_0)"
"(if(procedure? p_0)(procedure-arity-includes? p_0 0) #f))"
" x_0))))"
" failure-thunk_110)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_107"
"                                         \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_110)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(intdefs-or-false? intdefs_109)"
"(void)"
"(let-values()"
"(raise-argument-error who_107 intdefs-or-false?-string intdefs_109)))"
"(values))))"
"(let-values(((current-ctx_112)"
"(let-values(((who81_118) who_107))"
"(get-current-expand-context16.1 #f who81_118))))"
"(let-values(((ctx_113)"
"(if intdefs_109"
"(let-values(((v_119) current-ctx_112))"
"(let-values(((the-struct_120) v_119))"
"(if(expand-context/outer? the-struct_120)"
"(let-values(((env82_121)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_112)"
" intdefs_109))"
"((inner83_122)(root-expand-context/outer-inner v_119)))"
"(expand-context/outer1.1"
" inner83_122"
"(root-expand-context/outer-post-expansion the-struct_120)"
"(root-expand-context/outer-use-site-scopes the-struct_120)"
"(root-expand-context/outer-frame-id the-struct_120)"
"(expand-context/outer-context the-struct_120)"
" env82_121"
"(expand-context/outer-scopes the-struct_120)"
"(expand-context/outer-def-ctx-scopes the-struct_120)"
"(expand-context/outer-binding-layer the-struct_120)"
"(expand-context/outer-reference-records the-struct_120)"
"(expand-context/outer-only-immediate? the-struct_120)"
"(expand-context/outer-need-eventually-defined the-struct_120)"
"(expand-context/outer-current-introduction-scopes the-struct_120)"
"(expand-context/outer-current-use-scopes the-struct_120)"
"(expand-context/outer-name the-struct_120)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_120))))"
" current-ctx_112)))"
"(let-values((()"
"(begin"
"(let-values(((obs_123)(expand-context-observer ctx_113)))"
"(if obs_123"
"(let-values()"
"(let-values()(call-expand-observe obs_123 'local-value id_108)))"
"(void)))"
"(values))))"
"(let-values(((phase_114)(expand-context-phase ctx_113)))"
"((letrec-values(((loop_124)"
"(lambda(id_0)"
"(begin"
" 'loop"
"(let-values(((b_126)"
"(if immediate?_111"
"(let-values(((id84_128) id_0)"
"((phase85_129) phase_114)"
"((temp86_130) #t))"
"(resolve+shift28.1"
" #f"
" #f"
" null"
" temp86_130"
" #f"
" id84_128"
" phase85_129))"
"(resolve+shift/extra-inspector"
" id_0"
" phase_114"
"(expand-context-namespace ctx_113)))))"
"(begin"
"(let-values(((obs_131)(expand-context-observer ctx_113)))"
"(if obs_131"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_131 'resolve id_0)))"
"(void)))"
"(if(not b_126)"
"(let-values()"
"(begin"
"(let-values(((obs_132)"
"(expand-context-observer ctx_113)))"
"(if obs_132"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_132"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_110"
"(failure-thunk_110)"
"                                                                  (error who_107 \"unbound identifier: ~v\" id_0))))"
"(let-values()"
"(let-values(((v_133"
" primitive?_134"
" insp_135"
" protected?_136)"
"(let-values(((b87_138) b_126)"
"((ctx88_139) ctx_113)"
"((id89_140) id_0)"
"((temp90_141) #t))"
"(lookup62.1"
" #f"
" temp90_141"
" b87_138"
" ctx88_139"
" id89_140))))"
"(if(let-values(((or-part_142)(variable? v_133)))"
"(if or-part_142 or-part_142(core-form? v_133)))"
"(let-values()"
"(begin"
"(let-values(((obs_143)"
"(expand-context-observer ctx_113)))"
"(if obs_143"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_143"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_110"
"(failure-thunk_110)"
"(error"
" who_107"
"                                                                         \"identifier is not bound to syntax: ~v\""
" id_0))))"
"(let-values()"
"(begin"
"(let-values(((obs_144)"
"(expand-context-observer ctx_113)))"
"(if obs_144"
"(let-values()"
"(if(not"
"(if(1/rename-transformer? v_133)"
"(not immediate?_111)"
" #f))"
"(let-values()"
"(call-expand-observe"
" obs_144"
" 'local-value-result"
" #t))"
"(void)))"
"(void)))"
"(if(1/rename-transformer? v_133)"
"(let-values()"
"(if immediate?_111"
"(values"
" v_133"
"(1/rename-transformer-target v_133))"
"(loop_124"
"(1/rename-transformer-target v_133))))"
"(if immediate?_111"
"(let-values()(values v_133 #f))"
"(let-values() v_133)))))))))))))))"
" loop_124)"
"(flip-introduction-scopes id_108 ctx_113))))))))))))))))))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value21_161)"
"(lambda(id20_0 failure-thunk18_0 intdef19_0)"
"(begin"
" 'syntax-local-value21"
"(let-values(((id_165) id20_0))"
"(let-values(((failure-thunk_166) failure-thunk18_0))"
"(let-values(((intdef_167) intdef19_0))"
"(let-values()"
"(let-values(((temp91_169) 'syntax-local-value)"
"((temp92_170) #f)"
"((id93_171) id_165)"
"((intdef94_172) intdef_167)"
"((failure-thunk95_173) failure-thunk_166))"
"(do-syntax-local-value15.1"
" temp92_170"
" temp91_169"
" id93_171"
" intdef94_172"
" failure-thunk95_173))))))))))"
"(case-lambda"
"((id_0)(begin 'syntax-local-value(syntax-local-value21_161 id_0 #f #f)))"
"((id_0 failure-thunk_0 intdef19_0)(syntax-local-value21_161 id_0 failure-thunk_0 intdef19_0))"
"((id_0 failure-thunk18_0)(syntax-local-value21_161 id_0 failure-thunk18_0 #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate26_180)"
"(lambda(id25_0 failure-thunk23_0 intdef24_0)"
"(begin"
" 'syntax-local-value/immediate26"
"(let-values(((id_184) id25_0))"
"(let-values(((failure-thunk_185) failure-thunk23_0))"
"(let-values(((intdef_186) intdef24_0))"
"(let-values()"
"(let-values(((temp96_188) 'syntax-local-value/immediate)"
"((temp97_189) #t)"
"((id98_190) id_184)"
"((intdef99_191) intdef_186)"
"((failure-thunk100_192) failure-thunk_185))"
"(do-syntax-local-value15.1"
" temp97_189"
" temp96_188"
" id98_190"
" intdef99_191"
" failure-thunk100_192))))))))))"
"(case-lambda"
"((id_0)(begin 'syntax-local-value/immediate(syntax-local-value/immediate26_180 id_0 #f #f)))"
"((id_0 failure-thunk_0 intdef24_0)(syntax-local-value/immediate26_180 id_0 failure-thunk_0 intdef24_0))"
"((id_0 failure-thunk23_0)(syntax-local-value/immediate26_180 id_0 failure-thunk23_0 #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_0 n_0 s_0)"
"(begin"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error who_0 \"syntax?\" s_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_0)"
"(void)"
"                          (let-values () (raise-argument-error who_0 \"exact-nonnegative-integer?\" n_0)))"
"(values))))"
"(let-values(((ctx_202)(let-values(((who101_206) who_0))(get-current-expand-context16.1 #f who101_206))))"
"(let-values(((lifts_203)(expand-context-lifts ctx_202)))"
"(let-values((()"
"(begin"
"                              (if lifts_203 (void) (let-values () (raise-arguments-error who_0 \"no lift target\")))"
"(values))))"
"(let-values(((counter_204)(root-expand-context-counter ctx_202)))"
"(let-values(((ids_205)"
"(reverse$1"
"(let-values(((start_207) 0)((end_208) n_0)((inc_209) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_207 end_208 inc_209)))"
"((letrec-values(((for-loop_210)"
"(lambda(fold-var_0 pos_0)"
"(begin"
" 'for-loop"
"(if(< pos_0 end_208)"
"(let-values()"
"(let-values(((fold-var_214)"
"(let-values(((fold-var_215) fold-var_0))"
"(let-values(((fold-var_216)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_204"
"(add1"
"(unbox"
" counter_204)))"
"(values))))"
"(let-values(((name_217)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                    \"lifted/~a\""
"(unbox"
" counter_204)))))"
"(add-scope"
"(datum->syntax$1"
" #f"
" name_217)"
"(new-scope"
" 'macro)))))"
" fold-var_215))))"
"(values fold-var_216)))))"
"(if(not #f)"
"(for-loop_210 fold-var_214(+ pos_0 inc_209))"
" fold-var_214)))"
" fold-var_0)))))"
" for-loop_210)"
" null"
" start_207))))))"
"(begin"
"(let-values(((obs_218)(expand-context-observer ctx_202)))"
"(if obs_218"
"(let-values()(let-values()(call-expand-observe obs_218 'lift-expr ids_205 s_0)))"
"(void)))"
"(map2"
"(lambda(id_0)(flip-introduction-scopes id_0 ctx_202))"
"(add-lifted!"
" lifts_203"
" ids_205"
"(flip-introduction-scopes s_0 ctx_202)"
"(expand-context-phase ctx_202))))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_0)"
"(begin"
" 'syntax-local-lift-expression"
"(let-values()(let-values()(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_0)))))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_0 s_0)"
"(begin"
" 'syntax-local-lift-values-expression"
"(let-values()(let-values()(do-lift-values-expression 'syntax-local-lift-values-expression n_0 s_0))))))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(begin"
" 'syntax-local-lift-context"
"(let-values()"
"(let-values()"
"(let-values(((ctx_226)"
"(let-values(((who105_227) 'syntax-local-lift-context))"
"(get-current-expand-context16.1 #f who105_227))))"
"(root-expand-context-lift-key ctx_226)))))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_0)"
"(begin"
" 'syntax-local-lift-module"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_0)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_0)))"
"(values))))"
"(let-values(((ctx_230)"
"(let-values(((who107_232) 'syntax-local-lift-module))"
"(get-current-expand-context16.1 #f who107_232))))"
"(let-values(((phase_231)(expand-context-phase ctx_230)))"
"(begin"
"(let-values(((tmp_233)(core-form-sym s_0 phase_231)))"
"(if(if(equal? tmp_233 'module) #t(equal? tmp_233 'module*))"
"(let-values()"
"(let-values(((lifts_234)(expand-context-module-lifts ctx_230)))"
"(begin"
"(if lifts_234"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                                 \"not currently transforming within a module declaration or top level\""
"                                 \"form to lift\""
" s_0)))"
"(add-lifted-module! lifts_234(flip-introduction-scopes s_0 ctx_230) phase_231))))"
"(let-values()"
"                        (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_0))))"
"(let-values(((obs_235)(expand-context-observer ctx_230)))"
"(if obs_235"
"(let-values()(let-values()(call-expand-observe obs_235 'lift-statement s_0)))"
"(void))))))))))))"
"(define-values"
"(do-local-lift-to-module48.1)"
"(lambda(add-lifted!32_0"
" get-lift-ctx31_0"
" get-wrt-phase33_0"
" intro?29_0"
" more-checks30_0"
" no-target-msg28_0"
" post-wrap36_0"
" pre-wrap34_0"
" shift-wrap35_0"
" who46_0"
" s47_0)"
"(begin"
" 'do-local-lift-to-module48"
"(let-values(((who_253) who46_0))"
"(let-values(((s_254) s47_0))"
"(let-values(((no-target-msg_255) no-target-msg28_0))"
"(let-values(((intro?_256) intro?29_0))"
"(let-values(((more-checks_257)(if(eq? more-checks30_0 unsafe-undefined) void more-checks30_0)))"
"(let-values(((get-lift-ctx_258) get-lift-ctx31_0))"
"(let-values(((add-lifted!_259) add-lifted!32_0))"
"(let-values(((get-wrt-phase_260) get-wrt-phase33_0))"
"(let-values(((pre-wrap_261)"
"(if(eq? pre-wrap34_0 unsafe-undefined)"
"(lambda(s_0 phase_0 lift-ctx_0)(begin 'pre-wrap s_0))"
" pre-wrap34_0)))"
"(let-values(((shift-wrap_265)"
"(if(eq? shift-wrap35_0 unsafe-undefined)"
"(lambda(s_0 phase_0 lift-ctx_0)(begin 'shift-wrap s_0))"
" shift-wrap35_0)))"
"(let-values(((post-wrap_269)"
"(if(eq? post-wrap36_0 unsafe-undefined)"
"(lambda(s_0 phase_0 lift-ctx_0)(begin 'post-wrap s_0))"
" post-wrap36_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_254)"
"(void)"
"                                                (let-values () (raise-argument-error who_253 \"syntax?\" s_254)))"
"(values))))"
"(let-values((()(begin(more-checks_257)(values))))"
"(let-values(((ctx_273)"
"(let-values(((who108_281) who_253))"
"(get-current-expand-context16.1 #f who108_281))))"
"(let-values(((lift-ctx_274)(get-lift-ctx_258 ctx_273)))"
"(let-values((()"
"(begin"
"(if lift-ctx_274"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_253"
" no-target-msg_255"
"                                                           \"form to lift\""
" s_254)))"
"(values))))"
"(let-values(((phase_275)(expand-context-phase ctx_273)))"
"(let-values(((wrt-phase_276)(get-wrt-phase_260 lift-ctx_274)))"
"(let-values(((added-s_277)"
"(if intro?_256"
"(flip-introduction-scopes s_254 ctx_273)"
" s_254)))"
"(let-values(((pre-s_278)"
"(pre-wrap_261 added-s_277 phase_275 lift-ctx_274)))"
"(let-values(((shift-s_279)"
"(let-values(((start_282) phase_275)"
"((end_283) wrt-phase_276)"
"((inc_284) -1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range start_282 end_283 inc_284)))"
"((letrec-values(((for-loop_285)"
"(lambda(s_0 pos_0)"
"(begin"
" 'for-loop"
"(if(> pos_0 end_283)"
"(let-values(((phase_288)"
" pos_0))"
"(let-values(((s_289)"
"(let-values(((s_290)"
" s_0))"
"(let-values(((s_291)"
"(let-values()"
"(shift-wrap_265"
" s_290"
"(sub1"
" phase_288)"
" lift-ctx_274))))"
"(values"
" s_291)))))"
"(if(not #f)"
"(for-loop_285"
" s_289"
"(+ pos_0 inc_284))"
" s_289)))"
" s_0)))))"
" for-loop_285)"
" pre-s_278"
" start_282)))))"
"(let-values(((post-s_280)"
"(post-wrap_269 shift-s_279 wrt-phase_276 lift-ctx_274)))"
"(begin"
"(add-lifted!_259 lift-ctx_274 post-s_280 wrt-phase_276)"
"(values ctx_273 post-s_280))))))))))))))))))))))))))))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_0 use-s_0)"
"(begin"
" 'syntax-local-lift-require"
"(let-values()"
"(let-values()"
"(let-values(((sc_335)(new-scope 'lifted-require)))"
"(let-values(((ctx_336 added-s_337)"
"(let-values(((who110_340) 'syntax-local-lift-require)"
"((temp111_341)(datum->syntax$1 #f s_0))"
"                                       ((temp112_342) \"could not find target context\")"
"((temp113_343) #f)"
"((temp114_344)"
"(lambda()"
"(if(syntax?$1 use-s_0)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_0)))))"
"((expand-context-require-lifts115_345) expand-context-require-lifts)"
"((require-lift-context-wrt-phase116_346) require-lift-context-wrt-phase)"
"((add-lifted-require!117_347) add-lifted-require!)"
"((temp118_348)"
"(lambda(s_1 phase_0 require-lift-ctx_0)(require-spec-shift-for-syntax s_1)))"
"((temp119_349)"
"(lambda(s_1 phase_0 require-lift-ctx_0)"
"(wrap-form '#%require(add-scope s_1 sc_335) phase_0))))"
"(do-local-lift-to-module48.1"
" add-lifted-require!117_347"
" expand-context-require-lifts115_345"
" require-lift-context-wrt-phase116_346"
" temp113_343"
" temp114_344"
" temp112_342"
" temp119_349"
" unsafe-undefined"
" temp118_348"
" who110_340"
" temp111_341))))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
"(expand-context-namespace ctx_336)"
"(expand-context-phase ctx_336))"
"(values))))"
"(let-values(((result-s_338)(add-scope use-s_0 sc_335)))"
"(begin"
"(let-values(((obs_356)(expand-context-observer ctx_336)))"
"(if obs_356"
"(let-values()"
"(let-values()(call-expand-observe obs_356 'lift-require added-s_337 use-s_0 result-s_338)))"
"(void)))"
" result-s_338))))))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_0)"
"(begin"
" 'syntax-local-lift-provide"
"(let-values()"
"(let-values()"
"(let-values(((ctx_359 result-s_360)"
"(let-values(((who121_362) 'syntax-local-lift-provide)"
"((s122_363) s_0)"
"                                     ((temp123_364) \"not expanding in a module run-time body\")"
"((expand-context-to-module-lifts124_365) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase125_366) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!126_367) add-lifted-to-module-provide!)"
"((temp127_368)"
"(lambda(s_1 phase_0 to-module-lift-ctx_0)(wrap-form 'for-syntax s_1 #f)))"
"((temp128_369)"
"(lambda(s_1 phase_0 to-module-lift-ctx_0)(wrap-form '#%provide s_1 phase_0))))"
"(do-local-lift-to-module48.1"
" add-lifted-to-module-provide!126_367"
" expand-context-to-module-lifts124_365"
" to-module-lift-context-wrt-phase125_366"
" #t"
" unsafe-undefined"
" temp123_364"
" temp128_369"
" unsafe-undefined"
" temp127_368"
" who121_362"
" s122_363))))"
"(let-values(((obs_376)(expand-context-observer ctx_359)))"
"(if obs_376"
"(let-values()(let-values()(call-expand-observe obs_376 'lift-provide result-s_360)))"
"(void)))))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_0)"
"(begin"
" 'syntax-local-lift-module-end-declaration"
"(let-values()"
"(let-values()"
"(let-values(((ctx_379 also-s_380)"
"(let-values(((who130_382) 'syntax-local-lift-module-end-declaration)"
"((s131_383) s_0)"
"((temp132_384)"
"                                      \"not currently transforming an expression within a module declaration\")"
"((expand-context-to-module-lifts133_385) expand-context-to-module-lifts)"
"((temp134_386)(lambda(lift-ctx_0) 0))"
"((add-lifted-to-module-end!135_387) add-lifted-to-module-end!)"
"((temp136_388)"
"(lambda(orig-s_0 phase_0 to-module-lift-ctx_0)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_0)"
"(wrap-form '#%expression orig-s_0 phase_0)"
" orig-s_0)))"
"((temp137_389)"
"(lambda(s_1 phase_0 to-module-lift-ctx_0)"
"(wrap-form 'begin-for-syntax s_1 phase_0))))"
"(do-local-lift-to-module48.1"
" add-lifted-to-module-end!135_387"
" expand-context-to-module-lifts133_385"
" temp134_386"
" #t"
" unsafe-undefined"
" temp132_384"
" unsafe-undefined"
" temp136_388"
" temp137_389"
" who130_382"
" s131_383))))"
"(let-values(((obs_397)(expand-context-observer ctx_379)))"
"(if obs_397"
"(let-values()(let-values()(call-expand-observe obs_397 'lift-statement s_0)))"
"(void)))))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_0 s_0 phase_0)"
"(begin"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_0(syntax-shift-phase-level$1 core-stx phase_0) #f) sym_0) s_0)))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(begin"
" 'syntax-local-module-defined-identifiers"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                               \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_402)"
"(let-values(((temp139_403) 'syntax-local-module-defined-identifiers))"
"(get-current-expand-context16.1 #f temp139_403))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_402))))))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_0 phase-level_0)"
"(begin"
" 'syntax-local-module-required-identifiers"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_411)(not mod-path_0)))"
"(if or-part_411 or-part_411(1/module-path? mod-path_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                               \"(or/c module-path? #f)\""
" mod-path_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_412)(eq? phase-level_0 #t)))"
"(if or-part_412 or-part_412(phase? phase-level_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                                 (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                                   \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_407)"
"(let-values(((temp141_413) 'syntax-local-module-required-identifiers))"
"(get-current-expand-context16.1 #f temp141_413))))"
"(let-values(((requires+provides_408)(expand-context-requires+provides ctx_407)))"
"(let-values(((mpi_409)(if mod-path_0(module-path->mpi/context mod-path_0 ctx_407) #f)))"
"(let-values(((requireds_410)"
"(extract-all-module-requires"
" requires+provides_408"
" mpi_409"
"(if(eq? phase-level_0 #t) 'all phase-level_0))))"
"(if requireds_410"
"(reverse$1"
"(let-values(((ht_414)(requireds->phase-ht requireds_410)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_414)))"
"((letrec-values(((for-loop_415)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_418 ids_419)"
"(hash-iterate-key+value ht_414 i_0)))"
"(let-values(((fold-var_420)"
"(let-values(((fold-var_421) fold-var_0))"
"(let-values(((fold-var_422)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_418 ids_419))"
" fold-var_421))))"
"(values fold-var_422)))))"
"(if(not #f)"
"(for-loop_415 fold-var_420(hash-iterate-next ht_414 i_0))"
" fold-var_420)))"
" fold-var_0)))))"
" for-loop_415)"
" null"
"(hash-iterate-first ht_414)))))"
" #f)))))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_0)"
"(begin"
"(let-values(((lst_424) requireds_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_424)))"
"((letrec-values(((for-loop_425)"
"(lambda(ht_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((r_428)(unsafe-car lst_0))((rest_429)(unsafe-cdr lst_0)))"
"(let-values(((ht_430)"
"(let-values(((ht_431) ht_0))"
"(let-values(((ht_432)"
"(let-values()"
"(hash-update"
" ht_431"
"(required-phase r_428)"
"(lambda(l_0)(cons(required-id r_428) l_0))"
" null))))"
"(values ht_432)))))"
"(if(not #f)(for-loop_425 ht_430 rest_429) ht_430)))"
" ht_0)))))"
" for-loop_425)"
"(hasheqv)"
" lst_424))))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_0)"
"(begin"
" 'syntax-local-module-exports"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_440)(1/module-path? mod-path_0)))"
"(if or-part_440"
" or-part_440"
"(if(syntax?$1 mod-path_0)(1/module-path?(syntax->datum$1 mod-path_0)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                                \"(or/c module-path?\\n\""
"                                \"      (and/c syntax?\\n\""
"                                \"             (lambda (stx)\\n\""
"                                \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_0)))"
"(values))))"
"(let-values(((ctx_436)"
"(let-values(((temp143_441) 'syntax-local-module-exports))"
"(get-current-expand-context16.1 #f temp143_441))))"
"(let-values(((ns_437)(expand-context-namespace ctx_436)))"
"(let-values(((mod-name_438)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_0)(syntax->datum$1 mod-path_0) mod-path_0)"
" ctx_436)"
" #t)))"
"(let-values(((m_439)(namespace->module ns_437 mod-name_438)))"
"(begin"
"(if m_439"
"(void)"
"(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_438)))"
"(reverse$1"
"(let-values(((ht_442)(module-provides m_439)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_442)))"
"((letrec-values(((for-loop_443)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_446 syms_447)"
"(hash-iterate-key+value ht_442 i_0)))"
"(let-values(((fold-var_448)"
"(let-values(((fold-var_449) fold-var_0))"
"(let-values(((fold-var_450)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_446"
"(reverse$1"
"(let-values(((ht_451)"
" syms_447))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-keys"
" ht_451)))"
"((letrec-values(((for-loop_452)"
"(lambda(fold-var_1"
" i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((sym_455)"
"(hash-iterate-key"
" ht_451"
" i_1)))"
"(let-values(((fold-var_456)"
"(let-values(((fold-var_457)"
" fold-var_1))"
"(let-values(((fold-var_458)"
"(let-values()"
"(cons"
"(let-values()"
" sym_455)"
" fold-var_457))))"
"(values"
" fold-var_458)))))"
"(if(not"
" #f)"
"(for-loop_452"
" fold-var_456"
"(hash-iterate-next"
" ht_451"
" i_1))"
" fold-var_456)))"
" fold-var_1)))))"
" for-loop_452)"
" null"
"(hash-iterate-first"
" ht_451)))))))"
" fold-var_449))))"
"(values fold-var_450)))))"
"(if(not #f)"
"(for-loop_443 fold-var_448(hash-iterate-next ht_442 i_0))"
" fold-var_448)))"
" fold-var_0)))))"
" for-loop_443)"
" null"
"(hash-iterate-first ht_442))))))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(begin"
" 'syntax-local-submodules"
"(let-values()"
"(let-values()"
"(let-values(((ctx_460)"
"(let-values(((who145_462) 'syntax-local-submodules))"
"(get-current-expand-context16.1 #f who145_462))))"
"(let-values(((submods_461)(expand-context-declared-submodule-names ctx_460)))"
"(reverse$1"
"(let-values(((ht_463) submods_461))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_463)))"
"((letrec-values(((for-loop_464)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((name_467 kind_468)(hash-iterate-key+value ht_463 i_0)))"
"(let-values(((fold-var_469)"
"(let-values(((fold-var_470) fold-var_0))"
"(if(eq? kind_468 'module)"
"(let-values(((fold-var_471) fold-var_470))"
"(let-values(((fold-var_472)"
"(let-values()"
"(cons"
"(let-values() name_467)"
" fold-var_471))))"
"(values fold-var_472)))"
" fold-var_470))))"
"(if(not #f)"
"(for-loop_464 fold-var_469(hash-iterate-next ht_463 i_0))"
" fold-var_469)))"
" fold-var_0)))))"
" for-loop_464)"
" null"
"(hash-iterate-first ht_463))))))))))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower53_473)"
"(lambda(id52_0 only-generated?51_0)"
"(begin"
" 'syntax-local-get-shadower53"
"(let-values(((id_476) id52_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_476)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-get-shadower"
"                                                   \"identifier?\""
" id_476)))"
"(values))))"
"(let-values(((ctx_479)"
"(let-values(((who147_481) 'syntax-local-get-shadower))"
"(get-current-expand-context16.1 #f who147_481))))"
"(let-values(((new-id_480)(add-scopes id_476(expand-context-scopes ctx_479))))"
"(if(syntax-clean? id_476) new-id_480(syntax-taint$1 new-id_480))))))))))))))"
"(case-lambda"
"((id_0)(begin 'syntax-local-get-shadower(syntax-local-get-shadower53_473 id_0 #f)))"
"((id_0 only-generated?51_0)(syntax-local-get-shadower53_473 id_0 only-generated?51_0)))))"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_0 srcloc-accessor_0)"
"(begin"
"(lambda(s_0)"
"(let-values((()"
"(begin"
"                        (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error who_0 \"syntax?\" s_0)))"
"(values))))"
"(let-values(((srcloc_4)(syntax-srcloc s_0)))(if srcloc_4(srcloc-accessor_0 srcloc_4) #f)))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_0)"
"(begin"
"(let-values(((or-part_6)(if(list? v_0)(if(=(length v_0) 5)(srcloc-vector?(list->vector v_0)) #f) #f)))"
"(if or-part_6 or-part_6(if(vector? v_0)(if(=(vector-length v_0) 5)(srcloc-vector? v_0) #f) #f))))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_0)"
"(begin"
"(if(let-values(((or-part_8)(not(vector-ref v_0 1))))"
"(if or-part_8 or-part_8(exact-positive-integer?(vector-ref v_0 1))))"
"(if(let-values(((or-part_9)(not(vector-ref v_0 2))))"
"(if or-part_9 or-part_9(exact-nonnegative-integer?(vector-ref v_0 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_0 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_0 3))))"
"(let-values(((or-part_11)(not(vector-ref v_0 4))))"
"(if or-part_11 or-part_11(exact-nonnegative-integer?(vector-ref v_0 4))))"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_0)"
"(begin"
"(if(srcloc? v_0)"
"(let-values()"
"(let-values(((the-struct_13) empty-syntax))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((srcloc1_14) v_0))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
"(syntax-scope-propagations+tamper the-struct_13)"
"(syntax-mpi-shifts the-struct_13)"
" srcloc1_14"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))"
"(if(pair? v_0)"
"(let-values()(to-srcloc-stx(list->vector v_0)))"
"(if(vector? v_0)"
"(let-values()"
"(let-values(((the-struct_15) empty-syntax))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((srcloc2_16)"
"(srcloc"
"(vector-ref v_0 0)"
"(vector-ref v_0 1)"
"(vector-ref v_0 2)"
"(vector-ref v_0 3)"
"(vector-ref v_0 4))))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
"(syntax-scope-propagations+tamper the-struct_15)"
"(syntax-mpi-shifts the-struct_15)"
" srcloc2_16"
"(syntax-props the-struct_15)"
"(syntax-inspector the-struct_15)))"
"                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_15))))"
"(let-values() v_0)))))))"
"(define-values"
"(1/syntax-e)"
"(lambda(s_0)"
"(begin"
" 'syntax-e"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_0)))"
"(syntax-e$1 s_0)))))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_0)"
"(begin"
" 'syntax->datum"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_0)))"
"(syntax->datum$1 s_0)))))))"
"(define-values(maybe-syntax->datum)(lambda(s_0)(begin(if(syntax?$1 s_0)(syntax->datum$1 s_0) s_0))))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax6_6)"
"(lambda(stx-c4_0 s5_0 stx-l1_0 stx-p2_0 ignored3_0)"
"(begin"
" 'datum->syntax6"
"(let-values(((stx-c_12) stx-c4_0))"
"(let-values(((s_13) s5_0))"
"(let-values(((stx-l_14) stx-l1_0))"
"(let-values(((stx-p_15) stx-p2_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(let-values(((or-part_18)(not stx-c_12)))"
"(if or-part_18 or-part_18(syntax?$1 stx-c_12)))"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_12)))"
"(if(let-values(((or-part_19)(not stx-l_14)))"
"(if or-part_19"
" or-part_19"
"(let-values(((or-part_20)(syntax?$1 stx-l_14)))"
"(if or-part_20 or-part_20(encoded-srcloc? stx-l_14)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                            \"(or #f syntax?\\n\""
"                                            \"       (list/c any/c\\n\""
"                                            \"               (or/c exact-positive-integer? #f)\\n\""
"                                            \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                            \"               (or/c exact-positive-integer? #f)\\n\""
"                                            \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                            \"       (vector/c any/c\\n\""
"                                            \"                 (or/c exact-positive-integer? #f)\\n\""
"                                            \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                            \"                 (or/c exact-positive-integer? #f)\\n\""
"                                            \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_14)))"
"(if(let-values(((or-part_21)(not stx-p_15)))"
"(if or-part_21 or-part_21(syntax?$1 stx-p_15)))"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_15)))"
"(datum->syntax$1 stx-c_12 s_13(to-srcloc-stx stx-l_14) stx-p_15))))))))))))))"
"(case-lambda"
"((stx-c_0 s_0)(begin 'datum->syntax(datum->syntax6_6 stx-c_0 s_0 #f #f #f)))"
"((stx-c_0 s_0 stx-l_0 stx-p_0 ignored3_0)(datum->syntax6_6 stx-c_0 s_0 stx-l_0 stx-p_0 ignored3_0))"
"((stx-c_0 s_0 stx-l_0 stx-p2_0)(datum->syntax6_6 stx-c_0 s_0 stx-l_0 stx-p2_0 #f))"
"((stx-c_0 s_0 stx-l1_0)(datum->syntax6_6 stx-c_0 s_0 stx-l1_0 #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_0)"
"(begin"
" 'syntax->list"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_0)))"
"(syntax->list$1 s_0)))))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_0)"
"(begin"
" 'syntax-original?"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_0)))"
"(if(syntax-property$1 s_0 original-property-sym)(not(syntax-any-macro-scopes? s_0)) #f)))))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?11_40)"
"(lambda(a9_0 b10_0 phase8_0)"
"(begin"
" 'bound-identifier=?11"
"(let-values(((a_44) a9_0))"
"(let-values(((b_45) b10_0))"
"(let-values(((phase_46)"
"(if(eq? phase8_0 unsafe-undefined)(1/syntax-local-phase-level) phase8_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? a_44)"
"(void)"
"                                    (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_44)))"
"(if(identifier? b_45)"
"(void)"
"                                    (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_45)))"
"(if(phase? phase_46)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_46)))"
"(bound-identifier=?$1 a_44 b_45 phase_46))))))))))))"
"(case-lambda"
"((a_0 b_0)(begin 'bound-identifier=?(bound-identifier=?11_40 a_0 b_0 unsafe-undefined)))"
"((a_0 b_0 phase8_0)(bound-identifier=?11_40 a_0 b_0 phase8_0)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?17_53)"
"(lambda(a15_0 b16_0 a-phase13_0 b-phase14_0)"
"(begin"
" 'free-identifier=?17"
"(let-values(((a_58) a15_0))"
"(let-values(((b_59) b16_0))"
"(let-values(((a-phase_60)"
"(if(eq? a-phase13_0 unsafe-undefined)(1/syntax-local-phase-level) a-phase13_0)))"
"(let-values(((b-phase_61)(if(eq? b-phase14_0 unsafe-undefined) a-phase_60 b-phase14_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? a_58)"
"(void)"
"                                      (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_58)))"
"(if(identifier? b_59)"
"(void)"
"                                      (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_59)))"
"(if(phase? a-phase_60)"
"(void)"
"(let-values()"
"(raise-argument-error 'free-identifier=? phase?-string a-phase_60)))"
"(if(phase? b-phase_61)"
"(void)"
"(let-values()"
"(raise-argument-error 'free-identifier=? phase?-string b-phase_61)))"
"(free-identifier=?$1 a_58 b_59 a-phase_60 b-phase_61)))))))))))))"
"(case-lambda"
"((a_0 b_0)(begin 'free-identifier=?(free-identifier=?17_53 a_0 b_0 unsafe-undefined unsafe-undefined)))"
"((a_0 b_0 a-phase_0 b-phase14_0)(free-identifier=?17_53 a_0 b_0 a-phase_0 b-phase14_0))"
"((a_0 b_0 a-phase13_0)(free-identifier=?17_53 a_0 b_0 a-phase13_0 unsafe-undefined)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_0 b_0)"
"(begin"
" 'free-transformer-identifier=?"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? a_0)"
"(void)"
"                            (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_0)"
"(void)"
"                              (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_0)))"
"(values))))"
"(let-values(((phase_75)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_0 b_0 phase_75 phase_75)))))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_0 b_0)"
"(begin"
" 'free-template-identifier=?"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? a_0)"
"(void)"
"                            (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_0)"
"(void)"
"                              (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_0)))"
"(values))))"
"(let-values(((phase_79)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_0 b_0 phase_79 phase_79)))))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_0 b_0)"
"(begin"
" 'free-label-identifier=?"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? a_0)"
"(void)"
"              (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_0)))"
"(if(identifier? b_0)"
"(void)"
"              (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_0)))"
"(free-identifier=?$1 a_0 b_0 #f #f)))))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding22_83)"
"(lambda(id21_0 phase19_0 top-level-symbol?20_0)"
"(begin"
" 'identifier-binding22"
"(let-values(((id_87) id21_0))"
"(let-values(((phase_88)"
"(if(eq? phase19_0 unsafe-undefined)(1/syntax-local-phase-level) phase19_0)))"
"(let-values(((top-level-symbol?_89) top-level-symbol?20_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_87)"
"(void)"
"                                    (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_87)))"
"(if(phase? phase_88)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_88)))"
"(identifier-binding$1 id_87 phase_88 top-level-symbol?_89))))))))))))"
"(case-lambda"
"((id_0)(begin 'identifier-binding(identifier-binding22_83 id_0 unsafe-undefined #f)))"
"((id_0 phase_0 top-level-symbol?20_0)(identifier-binding22_83 id_0 phase_0 top-level-symbol?20_0))"
"((id_0 phase19_0)(identifier-binding22_83 id_0 phase19_0 #f)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(let-values(((identifier-transformer-binding26_97)"
"(lambda(id25_0 phase24_0)"
"(begin"
" 'identifier-transformer-binding26"
"(let-values(((id_100) id25_0))"
"(let-values(((phase_101)"
"(if(eq? phase24_0 unsafe-undefined)(1/syntax-local-phase-level) phase24_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_100)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_100)))"
"(identifier-binding$1 id_100(if phase_101(add1 phase_101) #f))))))))))))"
"(case-lambda"
"((id_0)(begin 'identifier-transformer-binding(identifier-transformer-binding26_97 id_0 unsafe-undefined)))"
"((id_0 phase24_0)(identifier-transformer-binding26_97 id_0 phase24_0)))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_0)"
"(begin"
" 'identifier-template-binding"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_0)"
"(void)"
"              (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_0)))"
"(identifier-binding$1 id_0(sub1(1/syntax-local-phase-level)))))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_0)"
"(begin"
" 'identifier-label-binding"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_0)"
"(void)"
"              (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_0)))"
"(identifier-binding$1 id_0 #f)))))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol30_110)"
"(lambda(id29_0 phase28_0)"
"(begin"
" 'identifier-binding-symbol30"
"(let-values(((id_113) id29_0))"
"(let-values(((phase_114)"
"(if(eq? phase28_0 unsafe-undefined)(1/syntax-local-phase-level) phase28_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_113)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_113)))"
"(if(phase? phase_114)"
"(void)"
"(let-values()"
"(raise-argument-error 'identifier-binding-symbol phase?-string phase_114)))"
"(identifier-binding-symbol$1 id_113 phase_114)))))))))))"
"(case-lambda"
"((id_0)(begin 'identifier-binding-symbol(identifier-binding-symbol30_110 id_0 unsafe-undefined)))"
"((id_0 phase28_0)(identifier-binding-symbol30_110 id_0 phase28_0)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context34_119)"
"(lambda(id33_0 syms32_0)"
"(begin"
" 'identifier-prune-lexical-context34"
"(let-values(((id_122) id33_0))"
"(let-values(((syms_123) syms32_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_122)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_122)))"
"(if(if(list? syms_123)(andmap2 symbol? syms_123) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-prune-lexical-context"
"                                     \"(listof symbol?)\""
" syms_123)))"
" id_122))))))))))"
"(case-lambda"
"((id_0)(begin 'identifier-prune-lexical-context(identifier-prune-lexical-context34_119 id_0 null)))"
"((id_0 syms32_0)(identifier-prune-lexical-context34_119 id_0 syms32_0)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info39_128)"
"(lambda(s38_0 phase36_0 all-bindings?37_0)"
"(begin"
" 'syntax-debug-info39"
"(let-values(((s_132) s38_0))"
"(let-values(((phase_133)"
"(if(eq? phase36_0 unsafe-undefined)(1/syntax-local-phase-level) phase36_0)))"
"(let-values(((all-bindings?_134) all-bindings?37_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_132)"
"(void)"
"                                    (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_132)))"
"(if(phase? phase_133)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_133)))"
"(syntax-debug-info$1 s_132 phase_133 all-bindings?_134))))))))))))"
"(case-lambda"
"((s_0)(begin 'syntax-debug-info(syntax-debug-info39_128 s_0 unsafe-undefined #f)))"
"((s_0 phase_0 all-bindings?37_0)(syntax-debug-info39_128 s_0 phase_0 all-bindings?37_0))"
"((s_0 phase36_0)(syntax-debug-info39_128 s_0 phase36_0 #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_0 phase_0)"
"(begin"
" 'syntax-shift-phase-level"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_0)))"
"(if(phase? phase_0)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_0)))"
"(syntax-shift-phase-level$1 s_0 phase_0)))))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_0 old-stx_0 id_0)"
"(begin"
" 'syntax-track-origin"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_0)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_0)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_0)"
"(void)"
"                                (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_0)))"
"(values))))"
"(let-values(((s_149)(syntax-track-origin$1 new-stx_0 old-stx_0 id_0)))"
"(let-values(((ctx_150)"
"(let-values(((temp60_152) #t))"
"(get-current-expand-context16.1 temp60_152 'unexpected))))"
"(begin"
"(if ctx_150"
"(let-values()"
"(let-values(((obs_153)(expand-context-observer ctx_150)))"
"(if obs_153"
"(let-values()"
"(let-values()(call-expand-observe obs_153 'track-origin new-stx_0 s_149)))"
"(void))))"
"(void))"
" s_149)))))))))))"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module4_1)"
"(lambda(src-namespace2_0 mod-path3_0 dest-namespace1_0)"
"(begin"
" 'namespace-attach-module4"
"(let-values(((src-namespace_5) src-namespace2_0))"
"(let-values(((mod-path_6) mod-path3_0))"
"(let-values(((dest-namespace_7)"
"(if(eq? dest-namespace1_0 unsafe-undefined)"
"(1/current-namespace)"
" dest-namespace1_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((who21_10) 'namespace-attach-module)"
"((src-namespace22_11) src-namespace_5)"
"((mod-path23_12) mod-path_6)"
"((dest-namespace24_13) dest-namespace_7)"
"((temp25_14) #t))"
"(do-attach-module17.1"
" temp25_14"
" who21_10"
" src-namespace22_11"
" mod-path23_12"
" dest-namespace24_13))))))))))))"
"(case-lambda"
"((src-namespace_0 mod-path_0)"
"(begin 'namespace-attach-module(namespace-attach-module4_1 src-namespace_0 mod-path_0 unsafe-undefined)))"
"((src-namespace_0 mod-path_0 dest-namespace1_0)"
"(namespace-attach-module4_1 src-namespace_0 mod-path_0 dest-namespace1_0)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration9_20)"
"(lambda(src-namespace7_0 mod-path8_0 dest-namespace6_0)"
"(begin"
" 'namespace-attach-module-declaration9"
"(let-values(((src-namespace_24) src-namespace7_0))"
"(let-values(((mod-path_25) mod-path8_0))"
"(let-values(((dest-namespace_26)"
"(if(eq? dest-namespace6_0 unsafe-undefined)"
"(1/current-namespace)"
" dest-namespace6_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((who27_29) 'namespace-attach-module-declaration)"
"((src-namespace28_30) src-namespace_24)"
"((mod-path29_31) mod-path_25)"
"((dest-namespace30_32) dest-namespace_26)"
"((temp31_33) #f))"
"(do-attach-module17.1"
" temp31_33"
" who27_29"
" src-namespace28_30"
" mod-path29_31"
" dest-namespace30_32))))))))))))"
"(case-lambda"
"((src-namespace_0 mod-path_0)"
"(begin"
" 'namespace-attach-module-declaration"
"(namespace-attach-module-declaration9_20 src-namespace_0 mod-path_0 unsafe-undefined)))"
"((src-namespace_0 mod-path_0 dest-namespace6_0)"
"(namespace-attach-module-declaration9_20 src-namespace_0 mod-path_0 dest-namespace6_0)))))"
"(define-values"
"(do-attach-module17.1)"
"(lambda(attach-instances?11_0 who13_0 src-namespace14_0 mod-path15_0 dest-namespace16_0)"
"(begin"
" 'do-attach-module17"
"(let-values(((who_44) who13_0))"
"(let-values(((src-namespace_45) src-namespace14_0))"
"(let-values(((mod-path_46) mod-path15_0))"
"(let-values(((dest-namespace_47) dest-namespace16_0))"
"(let-values(((attach-instances?_48) attach-instances?11_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_45)"
"(void)"
"                                    (let-values () (raise-argument-error who_44 \"namespace?\" src-namespace_45)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_53)(1/module-path? mod-path_46)))"
"(if or-part_53 or-part_53(1/resolved-module-path? mod-path_46)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_44"
"                                         \"(or/c module-path? resolved-module-path?)\""
" mod-path_46)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_47)"
"(void)"
"                                        (let-values () (raise-argument-error who_44 \"namespace?\" dest-namespace_47)))"
"(values))))"
"(let-values(((phase_49)(namespace-phase src-namespace_45)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_49(namespace-phase dest-namespace_47))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_44"
"                                               \"source and destination namespace phases do not match\""
"                                               \"source phase\""
" phase_49"
"                                               \"destination phase\""
"(namespace-phase dest-namespace_47))))"
"(values))))"
"(let-values(((todo_50)(make-hasheq)))"
"(let-values(((missing_51) '#:missing))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_54)"
"(lambda(mpi_0"
" phase_0"
" attach-instances?_0"
" attach-phase_0)"
"(begin"
" 'loop"
"(let-values(((mod-name_59)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_45)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_0)))))"
"(let-values(((attach-this-instance?_60)"
"(if attach-instances?_0"
"(eqv? phase_0 attach-phase_0)"
" #f)))"
"(let-values(((m-ns_61)"
"(hash-ref"
"(hash-ref"
" todo_50"
" mod-name_59"
" '#hasheqv())"
" phase_0"
" missing_51)))"
"(if(let-values(((or-part_62)"
"(eq? missing_51 m-ns_61)))"
"(if or-part_62"
" or-part_62"
"(if attach-this-instance?_60"
"(not m-ns_61)"
" #f)))"
"(let-values()"
"(let-values(((m_63)"
"(namespace->module"
" src-namespace_45"
" mod-name_59)))"
"(begin"
"(if m_63"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_44"
"                                                                                         \"module not declared (in the source namespace)\""
"                                                                                         \"module name\""
" mod-name_59)))"
"(if(if(module-cross-phase-persistent?"
" m_63)"
"(if(not"
"(label-phase? phase_0))"
"(not(zero-phase? phase_0))"
" #f)"
" #f)"
"(let-values()"
"(loop_54"
" mpi_0"
" 0"
" attach-instances?_0"
" 0))"
"(let-values()"
"(let-values(((already-m_64)"
"(namespace->module"
" dest-namespace_47"
" mod-name_59)))"
"(let-values((()"
"(begin"
"(if(if already-m_64"
"(not"
"(eq?"
" already-m_64"
" m_63))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_44"
"                                                                                                               \"a different declaration is already in the destination namespace\""
"                                                                                                               \"module name\""
" mod-name_59))"
"(void))"
"(values))))"
"(let-values(((m-ns_65"
" already?_66)"
"(if(let-values(((or-part_67)"
" attach-this-instance?_60))"
"(if or-part_67"
" or-part_67"
"(module-cross-phase-persistent?"
" m_63)))"
"(let-values()"
"(let-values(((m-ns_68)"
"(let-values(((src-namespace32_70)"
" src-namespace_45)"
"((mod-name33_71)"
" mod-name_59)"
"((phase34_72)"
" phase_0))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" src-namespace32_70"
" mod-name33_71"
" phase34_72))))"
"(let-values((()"
"(begin"
"(if m-ns_68"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_44"
"                                                                                                                                     \"module not instantiated (in the source namespace)\""
"                                                                                                                                     \"module name\""
" mod-name_59)))"
"(values))))"
"(let-values(((already-m-ns_69)"
"(if already-m_64"
"(let-values(((dest-namespace35_73)"
" dest-namespace_47)"
"((mod-name36_74)"
" mod-name_59)"
"((phase37_75)"
" phase_0))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" dest-namespace35_73"
" mod-name36_74"
" phase37_75))"
" #f)))"
"(begin"
"(if(if already-m-ns_69"
"(if(not"
"(eq?"
" m-ns_68"
" already-m-ns_69))"
"(not"
"(namespace-same-instance?"
" m-ns_68"
" already-m-ns_69))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_44"
"                                                                                                                           \"a different instance is already in the destination namespace\""
"                                                                                                                           \"module name\""
" mod-name_59))"
"(void))"
"(values"
" m-ns_68"
"(if already-m-ns_69"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_0)"
"(not"
"(let-values(((src-namespace38_76)"
" src-namespace_45)"
"((mod-name39_77)"
" mod-name_59)"
"((phase40_78)"
" phase_0))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" src-namespace38_76"
" mod-name39_77"
" phase40_78)))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_45)"
"(let-values()"
"(let-values(((src-namespace41_79)"
" src-namespace_45)"
"((mpi42_80)"
" mpi_0)"
"((phase43_81)"
" phase_0))"
"(namespace-module-instantiate!96.1"
" #t"
" unsafe-undefined"
" unsafe-undefined"
" #f"
" src-namespace41_79"
" mpi42_80"
" phase43_81)))))"
"(void))"
"(values"
" #f"
"(if already-m_64"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_50"
" mod-name_59"
"(lambda(ht_0)"
"(hash-set"
" ht_0"
" phase_0"
" m-ns_65))"
" '#hasheqv())"
"(if already?_66"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_83)"
"(module-requires"
" m_63)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_83)))"
"((letrec-values(((for-loop_84)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((phase+reqs_86)"
"(unsafe-car"
" lst_0))"
"((rest_87)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values(((lst_88)"
"(cdr"
" phase+reqs_86)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((req_91)"
"(unsafe-car"
" lst_1))"
"((rest_92)"
"(unsafe-cdr"
" lst_1)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(module-path-index-shift"
" req_91"
"(module-self"
" m_63)"
" mpi_0)"
"(phase+"
" phase_0"
"(car"
" phase+reqs_86))"
" attach-instances?_0"
" attach-phase_0))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_89"
" rest_92)"
"(values))))"
"(values))))))"
" for-loop_89)"
" lst_88)))))"
"(if(not"
" #f)"
"(for-loop_84"
" rest_87)"
"(values))))"
"(values))))))"
" for-loop_84)"
" lst_83)))"
"(void)"
"(let-values(((lst_93)"
"(module-submodule-names"
" m_63)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_93)))"
"((letrec-values(((for-loop_94)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((submod-name_96)"
"(unsafe-car"
" lst_0))"
"((rest_97)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                           \".\""
" submod-name_96)"
" mpi_0)"
" #f"
" #f"
" attach-phase_0))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_94"
" rest_97)"
"(values))))"
"(values))))))"
" for-loop_94)"
" lst_93)))"
"(void)"
"(if(module-supermodule-name"
" m_63)"
"(let-values()"
"(loop_54"
"(1/module-path-index-join"
" '(submod"
"                                                                                                              \"..\")"
" mpi_0)"
" #f"
" #f"
" attach-phase_0))"
"(void))))))))))))))"
"(void)))))))))"
" loop_54)"
"(1/module-path-index-join"
"(if(1/resolved-module-path? mod-path_46)"
"(resolved-module-path->module-path mod-path_46)"
" mod-path_46)"
" #f)"
" phase_49"
" attach-instances?_48"
" phase_49)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_98) todo_50))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_98)))"
"((letrec-values(((for-loop_99)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((mod-name_101 phases_102)"
"(hash-iterate-key+value"
" ht_98"
" i_0)))"
"(let-values((()"
"(let-values(((ht_103)"
" phases_102))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_103)))"
"((letrec-values(((for-loop_104)"
"(lambda(i_1)"
"(begin"
" 'for-loop"
"(if i_1"
"(let-values(((phase_106"
" m-ns_107)"
"(hash-iterate-key+value"
" ht_103"
" i_1)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_108)"
"(namespace->module"
" src-namespace_45"
" mod-name_101)))"
"(begin"
"(module-force-bulk-binding!"
" m_108"
" src-namespace_45)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" dest-namespace_47)"
"(let-values()"
"(let-values(((dest-namespace44_109)"
" dest-namespace_47)"
"((m45_110)"
" m_108)"
"((mod-name46_111)"
" mod-name_101))"
"(declare-module!58.1"
" #t"
" dest-namespace44_109"
" m45_110"
" mod-name46_111))))"
"(if m-ns_107"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_45"
" mod-name_101"
" phase_106)"
"(let-values(((or-part_112)"
"(let-values(((dest-namespace47_113)"
" dest-namespace_47)"
"((mod-name48_114)"
" mod-name_101)"
"((phase49_115)"
" phase_106))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" dest-namespace47_113"
" mod-name48_114"
" phase49_115))))"
"(if or-part_112"
" or-part_112"
"(namespace-install-module-namespace!"
" dest-namespace_47"
" mod-name_101"
" phase_106"
" m_108"
" m-ns_107)))))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_104"
"(hash-iterate-next"
" ht_103"
" i_1))"
"(values))))"
"(values))))))"
" for-loop_104)"
"(hash-iterate-first"
" ht_103))))))"
"(if(not #f)"
"(for-loop_99"
"(hash-iterate-next ht_98 i_0))"
"(values))))"
"(values))))))"
" for-loop_99)"
"(hash-iterate-first ht_98))))"
"(values))))"
"(let-values()"
"(let-values(((mnr_52)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_47)"
"(let-values()"
"(begin"
"(let-values(((ht_116) todo_50))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_116)))"
"((letrec-values(((for-loop_117)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((mod-name_119)"
"(hash-iterate-key ht_116 i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_52"
" mod-name_119"
" src-namespace_45))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_117"
"(hash-iterate-next ht_116 i_0))"
"(values))))"
"(values))))))"
" for-loop_117)"
"(hash-iterate-first ht_116))))"
"(void))))))))))))))))))))))))"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(begin"
" 'make-empty-namespace"
"(let-values(((current-ns_1)(1/current-namespace)))"
"(let-values(((phase_2)(namespace-phase current-ns_1)))"
"(let-values(((ns_3)(namespace->namespace-at-phase(make-namespace) phase_2)))"
"(begin"
"(1/namespace-attach-module current-ns_1 ''#%kernel ns_3)"
"(namespace-primitive-module-visit! ns_3 '#%kernel)"
" ns_3)))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce3_4)"
"(lambda(s2_0 ns1_0)"
"(begin"
" 'namespace-syntax-introduce3"
"(let-values(((s_7) s2_0))"
"(let-values(((ns_8)(if(eq? ns1_0 unsafe-undefined)(1/current-namespace) ns1_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_7)"
"(void)"
"(let-values()"
"                                                  (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_7)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_8)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-syntax-introduce"
"                                                     \"namespace?\""
" ns_8)))"
"(values))))"
"(let-values(((root-ctx_10)(namespace-get-root-expand-ctx ns_8)))"
"(let-values(((post-scope_11)"
"(post-expansion-scope"
"(root-expand-context-post-expansion root-ctx_10))))"
"(let-values(((other-namespace-scopes_12)"
"(reverse$1"
"(let-values(((ht_15)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_10)"
" 0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_15)))"
"((letrec-values(((for-loop_16)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sc_19)"
"(unsafe-immutable-hash-iterate-key"
" ht_15"
" i_0)))"
"(let-values(((fold-var_20)"
"(let-values(((fold-var_21)"
" fold-var_0))"
"(if(equal?"
" sc_19"
" post-scope_11)"
" fold-var_21"
"(let-values(((fold-var_22)"
" fold-var_21))"
"(let-values(((fold-var_23)"
"(let-values()"
"(cons"
"(let-values()"
" sc_19)"
" fold-var_22))))"
"(values"
" fold-var_23)))))))"
"(if(not #f)"
"(for-loop_16"
" fold-var_20"
"(unsafe-immutable-hash-iterate-next"
" ht_15"
" i_0))"
" fold-var_20)))"
" fold-var_0)))))"
" for-loop_16)"
" null"
"(unsafe-immutable-hash-iterate-first ht_15)))))))"
"(let-values(((add-ns-scopes_13)"
"(lambda(s_0)"
"(begin"
" 'add-ns-scopes"
"(let-values(((temp64_26)"
"(add-scopes"
"(push-scope s_0 post-scope_11)"
" other-namespace-scopes_12))"
"((temp65_27)"
"(root-expand-context-all-scopes-stx"
" root-ctx_10))"
"((temp66_28)"
"(let-values(((or-part_30)"
"(namespace-declaration-inspector"
" ns_8)))"
"(if or-part_30"
" or-part_30"
"(current-code-inspector))))"
"((temp67_29) #t))"
"(syntax-transfer-shifts36.1"
" temp67_29"
" temp64_26"
" temp65_27"
" temp66_28))))))"
"(let-values(((maybe-module-id_14)"
"(if(pair?(1/syntax-e s_7))"
"(if(identifier?(car(1/syntax-e s_7)))"
"(add-ns-scopes_13(car(1/syntax-e s_7)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_14"
"(1/free-identifier=?"
" maybe-module-id_14"
"(1/namespace-module-identifier ns_8)"
"(namespace-phase ns_8))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_7"
"(cons maybe-module-id_14(cdr(1/syntax-e s_7)))"
" s_7"
" s_7))"
"(let-values()(add-ns-scopes_13 s_7)))))))))))))))))))"
"(case-lambda"
"((s_0)(begin 'namespace-syntax-introduce(namespace-syntax-introduce3_4 s_0 unsafe-undefined)))"
"((s_0 ns1_0)(namespace-syntax-introduce3_4 s_0 ns1_0)))))"
"(define-values"
"(namespace-datum-introduce)"
"(lambda(s_0)(begin(1/namespace-syntax-introduce(1/datum->syntax #f s_0)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier6_35)"
"(lambda(where5_0)"
"(begin"
" 'namespace-module-identifier6"
"(let-values(((where_37)(if(eq? where5_0 unsafe-undefined)(1/current-namespace) where5_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(let-values(((or-part_39)(1/namespace? where_37)))"
"(if or-part_39 or-part_39(phase? where_37)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                                   (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_37)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_37)(namespace-phase where_37) where_37))"
" 'module))))))))))"
"(case-lambda"
"(()(begin 'namespace-module-identifier(namespace-module-identifier6_35 unsafe-undefined)))"
"((where5_0)(namespace-module-identifier6_35 where5_0)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_0)"
"(begin"
" 'namespace-symbol->identifier"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym_0)"
"(void)"
"              (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_0)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_0))))))))"
"(define-values"
"(do-namespace-require21.1)"
"(lambda(copy-variable-as-constant?11_0"
" copy-variable-phase-level10_0"
" run?8_0"
" skip-variable-phase-level12_0"
" visit?9_0"
" who18_0"
" req19_0"
" ns20_0)"
"(begin"
" 'do-namespace-require21"
"(let-values(((run?_51) run?8_0))"
"(let-values(((visit?_52) visit?9_0))"
"(let-values(((who_53) who18_0))"
"(let-values(((req_54) req19_0))"
"(let-values(((ns_55) ns20_0))"
"(let-values(((copy-variable-phase-level_56) copy-variable-phase-level10_0))"
"(let-values(((copy-variable-as-constant?_57) copy-variable-as-constant?11_0))"
"(let-values(((skip-variable-phase-level_58) skip-variable-phase-level12_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_55)"
"(void)"
"                                          (let-values () (raise-argument-error who_53 \"namespace?\" ns_55)))"
"(values))))"
"(let-values(((ctx-stx_59)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_55)))))"
"(if(let-values(((or-part_60)(1/module-path-index? req_54)))"
"(if or-part_60 or-part_60(1/module-path? req_54)))"
"(let-values()"
"(let-values(((temp70_62)"
"(if(1/module-path-index? req_54)"
" req_54"
"(1/module-path-index-join req_54 #f)))"
"((temp71_63) #f)"
"((temp72_64) #f)"
"((ctx-stx73_65) ctx-stx_59)"
"((ns74_66) ns_55)"
"((run?75_67) run?_51)"
"((visit?76_68) visit?_52)"
"((temp77_69)(namespace-phase ns_55))"
"((temp78_70)(namespace-phase ns_55))"
"((copy-variable-phase-level79_71) copy-variable-phase-level_56)"
"((copy-variable-as-constant?80_72) copy-variable-as-constant?_57)"
"((skip-variable-phase-level81_73) skip-variable-phase-level_58)"
"((who82_74) who_53))"
"(perform-require!78.1"
" #f"
" #t"
" #f"
" copy-variable-as-constant?80_72"
" copy-variable-phase-level79_71"
" #f"
" 'all"
" temp77_69"
" #f"
" temp78_70"
" run?75_67"
" skip-variable-phase-level81_73"
" visit?76_68"
" who82_74"
" temp70_62"
" temp71_63"
" temp72_64"
" ctx-stx73_65"
" ns74_66)))"
"(let-values()"
"(let-values(((run?83_76) run?_51)"
"((visit?84_77) visit?_52)"
"((temp85_78)(list(1/datum->syntax ctx-stx_59 req_54)))"
"((temp86_79) #f)"
"((ns87_80) ns_55)"
"((temp88_81)(namespace-phase ns_55))"
"((temp89_82)"
"(let-values(((temp92_85) #f))(make-requires+provides8.1 #f temp92_85)))"
"((skip-variable-phase-level90_83) skip-variable-phase-level_58)"
"((who91_84) who_53))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" run?83_76"
" #f"
" skip-variable-phase-level90_83"
" visit?84_77"
" who91_84"
" temp85_78"
" temp86_79"
" ns87_80"
" temp88_81"
" temp89_82))))))))))))))))))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require26_130)"
"(lambda(req25_0 ns24_0)"
"(begin"
" 'namespace-require26"
"(let-values(((req_133) req25_0))"
"(let-values(((ns_134)(if(eq? ns24_0 unsafe-undefined)(1/current-namespace) ns24_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((who94_136) 'namespace-require)((req95_137) req_133)((ns96_138) ns_134))"
"(do-namespace-require21.1 #f #f #t #f #f who94_136 req95_137 ns96_138)))))))))))"
"(case-lambda"
"((req_0)(begin 'namespace-require(namespace-require26_130 req_0 unsafe-undefined)))"
"((req_0 ns24_0)(namespace-require26_130 req_0 ns24_0)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time30_142)"
"(lambda(req29_0 ns28_0)"
"(begin"
" 'namespace-require/expansion-time30"
"(let-values(((req_145) req29_0))"
"(let-values(((ns_146)(if(eq? ns28_0 unsafe-undefined)(1/current-namespace) ns28_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((temp98_149) #f)"
"((temp99_150) #t)"
"((who100_151) 'namespace-require/expansion-time)"
"((req101_152) req_145)"
"((ns102_153) ns_146))"
"(do-namespace-require21.1"
" #f"
" #f"
" temp98_149"
" #f"
" temp99_150"
" who100_151"
" req101_152"
" ns102_153)))))))))))"
"(case-lambda"
"((req_0)(begin 'namespace-require/expansion-time(namespace-require/expansion-time30_142 req_0 unsafe-undefined)))"
"((req_0 ns28_0)(namespace-require/expansion-time30_142 req_0 ns28_0)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant34_157)"
"(lambda(req33_0 ns32_0)"
"(begin"
" 'namespace-require/constant34"
"(let-values(((req_160) req33_0))"
"(let-values(((ns_161)(if(eq? ns32_0 unsafe-undefined)(1/current-namespace) ns32_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((who104_164) 'namespace-require/constant)"
"((req105_165) req_160)"
"((ns106_166) ns_161)"
"((temp107_167) 0)"
"((temp108_168) #t))"
"(do-namespace-require21.1"
" temp108_168"
" temp107_167"
" #t"
" #f"
" #f"
" who104_164"
" req105_165"
" ns106_166)))))))))))"
"(case-lambda"
"((req_0)(begin 'namespace-require/constant(namespace-require/constant34_157 req_0 unsafe-undefined)))"
"((req_0 ns32_0)(namespace-require/constant34_157 req_0 ns32_0)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy38_172)"
"(lambda(req37_0 ns36_0)"
"(begin"
" 'namespace-require/copy38"
"(let-values(((req_175) req37_0))"
"(let-values(((ns_176)(if(eq? ns36_0 unsafe-undefined)(1/current-namespace) ns36_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((who110_179) 'namespace-require/copy)"
"((req111_180) req_175)"
"((ns112_181) ns_176)"
"((temp113_182) 0)"
"((temp114_183) 0))"
"(do-namespace-require21.1"
" #f"
" temp113_182"
" #t"
" temp114_183"
" #f"
" who110_179"
" req111_180"
" ns112_181)))))))))))"
"(case-lambda"
"((req_0)(begin 'namespace-require/copy(namespace-require/copy38_172 req_0 unsafe-undefined)))"
"((req_0 ns36_0)(namespace-require/copy38_172 req_0 ns36_0)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value44_187)"
"(lambda(sym43_0 use-mapping?40_0 failure-thunk41_0 ns42_0)"
"(begin"
" 'namespace-variable-value44"
"(let-values(((sym_192) sym43_0))"
"(let-values(((use-mapping?_193) use-mapping?40_0))"
"(let-values(((failure-thunk_194) failure-thunk41_0))"
"(let-values(((ns_195)(if(eq? ns42_0 unsafe-undefined)(1/current-namespace) ns42_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym_192)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'namespace-variable-value \"symbol?\" sym_192)))"
"(if(let-values(((or-part_197)(not failure-thunk_194)))"
"(if or-part_197"
" or-part_197"
"(if(procedure? failure-thunk_194)"
"(procedure-arity-includes? failure-thunk_194 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                         \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_194)))"
"(if(1/namespace? ns_195)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'namespace-variable-value \"namespace?\" ns_195)))"
"((call/ec"
"(lambda(escape_0)"
"(let-values(((var-ns_199 var-phase-level_200 var-sym_201)"
"(if use-mapping?_193"
"(let-values()"
"(let-values(((id_203)(1/datum->syntax #f sym_192)))"
"(let-values(((b_204)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_203 ns_195)"
"(namespace-phase ns_195)"
" ns_195)))"
"(let-values((()"
"(begin"
"(if b_204"
"(let-values()"
"(namespace-visit-available-modules!"
" ns_195))"
"(void))"
"(values))))"
"(let-values(((v_205"
" primitive?_206"
" extra-inspector_207"
" protected?_208)"
"(if b_204"
"(let-values(((b116_209) b_204)"
"((empty-env117_210)"
" empty-env)"
"((null118_211) null)"
"((ns119_212) ns_195)"
"((temp120_213)"
"(namespace-phase ns_195))"
"((id121_214) id_203))"
"(binding-lookup50.1"
" #f"
" #f"
" b116_209"
" empty-env117_210"
" null118_211"
" ns119_212"
" temp120_213"
" id121_214))"
"(values variable #f #f #f))))"
"(begin"
"(if(variable? v_205)"
"(void)"
"(let-values()"
"(escape_0"
"(let-values(((or-part_215) failure-thunk_194))"
"(if or-part_215"
" or-part_215"
"(lambda()"
"(raise"
"(make-exn:fail:syntax$1"
"(format"
"(string-append"
"                                                                                   \"namespace-variable-value: bound to syntax\\n\""
"                                                                                   \"  in: ~s\")"
" sym_192)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_204)"
"(values"
"(if(top-level-module-path-index?"
"(module-binding-module b_204))"
" ns_195"
"(module-instance-namespace"
"(binding->module-instance"
" b_204"
" ns_195"
"(namespace-phase ns_195)"
" id_203)))"
"(module-binding-phase b_204)"
"(module-binding-sym b_204))"
"(values"
" ns_195"
"(namespace-phase ns_195)"
" sym_192))))))))"
"(let-values()"
"(values ns_195(namespace-phase ns_195) sym_192)))))"
"(let-values(((val_202)"
"(namespace-get-variable"
" var-ns_199"
" var-phase-level_200"
" var-sym_201"
"(lambda()"
"(escape_0"
"(let-values(((or-part_216) failure-thunk_194))"
"(if or-part_216"
" or-part_216"
"(raise"
"(exn:fail:contract:variable"
"(format"
"(string-append"
"                                                                    \"namespace-variable-value: given name is not defined\\n\""
"                                                                    \"  name: ~s\")"
" sym_192)"
"(current-continuation-marks)"
" sym_192)))))))))"
"(lambda() val_202))))))))))))))))))"
"(case-lambda"
"((sym_0)(begin 'namespace-variable-value(namespace-variable-value44_187 sym_0 #t #f unsafe-undefined)))"
"((sym_0 use-mapping?_0 failure-thunk_0 ns42_0)"
"(namespace-variable-value44_187 sym_0 use-mapping?_0 failure-thunk_0 ns42_0))"
"((sym_0 use-mapping?_0 failure-thunk41_0)"
"(namespace-variable-value44_187 sym_0 use-mapping?_0 failure-thunk41_0 unsafe-undefined))"
"((sym_0 use-mapping?40_0)(namespace-variable-value44_187 sym_0 use-mapping?40_0 #f unsafe-undefined)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!51_227)"
"(lambda(sym49_0 val50_0 map?46_0 ns47_0 as-constant?48_0)"
"(begin"
" 'namespace-set-variable-value!51"
"(let-values(((sym_233) sym49_0))"
"(let-values(((val_234) val50_0))"
"(let-values(((map?_235) map?46_0))"
"(let-values(((ns_236)(if(eq? ns47_0 unsafe-undefined)(1/current-namespace) ns47_0)))"
"(let-values(((as-constant?_237) as-constant?48_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym_233)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'namespace-set-variable-value! \"symbol?\" sym_233)))"
"(if(1/namespace? ns_236)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'namespace-set-variable-value! \"namespace?\" ns_236)))"
"(namespace-set-variable!"
" ns_236"
"(namespace-phase ns_236)"
" sym_233"
" val_234"
" as-constant?_237)"
"(if map?_235"
"(let-values()"
"(let-values((()"
"(begin"
"(namespace-unset-transformer!"
" ns_236"
"(namespace-phase ns_236)"
" sym_233)"
"(values))))"
"(let-values(((id_239)(1/datum->syntax #f sym_233)))"
"(let-values(((temp123_240)(1/namespace-syntax-introduce id_239 ns_236))"
"((temp124_241)"
"(let-values(((temp126_243)(namespace-mpi ns_236))"
"((temp127_244)(namespace-phase ns_236))"
"((sym128_245) sym_233))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" temp126_243"
" temp127_244"
" sym128_245)))"
"((temp125_242)(namespace-phase ns_236)))"
"(add-binding!17.1 #f #f temp123_240 temp124_241 temp125_242)))))"
"(void)))))))))))))))"
"(case-lambda"
"((sym_0 val_0)"
"(begin 'namespace-set-variable-value!(namespace-set-variable-value!51_227 sym_0 val_0 #f unsafe-undefined #f)))"
"((sym_0 val_0 map?_0 ns_0 as-constant?48_0)"
"(namespace-set-variable-value!51_227 sym_0 val_0 map?_0 ns_0 as-constant?48_0))"
"((sym_0 val_0 map?_0 ns47_0)(namespace-set-variable-value!51_227 sym_0 val_0 map?_0 ns47_0 #f))"
"((sym_0 val_0 map?46_0)(namespace-set-variable-value!51_227 sym_0 val_0 map?46_0 unsafe-undefined #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!55_260)"
"(lambda(sym54_0 ns53_0)"
"(begin"
" 'namespace-undefine-variable!55"
"(let-values(((sym_263) sym54_0))"
"(let-values(((ns_264)(if(eq? ns53_0 unsafe-undefined)(1/current-namespace) ns53_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym_263)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'namespace-undefine-variable! \"symbol?\" sym_263)))"
"(if(1/namespace? ns_264)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'namespace-undefine-variable! \"namespace?\" ns_264)))"
"(namespace-unset-variable! ns_264(namespace-phase ns_264) sym_263)))))))))))"
"(case-lambda"
"((sym_0)(begin 'namespace-undefine-variable!(namespace-undefine-variable!55_260 sym_0 unsafe-undefined)))"
"((sym_0 ns53_0)(namespace-undefine-variable!55_260 sym_0 ns53_0)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols58_269)"
"(lambda(ns57_0)"
"(begin"
" 'namespace-mapped-symbols58"
"(let-values(((ns_271)(if(eq? ns57_0 unsafe-undefined)(1/current-namespace) ns57_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/namespace? ns_271)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_271)))"
"(set->list"
"(set-union"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_271))"
"(namespace-phase ns_271))"
"(list->set(1/instance-variable-names(namespace->instance ns_271 0))))))))))))))"
"(case-lambda"
"(()(begin 'namespace-mapped-symbols(namespace-mapped-symbols58_269 unsafe-undefined)))"
"((ns57_0)(namespace-mapped-symbols58_269 ns57_0)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase61_274)"
"(lambda(ns60_0)"
"(begin"
" 'namespace-base-phase61"
"(let-values(((ns_276)(if(eq? ns60_0 unsafe-undefined)(1/current-namespace) ns60_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/namespace? ns_276)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_276)))"
"(namespace-phase ns_276))))))))))"
"(case-lambda"
"(()(begin 'namespace-base-phase(namespace-base-phase61_274 unsafe-undefined)))"
"((ns60_0)(namespace-base-phase61_274 ns60_0)))))"
"(define-values"
"(1/eval)"
"(let-values(((eval4_11)"
"(lambda(s3_0 ns1_0 compile2_0)"
"(begin"
" 'eval4"
"(let-values(((s_15) s3_0))"
"(let-values(((ns_16)(if(eq? ns1_0 unsafe-undefined)(1/current-namespace) ns1_0)))"
"(let-values(((compile_17)"
"(if(eq? compile2_0 unsafe-undefined)"
"(lambda(s_0 ns_0)(begin 'compile(1/compile s_0 ns_0 #f)))"
" compile2_0)))"
"(let-values()"
"(if(let-values(((or-part_20)(compiled-in-memory? s_15)))"
"(if or-part_20"
" or-part_20"
"(let-values(((or-part_21)(1/linklet-directory? s_15)))"
"(if or-part_21 or-part_21(1/linklet-bundle? s_15)))))"
"(let-values()(eval-compiled s_15 ns_16))"
"(if(if(syntax?$1 s_15)"
"(let-values(((or-part_22)(compiled-in-memory?(1/syntax-e s_15))))"
"(if or-part_22"
" or-part_22"
"(let-values(((or-part_23)(1/linklet-directory?(1/syntax-e s_15))))"
"(if or-part_23 or-part_23(1/linklet-bundle?(1/syntax-e s_15))))))"
" #f)"
"(let-values()(eval-compiled(1/syntax->datum s_15) ns_16))"
"(let-values()"
"(let-values(((s66_25) s_15)"
"((ns67_26) ns_16)"
"((temp68_27)"
"(lambda(s_0 ns_0 tail?_0)"
"(eval-compiled(compile_17 s_0 ns_0) ns_0 tail?_0)))"
"((temp69_28) #f))"
"(per-top-level54.1 #f #f temp69_28 #t #f temp68_27 #f s66_25 ns67_26)))))))))))))"
"(case-lambda"
"((s_0)(begin 'eval(eval4_11 s_0 unsafe-undefined unsafe-undefined)))"
"((s_0 ns_0 compile2_0)(eval4_11 s_0 ns_0 compile2_0))"
"((s_0 ns1_0)(eval4_11 s_0 ns1_0 unsafe-undefined)))))"
"(define-values"
"(eval-compiled)"
"(let-values(((eval-compiled9_38)"
"(lambda(c7_0 ns8_0 as-tail?6_0)"
"(begin"
" 'eval-compiled9"
"(let-values(((c_42) c7_0))"
"(let-values(((ns_43) ns8_0))"
"(let-values(((as-tail?_44) as-tail?6_0))"
"(let-values()"
"(if(1/compiled-module-expression? c_42)"
"(let-values()"
"(let-values(((c70_46) c_42)((ns71_47) ns_43))(eval-module8.1 ns71_47 #f #t c70_46)))"
"(let-values()(eval-top c_42 ns_43 eval-compiled as-tail?_44)))))))))))"
"(case-lambda"
"((c_0 ns_0)(begin(eval-compiled9_38 c_0 ns_0 #t)))"
"((c_0 ns_0 as-tail?6_0)(eval-compiled9_38 c_0 ns_0 as-tail?6_0)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile16_53)"
"(lambda(s15_0 ns11_0 serializable?12_0 expand13_0 to-source?14_0)"
"(begin"
" 'compile16"
"(let-values(((s_59) s15_0))"
"(let-values(((ns_60)(if(eq? ns11_0 unsafe-undefined)(1/current-namespace) ns11_0)))"
"(let-values(((serializable?_61) serializable?12_0))"
"(let-values(((expand_62)(if(eq? expand13_0 unsafe-undefined) expand$1 expand13_0)))"
"(let-values(((to-source?_63) to-source?14_0))"
"(let-values()"
"(let-values(((cs_64)"
"(if(1/compiled-expression? s_59)"
"(let-values()(list s_59))"
"(if(if(syntax?$1 s_59)(1/compiled-expression?(1/syntax-e s_59)) #f)"
"(let-values()(list(1/syntax-e s_59)))"
"(let-values()"
"(let-values(((s72_66) s_59)"
"((ns73_67) ns_60)"
"((temp74_68)"
"(lambda(s_0 ns_0 as-tail?_0)"
"(list"
"(compile-single$1"
" s_0"
" ns_0"
" expand_62"
" serializable?_61"
" to-source?_63))))"
"((append75_69) append)"
"((temp76_70) #f))"
"(per-top-level54.1"
" append75_69"
" #f"
" temp76_70"
" #t"
" #f"
" temp74_68"
" #f"
" s72_66"
" ns73_67)))))))"
"(if(if(= 1(length cs_64))(not(compiled-multiple-top?(car cs_64))) #f)"
"(car cs_64)"
"(let-values(((cs77_75) cs_64)"
"((to-source?78_76) to-source?_63)"
"((serializable?79_77) serializable?_61)"
"((ns80_78) ns_60))"
"(compiled-tops->compiled-top8.1"
" serializable?79_77"
" ns80_78"
" to-source?78_76"
" cs77_75))))))))))))))"
"(case-lambda"
"((s_0)(begin 'compile(compile16_53 s_0 unsafe-undefined #t unsafe-undefined #f)))"
"((s_0 ns_0 serializable?_0 expand_0 to-source?14_0)"
"(compile16_53 s_0 ns_0 serializable?_0 expand_0 to-source?14_0))"
"((s_0 ns_0 serializable?_0 expand13_0)(compile16_53 s_0 ns_0 serializable?_0 expand13_0 #f))"
"((s_0 ns_0 serializable?12_0)(compile16_53 s_0 ns_0 serializable?12_0 unsafe-undefined #f))"
"((s_0 ns11_0)(compile16_53 s_0 ns11_0 #t unsafe-undefined #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets20_94)"
"(lambda(s19_0 ns18_0)"
"(begin"
" 'compile-to-linklets20"
"(let-values(((s_97) s19_0))"
"(let-values(((ns_98)(if(eq? ns18_0 unsafe-undefined)(1/current-namespace) ns18_0)))"
"(let-values()(1/compile s_97 ns_98 #t expand$1 #t))))))))"
"(case-lambda"
"((s_0)(begin(compile-to-linklets20_94 s_0 unsafe-undefined)))"
"((s_0 ns18_0)(compile-to-linklets20_94 s_0 ns18_0)))))"
"(define-values"
"(struct:lifted-parsed-begin"
" lifted-parsed-begin22.1"
" lifted-parsed-begin?"
" lifted-parsed-begin-seq"
" lifted-parsed-begin-last)"
"(let-values(((struct:_102 make-_103 ?_104 -ref_105 -set!_106)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lifted-parsed-begin"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'lifted-parsed-begin)))))"
"(values"
" struct:_102"
" make-_103"
" ?_104"
"(make-struct-field-accessor -ref_105 0 'seq)"
"(make-struct-field-accessor -ref_105 1 'last))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_0 ns_0 expand_0 serializable?_0 to-source?_0)"
"(begin"
" 'compile-single"
"(let-values(((exp-s_132)(expand_0 s_0 ns_0 #f #t serializable?_0)))"
"((letrec-values(((loop_133)"
"(lambda(exp-s_0)"
"(begin"
" 'loop"
"(if(parsed-module? exp-s_0)"
"(let-values()"
"(let-values(((exp-s82_136) exp-s_0)"
"((temp83_137)"
"(let-values(((ns86_141) ns_0))"
"(make-compile-context14.1"
" #f"
" unsafe-undefined"
" #f"
" ns86_141"
" unsafe-undefined"
" unsafe-undefined)))"
"((serializable?84_138) serializable?_0)"
"((to-source?85_139) to-source?_0))"
"(compile-module13.1"
" #f"
" unsafe-undefined"
" #t"
" serializable?84_138"
" to-source?85_139"
" exp-s82_136"
" temp83_137)))"
"(if(lifted-parsed-begin? exp-s_0)"
"(let-values()"
"(let-values(((temp87_143)"
"(reverse$1"
"(let-values(((lst_145)"
"(append"
"(lifted-parsed-begin-seq exp-s_0)"
"(list(lifted-parsed-begin-last exp-s_0)))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_145)))"
"((letrec-values(((for-loop_146)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_149)(unsafe-car lst_0))"
"((rest_150)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_151)"
"(let-values(((fold-var_152)"
" fold-var_0))"
"(let-values(((fold-var_153)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_133"
" e_149))"
" fold-var_152))))"
"(values"
" fold-var_153)))))"
"(if(not #f)"
"(for-loop_146"
" fold-var_151"
" rest_150)"
" fold-var_151)))"
" fold-var_0)))))"
" for-loop_146)"
" null"
" lst_145)))))"
"((to-source?88_144) to-source?_0))"
"(compiled-tops->compiled-top8.1 #f #f to-source?88_144 temp87_143)))"
"(let-values()"
"(let-values(((exp-s89_155) exp-s_0)"
"((temp90_156)"
"(let-values(((ns93_160) ns_0))"
"(make-compile-context14.1"
" #f"
" unsafe-undefined"
" #f"
" ns93_160"
" unsafe-undefined"
" unsafe-undefined)))"
"((serializable?91_157) serializable?_0)"
"((to-source?92_158) to-source?_0))"
"(compile-top9.1"
" serializable?91_157"
" #f"
" to-source?92_158"
" exp-s89_155"
" temp90_156)))))))))"
" loop_133)"
" exp-s_132)))))"
"(define-values"
"(expand$1)"
"(let-values(((expand28_161)"
"(lambda(s27_0 ns23_0 observable?24_0 to-parsed?25_0 serializable?26_0)"
"(begin"
" 'expand28"
"(let-values(((s_167) s27_0))"
"(let-values(((ns_168)(if(eq? ns23_0 unsafe-undefined)(1/current-namespace) ns23_0)))"
"(let-values(((observable?_169) observable?24_0))"
"(let-values(((to-parsed?_170) to-parsed?25_0))"
"(let-values(((serializable?_171) serializable?26_0))"
"(let-values()"
"(let-values(((observer_172)(if observable?_169(current-expand-observe) #f)))"
"(begin"
"(if observer_172"
"(let-values()(call-expand-observe observer_172 'start-top))"
"(void))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-observe"
" #f)"
"(let-values()"
"(let-values(((s94_174) s_167)"
"((ns95_175) ns_168)"
"((temp96_176)"
"(lambda(s_0 ns_0 as-tail?_0)"
"(expand-single"
" s_0"
" ns_0"
" observer_172"
" to-parsed?_170"
" serializable?_171)))"
"((cons97_177) cons)"
"((re-pair98_178) re-pair)"
"((observer99_179) observer_172))"
"(per-top-level54.1"
" cons97_177"
" #f"
" observer99_179"
" #t"
" #f"
" temp96_176"
" re-pair98_178"
" s94_174"
" ns95_175))))))))))))))))"
"(case-lambda"
"((s_0)(begin 'expand(expand28_161 s_0 unsafe-undefined #f #f #f)))"
"((s_0 ns_0 observable?_0 to-parsed?_0 serializable?26_0)"
"(expand28_161 s_0 ns_0 observable?_0 to-parsed?_0 serializable?26_0))"
"((s_0 ns_0 observable?_0 to-parsed?25_0)(expand28_161 s_0 ns_0 observable?_0 to-parsed?25_0 #f))"
"((s_0 ns_0 observable?24_0)(expand28_161 s_0 ns_0 observable?24_0 #f #f))"
"((s_0 ns23_0)(expand28_161 s_0 ns23_0 #f #f #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_0 ns_0 observer_0 to-parsed?_0 serializable?_0)"
"(begin"
"(let-values(((rebuild-s_203)(keep-properties-only s_0)))"
"(let-values(((ctx_204)"
"(let-values(((ns100_209) ns_0)"
"((to-parsed?101_210) to-parsed?_0)"
"((serializable?102_211) serializable?_0)"
"((observer103_212) observer_0))"
"(make-expand-context10.1 serializable?102_211 observer103_212 to-parsed?101_210 ns100_209))))"
"(let-values(((require-lifts_205 lifts_206 exp-s_207)(expand-capturing-lifts s_0 ctx_204)))"
"(if(if(null? require-lifts_205)(null? lifts_206) #f)"
"(let-values() exp-s_207)"
"(if to-parsed?_0"
"(let-values()"
"(let-values(((require-lifts104_214) require-lifts_205)"
"((lifts105_215) lifts_206)"
"((exp-s106_216) exp-s_207)"
"((rebuild-s107_217) rebuild-s_203)"
"((temp108_218)"
"(lambda(form_0)(expand-single form_0 ns_0 observer_0 to-parsed?_0 serializable?_0))))"
"(wrap-lifts-as-lifted-parsed-begin63.1"
" temp108_218"
" require-lifts104_214"
" lifts105_215"
" exp-s106_216"
" rebuild-s107_217)))"
"(let-values()"
"(let-values((()"
"(begin"
"(log-top-lift-begin-before ctx_204 require-lifts_205 lifts_206 exp-s_207 ns_0)"
"(values))))"
"(let-values(((new-s_220)"
"(let-values(((temp109_222)(append require-lifts_205 lifts_206))"
"((temp110_223)"
"(lambda(form_0)"
"(begin"
"(let-values(((obs_228)(expand-context-observer ctx_204)))"
"(if obs_228"
"(let-values()"
"(let-values()(call-expand-observe obs_228 'next)))"
"(void)))"
"(expand-single"
" form_0"
" ns_0"
" observer_0"
" to-parsed?_0"
" serializable?_0))))"
"((temp111_224)"
"(lambda(form_0)"
"(if to-parsed?_0"
"(let-values() form_0)"
"(let-values()"
"(begin"
"(let-values(((obs_230)(expand-context-observer ctx_204)))"
"(if obs_230"
"(let-values()"
"(let-values()(call-expand-observe obs_230 'next)))"
"(void)))"
"(expand-single"
" form_0"
" ns_0"
" observer_0"
" to-parsed?_0"
" serializable?_0))))))"
"((exp-s112_225) exp-s_207)"
"((temp113_226)(namespace-phase ns_0)))"
"(wrap-lifts-as-begin16.1"
" temp111_224"
" temp110_223"
" temp109_222"
" exp-s112_225"
" temp113_226))))"
"(begin(log-top-begin-after ctx_204 new-s_220) new-s_220))))))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once32_231)"
"(lambda(s31_0 ns30_0)"
"(begin"
" 'expand-once32"
"(let-values(((s_234) s31_0))"
"(let-values(((ns_235)(if(eq? ns30_0 unsafe-undefined)(1/current-namespace) ns30_0)))"
"(let-values()"
"(let-values(((s114_237) s_234)"
"((ns115_238) ns_235)"
"((temp116_239)(lambda(s_0 ns_0 as-tail?_0)(expand-single-once s_0 ns_0)))"
"((cons117_240) cons)"
"((re-pair118_241) re-pair)"
"((temp119_242) #t)"
"((temp120_243) #f))"
"(per-top-level54.1"
" cons117_240"
" temp119_242"
" temp120_243"
" #t"
" #f"
" temp116_239"
" re-pair118_241"
" s114_237"
" ns115_238)))))))))"
"(case-lambda"
"((s_0)(begin 'expand-once(expand-once32_231 s_0 unsafe-undefined)))"
"((s_0 ns30_0)(expand-once32_231 s_0 ns30_0)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_0 ns_0)"
"(begin"
"(let-values(((require-lifts_252 lifts_253 exp-s_254)"
"(expand-capturing-lifts"
" s_0"
"(let-values(((v_255)"
"(let-values(((ns121_256) ns_0))(make-expand-context10.1 #f #f #f ns121_256))))"
"(let-values(((the-struct_257) v_255))"
"(if(expand-context/outer? the-struct_257)"
"(let-values(((inner122_258)"
"(let-values(((the-struct_259)(root-expand-context/outer-inner v_255)))"
"(if(expand-context/inner? the-struct_259)"
"(let-values(((just-once?123_260) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_259)"
"(root-expand-context/inner-module-scopes the-struct_259)"
"(root-expand-context/inner-top-level-bind-scope the-struct_259)"
"(root-expand-context/inner-all-scopes-stx the-struct_259)"
"(root-expand-context/inner-defined-syms the-struct_259)"
"(root-expand-context/inner-counter the-struct_259)"
"(root-expand-context/inner-lift-key the-struct_259)"
"(expand-context/inner-to-parsed? the-struct_259)"
"(expand-context/inner-phase the-struct_259)"
"(expand-context/inner-namespace the-struct_259)"
" just-once?123_260"
"(expand-context/inner-module-begin-k the-struct_259)"
"(expand-context/inner-allow-unbound? the-struct_259)"
"(expand-context/inner-in-local-expand? the-struct_259)"
"(expand-context/inner-keep-#%expression? the-struct_259)"
"(expand-context/inner-stops the-struct_259)"
"(expand-context/inner-declared-submodule-names the-struct_259)"
"(expand-context/inner-lifts the-struct_259)"
"(expand-context/inner-lift-envs the-struct_259)"
"(expand-context/inner-module-lifts the-struct_259)"
"(expand-context/inner-require-lifts the-struct_259)"
"(expand-context/inner-to-module-lifts the-struct_259)"
"(expand-context/inner-requires+provides the-struct_259)"
"(expand-context/inner-observer the-struct_259)"
"(expand-context/inner-for-serializable? the-struct_259)"
"(expand-context/inner-should-not-encounter-macros? the-struct_259)))"
"(raise-argument-error"
" 'struct-copy"
"                                              \"expand-context/inner?\""
" the-struct_259)))))"
"(expand-context/outer1.1"
" inner122_258"
"(root-expand-context/outer-post-expansion the-struct_257)"
"(root-expand-context/outer-use-site-scopes the-struct_257)"
"(root-expand-context/outer-frame-id the-struct_257)"
"(expand-context/outer-context the-struct_257)"
"(expand-context/outer-env the-struct_257)"
"(expand-context/outer-scopes the-struct_257)"
"(expand-context/outer-def-ctx-scopes the-struct_257)"
"(expand-context/outer-binding-layer the-struct_257)"
"(expand-context/outer-reference-records the-struct_257)"
"(expand-context/outer-only-immediate? the-struct_257)"
"(expand-context/outer-need-eventually-defined the-struct_257)"
"(expand-context/outer-current-introduction-scopes the-struct_257)"
"(expand-context/outer-current-use-scopes the-struct_257)"
"(expand-context/outer-name the-struct_257)))"
"                           (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_257)))))))"
"(if(if(null? require-lifts_252)(null? lifts_253) #f)"
"(let-values() exp-s_254)"
"(let-values()"
"(let-values(((temp124_261)(append require-lifts_252 lifts_253))"
"((exp-s125_262) exp-s_254)"
"((temp126_263)(namespace-phase ns_0)))"
"(wrap-lifts-as-begin16.1 unsafe-undefined unsafe-undefined temp124_261 exp-s125_262 temp126_263))))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form36_264)"
"(lambda(s35_0 ns34_0)"
"(begin"
" 'expand-to-top-form36"
"(let-values(((s_267) s35_0))"
"(let-values(((ns_268)(if(eq? ns34_0 unsafe-undefined)(1/current-namespace) ns34_0)))"
"(let-values()"
"(let-values(((observer_269)(current-expand-observe)))"
"(begin"
"(if observer_269(let-values()(call-expand-observe observer_269 'start-top))(void))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-observe"
" #f)"
"(let-values()"
"(let-values(((s127_271) s_267)"
"((ns128_272) ns_268)"
"((temp129_273) #f)"
"((temp130_274) #f)"
"((observer131_275) observer_269))"
"(per-top-level54.1"
" #f"
" #f"
" observer131_275"
" temp130_274"
" #f"
" temp129_273"
" #f"
" s127_271"
" ns128_272)))))))))))))"
"(case-lambda"
"((s_0)(begin 'expand-to-top-form(expand-to-top-form36_264 s_0 unsafe-undefined)))"
"((s_0 ns34_0)(expand-to-top-form36_264 s_0 ns34_0)))))"
"(define-values"
"(per-top-level54.1)"
"(lambda(combine39_0"
" just-once?41_0"
" observer44_0"
" quick-immediate?42_0"
" serializable?43_0"
" single38_0"
" wrap40_0"
" given-s52_0"
" ns53_0)"
"(begin"
" 'per-top-level54"
"(let-values(((given-s_294) given-s52_0))"
"(let-values(((ns_295) ns53_0))"
"(let-values(((single_296) single38_0))"
"(let-values(((combine_297) combine39_0))"
"(let-values(((wrap_298) wrap40_0))"
"(let-values(((just-once?_299) just-once?41_0))"
"(let-values(((quick-immediate?_300) quick-immediate?42_0))"
"(let-values(((serializable?_301) serializable?43_0))"
"(let-values(((observer_302) observer44_0))"
"(let-values()"
"(let-values(((s_303)(maybe-intro given-s_294 ns_295)))"
"(let-values(((ctx_304)"
"(let-values(((ns132_307) ns_295)((observer133_308) observer_302))"
"(make-expand-context10.1 #f observer133_308 #f ns132_307))))"
"(let-values(((phase_305)(namespace-phase ns_295)))"
"((letrec-values(((loop_309)"
"(lambda(s_0 phase_0 ns_0 as-tail?_0)"
"(begin"
" 'loop"
"(let-values(((tl-ctx_314)"
"(let-values(((v_320) ctx_304))"
"(let-values(((the-struct_321) v_320))"
"(if(expand-context/outer? the-struct_321)"
"(let-values(((inner134_322)"
"(let-values(((the-struct_323)"
"(root-expand-context/outer-inner"
" v_320)))"
"(if(expand-context/inner?"
" the-struct_323)"
"(let-values(((phase135_324)"
" phase_0)"
"((namespace136_325)"
" ns_0)"
"((just-once?137_326)"
" just-once?_299)"
"((for-serializable?138_327)"
" serializable?_301))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_323)"
"(root-expand-context/inner-module-scopes"
" the-struct_323)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_323)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_323)"
"(root-expand-context/inner-defined-syms"
" the-struct_323)"
"(root-expand-context/inner-counter"
" the-struct_323)"
"(root-expand-context/inner-lift-key"
" the-struct_323)"
"(expand-context/inner-to-parsed?"
" the-struct_323)"
" phase135_324"
" namespace136_325"
" just-once?137_326"
"(expand-context/inner-module-begin-k"
" the-struct_323)"
"(expand-context/inner-allow-unbound?"
" the-struct_323)"
"(expand-context/inner-in-local-expand?"
" the-struct_323)"
"(expand-context/inner-keep-#%expression?"
" the-struct_323)"
"(expand-context/inner-stops"
" the-struct_323)"
"(expand-context/inner-declared-submodule-names"
" the-struct_323)"
"(expand-context/inner-lifts"
" the-struct_323)"
"(expand-context/inner-lift-envs"
" the-struct_323)"
"(expand-context/inner-module-lifts"
" the-struct_323)"
"(expand-context/inner-require-lifts"
" the-struct_323)"
"(expand-context/inner-to-module-lifts"
" the-struct_323)"
"(expand-context/inner-requires+provides"
" the-struct_323)"
"(expand-context/inner-observer"
" the-struct_323)"
" for-serializable?138_327"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_323)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                             \"expand-context/inner?\""
" the-struct_323)))))"
"(expand-context/outer1.1"
" inner134_322"
"(root-expand-context/outer-post-expansion"
" the-struct_321)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_321)"
"(root-expand-context/outer-frame-id"
" the-struct_321)"
"(expand-context/outer-context"
" the-struct_321)"
"(expand-context/outer-env the-struct_321)"
"(expand-context/outer-scopes"
" the-struct_321)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_321)"
"(expand-context/outer-binding-layer"
" the-struct_321)"
"(expand-context/outer-reference-records"
" the-struct_321)"
"(expand-context/outer-only-immediate?"
" the-struct_321)"
"(expand-context/outer-need-eventually-defined"
" the-struct_321)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_321)"
"(expand-context/outer-current-use-scopes"
" the-struct_321)"
"(expand-context/outer-name"
" the-struct_321)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                           \"expand-context/outer?\""
" the-struct_321))))))"
"(let-values(((wb-s_315)(if just-once?_299 s_0 #f)))"
"(let-values((()"
"(begin"
"(let-values(((obs_328)"
"(expand-context-observer"
" tl-ctx_314)))"
"(if obs_328"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_328"
" 'visit"
" s_0)))"
"(void)))"
"(values))))"
"(let-values(((require-lifts_316 lifts_317 exp-s_318)"
"(expand-capturing-lifts"
" s_0"
"(let-values(((v_329) tl-ctx_314))"
"(let-values(((the-struct_330) v_329))"
"(if(expand-context/outer?"
" the-struct_330)"
"(let-values(((only-immediate?139_331)"
" #t)"
"((inner140_332)"
"(let-values(((the-struct_333)"
"(root-expand-context/outer-inner"
" v_329)))"
"(if(expand-context/inner?"
" the-struct_333)"
"(let-values(((phase141_334)"
" phase_0)"
"((namespace142_335)"
" ns_0))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_333)"
"(root-expand-context/inner-module-scopes"
" the-struct_333)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_333)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_333)"
"(root-expand-context/inner-defined-syms"
" the-struct_333)"
"(root-expand-context/inner-counter"
" the-struct_333)"
"(root-expand-context/inner-lift-key"
" the-struct_333)"
"(expand-context/inner-to-parsed?"
" the-struct_333)"
" phase141_334"
" namespace142_335"
"(expand-context/inner-just-once?"
" the-struct_333)"
"(expand-context/inner-module-begin-k"
" the-struct_333)"
"(expand-context/inner-allow-unbound?"
" the-struct_333)"
"(expand-context/inner-in-local-expand?"
" the-struct_333)"
"(expand-context/inner-keep-#%expression?"
" the-struct_333)"
"(expand-context/inner-stops"
" the-struct_333)"
"(expand-context/inner-declared-submodule-names"
" the-struct_333)"
"(expand-context/inner-lifts"
" the-struct_333)"
"(expand-context/inner-lift-envs"
" the-struct_333)"
"(expand-context/inner-module-lifts"
" the-struct_333)"
"(expand-context/inner-require-lifts"
" the-struct_333)"
"(expand-context/inner-to-module-lifts"
" the-struct_333)"
"(expand-context/inner-requires+provides"
" the-struct_333)"
"(expand-context/inner-observer"
" the-struct_333)"
"(expand-context/inner-for-serializable?"
" the-struct_333)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_333)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                    \"expand-context/inner?\""
" the-struct_333)))))"
"(expand-context/outer1.1"
" inner140_332"
"(root-expand-context/outer-post-expansion"
" the-struct_330)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_330)"
"(root-expand-context/outer-frame-id"
" the-struct_330)"
"(expand-context/outer-context"
" the-struct_330)"
"(expand-context/outer-env"
" the-struct_330)"
"(expand-context/outer-scopes"
" the-struct_330)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_330)"
"(expand-context/outer-binding-layer"
" the-struct_330)"
"(expand-context/outer-reference-records"
" the-struct_330)"
" only-immediate?139_331"
"(expand-context/outer-need-eventually-defined"
" the-struct_330)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_330)"
"(expand-context/outer-current-use-scopes"
" the-struct_330)"
"(expand-context/outer-name"
" the-struct_330)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                  \"expand-context/outer?\""
" the-struct_330)))))))"
"(let-values(((disarmed-exp-s_319)"
"(syntax-disarm$1 exp-s_318)))"
"(if(let-values(((or-part_336)"
"(pair? require-lifts_316)))"
"(if or-part_336 or-part_336(pair? lifts_317)))"
"(let-values()"
"(let-values(((new-s_337)"
"(let-values(((temp143_338)"
"(append"
" require-lifts_316"
" lifts_317))"
"((exp-s144_339)"
" exp-s_318)"
"((phase145_340) phase_0))"
"(wrap-lifts-as-begin16.1"
" unsafe-undefined"
" unsafe-undefined"
" temp143_338"
" exp-s144_339"
" phase145_340))))"
"(begin"
"(let-values(((obs_341)"
"(expand-context-observer"
" tl-ctx_314)))"
"(if obs_341"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_341"
" 'lift-loop"
" new-s_337)))"
"(void)))"
"(if just-once?_299"
" new-s_337"
"(loop_309"
" new-s_337"
" phase_0"
" ns_0"
" as-tail?_0)))))"
"(if(not single_296)"
"(let-values()"
"(begin"
"(let-values(((obs_342)"
"(expand-context-observer"
" tl-ctx_314)))"
"(if obs_342"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_342"
" 'return"
" exp-s_318)))"
"(void)))"
" exp-s_318))"
"(if(if just-once?_299"
"(not(eq? exp-s_318 wb-s_315))"
" #f)"
"(let-values() exp-s_318)"
"(let-values()"
"(let-values(((tmp_343)"
"(core-form-sym"
" disarmed-exp-s_319"
" phase_0)))"
"(if(equal? tmp_343 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_361)"
"(expand-context-observer"
" ctx_304)))"
"(if obs_361"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_361"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_344"
" begin146_345"
" e147_346)"
"(let-values(((s_362)"
" disarmed-exp-s_319))"
"(let-values(((orig-s_363)"
" s_362))"
"(let-values(((begin146_364"
" e147_365)"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_362)"
"(syntax-e$1"
" s_362)"
" s_362)))"
"(if(pair?"
" s_366)"
"(let-values(((begin148_367)"
"(let-values(((s_369)"
"(car"
" s_366)))"
" s_369))"
"((e149_368)"
"(let-values(((s_370)"
"(cdr"
" s_366)))"
"(let-values(((s_371)"
"(if(syntax?$1"
" s_370)"
"(syntax-e$1"
" s_370)"
" s_370)))"
"(let-values(((flat-s_372)"
"(to-syntax-list.1"
" s_371)))"
"(if(not"
" flat-s_372)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_363))"
"(let-values()"
" flat-s_372)))))))"
"(values"
" begin148_367"
" e149_368))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_363)))))"
"(values"
" #t"
" begin146_364"
" e147_365))))))"
"(letrec-values(((begin-loop_360)"
"(lambda(es_0)"
"(begin"
" 'begin-loop"
"(if(null? es_0)"
"(let-values()"
"(if combine_297"
" null"
"(void)))"
"(if(if(not"
" combine_297)"
"(null?"
"(cdr"
" es_0))"
" #f)"
"(let-values()"
"(loop_309"
"(car es_0)"
" phase_0"
" ns_0"
" as-tail?_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_375)"
"(expand-context-observer"
" tl-ctx_314)))"
"(if obs_375"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_375"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((a_374)"
"(if combine_297"
"(loop_309"
"(car"
" es_0)"
" phase_0"
" ns_0"
" #f)"
"(begin"
"(loop_309"
"(car"
" es_0)"
" phase_0"
" ns_0"
" #f)"
"(void)))))"
"(if combine_297"
"(combine_297"
" a_374"
"(begin-loop_360"
"(cdr"
" es_0)))"
"(begin-loop_360"
"(cdr"
" es_0))))))))))))"
"(if wrap_298"
"(let-values()"
"(let-values(((new-s_376)"
"(wrap_298"
" begin146_345"
" exp-s_318"
"(begin-loop_360"
" e147_346))))"
"(begin"
"(let-values(((obs_377)"
"(expand-context-observer"
" tl-ctx_314)))"
"(if obs_377"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_377"
" 'return"
" new-s_376)))"
"(void)))"
" new-s_376)))"
"(let-values()"
"(begin-loop_360 e147_346)))))))"
"(if(equal? tmp_343 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_397)"
"(expand-context-observer"
" tl-ctx_314)))"
"(if obs_397"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_397"
" 'prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values(((ok?_378"
" begin-for-syntax150_379"
" e151_380)"
"(let-values(((s_398)"
" disarmed-exp-s_319))"
"(let-values(((orig-s_399)"
" s_398))"
"(let-values(((begin-for-syntax150_400"
" e151_401)"
"(let-values(((s_402)"
"(if(syntax?$1"
" s_398)"
"(syntax-e$1"
" s_398)"
" s_398)))"
"(if(pair?"
" s_402)"
"(let-values(((begin-for-syntax152_403)"
"(let-values(((s_405)"
"(car"
" s_402)))"
" s_405))"
"((e153_404)"
"(let-values(((s_406)"
"(cdr"
" s_402)))"
"(let-values(((s_407)"
"(if(syntax?$1"
" s_406)"
"(syntax-e$1"
" s_406)"
" s_406)))"
"(let-values(((flat-s_408)"
"(to-syntax-list.1"
" s_407)))"
"(if(not"
" flat-s_408)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_399))"
"(let-values()"
" flat-s_408)))))))"
"(values"
" begin-for-syntax152_403"
" e153_404))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_399)))))"
"(values"
" #t"
" begin-for-syntax150_400"
" e151_401))))))"
"(let-values(((next-phase_394)"
"(add1 phase_0)))"
"(let-values(((next-ns_395)"
"(namespace->namespace-at-phase"
" ns_0"
" next-phase_394)))"
"(let-values((()"
"(begin"
"(let-values(((obs_409)"
"(expand-context-observer"
" tl-ctx_314)))"
"(if obs_409"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_409"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if quick-immediate?_300"
"(let-values()"
"(namespace-visit-available-modules!"
" ns_0))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_395)"
"(values))))"
"(let-values(((l_396)"
"(reverse$1"
"(let-values(((lst_410)"
" e151_380))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_410)))"
"((letrec-values(((for-loop_411)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_414)"
"(unsafe-car"
" lst_0))"
"((rest_415)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_416)"
"(let-values(((fold-var_417)"
" fold-var_0))"
"(let-values(((fold-var_418)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_419)"
"(expand-context-observer"
" tl-ctx_314)))"
"(if obs_419"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_419"
" 'next)))"
"(void)))"
"(loop_309"
" s_414"
" next-phase_394"
" next-ns_395"
" #f)))"
" fold-var_417))))"
"(values"
" fold-var_418)))))"
"(if(not"
" #f)"
"(for-loop_411"
" fold-var_416"
" rest_415)"
" fold-var_416)))"
" fold-var_0)))))"
" for-loop_411)"
" null"
" lst_410))))))"
"(if wrap_298"
"(let-values()"
"(let-values(((new-s_420)"
"(wrap_298"
" begin-for-syntax150_379"
" exp-s_318"
" l_396)))"
"(begin"
"(let-values(((obs_421)"
"(expand-context-observer"
" tl-ctx_314)))"
"(if obs_421"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_421"
" 'return"
" new-s_420)))"
"(void)))"
" new-s_420)))"
"(if combine_297"
"(let-values()"
"(apply"
" append"
" l_396))"
"(let-values()"
"(void)))))))))))))"
"(let-values()"
"(single_296"
" exp-s_318"
" ns_0"
" as-tail?_0))))))))))))))))))"
" loop_309)"
" s_303"
" phase_305"
" ns_295"
" #t)))))))))))))))))"
"(define-values"
"(maybe-intro)"
"(lambda(s_0 ns_0)(begin(if(syntax?$1 s_0) s_0(1/namespace-syntax-introduce(1/datum->syntax #f s_0) ns_0)))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_0 s_0 r_0)"
"(begin(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_0)(cons form-id_0 r_0) s_0 s_0) s_0))))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_0 ctx_0)"
"(begin"
"(let-values()"
"(let-values(((ns_463)(expand-context-namespace ctx_0)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_463)(values))))"
"(let-values(((lift-ctx_464)"
"(let-values(((temp154_467)(make-top-level-lift ctx_0)))"
"(make-lift-context6.1 #f temp154_467))))"
"(let-values(((require-lift-ctx_465)"
"(make-require-lift-context"
"(namespace-phase ns_463)"
"(make-parse-top-lifted-require ns_463))))"
"(let-values(((exp-s_466)"
"(let-values(((s155_468) s_0)"
"((temp156_469)"
"(let-values(((v_470) ctx_0))"
"(let-values(((the-struct_471) v_470))"
"(if(expand-context/outer? the-struct_471)"
"(let-values(((inner157_472)"
"(let-values(((the-struct_473)"
"(root-expand-context/outer-inner v_470)))"
"(if(expand-context/inner? the-struct_473)"
"(let-values(((lifts158_474) lift-ctx_464)"
"((module-lifts159_475) lift-ctx_464)"
"((require-lifts160_476)"
" require-lift-ctx_465))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_473)"
"(root-expand-context/inner-module-scopes"
" the-struct_473)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_473)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_473)"
"(root-expand-context/inner-defined-syms"
" the-struct_473)"
"(root-expand-context/inner-counter"
" the-struct_473)"
"(root-expand-context/inner-lift-key"
" the-struct_473)"
"(expand-context/inner-to-parsed? the-struct_473)"
"(expand-context/inner-phase the-struct_473)"
"(expand-context/inner-namespace the-struct_473)"
"(expand-context/inner-just-once? the-struct_473)"
"(expand-context/inner-module-begin-k"
" the-struct_473)"
"(expand-context/inner-allow-unbound?"
" the-struct_473)"
"(expand-context/inner-in-local-expand?"
" the-struct_473)"
"(expand-context/inner-keep-#%expression?"
" the-struct_473)"
"(expand-context/inner-stops the-struct_473)"
"(expand-context/inner-declared-submodule-names"
" the-struct_473)"
" lifts158_474"
"(expand-context/inner-lift-envs the-struct_473)"
" module-lifts159_475"
" require-lifts160_476"
"(expand-context/inner-to-module-lifts"
" the-struct_473)"
"(expand-context/inner-requires+provides"
" the-struct_473)"
"(expand-context/inner-observer the-struct_473)"
"(expand-context/inner-for-serializable?"
" the-struct_473)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_473)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context/inner?\""
" the-struct_473)))))"
"(expand-context/outer1.1"
" inner157_472"
"(root-expand-context/outer-post-expansion the-struct_471)"
"(root-expand-context/outer-use-site-scopes the-struct_471)"
"(root-expand-context/outer-frame-id the-struct_471)"
"(expand-context/outer-context the-struct_471)"
"(expand-context/outer-env the-struct_471)"
"(expand-context/outer-scopes the-struct_471)"
"(expand-context/outer-def-ctx-scopes the-struct_471)"
"(expand-context/outer-binding-layer the-struct_471)"
"(expand-context/outer-reference-records the-struct_471)"
"(expand-context/outer-only-immediate? the-struct_471)"
"(expand-context/outer-need-eventually-defined the-struct_471)"
"(expand-context/outer-current-introduction-scopes the-struct_471)"
"(expand-context/outer-current-use-scopes the-struct_471)"
"(expand-context/outer-name the-struct_471)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context/outer?\""
" the-struct_471))))))"
"(expand9.1 #f #f #f s155_468 temp156_469))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_465)"
"(get-and-clear-lifts! lift-ctx_464)"
" exp-s_466))))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_0)"
"(begin"
"(lambda(s_0 phase_0)"
"(let-values(((ok?_480 #%require161_481 req162_482)"
"(let-values(((s_496)(syntax-disarm$1 s_0)))"
"(let-values(((orig-s_497) s_496))"
"(let-values(((#%require161_498 req162_499)"
"(let-values(((s_500)(if(syntax?$1 s_496)(syntax-e$1 s_496) s_496)))"
"(if(pair? s_500)"
"(let-values(((#%require163_501)(let-values(((s_503)(car s_500))) s_503))"
"((req164_502)"
"(let-values(((s_504)(cdr s_500)))"
"(let-values(((s_505)"
"(if(syntax?$1 s_504)"
"(syntax-e$1 s_504)"
" s_504)))"
"(if(pair? s_505)"
"(let-values(((req165_506)"
"(let-values(((s_507)(car s_505)))"
" s_507))"
"(()"
"(let-values(((s_508)(cdr s_505)))"
"(let-values(((s_509)"
"(if(syntax?$1 s_508)"
"(syntax-e$1 s_508)"
" s_508)))"
"(if(null? s_509)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_497))))))"
"(values req165_506))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_497))))))"
"(values #%require163_501 req164_502))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_497)))))"
"(values #t #%require161_498 req162_499))))))"
"(let-values(((temp166_511)(list req162_482))"
"((s167_512) s_0)"
"((ns168_513) ns_0)"
"((phase169_514) phase_0)"
"((phase170_515) phase_0)"
"((temp171_516)(let-values(((temp173_518) #f))(make-requires+provides8.1 #f temp173_518)))"
"((temp172_517) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" unsafe-undefined"
" #f"
" phase170_515"
" #f"
" #f"
" #f"
" #t"
" temp172_517"
" temp166_511"
" s167_512"
" ns168_513"
" phase169_514"
" temp171_516)))))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin63.1)"
"(lambda(adjust-form57_0 require-lifts59_0 lifts60_0 exp-s61_0 rebuild-s62_0)"
"(begin"
" 'wrap-lifts-as-lifted-parsed-begin63"
"(let-values(((require-lifts_534) require-lifts59_0))"
"(let-values(((lifts_535) lifts60_0))"
"(let-values(((exp-s_536) exp-s61_0))"
"(let-values(((rebuild-s_537) rebuild-s62_0))"
"(let-values(((adjust-form_538) adjust-form57_0))"
"(let-values()"
"(lifted-parsed-begin22.1"
"(append"
"(reverse$1"
"(let-values(((lst_539) require-lifts_534))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_539)))"
"((letrec-values(((for-loop_540)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((req_543)(unsafe-car lst_0))"
"((rest_544)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_545)"
"(let-values(((fold-var_546) fold-var_0))"
"(let-values(((fold-var_547)"
"(let-values()"
"(cons"
"(let-values()"
"(parsed-require23.1 req_543))"
" fold-var_546))))"
"(values fold-var_547)))))"
"(if(not #f)(for-loop_540 fold-var_545 rest_544) fold-var_545)))"
" fold-var_0)))))"
" for-loop_540)"
" null"
" lst_539))))"
"(reverse$1"
"(let-values(((lst_548)(get-lifts-as-lists lifts_535)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_548)))"
"((letrec-values(((for-loop_549)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((ids+syms+rhs_552)(unsafe-car lst_0))"
"((rest_553)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_554)"
"(let-values(((fold-var_555) fold-var_0))"
"(let-values(((fold-var_556)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((exp-rhs_557)"
"(adjust-form_538"
"(caddr"
" ids+syms+rhs_552))))"
"(let-values(((just-rhs_558)"
"(if(lifted-parsed-begin?"
" exp-rhs_557)"
"(lifted-parsed-begin-last"
" exp-rhs_557)"
" exp-rhs_557)))"
"(let-values(((dv_559)"
"(parsed-define-values19.1"
" rebuild-s_537"
"(car"
" ids+syms+rhs_552)"
"(cadr"
" ids+syms+rhs_552)"
" just-rhs_558)))"
"(if(lifted-parsed-begin?"
" exp-rhs_557)"
"(let-values(((the-struct_560)"
" exp-rhs_557))"
"(if(lifted-parsed-begin?"
" the-struct_560)"
"(let-values(((last174_561)"
" dv_559))"
"(lifted-parsed-begin22.1"
"(lifted-parsed-begin-seq"
" the-struct_560)"
" last174_561))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"lifted-parsed-begin?\""
" the-struct_560)))"
" dv_559)))))"
" fold-var_555))))"
"(values fold-var_556)))))"
"(if(not #f)(for-loop_549 fold-var_554 rest_553) fold-var_554)))"
" fold-var_0)))))"
" for-loop_549)"
" null"
" lst_548)))))"
" exp-s_536))))))))))"
"(define-values"
"(log-top-lift-begin-before)"
"(lambda(ctx_0 require-lifts_0 lifts_0 exp-s_0 ns_0)"
"(begin"
"(let-values(((obs_583)(expand-context-observer ctx_0)))"
"(if obs_583"
"(let-values()"
"(let-values(((new-s_584)"
"(let-values(((temp175_585)(append require-lifts_0 lifts_0))"
"((exp-s176_586) exp-s_0)"
"((temp177_587)(namespace-phase ns_0)))"
"(wrap-lifts-as-begin16.1"
" unsafe-undefined"
" unsafe-undefined"
" temp175_585"
" exp-s176_586"
" temp177_587))))"
"(begin(call-expand-observe obs_583 'lift-loop new-s_584)(log-top-begin-before ctx_0 new-s_584))))"
"(void))))))"
"(define-values"
"(log-top-begin-before)"
"(lambda(ctx_0 new-s_0)"
"(begin"
"(let-values(((obs_590)(expand-context-observer ctx_0)))"
"(if obs_590"
"(let-values()"
"(let-values(((ok?_591 begin178_592 e179_593)"
"(let-values(((s_607) new-s_0))"
"(let-values(((orig-s_608) s_607))"
"(let-values(((begin178_609 e179_610)"
"(let-values(((s_611)(if(syntax?$1 s_607)(syntax-e$1 s_607) s_607)))"
"(if(pair? s_611)"
"(let-values(((begin180_612)(let-values(((s_614)(car s_611))) s_614))"
"((e181_613)"
"(let-values(((s_615)(cdr s_611)))"
"(let-values(((s_616)"
"(if(syntax?$1 s_615)"
"(syntax-e$1 s_615)"
" s_615)))"
"(let-values(((flat-s_617)(to-syntax-list.1 s_616)))"
"(if(not flat-s_617)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_608))"
"(let-values() flat-s_617)))))))"
"(values begin180_612 e181_613))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_608)))))"
"(values #t begin178_609 e179_610))))))"
"(begin"
"(call-expand-observe obs_590 'visit new-s_0)"
"(call-expand-observe obs_590 'resolve begin178_592)"
"(call-expand-observe obs_590 'enter-prim new-s_0)"
"(call-expand-observe obs_590 'prim-begin)"
"(call-expand-observe obs_590 'enter-list(1/datum->syntax #f e179_593 new-s_0)))))"
"(void))))))"
"(define-values"
"(log-top-begin-after)"
"(lambda(ctx_0 new-s_0)"
"(begin"
"(let-values(((obs_620)(expand-context-observer ctx_0)))"
"(if obs_620"
"(let-values()"
"(let-values(((ok?_621 begin182_622 e183_623)"
"(let-values(((s_637) new-s_0))"
"(let-values(((orig-s_638) s_637))"
"(let-values(((begin182_639 e183_640)"
"(let-values(((s_641)(if(syntax?$1 s_637)(syntax-e$1 s_637) s_637)))"
"(if(pair? s_641)"
"(let-values(((begin184_642)(let-values(((s_644)(car s_641))) s_644))"
"((e185_643)"
"(let-values(((s_645)(cdr s_641)))"
"(let-values(((s_646)"
"(if(syntax?$1 s_645)"
"(syntax-e$1 s_645)"
" s_645)))"
"(let-values(((flat-s_647)(to-syntax-list.1 s_646)))"
"(if(not flat-s_647)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_638))"
"(let-values() flat-s_647)))))))"
"(values begin184_642 e185_643))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_638)))))"
"(values #t begin182_639 e183_640))))))"
"(let-values(((obs_648)(expand-context-observer ctx_0)))"
"(if obs_648"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_648 'exit-list(1/datum->syntax #f e183_623 new-s_0))"
"(call-expand-observe obs_648 'exit-prim new-s_0)"
"(call-expand-observe obs_648 'return new-s_0))))"
"(void)))))"
"(void))))))"
" (define-values (replace-me) (lambda (who_0) (begin (lambda args_0 (error who_0 \"this stub must be replaced\")))))"
"(define-values"
"(1/current-eval)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-eval)"
"(lambda(p_0)"
"(begin"
"(if((lambda(p_1)(if(procedure? p_1)(procedure-arity-includes? p_1 1) #f)) p_0)"
"(void)"
"             (let-values () (raise-argument-error 'current-eval \"(procedure-arity-includes/c 1)\" p_0)))"
" p_0))))))"
"(define-values"
"(1/current-compile)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-compile)"
"(lambda(p_0)"
"(begin"
"(if((lambda(p_1)(if(procedure? p_1)(procedure-arity-includes? p_1 2) #f)) p_0)"
"(void)"
"             (let-values () (raise-argument-error 'current-compile \"(procedure-arity-includes/c 2)\" p_0)))"
" p_0))))))"
"(define-values"
"(1/current-load)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-load)"
"(lambda(p_0)"
"(begin"
"(if((lambda(p_1)(if(procedure? p_1)(procedure-arity-includes? p_1 2) #f)) p_0)"
"(void)"
"             (let-values () (raise-argument-error 'current-load \"(procedure-arity-includes/c 2)\" p_0)))"
" p_0))))))"
"(define-values"
"(1/current-load/use-compiled)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-load/use-compiled)"
"(lambda(p_0)"
"(begin"
"(if((lambda(p_1)(if(procedure? p_1)(procedure-arity-includes? p_1 2) #f)) p_0)"
"(void)"
"             (let-values () (raise-argument-error 'current-load/use-compiled \"(procedure-arity-includes/c 2)\" p_0)))"
" p_0))))))"
"(define-values"
"(1/current-library-collection-paths)"
"(let-values()"
"(let-values()"
"(make-parameter"
" null"
"(lambda(l_0)"
"(begin"
"(if((lambda(l_1)(if(list? l_1)(andmap2 complete-path-string? l_1) #f)) l_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-library-collection-paths"
"                \"(listof (and/c path-string? complete-path?))\""
" l_0)))"
"(map2 to-path l_0)))))))"
"(define-values"
"(1/current-library-collection-links)"
"(let-values()"
"(let-values()"
"(make-parameter"
" null"
"(lambda(l_0)"
"(begin"
"(if((lambda(l_1)"
"(if(list? l_1)"
"(andmap2"
"(lambda(p_0)"
"(let-values(((or-part_22)(not p_0)))"
"(if or-part_22"
" or-part_22"
"(let-values(((or-part_23)(complete-path-string? p_0)))"
"(if or-part_23"
" or-part_23"
"(if(hash? p_0)"
"(let-values(((ht_24) p_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_24)))"
"((letrec-values(((for-loop_25)"
"(lambda(result_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_28 v_29)"
"(hash-iterate-key+value ht_24 i_0)))"
"(let-values(((result_30)"
"(let-values()"
"(let-values(((result_32)"
"(let-values()"
"(let-values()"
"(if(let-values(((or-part_33)"
"(not"
" k_28)))"
"(if or-part_33"
" or-part_33"
"(if(symbol?"
" k_28)"
"(1/module-path?"
" k_28)"
" #f)))"
"(if(list? v_29)"
"(andmap2"
" complete-path-string?"
" v_29)"
" #f)"
" #f)))))"
"(values result_32)))))"
"(if(if(not((lambda x_0(not result_30)) k_28 v_29))"
"(not #f)"
" #f)"
"(for-loop_25 result_30(hash-iterate-next ht_24 i_0))"
" result_30)))"
" result_0)))))"
" for-loop_25)"
" #t"
"(hash-iterate-first ht_24))))"
" #f))))))"
" l_1)"
" #f))"
" l_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-library-collection-links"
"(string-append"
"                 \"(listof (or/c #f\\n\""
"                 \"              (and/c path-string? complete-path?)\\n\""
"                 \"              (hash/c (or/c (and/c symbol? module-path?) #f)\\n\""
"                 \"                      (listof (and/c path-string? complete-path?)))))\")"
" l_0)))"
"(map2"
"(lambda(p_0)"
"(if(not p_0)"
"(let-values() #f)"
"(if(path? p_0)"
"(let-values() p_0)"
"(if(string? p_0)"
"(let-values()(string->path p_0))"
"(let-values()"
"(let-values(((ht_36) p_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_36)))"
"((letrec-values(((for-loop_37)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_40 v_41)(hash-iterate-key+value ht_36 i_0)))"
"(let-values(((table_42)"
"(let-values(((table_43) table_0))"
"(let-values(((table_44)"
"(let-values()"
"(let-values(((key_45 val_46)"
"(let-values()"
"(values"
" k_40"
"(to-path v_41)))))"
"(hash-set"
" table_43"
" key_45"
" val_46)))))"
"(values table_44)))))"
"(if(not #f)"
"(for-loop_37 table_42(hash-iterate-next ht_36 i_0))"
" table_42)))"
" table_0)))))"
" for-loop_37)"
" '#hash()"
"(hash-iterate-first ht_36)))))))))"
" l_0)))))))"
"(define-values"
"(1/use-compiled-file-paths)"
"(let-values()"
"(let-values()"
"(make-parameter"
"       (list (string->path \"compiled\"))"
"(lambda(l_0)"
"(begin"
"(if((lambda(l_1)(if(list? l_1)(andmap2 relative-path-string?$1 l_1) #f)) l_0)"
"(void)"
"(let-values()"
"               (raise-argument-error 'use-compiled-file-paths \"(listof (and/c path-string? relative-path?))\" l_0)))"
"(map2 to-path l_0)))))))"
"(define-values"
"(1/current-compiled-file-roots)"
"(let-values()"
"(let-values()"
"(make-parameter"
" '(same)"
"(lambda(l_0)"
"(begin"
"(if((lambda(l_1)"
"(if(list? l_1)"
"(andmap2"
"(lambda(p_0)"
"(let-values(((or-part_54)(path-string? p_0)))(if or-part_54 or-part_54(eq? p_0 'same))))"
" l_1)"
" #f))"
" l_0)"
"(void)"
"(let-values()"
"               (raise-argument-error 'current-compiled-file-roots \"(listof (or/c path-string? 'same))\" l_0)))"
"(map2 to-path l_0)))))))"
"(define-values"
"(1/use-compiled-file-check)"
"(let-values()"
"(let-values()"
"(make-parameter"
" 'modify-seconds"
"(lambda(v_0)"
"(begin"
"(if((lambda(v_1)"
"(let-values(((or-part_58)(eq? v_1 'modify-seconds)))(if or-part_58 or-part_58(eq? v_1 'exists))))"
" v_0)"
"(void)"
"             (let-values () (raise-argument-error 'use-compiled-file-check \"(or/c 'modify-seconds 'exists)\" v_0)))"
" v_0))))))"
"(define-values(1/use-collection-link-paths)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/use-user-specific-search-paths)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(complete-path-string?)(lambda(p_0)(begin(if(path-string? p_0)(complete-path? p_0) #f))))"
"(define-values"
"(relative-path-string?$1)"
"(lambda(p_0)(begin 'relative-path-string?(if(path-string? p_0)(relative-path? p_0) #f))))"
"(define-values(to-path)(lambda(p_0)(begin(if(string? p_0)(string->path p_0) p_0))))"
"(define-values"
"(eval$1)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((s_0)(begin 'eval((1/current-eval)(intro s_0))))"
"((s_0 ns_0)"
"(begin"
"          (if (1/namespace? ns_0) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_0)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_0)"
"(let-values()((1/current-eval)(intro s_0 ns_0))))))))))"
"(define-values"
"(1/eval-syntax)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((s_0)"
"(begin"
" 'eval-syntax"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_0)))"
"((1/current-eval) s_0))))"
"((s_0 ns_0)"
"(begin"
"          (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_0)))"
"          (if (1/namespace? ns_0) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_0)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_0)"
"(let-values()((1/current-eval) s_0)))))))))"
"(define-values(compile$1)(lambda(s_0)(begin 'compile((1/current-compile)(intro s_0) #f))))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_0)"
"(begin"
" 'compile-syntax"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_0)))"
"((1/current-compile) s_0 #f)))))))"
"(define-values(1/expand)(lambda(s_0)(begin 'expand(expand$1(intro s_0)(1/current-namespace) #t))))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_0)"
"(begin"
" 'expand-syntax"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_0)))"
"(expand$1 s_0(1/current-namespace) #t)))))))"
"(define-values(1/expand-once)(lambda(s_0)(begin 'expand-once(expand-once$1(intro s_0)))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_0)"
"(begin"
" 'expand-syntax-once"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_0)))"
"(expand-once$1 s_0)))))))"
"(define-values(1/expand-to-top-form)(lambda(s_0)(begin 'expand-to-top-form(expand-to-top-form$1(intro s_0)))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_0)"
"(begin"
" 'expand-syntax-to-top-form"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_0)))"
"(expand-to-top-form$1 s_0)))))))"
"(define-values"
"(intro)"
"(let-values(((intro3_21)"
"(lambda(given-s2_0 ns1_0)"
"(begin"
" 'intro3"
"(let-values(((given-s_24) given-s2_0))"
"(let-values(((ns_25)(if(eq? ns1_0 unsafe-undefined)(1/current-namespace) ns1_0)))"
"(let-values()"
"(let-values(((s_26)(if(syntax?$1 given-s_24) given-s_24(1/datum->syntax #f given-s_24))))"
"(1/namespace-syntax-introduce s_26 ns_25)))))))))"
"(case-lambda"
"((given-s_0)(begin(intro3_21 given-s_0 unsafe-undefined)))"
"((given-s_0 ns1_0)(intro3_21 given-s_0 ns1_0)))))"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require5_1)"
"(lambda(who2_0 mod-path3_0 sym4_0 fail-k1_0)"
"(begin"
" 'do-dynamic-require5"
"(let-values(((who_6) who2_0))"
"(let-values(((mod-path_7) mod-path3_0))"
"(let-values(((sym_8) sym4_0))"
"(let-values(((fail-k_9)"
"(if(eq? fail-k1_0 unsafe-undefined)"
" default-dynamic-require-fail-thunk"
" fail-k1_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_14)(1/module-path? mod-path_7)))"
"(if or-part_14"
" or-part_14"
"(let-values(((or-part_15)(1/module-path-index? mod-path_7)))"
"(if or-part_15"
" or-part_15"
"(1/resolved-module-path? mod-path_7)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_6"
"                                                   \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_7)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_16)(symbol? sym_8)))"
"(if or-part_16"
" or-part_16"
"(let-values(((or-part_17)(not sym_8)))"
"(if or-part_17"
" or-part_17"
"(let-values(((or-part_18)(equal? sym_8 0)))"
"(if or-part_18 or-part_18(void? sym_8)))))))"
"(void)"
"(let-values()"
"                                                    (raise-argument-error who_6 \"(or/c symbol? #f 0 void?)\" sym_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_9)"
"(procedure-arity-includes? fail-k_9 0)"
" #f)"
"(void)"
"                                                    (let-values () (raise-argument-error who_6 \"(-> any)\" fail-k_9)))"
"(values))))"
"(let-values(((ns_10)(1/current-namespace)))"
"(let-values(((mpi_11)"
"(if(1/module-path? mod-path_7)"
"(let-values()(1/module-path-index-join mod-path_7 #f))"
"(if(1/module-path-index? mod-path_7)"
"(let-values() mod-path_7)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_7)"
" #f))))))"
"(let-values(((mod-name_12)(1/module-path-index-resolve mpi_11 #t)))"
"(let-values(((phase_13)(namespace-phase ns_10)))"
"(if(not sym_8)"
"(let-values()"
"(let-values(((ns17_20) ns_10)"
"((mpi18_21) mpi_11)"
"((phase19_22) phase_13)"
"((phase20_23) phase_13)"
"((temp21_24) #f))"
"(namespace-module-instantiate!96.1"
" temp21_24"
" phase20_23"
" unsafe-undefined"
" #f"
" ns17_20"
" mpi18_21"
" phase19_22)))"
"(if(equal? sym_8 0)"
"(let-values()"
"(let-values(((ns22_26) ns_10)"
"((mpi23_27) mpi_11)"
"((phase24_28) phase_13)"
"((phase25_29) phase_13))"
"(namespace-module-instantiate!96.1"
" #t"
" phase25_29"
" unsafe-undefined"
" #f"
" ns22_26"
" mpi23_27"
" phase24_28)))"
"(if(void? sym_8)"
"(let-values()"
"(let-values(((ns26_31) ns_10)"
"((mpi27_32) mpi_11)"
"((phase28_33) phase_13)"
"((phase29_34) phase_13))"
"(namespace-module-visit!104.1"
" phase29_34"
" ns26_31"
" mpi27_32"
" phase28_33)))"
"(let-values()"
"(let-values(((m_35)(namespace->module ns_10 mod-name_12)))"
"(let-values((()"
"(begin"
"(if m_35"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_12)))"
"(values))))"
"(let-values(((binding/p_36)"
"(hash-ref"
"(hash-ref(module-provides m_35) 0 '#hasheq())"
" sym_8"
" #f)))"
"(if(not binding/p_36)"
"(let-values()"
"(if(eq? fail-k_9 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                 \"name is not provided\""
"                                                                 \"name\""
" sym_8"
"                                                                 \"module\""
" mod-name_12)"
"(fail-k_9)))"
"(let-values()"
"(let-values(((binding_37)"
"(provided-as-binding binding/p_36)))"
"(let-values(((ex-sym_38)"
"(module-binding-sym binding_37)))"
"(let-values(((ex-phase_39)"
"(module-binding-phase binding_37)))"
"(let-values((()"
"(begin"
"(let-values(((ns30_46) ns_10)"
"((mpi31_47) mpi_11)"
"((phase32_48) phase_13)"
"((phase33_49) phase_13)"
"((temp34_50) #f))"
"(namespace-module-instantiate!96.1"
" temp34_50"
" phase33_49"
" unsafe-undefined"
" #f"
" ns30_46"
" mpi31_47"
" phase32_48))"
"(values))))"
"(let-values(((ex-mod-name_40)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module binding_37)"
"(module-self m_35)"
" mpi_11))))"
"(let-values(((m-ns_41)"
"(let-values(((ns35_52) ns_10)"
"((ex-mod-name36_53)"
" ex-mod-name_40)"
"((temp37_54)"
"(phase-"
" phase_13"
" ex-phase_39))"
"((temp38_55) #t))"
"(namespace->module-namespace82.1"
" #f"
" temp38_55"
" unsafe-undefined"
" ns35_52"
" ex-mod-name36_53"
" temp37_54))))"
"(let-values(((ex-m_42)"
"(namespace->module"
" ns_10"
" ex-mod-name_40)))"
"(let-values(((access_43)"
"(let-values(((or-part_56)"
"(module-access"
" ex-m_42)))"
"(if or-part_56"
" or-part_56"
"(module-compute-access!"
" ex-m_42)))))"
"(let-values((()"
"(begin"
"(if(if(not"
"(eq?"
" 'provided"
"(hash-ref"
"(hash-ref"
" access_43"
" ex-phase_39"
" '#hasheq())"
" ex-sym_38"
" #f)))"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_41)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_37)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_37)"
"(namespace-inspector"
" m-ns_41))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                   \"name is protected\""
"                                                                                                   \"name\""
" sym_8"
"                                                                                                   \"module\""
" mod-name_12))"
"(void))"
"(values))))"
"(let-values(((fail_44)"
"(lambda()"
"(begin"
" 'fail"
"(if(eq?"
" fail-k_9"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                     \"name's binding is missing\""
"                                                                                                     \"name\""
" sym_8"
"                                                                                                     \"module\""
" mod-name_12)"
"(fail-k_9))))))"
"(if(not"
"(provided-as-transformer?"
" binding/p_36))"
"(let-values()"
"(namespace-get-variable"
" m-ns_41"
" ex-phase_39"
" ex-sym_38"
" fail_44))"
"(let-values()"
"(let-values(((missing_57)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((ns39_60)"
" ns_10)"
"((mpi40_61)"
" mpi_11)"
"((phase41_62)"
" phase_13)"
"((phase42_63)"
" phase_13))"
"(namespace-module-visit!104.1"
" phase42_63"
" ns39_60"
" mpi40_61"
" phase41_62))"
"(values))))"
"(let-values(((t_58)"
"(namespace-get-transformer"
" m-ns_41"
" ex-phase_39"
" ex-sym_38"
" missing_57)))"
"(if(eq? t_58 missing_57)"
"(let-values()(fail_44))"
"(let-values()"
"(let-values(((tmp-ns_64)"
"(let-values(((ns43_66)"
" ns_10))"
"(new-namespace8.1"
" #t"
" unsafe-undefined"
" ns43_66))))"
"(let-values(((mod-path_65)"
"(resolved-module-path->module-path"
" mod-name_12)))"
"(begin"
"(1/namespace-require"
" mod-path_65"
" tmp-ns_64)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" tmp-ns_64)"
"(let-values()"
"(1/eval"
" sym_8"
" tmp-ns_64))))))))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_0 mod-path_0 sym_0)(begin(do-dynamic-require5_1 who_0 mod-path_0 sym_0 unsafe-undefined)))"
"((who_0 mod-path_0 sym_0 fail-k1_0)(do-dynamic-require5_1 who_0 mod-path_0 sym_0 fail-k1_0)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (begin (error \"failed\"))))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require10_74)"
"(lambda(mod-path8_0 sym9_0 fail-k7_0)"
"(begin"
" 'dynamic-require10"
"(let-values(((mod-path_78) mod-path8_0))"
"(let-values(((sym_79) sym9_0))"
"(let-values(((fail-k_80)"
"(if(eq? fail-k7_0 unsafe-undefined)"
" default-dynamic-require-fail-thunk"
" fail-k7_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(do-dynamic-require 'dynamic-require mod-path_78 sym_79 fail-k_80)))))))))))"
"(case-lambda"
"((mod-path_0 sym_0)(begin 'dynamic-require(dynamic-require10_74 mod-path_0 sym_0 unsafe-undefined)))"
"((mod-path_0 sym_0 fail-k7_0)(dynamic-require10_74 mod-path_0 sym_0 fail-k7_0)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax15_87)"
"(lambda(mod-path13_0 sym14_0 fail-k12_0)"
"(begin"
" 'dynamic-require-for-syntax15"
"(let-values(((mod-path_91) mod-path13_0))"
"(let-values(((sym_92) sym14_0))"
"(let-values(((fail-k_93)"
"(if(eq? fail-k12_0 unsafe-undefined)"
" default-dynamic-require-fail-thunk"
" fail-k12_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_95)(1/current-namespace)))"
"(namespace->namespace-at-phase ns_95(add1(namespace-phase ns_95)))))"
"(let-values()"
"(do-dynamic-require"
" 'dynamic-require-for-syntax"
" mod-path_91"
" sym_92"
" fail-k_93)))))))))))))"
"(case-lambda"
"((mod-path_0 sym_0)"
"(begin 'dynamic-require-for-syntax(dynamic-require-for-syntax15_87 mod-path_0 sym_0 unsafe-undefined)))"
"((mod-path_0 sym_0 fail-k12_0)(dynamic-require-for-syntax15_87 mod-path_0 sym_0 fail-k12_0)))))"
"(define-values"
"(1/load)"
"(lambda(s_0)"
"(begin"
" 'load"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"                          (if (path-string? s_0) (void) (let-values () (raise-argument-error 'load \"path-string?\" s_0)))"
"(values))))"
"(let-values(((p_3)(->path s_0)))"
"(call-with-current-load-relative-directory p_3(lambda()((1/current-load) p_3 #f))))))))))"
"(define-values"
"(1/load-extension)"
"(lambda(s_0)"
"(begin"
" 'load-extension"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(path-string? s_0)"
"(void)"
"                            (let-values () (raise-argument-error 'load-extension \"path-string?\" s_0)))"
"(values))))"
"(let-values(((p_6)(->path s_0)))"
"(call-with-current-load-relative-directory p_6(lambda()((current-load-extension) p_6 #f))))))))))"
"(define-values"
"(call-with-current-load-relative-directory)"
"(lambda(p_0 thunk_0)"
"(begin"
"(let-values(((base_9 name_10 dir?_11)(split-path p_0)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(eq? base_9 'relative)(current-directory)(path->complete-path base_9)))"
"(let-values()(thunk_0)))))))"
"(define-values"
"(1/load/use-compiled)"
"(lambda(f_0)"
"(begin"
" 'load/use-compiled"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(path-string? f_0)"
"(void)"
"                            (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" f_0)))"
"(values))))"
"(let-values(((p_14)(->path f_0)))((1/current-load/use-compiled) p_14 #f))))))))"
"(define-values"
"(embedded-load)"
"(lambda(start_0 end_0 str_0 as-predefined?_0)"
"(begin"
"(let-values(((s_19)"
"(if str_0"
" str_0"
"(let-values(((sp_20)(find-system-path 'exec-file)))"
"(let-values(((exe_21)(find-executable-path sp_20 #f)))"
"(let-values(((start_22)"
"(let-values(((or-part_23)(1/string->number start_0)))"
"(if or-part_23 or-part_23 0))))"
"(let-values(((end_24)"
"(let-values(((or-part_25)(1/string->number end_0)))"
"(if or-part_25 or-part_25 0))))"
"(let-values(((exe4_26) exe_21)"
"((temp5_27)"
"(lambda()"
"(begin"
" 'temp5"
"(begin"
"(file-position(current-input-port) start_22)"
"(read-bytes(max 0(- end_24 start_22))))))))"
"(with-input-from-file45.1 'binary exe4_26 temp5_27)))))))))"
"(let-values(((p_28)(open-input-bytes s_19)))"
"((letrec-values(((loop_29)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((e_30)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-compiled"
" #t"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(1/read p_28)))))"
"(if(eof-object? e_30)"
"(void)"
"(let-values()"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-module-declare-as-predefined"
" as-predefined?_0)"
"(let-values()((1/current-eval) e_30)))"
"(loop_29)))))))))"
" loop_29)))))))"
"(define-values(->path)(lambda(s_0)(begin(if(string? s_0)(string->path s_0) s_0))))"
"(define-values"
"(find-main-collects)"
"(lambda()"
"(begin(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir)))))))"
"(define-values"
"(find-main-config)"
"(lambda()"
"(begin(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir)))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_0)"
"(begin"
"(if(complete-path? collects-path_0)"
"(let-values()(simplify-path collects-path_0))"
"(if(absolute-path? collects-path_0)"
"(let-values()"
"(let-values(((exec_2)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_3 name_4 dir?_5)(split-path exec_2)))"
"(simplify-path(path->complete-path collects-path_0 base_3)))))"
"(let-values()"
"(let-values(((p_6)(find-executable-path(find-system-path 'exec-file) collects-path_0 #t)))"
"(if p_6(simplify-path p_6) #f))))))))"
"(define-values(relative-path-string?)(lambda(s_0)(begin(if(path-string? s_0)(relative-path? s_0) #f))))"
"(define-values"
"(check-collection)"
"(lambda(who_0 s_0 l_0)"
"(begin"
"(begin"
"(if(relative-path-string? s_0)"
"(void)"
"          (let-values () (raise-argument-error who_0 \"(and/c path-string? relative-path?)\" s_0)))"
"(if((lambda(l_1)(if(list? l_1)(andmap2 relative-path-string? l_1) #f)) l_0)"
"(void)"
"          (let-values () (raise-argument-error who_0 \"(listof (and/c path-string? relative-path?))\" l_0)))))))"
"(define-values"
"(check-fail)"
"(lambda(who_0 fail_0)"
"(begin"
"(if((lambda(p_0)(if(procedure? p_0)(procedure-arity-includes? p_0 1) #f)) fail_0)"
"(void)"
"        (let-values () (raise-argument-error who_0 \"(procedure-arity-includes/c 1)\" fail_0))))))"
"(define-values"
"(1/collection-path)"
"(lambda(fail_0 collection_0 collection-path_0)"
"(begin"
" 'collection-path"
"(let-values()"
"(let-values()"
"(begin"
"(check-collection 'collection-path collection_0 collection-path_0)"
"(check-fail 'collection-path fail_0)"
"(find-col-file fail_0 collection_0 collection-path_0 #f #f)))))))"
"(define-values"
"(1/collection-file-path)"
"(lambda(fail_0 check-compiled?_0 file-name_0 collection_0 collection-path_0)"
"(begin"
" 'collection-file-path"
"(let-values()"
"(let-values()"
"(begin"
"(if(relative-path-string? file-name_0)"
"(void)"
"(let-values()"
"                (raise-argument-error 'collection-file-path \"(and/c path-string? relative-path?)\" file-name_0)))"
"(check-collection 'collection-file-path collection_0 collection-path_0)"
"(check-fail 'collection-file-path fail_0)"
"(find-col-file fail_0 collection_0 collection-path_0 file-name_0 check-compiled?_0)))))))"
"(define-values"
"(get-config-table)"
"(lambda(d_0)"
"(begin"
"      (let-values (((p_20) (if d_0 (build-path d_0 \"config.rktd\") #f)))"
"(let-values(((or-part_21)"
"(if p_20"
"(if(file-exists? p_20)"
"(let-values(((p7_22) p_20)"
"((temp8_23)"
"(lambda()"
"(begin"
" 'temp8"
"(let-values(((v_24)(call-with-default-reading-parameterization 1/read)))"
"(if(hash? v_24) v_24 #f))))))"
"(with-input-from-file45.1 'binary p7_22 temp8_23))"
" #f)"
" #f)))"
"(if or-part_21 or-part_21 '#hash()))))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_0)(begin(hash-ref config-table_0 'installation-name(version)))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_0)"
"(begin"
"(if(string? p_0)"
"(let-values()(collects-relative-path->complete-path(string->path p_0)))"
"(if(bytes? p_0)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_0)))"
"(if(path? p_0)(let-values()(collects-relative-path->complete-path p_0))(let-values() p_0)))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_0)"
"(begin"
"(if(complete-path? p_0)"
"(let-values() p_0)"
"(let-values()"
"(path->complete-path"
" p_0"
"(let-values(((or-part_28)(find-main-collects)))(if or-part_28 or-part_28(current-directory)))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_0 key_0 orig-l_0)"
"(begin"
"(let-values(((l_32)(hash-ref ht_0 key_0 #f)))"
"(if l_32"
"((letrec-values(((loop_33)"
"(lambda(l_0)"
"(begin"
" 'loop"
"(if(null? l_0)"
"(let-values() null)"
"(if(not(car l_0))"
"(let-values()(append orig-l_0(loop_33(cdr l_0))))"
"(let-values()(cons(coerce-to-path(car l_0))(loop_33(cdr l_0))))))))))"
" loop_33)"
" l_32)"
" orig-l_0)))))"
"(define-values"
"(1/find-library-collection-links)"
"(lambda()"
"(begin"
" 'find-library-collection-links"
"(let-values(((ht_35)(get-config-table(find-main-config))))"
"(let-values(((lf_36)"
"(coerce-to-path"
"(let-values(((or-part_37)(hash-ref ht_35 'links-file #f)))"
"(if or-part_37"
" or-part_37"
"(build-path"
"(let-values(((or-part_38)(hash-ref ht_35 'share-dir #f)))"
"                              (if or-part_38 or-part_38 (build-path 'up \"share\")))"
"                            \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(1/use-user-specific-search-paths)(1/use-collection-link-paths) #f)"
"             (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_35) \"links.rktd\"))"
" null)"
"(if(1/use-collection-link-paths)(add-config-search ht_35 'links-search-files(list lf_36)) null)))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_0 old-stamp_0)"
"(begin"
"(if(if old-stamp_0(if(cdr old-stamp_0)(not(sync/timeout 0(cdr old-stamp_0))) #f) #f)"
"(let-values() old-stamp_0)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-exception-handler"
"(lambda(exn_0)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_0)(lambda() #f)(lambda()(raise exn_0)))))"
"(lambda()"
"(let-values(((dir-evt_42)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_43)"
"(lambda(path_1)"
"(begin"
" 'loop"
"(let-values(((base_45 name_46 dir?_47)(split-path path_1)))"
"(if(path? base_45)"
"(if(directory-exists? base_45)"
"(filesystem-change-evt base_45(lambda() #f))"
"(loop_43 base_45))"
" #f))))))"
" loop_43)"
" path_0)"
" #f)))"
"(if(not(file-exists? path_0))"
"(let-values()(cons #f dir-evt_42))"
"(let-values()"
"(let-values(((evt_48)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_0(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_42(let-values()(filesystem-change-evt-cancel dir-evt_42))(void))"
"(cons(file->bytes path_0) evt_48)))))))))"
" stamp-prompt-tag))))))"
"(define-values"
"(file->bytes)"
"(lambda(path_0)"
"(begin"
"(let-values(((path9_50) path_0)"
"((temp10_51)"
"(lambda(p_0)"
"(begin"
" 'temp10"
"(let-values(((bstr_53)(read-bytes 8192 p_0)))"
"(if(if(bytes? bstr_53)(>=(bytes-length bstr_53) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_53"
"((letrec-values(((loop_54)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((bstr_55)(read-bytes 8192 p_0)))"
"(if(eof-object? bstr_55) null(cons bstr_55(loop_54))))))))"
" loop_54))))"
" bstr_53))))))"
"(call-with-input-file*61.1 'binary path9_50 temp10_51)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_0)(begin(let-values(((or-part_57)(not a_0)))(if or-part_57 or-part_57(not(car a_0)))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_0)"
"(begin"
"(call/ec"
"(lambda(esc_0)"
"(let-values(((make-handler_60)"
"(lambda(ts_0)"
"(begin"
" 'make-handler"
"(lambda(exn_0)"
"(begin"
"(if(exn:fail? exn_0)"
"(let-values(((l_63)(current-logger)))"
"(if(log-level? l_63 'error)"
"(let-values()"
"(log-message"
" l_63"
" 'error"
"(format"
"                                         \"error reading collection links file ~s: ~a\""
" links-path_0"
"(exn-message exn_0))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_0"
"(let-values()(hash-set! links-cache links-path_0(cons ts_0 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_0)(esc_0(make-hasheq)) exn_0)))))))"
"(call-with-exception-handler"
"(make-handler_60 #f)"
"(lambda()"
"(let-values(((links-stamp+cache_64)(hash-ref links-cache links-path_0 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_65)(car links-stamp+cache_64)))"
"(let-values(((ts_66)(file->stamp links-path_0 a-links-stamp_65)))"
"(if(equal? ts_66 a-links-stamp_65)"
"(let-values()(cdr links-stamp+cache_64))"
"(let-values()"
"(call-with-exception-handler"
"(make-handler_60 ts_66)"
"(lambda()"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_67)"
"(if(no-file-stamp? ts_66)"
" null"
"(let-values(((links-path11_70) links-path_0)"
"((temp12_71)"
"(lambda(p_0)"
"(begin"
" 'temp12"
"(begin0"
"(1/read p_0)"
"(if(eof-object?(1/read p_0))"
"(void)"
"(let-values()"
"                                                                      (error \"expected a single S-expression\"))))))))"
"(call-with-input-file*61.1 'binary links-path11_70 temp12_71)))))"
"(let-values((()"
"(begin"
"(if(if(list? v_67)"
"(andmap2"
"(lambda(p_0)"
"(if(list? p_0)"
"(if(let-values(((or-part_74)(= 2(length p_0))))"
"(if or-part_74 or-part_74(= 3(length p_0))))"
"(if(let-values(((or-part_75)(string?(car p_0))))"
"(if or-part_75"
" or-part_75"
"(let-values(((or-part_76)(eq? 'root(car p_0))))"
"(if or-part_76"
" or-part_76"
"(eq? 'static-root(car p_0))))))"
"(if(path-string?(cadr p_0))"
"(let-values(((or-part_77)(null?(cddr p_0))))"
"(if or-part_77 or-part_77(regexp?(caddr p_0))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_67)"
" #f)"
"(void)"
"                                                  (let-values () (error \"ill-formed content\")))"
"(values))))"
"(let-values(((ht_68)(make-hasheq)))"
"(let-values(((dir_69)"
"(let-values(((base_78 name_79 dir?_80)(split-path links-path_0)))"
" base_78)))"
"(begin"
"(for-each2"
"(lambda(p_0)"
"(if(let-values(((or-part_82)(null?(cddr p_0))))"
"(if or-part_82 or-part_82(regexp-match?(caddr p_0)(version))))"
"(let-values()"
"(let-values(((dir_83)"
"(simplify-path(path->complete-path(cadr p_0) dir_69))))"
"(if(eq?(car p_0) 'static-root)"
"(let-values()"
"(for-each2"
"(lambda(sub_0)"
"(if(directory-exists?(build-path dir_83 sub_0))"
"(let-values()"
"(let-values(((k_85)(string->symbol(path->string sub_0))))"
"(hash-set!"
" ht_68"
" k_85"
"(cons dir_83(hash-ref ht_68 k_85 null)))))"
"(void)))"
"(directory-list dir_83)))"
"(if(eq?(car p_0) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_68 #f #f)"
"(void)"
"(let-values()(hash-set! ht_68 #f null)))"
"(hash-for-each"
" ht_68"
"(lambda(k_0 v_0)(hash-set! ht_68 k_0(cons dir_83 v_0))))))"
"(let-values()"
"(let-values(((s_88)(string->symbol(car p_0))))"
"(hash-set!"
" ht_68"
" s_88"
"(cons(box dir_83)(hash-ref ht_68 s_88 null)))))))))"
"(void)))"
" v_67)"
"(hash-for-each ht_68(lambda(k_0 v_0)(hash-set! ht_68 k_0(reverse$1 v_0))))"
"(hash-set! links-cache links-path_0(cons ts_66 ht_68))"
" ht_68))))))))))))))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_0 collection-path_0)"
"(begin"
"(if(string? collection_0)"
"(let-values()"
"          (let-values (((m_93) (regexp-match-positions '#rx\"/+\" collection_0)))"
"(if m_93"
"(if(=(caar m_93)(sub1(string-length collection_0)))"
"(let-values()(values(substring collection_0 0(caar m_93)) collection-path_0))"
"(let-values()"
"(values"
"(substring collection_0 0(caar m_93))"
"(cons(substring collection_0(cdar m_93)) collection-path_0))))"
"(values collection_0 collection-path_0))))"
"(let-values()"
"(let-values(((base_94 name_95 dir?_96)(split-path collection_0)))"
"(if(eq? base_94 'relative)"
"(values name_95 collection-path_0)"
"(normalize-collection-reference base_94(cons name_95 collection-path_0)))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_0 collection-in_0 collection-path-in_0 file-name_0 check-compiled?_0)"
"(begin"
"(let-values(((collection_102 collection-path_103)"
"(normalize-collection-reference collection-in_0 collection-path-in_0)))"
"(let-values(((all-paths_104)"
"(let-values(((sym_109)"
"(string->symbol"
"(if(path? collection_102)(path->string collection_102) collection_102))))"
"((letrec-values(((loop_110)"
"(lambda(l_0)"
"(begin"
" 'loop"
"(if(null? l_0)"
"(let-values() null)"
"(if(not(car l_0))"
"(let-values()"
"(append(1/current-library-collection-paths)(loop_110(cdr l_0))))"
"(if(hash?(car l_0))"
"(let-values()"
"(append"
"(map2 box(hash-ref(car l_0) sym_109 null))"
"(hash-ref(car l_0) #f null)"
"(loop_110(cdr l_0))))"
"(let-values()"
"(let-values(((ht_112)(get-linked-collections(car l_0))))"
"(append"
"(hash-ref ht_112 sym_109 null)"
"(hash-ref ht_112 #f null)"
"(loop_110(cdr l_0))))))))))))"
" loop_110)"
"(1/current-library-collection-links)))))"
"(let-values(((done_105)(lambda(p_0)(begin 'done(if file-name_0(build-path p_0 file-name_0) p_0)))))"
"(let-values(((*build-path-rep_106)"
"(lambda(p_0 c_0)"
"(begin '*build-path-rep(if(path? p_0)(build-path p_0 c_0)(unbox p_0))))))"
"(let-values(((*directory-exists?_107)"
"(lambda(orig_0 p_0)"
"(begin '*directory-exists?(if(path? orig_0)(directory-exists? p_0) #t)))))"
"(let-values(((to-string_108)"
"(lambda(p_0)(begin 'to-string(if(path? p_0)(path->string p_0) p_0)))))"
"((letrec-values(((cloop_119)"
"(lambda(paths_0 found-col_0)"
"(begin"
" 'cloop"
"(if(null? paths_0)"
"(if found-col_0"
"(done_105 found-col_0)"
"(let-values(((rest-coll_122)"
"(if(null? collection-path_103)"
"                                                            \"\""
"(apply"
" string-append"
"((letrec-values(((loop_123)"
"(lambda(cp_0)"
"(begin"
" 'loop"
"(if(null?(cdr cp_0))"
"(list(to-string_108(car cp_0)))"
"(list*"
"(to-string_108(car cp_0))"
"                                                                                      \"/\""
"(loop_123(cdr cp_0))))))))"
" loop_123)"
" collection-path_103)))))"
"(letrec-values(((filter_125)"
"(lambda(f_0 l_0)"
"(begin"
" 'filter"
"(if(null? l_0)"
" null"
"(if(f_0(car l_0))"
"(cons(car l_0)(filter_125 f_0(cdr l_0)))"
"(filter_125 f_0(cdr l_0))))))))"
"(fail_0"
"(format"
"                                                  \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_103)"
"(to-string_108 collection_102)"
"                                                    (string-append (to-string_108 collection_102) \"/\" rest-coll_122))"
"(apply"
" string-append"
"(map2"
"                                                    (lambda (p_0) (format \"\\n ~a ~a\" \" \" p_0))"
"(let-values(((len_129)(length all-paths_104))"
"((clen_130)"
"(length(1/current-library-collection-paths))))"
"(if(<(- len_129 clen_130) 5)"
" all-paths_104"
"(append"
"(1/current-library-collection-paths)"
"(list"
"(format"
"                                                           \"... [~a additional linked and package directories]\""
"(- len_129 clen_130))))))))"
"(if(ormap2 box? all-paths_104)"
"(format"
"                                                     \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_122"
"(apply"
" string-append"
"(map2"
"                                                       (lambda (p_0) (format \"\\n   ~a\" (unbox p_0)))"
"(filter_125 box? all-paths_104))))"
"                                                    \"\"))))))"
"(let-values(((dir_132)(*build-path-rep_106(car paths_0) collection_102)))"
"(if(*directory-exists?_107(car paths_0) dir_132)"
"(let-values(((cpath_133)(apply build-path dir_132 collection-path_103)))"
"(if(if(null? collection-path_103) #t(directory-exists? cpath_133))"
"(if file-name_0"
"(if(let-values(((or-part_134)"
"(file-exists?/maybe-compiled"
" cpath_133"
" file-name_0"
" check-compiled?_0)))"
"(if or-part_134"
" or-part_134"
"(let-values(((alt-file-name_135)"
"(let-values(((file-name_136)"
"(if(path? file-name_0)"
"(path->string file-name_0)"
" file-name_0)))"
"(let-values(((len_137)"
"(string-length"
" file-name_136)))"
"(if(>= len_137 4)"
"(if(string=?"
"                                                                                     \".rkt\""
"(substring"
" file-name_136"
"(- len_137 4)))"
"(string-append"
"(substring"
" file-name_136"
" 0"
"(- len_137 4))"
"                                                                                   \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_135"
"(file-exists?/maybe-compiled"
" cpath_133"
" alt-file-name_135"
" check-compiled?_0)"
" #f))))"
"(done_105 cpath_133)"
"(cloop_119"
"(cdr paths_0)"
"(let-values(((or-part_138) found-col_0))"
"(if or-part_138 or-part_138 cpath_133))))"
"(done_105 cpath_133))"
"(cloop_119(cdr paths_0) found-col_0)))"
"(cloop_119(cdr paths_0) found-col_0))))))))"
" cloop_119)"
" all-paths_104"
" #f))))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_0 path_0 check-compiled?_0)"
"(begin"
"(let-values(((or-part_142)(file-exists?(build-path dir_0 path_0))))"
"(if or-part_142"
" or-part_142"
"(if check-compiled?_0"
"            (let-values (((try-path_143) (path-add-extension path_0 #\".zo\"))"
"((modes_144)(1/use-compiled-file-paths))"
"((roots_145)(1/current-compiled-file-roots)))"
"(ormap2"
"(lambda(d_0)"
"(ormap2"
"(lambda(mode_0)"
"(file-exists?"
"(let-values(((p_148)(build-path dir_0 mode_0 try-path_143)))"
"(if(eq? d_0 'same)"
"(let-values() p_148)"
"(if(relative-path? d_0)"
"(let-values()(build-path p_148 d_0))"
"(let-values()(reroot-path p_148 d_0)))))))"
" modes_144))"
" roots_145))"
" #f))))))"
"(define-values"
"(1/find-library-collection-paths)"
"(let-values(((find-library-collection-paths3_149)"
"(lambda(extra-collects-dirs1_0 post-collects-dirs2_0)"
"(begin"
" 'find-library-collection-paths3"
"(let-values(((extra-collects-dirs_152) extra-collects-dirs1_0))"
"(let-values(((post-collects-dirs_153) post-collects-dirs2_0))"
"(let-values()"
"(let-values(((user-too?_154)(1/use-user-specific-search-paths))"
"((cons-if_155)(lambda(f_0 r_0)(begin 'cons-if(if f_0(cons f_0 r_0) r_0))))"
"((config-table_156)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_154"
"(let-values(((c_159)"
"(environment-variables-ref"
"(current-environment-variables)"
"                                              #\"PLTCOLLECTS\")))"
"                                 (if c_159 (bytes->string/locale c_159 '#\\?) \"\"))"
"                               \"\")"
"(add-config-search"
" config-table_156"
" 'collects-search-dirs"
"(cons-if_155"
"(if user-too?_154"
"(build-path"
"(find-system-path 'addon-dir)"
"(get-installation-name config-table_156)"
"                                  \"collects\")"
" #f)"
"((letrec-values(((loop_160)"
"(lambda(l_0)"
"(begin"
" 'loop"
"(if(null? l_0)"
" null"
"(let-values(((collects-path_162)(car l_0)))"
"(let-values(((v_163)"
"(exe-relative-path->complete-path"
" collects-path_162)))"
"(if v_163"
"(cons"
"(simplify-path"
"(path->complete-path v_163(current-directory)))"
"(loop_160(cdr l_0)))"
"(loop_160(cdr l_0))))))))))"
" loop_160)"
"(append"
" extra-collects-dirs_152"
"(list(find-system-path 'collects-dir))"
" post-collects-dirs_153)))))))))))))"
"(case-lambda"
"(()(begin 'find-library-collection-paths(find-library-collection-paths3_149 null null)))"
"((extra-collects-dirs_0 post-collects-dirs2_0)"
"(find-library-collection-paths3_149 extra-collects-dirs_0 post-collects-dirs2_0))"
"((extra-collects-dirs1_0)(find-library-collection-paths3_149 extra-collects-dirs1_0 null)))))"
"(define-values(prop:readtable prop:readtable? prop:readtable-ref)(make-struct-type-property 'readtable))"
"(define-values"
"(1/current-readtable)"
"(let-values()"
"(let-values()"
"(make-parameter"
" #f"
"(lambda(v_0)"
"(begin"
"(if((lambda(x_0)(let-values(((or-part_4)(not x_0)))(if or-part_4 or-part_4(prop:readtable? x_0))))"
" v_0)"
"(void)"
"             (let-values () (raise-argument-error 'current-readtable \"(or/c prop:readtable? #f)\" v_0)))"
" v_0))))))"
"(define-values"
"(struct:read-config/outer"
" read-config/outer1.1"
" read-config/outer?"
" read-config/outer-inner"
" read-config/outer-wrap"
" read-config/outer-line"
" read-config/outer-col"
" read-config/outer-pos"
" read-config/outer-indentations"
" read-config/outer-keep-comment?)"
"(let-values(((struct:_6 make-_7 ?_8 -ref_9 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'read-config/outer)))))"
"(values"
" struct:_6"
" make-_7"
" ?_8"
"(make-struct-field-accessor -ref_9 0 'inner)"
"(make-struct-field-accessor -ref_9 1 'wrap)"
"(make-struct-field-accessor -ref_9 2 'line)"
"(make-struct-field-accessor -ref_9 3 'col)"
"(make-struct-field-accessor -ref_9 4 'pos)"
"(make-struct-field-accessor -ref_9 5 'indentations)"
"(make-struct-field-accessor -ref_9 6 'keep-comment?))))"
"(define-values"
"(struct:read-config/inner"
" read-config/inner2.1"
" read-config/inner?"
" read-config/inner-readtable"
" read-config/inner-next-readtable"
" read-config/inner-for-syntax?"
" read-config/inner-source"
" read-config/inner-read-compiled"
" read-config/inner-dynamic-require"
" read-config/inner-module-declared?"
" read-config/inner-coerce"
" read-config/inner-coerce-key"
" read-config/inner-parameter-override"
" read-config/inner-parameter-cache"
" read-config/inner-st)"
"(let-values(((struct:_56 make-_57 ?_58 -ref_59 -set!_60)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config/inner"
" #f"
" 12"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11)"
" #f"
" 'read-config/inner)))))"
"(values"
" struct:_56"
" make-_57"
" ?_58"
"(make-struct-field-accessor -ref_59 0 'readtable)"
"(make-struct-field-accessor -ref_59 1 'next-readtable)"
"(make-struct-field-accessor -ref_59 2 'for-syntax?)"
"(make-struct-field-accessor -ref_59 3 'source)"
"(make-struct-field-accessor -ref_59 4 'read-compiled)"
"(make-struct-field-accessor -ref_59 5 'dynamic-require)"
"(make-struct-field-accessor -ref_59 6 'module-declared?)"
"(make-struct-field-accessor -ref_59 7 'coerce)"
"(make-struct-field-accessor -ref_59 8 'coerce-key)"
"(make-struct-field-accessor -ref_59 9 'parameter-override)"
"(make-struct-field-accessor -ref_59 10 'parameter-cache)"
"(make-struct-field-accessor -ref_59 11 'st))))"
"(define-values"
"(read-config/make)"
"(lambda(readtable_0"
" next-readtable_0"
" for-syntax?_0"
" source_0"
" wrap_0"
" read-compiled_0"
" dynamic-require_0"
" module-declared?_0"
" coerce_0"
" coerce-key_0"
" line_0"
" col_0"
" pos_0"
" indentations_0"
" keep-comment?_0"
" parameter-override_0"
" parameter-cache_0"
" st_0)"
"(begin"
"(read-config/outer1.1"
"(read-config/inner2.1"
" readtable_0"
" next-readtable_0"
" for-syntax?_0"
" source_0"
" read-compiled_0"
" dynamic-require_0"
" module-declared?_0"
" coerce_0"
" coerce-key_0"
" parameter-override_0"
" parameter-cache_0"
" st_0)"
" wrap_0"
" line_0"
" col_0"
" pos_0"
" indentations_0"
" keep-comment?_0))))"
"(define-values(read-config-wrap)(lambda(v_0)(begin(read-config/outer-wrap v_0))))"
"(define-values(read-config-line)(lambda(v_0)(begin(read-config/outer-line v_0))))"
"(define-values(read-config-col)(lambda(v_0)(begin(read-config/outer-col v_0))))"
"(define-values(read-config-pos)(lambda(v_0)(begin(read-config/outer-pos v_0))))"
"(define-values(read-config-indentations)(lambda(v_0)(begin(read-config/outer-indentations v_0))))"
"(define-values(read-config-keep-comment?)(lambda(v_0)(begin(read-config/outer-keep-comment? v_0))))"
"(define-values"
"(read-config-readtable)"
"(lambda(v_0)(begin(read-config/inner-readtable(read-config/outer-inner v_0)))))"
"(define-values"
"(read-config-next-readtable)"
"(lambda(v_0)(begin(read-config/inner-next-readtable(read-config/outer-inner v_0)))))"
"(define-values"
"(read-config-for-syntax?)"
"(lambda(v_0)(begin(read-config/inner-for-syntax?(read-config/outer-inner v_0)))))"
"(define-values(read-config-source)(lambda(v_0)(begin(read-config/inner-source(read-config/outer-inner v_0)))))"
"(define-values"
"(read-config-read-compiled)"
"(lambda(v_0)(begin(read-config/inner-read-compiled(read-config/outer-inner v_0)))))"
"(define-values"
"(read-config-dynamic-require)"
"(lambda(v_0)(begin(read-config/inner-dynamic-require(read-config/outer-inner v_0)))))"
"(define-values"
"(read-config-module-declared?)"
"(lambda(v_0)(begin(read-config/inner-module-declared?(read-config/outer-inner v_0)))))"
"(define-values(read-config-coerce)(lambda(v_0)(begin(read-config/inner-coerce(read-config/outer-inner v_0)))))"
"(define-values"
"(read-config-coerce-key)"
"(lambda(v_0)(begin(read-config/inner-coerce-key(read-config/outer-inner v_0)))))"
"(define-values"
"(read-config-parameter-override)"
"(lambda(v_0)(begin(read-config/inner-parameter-override(read-config/outer-inner v_0)))))"
"(define-values"
"(read-config-parameter-cache)"
"(lambda(v_0)(begin(read-config/inner-parameter-cache(read-config/outer-inner v_0)))))"
"(define-values(read-config-st)(lambda(v_0)(begin(read-config/inner-st(read-config/outer-inner v_0)))))"
"(define-values"
"(struct:read-config-state"
" read-config-state3.1"
" read-config-state?"
" read-config-state-accum-str"
" read-config-state-graph"
" set-read-config-state-accum-str!"
" set-read-config-state-graph!)"
"(let-values(((struct:_168 make-_169 ?_170 -ref_171 -set!_172)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config-state"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'read-config-state)))))"
"(values"
" struct:_168"
" make-_169"
" ?_170"
"(make-struct-field-accessor -ref_171 0 'accum-str)"
"(make-struct-field-accessor -ref_171 1 'graph)"
"(make-struct-field-mutator -set!_172 0 'accum-str)"
"(make-struct-field-mutator -set!_172 1 'graph))))"
"(define-values(current-read-config)(make-parameter #f))"
"(define-values"
"(make-read-config26.1)"
"(lambda(coerce12_0"
" coerce-key13_0"
" dynamic-require10_0"
" for-syntax?5_0"
" keep-comment?14_0"
" module-declared?11_0"
" next-readtable7_0"
" read-compiled9_0"
" readtable6_0"
" source4_0"
" wrap8_0)"
"(begin"
" 'make-read-config26"
"(let-values(((source_204) source4_0))"
"(let-values(((for-syntax?_205) for-syntax?5_0))"
"(let-values(((readtable_206)(if(eq? readtable6_0 unsafe-undefined)(1/current-readtable) readtable6_0)))"
"(let-values(((next-readtable_207)"
"(if(eq? next-readtable7_0 unsafe-undefined) readtable_206 next-readtable7_0)))"
"(let-values(((wrap_208) wrap8_0))"
"(let-values(((read-compiled_209) read-compiled9_0))"
"(let-values(((dynamic-require_210) dynamic-require10_0))"
"(let-values(((module-declared?_211) module-declared?11_0))"
"(let-values(((coerce_212) coerce12_0))"
"(let-values(((coerce-key_213) coerce-key13_0))"
"(let-values(((keep-comment?_214) keep-comment?14_0))"
"(let-values()"
"(read-config/make"
" readtable_206"
" next-readtable_207"
" for-syntax?_205"
" source_204"
" wrap_208"
"(let-values(((or-part_215) read-compiled_209))"
"(if or-part_215"
" or-part_215"
"                                   (lambda (in_0) (error 'read \"no `read-compiled` provided\"))))"
"(let-values(((or-part_217) dynamic-require_210))"
"(if or-part_217"
" or-part_217"
"(lambda(mod-path_0 sym_0 failure-k_0)"
"                                     (error 'read \"no `dynamic-require` provided\"))))"
"(let-values(((or-part_221) module-declared?_211))"
"(if or-part_221"
" or-part_221"
"                                   (lambda (mod-path_0) (error 'read \"no `module-declare?` provided\"))))"
"(let-values(((or-part_223) coerce_212))"
"(if or-part_223 or-part_223(lambda(for-syntax?_0 v_0 srcloc_0) v_0)))"
"(let-values(((or-part_227) coerce-key_213))"
"(if or-part_227 or-part_227(lambda(for-syntax?_0 v_0) v_0)))"
" #f"
" #f"
" #f"
" null"
" keep-comment?_214"
" '#hasheq()"
"(make-hasheq)"
"(read-config-state3.1 #f #f)))))))))))))))))"
"(define-values"
"(read-config-update42.1)"
"(lambda(for-syntax?29_0 keep-comment?34_0 next-readtable32_0 readtable31_0 reset-graph?33_0 wrap30_0 config41_0)"
"(begin"
" 'read-config-update42"
"(let-values(((config_312) config41_0))"
"(let-values(((for-syntax?_313) for-syntax?29_0))"
"(let-values(((wrap_314) wrap30_0))"
"(let-values(((readtable_315) readtable31_0))"
"(let-values(((next-readtable_316)"
"(if(eq? next-readtable32_0 unsafe-undefined)"
"(read-config-readtable config_312)"
" next-readtable32_0)))"
"(let-values(((local-graph?_317) reset-graph?33_0))"
"(let-values(((keep-comment?_318) keep-comment?34_0))"
"(let-values()"
"(let-values(((v_319) config_312))"
"(let-values(((the-struct_320) v_319))"
"(if(read-config/outer? the-struct_320)"
"(let-values(((wrap55_321) wrap_314)"
"((keep-comment?56_322) keep-comment?_318)"
"((inner57_323)"
"(let-values(((the-struct_324)(read-config/outer-inner v_319)))"
"(if(read-config/inner? the-struct_324)"
"(let-values(((for-syntax?58_325) for-syntax?_313)"
"((readtable59_326) readtable_315)"
"((next-readtable60_327) next-readtable_316)"
"((st61_328)"
"(if local-graph?_317"
"(read-config-state3.1 #f #f)"
"(read-config-st config_312))))"
"(read-config/inner2.1"
" readtable59_326"
" next-readtable60_327"
" for-syntax?58_325"
"(read-config/inner-source the-struct_324)"
"(read-config/inner-read-compiled the-struct_324)"
"(read-config/inner-dynamic-require the-struct_324)"
"(read-config/inner-module-declared? the-struct_324)"
"(read-config/inner-coerce the-struct_324)"
"(read-config/inner-coerce-key the-struct_324)"
"(read-config/inner-parameter-override the-struct_324)"
"(read-config/inner-parameter-cache the-struct_324)"
" st61_328))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"read-config/inner?\""
" the-struct_324)))))"
"(read-config/outer1.1"
" inner57_323"
" wrap55_321"
"(read-config/outer-line the-struct_320)"
"(read-config/outer-col the-struct_320)"
"(read-config/outer-pos the-struct_320)"
"(read-config/outer-indentations the-struct_320)"
" keep-comment?56_322))"
"                            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_320)))))))))))))))"
"(define-values"
"(port+config->srcloc49.1)"
"(lambda(end-pos45_0 in47_0 config48_0)"
"(begin"
" 'port+config->srcloc49"
"(let-values(((in_357) in47_0))"
"(let-values(((config_358) config48_0))"
"(let-values(((given-end-pos_359) end-pos45_0))"
"(let-values()"
"(let-values(((end-pos_360)"
"(let-values(((or-part_361) given-end-pos_359))"
"(if or-part_361"
" or-part_361"
"(let-values(((end-line_362 end-col_363 end-pos_364)(port-next-location in_357)))"
" end-pos_364)))))"
"(srcloc"
"(let-values(((or-part_365)(read-config-source config_358)))"
"(if or-part_365"
" or-part_365"
"                     (let-values (((or-part_366) (object-name in_357))) (if or-part_366 or-part_366 \"UNKNOWN\"))))"
"(read-config-line config_358)"
"(read-config-col config_358)"
"(read-config-pos config_358)"
"(if(read-config-pos config_358)"
"(if end-pos_360(max 0(- end-pos_360(read-config-pos config_358))) #f)"
" #f))))))))))"
"(define-values"
"(reading-at)"
"(lambda(config_0 line_0 col_0 pos_0)"
"(begin"
"(let-values(((v_388) config_0))"
"(let-values(((the-struct_389) v_388))"
"(if(read-config/outer? the-struct_389)"
"(let-values(((line62_390) line_0)"
"((col63_391) col_0)"
"((pos64_392) pos_0)"
"((inner65_393)(read-config/outer-inner v_388)))"
"(read-config/outer1.1"
" inner65_393"
"(read-config/outer-wrap the-struct_389)"
" line62_390"
" col63_391"
" pos64_392"
"(read-config/outer-indentations the-struct_389)"
"(read-config/outer-keep-comment? the-struct_389)))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_389)))))))"
"(define-values"
"(disable-wrapping)"
"(lambda(config_0)"
"(begin"
"(let-values(((v_395) config_0))"
"(let-values(((the-struct_396) v_395))"
"(if(read-config/outer? the-struct_396)"
"(let-values(((wrap66_397) #f)((inner67_398)(read-config/outer-inner v_395)))"
"(read-config/outer1.1"
" inner67_398"
" wrap66_397"
"(read-config/outer-line the-struct_396)"
"(read-config/outer-col the-struct_396)"
"(read-config/outer-pos the-struct_396)"
"(read-config/outer-indentations the-struct_396)"
"(read-config/outer-keep-comment? the-struct_396)))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_396)))))))"
"(define-values"
"(keep-comment)"
"(lambda(config_0)"
"(begin"
"(let-values(((v_400) config_0))"
"(let-values(((the-struct_401) v_400))"
"(if(read-config/outer? the-struct_401)"
"(let-values(((keep-comment?68_402) #t)((inner69_403)(read-config/outer-inner v_400)))"
"(read-config/outer1.1"
" inner69_403"
"(read-config/outer-wrap the-struct_401)"
"(read-config/outer-line the-struct_401)"
"(read-config/outer-col the-struct_401)"
"(read-config/outer-pos the-struct_401)"
"(read-config/outer-indentations the-struct_401)"
" keep-comment?68_402))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_401)))))))"
"(define-values"
"(discard-comment)"
"(lambda(config_0)"
"(begin"
"(if(not(read-config-keep-comment? config_0))"
"(let-values() config_0)"
"(let-values()"
"(let-values(((v_405) config_0))"
"(let-values(((the-struct_406) v_405))"
"(if(read-config/outer? the-struct_406)"
"(let-values(((keep-comment?70_407) #f)((inner71_408)(read-config/outer-inner v_405)))"
"(read-config/outer1.1"
" inner71_408"
"(read-config/outer-wrap the-struct_406)"
"(read-config/outer-line the-struct_406)"
"(read-config/outer-col the-struct_406)"
"(read-config/outer-pos the-struct_406)"
"(read-config/outer-indentations the-struct_406)"
" keep-comment?70_407))"
"                (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_406)))))))))"
"(define-values"
"(next-readtable)"
"(lambda(config_0)"
"(begin"
"(if(eq?(read-config-readtable config_0)(read-config-next-readtable config_0))"
"(let-values() config_0)"
"(let-values()"
"(let-values(((v_410) config_0))"
"(let-values(((the-struct_411) v_410))"
"(if(read-config/outer? the-struct_411)"
"(let-values(((inner72_412)"
"(let-values(((the-struct_413)(read-config/outer-inner v_410)))"
"(if(read-config/inner? the-struct_413)"
"(let-values(((readtable73_414)(read-config-next-readtable config_0)))"
"(read-config/inner2.1"
" readtable73_414"
"(read-config/inner-next-readtable the-struct_413)"
"(read-config/inner-for-syntax? the-struct_413)"
"(read-config/inner-source the-struct_413)"
"(read-config/inner-read-compiled the-struct_413)"
"(read-config/inner-dynamic-require the-struct_413)"
"(read-config/inner-module-declared? the-struct_413)"
"(read-config/inner-coerce the-struct_413)"
"(read-config/inner-coerce-key the-struct_413)"
"(read-config/inner-parameter-override the-struct_413)"
"(read-config/inner-parameter-cache the-struct_413)"
"(read-config/inner-st the-struct_413)))"
"                                  (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_413)))))"
"(read-config/outer1.1"
" inner72_412"
"(read-config/outer-wrap the-struct_411)"
"(read-config/outer-line the-struct_411)"
"(read-config/outer-col the-struct_411)"
"(read-config/outer-pos the-struct_411)"
"(read-config/outer-indentations the-struct_411)"
"(read-config/outer-keep-comment? the-struct_411)))"
"                (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_411)))))))))"
"(define-values"
"(coerce)"
"(lambda(val_0 in_0 config_0)"
"(begin"
"(let-values(((for-syntax?_4)(read-config-for-syntax? config_0)))"
"((read-config-coerce config_0)"
" for-syntax?_4"
" val_0"
"(if for-syntax?_4"
"(let-values(((in1_5) in_0)((config2_6) config_0))(port+config->srcloc49.1 #f in1_5 config2_6))"
" #f))))))"
"(define-values(default-reader-guard$1)(lambda(v_0)(begin 'default-reader-guard v_0)))"
"(define-values"
"(1/current-reader-guard)"
"(make-parameter"
" default-reader-guard$1"
"(lambda(v_0)"
"(begin"
"(if(if(procedure? v_0)(procedure-arity-includes? v_0 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'current-reader-guard \"(procedure-arity-includes/c 1)\" v_0)))"
" v_0))))"
"(define-values(1/read-square-bracket-as-paren)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-curly-brace-as-paren)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-square-bracket-with-tag)(make-parameter #f(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-curly-brace-with-tag)(make-parameter #f(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-cdot)(make-parameter #f(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-accept-graph)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-accept-compiled)(make-parameter #f(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-accept-box)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-decimal-as-inexact)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-accept-dot)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-accept-infix-dot)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-accept-quasiquote)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-accept-reader)(make-parameter #f(lambda(v_0)(if v_0 #t #f))))"
"(define-values(1/read-accept-lang)(make-parameter #t(lambda(v_0)(if v_0 #t #f))))"
"(define-values(unknown)(gensym 'unknown))"
"(define-values"
"(check-parameter)"
"(lambda(param_0 config_0)"
"(begin"
"(let-values(((cache_3)(read-config-parameter-cache config_0)))"
"(let-values(((v_4)"
"(hash-ref(read-config-parameter-override config_0) param_0(hash-ref cache_3 param_0 unknown))))"
"(if(eq? v_4 unknown)"
"(let-values()(let-values(((v_5)(param_0)))(begin(hash-set! cache_3 param_0 v_5) v_5)))"
"(let-values() v_4)))))))"
"(define-values"
"(override-parameter)"
"(lambda(param_0 config_0 v_0)"
"(begin"
"(let-values(((v_9) config_0))"
"(let-values(((the-struct_10) v_9))"
"(if(read-config/outer? the-struct_10)"
"(let-values(((inner1_11)"
"(let-values(((the-struct_12)(read-config/outer-inner v_9)))"
"(if(read-config/inner? the-struct_12)"
"(let-values(((parameter-override2_13)"
"(hash-set(read-config-parameter-override config_0) param_0 v_0)))"
"(read-config/inner2.1"
"(read-config/inner-readtable the-struct_12)"
"(read-config/inner-next-readtable the-struct_12)"
"(read-config/inner-for-syntax? the-struct_12)"
"(read-config/inner-source the-struct_12)"
"(read-config/inner-read-compiled the-struct_12)"
"(read-config/inner-dynamic-require the-struct_12)"
"(read-config/inner-module-declared? the-struct_12)"
"(read-config/inner-coerce the-struct_12)"
"(read-config/inner-coerce-key the-struct_12)"
" parameter-override2_13"
"(read-config/inner-parameter-cache the-struct_12)"
"(read-config/inner-st the-struct_12)))"
"                              (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_12)))))"
"(read-config/outer1.1"
" inner1_11"
"(read-config/outer-wrap the-struct_10)"
"(read-config/outer-line the-struct_10)"
"(read-config/outer-col the-struct_10)"
"(read-config/outer-pos the-struct_10)"
"(read-config/outer-indentations the-struct_10)"
"(read-config/outer-keep-comment? the-struct_10)))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_10)))))))"
"(define-values"
"(force-parameters!)"
"(lambda(config_0)"
"(begin"
"(let-values(((cache_15)(read-config-parameter-cache config_0)))"
"(if(hash-ref cache_15 'all-forced #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-set! cache_15 'all-forced #t)"
"(check-parameter read-case-sensitive config_0)"
"(check-parameter 1/read-square-bracket-as-paren config_0)"
"(check-parameter 1/read-curly-brace-as-paren config_0)"
"(check-parameter 1/read-square-bracket-with-tag config_0)"
"(check-parameter 1/read-curly-brace-with-tag config_0)"
"(check-parameter 1/read-cdot config_0)"
"(check-parameter 1/read-accept-graph config_0)"
"(check-parameter 1/read-accept-compiled config_0)"
"(check-parameter 1/read-accept-box config_0)"
"(check-parameter read-accept-bar-quote config_0)"
"(check-parameter 1/read-decimal-as-inexact config_0)"
"(check-parameter 1/read-accept-dot config_0)"
"(check-parameter 1/read-accept-infix-dot config_0)"
"(check-parameter 1/read-accept-quasiquote config_0)"
"(check-parameter 1/read-accept-reader config_0)"
"(check-parameter 1/read-accept-lang config_0))))))))"
"(define-values"
"(struct:special-comment 1/make-special-comment 1/special-comment? 1/special-comment-value)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'special-comment"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'make-special-comment)))))"
"(values struct:_1 make-_2 ?_3(make-struct-field-accessor -ref_4 0 'value))))"
"(define-values"
"(struct:readtable"
" readtable1.1"
" 1/readtable?"
" readtable-symbol-parser"
" readtable-char-ht"
" readtable-dispatch-ht"
" readtable-delimiter-ht)"
"(let-values(((struct:_14 make-_15 ?_16 -ref_17 -set!_18)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'readtable"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t)(cons prop:readtable #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'readtable)))))"
"(values"
" struct:_14"
" make-_15"
" ?_16"
"(make-struct-field-accessor -ref_17 0 'symbol-parser)"
"(make-struct-field-accessor -ref_17 1 'char-ht)"
"(make-struct-field-accessor -ref_17 2 'dispatch-ht)"
"(make-struct-field-accessor -ref_17 3 'delimiter-ht))))"
"(define-values"
"(1/make-readtable)"
"(lambda(rt_0 . args_0)"
"(begin"
" 'make-readtable"
"(begin"
"(if(let-values(((or-part_51)(not rt_0)))(if or-part_51 or-part_51(1/readtable? rt_0)))"
"(void)"
"          (let-values () (raise-argument-error 'make-readtable \"(or/c readtable? #f)\" rt_0)))"
"((letrec-values(((loop_52)"
"(lambda(args_1 symbol-parser_0 char-ht_0 dispatch-ht_0 delimiter-ht_0)"
"(begin"
" 'loop"
"(if(null? args_1)"
"(let-values()(readtable1.1 symbol-parser_0 char-ht_0 dispatch-ht_0 delimiter-ht_0))"
"(let-values()"
"(let-values(((key_58)(car args_1)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_62)(not key_58)))"
"(if or-part_62 or-part_62(char? key_58)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                         \"(or/c char? #f)\""
" key_58)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(null? args_1)"
"(let-values()"
"(if key_58"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"(string-append"
"                                                                \"expected 'terminating-macro, 'non-terminating-macro, 'dispatch-macro,\""
"                                                                \" or character argument after character argument\")"
"                                                               \"character\""
" key_58))"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"                                                               \"expected 'non-terminating-macro after #f\"))))"
"(void))"
"(values))))"
"(let-values(((mode_59)(cadr args_1)))"
"(let-values((()"
"(begin"
"(if key_58"
"(let-values()"
"(if(let-values(((or-part_63)"
"(eq? mode_59 'terminating-macro)))"
"(if or-part_63"
" or-part_63"
"(let-values(((or-part_64)"
"(eq?"
" mode_59"
" 'non-terminating-macro)))"
"(if or-part_64"
" or-part_64"
"(let-values(((or-part_65)"
"(eq? mode_59 'dispatch-macro)))"
"(if or-part_65"
" or-part_65"
"(char? mode_59)))))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                   \"(or/c 'terminating-macro 'non-terminating-macro 'dispatch-macro char?)\""
" mode_59))))"
"(let-values()"
"(if(eq? mode_59 'non-terminating-macro)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"                                                                   \"expected 'non-terminating-macro after #f\")))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(null?(cddr args_1))"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"(if key_58"
"                                                                   \"expected readtable or #f argument after character argument\""
"                                                                   \"expected procedure argument after symbol argument\")"
"                                                                 \"given\""
" mode_59))"
"(void))"
"(values))))"
"(let-values(((target_60)(caddr args_1)))"
"(let-values(((rest-args_61)(cdddr args_1)))"
"(if(not key_58)"
"(let-values()"
"(begin"
"(if(if(procedure? target_60)"
"(procedure-arity-includes? target_60 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                             \"(procedure-arity-includes/c 6)\""
" target_60)))"
"(loop_52"
" rest-args_61"
" target_60"
" char-ht_0"
" dispatch-ht_0"
" delimiter-ht_0)))"
"(if(eq? mode_59 'dispatch-macro)"
"(let-values()"
"(begin"
"(if(if(procedure? target_60)"
"(procedure-arity-includes? target_60 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                               \"(procedure-arity-includes/c 6)\""
" target_60)))"
"(loop_52"
" rest-args_61"
" symbol-parser_0"
" char-ht_0"
"(hash-set dispatch-ht_0 key_58 target_60)"
" delimiter-ht_0)))"
"(if(char? mode_59)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_69)"
"(not target_60)))"
"(if or-part_69"
" or-part_69"
"(1/readtable? target_60)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                               \"(or/c readtable? #f)\""
" target_60)))"
"(values))))"
"(let-values(((actual-target_66)"
"(let-values(((or-part_70)"
"(if target_60"
"(hash-ref"
"(readtable-char-ht target_60)"
" mode_59"
" #f)"
" #f)))"
"(if or-part_70 or-part_70 mode_59))))"
"(let-values(((new-char-ht_67)"
"(if actual-target_66"
"(hash-set"
" char-ht_0"
" key_58"
" actual-target_66)"
"(hash-remove char-ht_0 key_58))))"
"(let-values(((new-delimiter-ht_68)"
"(hash-set"
" delimiter-ht_0"
" key_58"
"(if target_60"
"(hash-ref"
"(readtable-delimiter-ht target_60)"
" mode_59"
" mode_59)"
" mode_59))))"
"(loop_52"
" rest-args_61"
" symbol-parser_0"
" new-char-ht_67"
" dispatch-ht_0"
" new-delimiter-ht_68))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(procedure? target_60)"
"(procedure-arity-includes? target_60 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                               \"(procedure-arity-includes/c 6)\""
" target_60)))"
"(values))))"
"(let-values(((new-char-ht_71)"
"(hash-set char-ht_0 key_58 target_60)))"
"(let-values(((new-delimiter-ht_72)"
"(hash-set"
" delimiter-ht_0"
" key_58"
"(if(eq? mode_59 'terminating-macro)"
" 'delimit"
" 'no-delimit))))"
"(loop_52"
" rest-args_61"
" symbol-parser_0"
" new-char-ht_71"
" dispatch-ht_0"
" new-delimiter-ht_72))))))))))))))))))))))"
" loop_52)"
" args_0"
"(if rt_0(readtable-symbol-parser rt_0) #f)"
"(if rt_0(readtable-char-ht rt_0) '#hasheqv())"
"(if rt_0(readtable-dispatch-ht rt_0) '#hasheqv())"
"(if rt_0(readtable-delimiter-ht rt_0) '#hasheqv()))))))"
"(define-values"
"(*readtable-effective-char)"
"(lambda(rt_0 c_0)"
"(begin"
"(let-values(((target_75)(hash-ref(readtable-char-ht rt_0) c_0 #f)))"
"(if(not target_75)"
"(let-values() c_0)"
"(if(char? target_75)(let-values() target_75)(let-values() '#\\x)))))))"
"(define-values"
"(effective-char)"
"(lambda(c_0 config_0)"
"(begin"
"(let-values(((rt_78)(read-config-readtable config_0))((c_79) c_0))"
"(if(let-values(((or-part_80)(not rt_78)))(if or-part_80 or-part_80(not(char? c_79))))"
"(let-values() c_79)"
"(let-values()(*readtable-effective-char rt_78 c_79)))))))"
"(define-values"
"(readtable-handler)"
"(lambda(config_0 c_0)"
"(begin"
"(let-values(((rt_83)(read-config-readtable config_0)))"
"(if rt_83"
"(let-values(((target_84)(hash-ref(readtable-char-ht rt_83) c_0 #f)))"
"(if target_84(if(not(char? target_84)) target_84 #f) #f))"
" #f)))))"
"(define-values"
"(readtable-dispatch-handler)"
"(lambda(config_0 c_0)"
"(begin"
"(let-values((()(begin(force-parameters! config_0)(values))))"
"(let-values(((rt_87)(read-config-readtable config_0)))"
"(if rt_87(hash-ref(readtable-dispatch-ht rt_87) c_0 #f) #f))))))"
"(define-values"
"(readtable-apply)"
"(lambda(handler_0 c_0 in_0 config_0 line_0 col_0 pos_0)"
"(begin"
"(let-values(((for-syntax?_95)(read-config-for-syntax? config_0)))"
"(let-values(((v_96)"
"(if(not for-syntax?_95)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_0)"
"(let-values()"
"(if(procedure-arity-includes? handler_0 2)"
"(handler_0 c_0 in_0)"
"(handler_0 c_0 in_0 #f line_0 col_0 pos_0)))))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_0)"
"(let-values()(handler_0 c_0 in_0(read-config-source config_0) line_0 col_0 pos_0)))))))"
"(if(1/special-comment? v_96) v_96(coerce v_96 in_0 config_0)))))))"
"(define-values"
"(1/readtable-mapping)"
"(lambda(rt_0 c_0)"
"(begin"
" 'readtable-mapping"
"(let-values((()"
"(begin"
"(if(1/readtable? rt_0)"
"(void)"
"                        (let-values () (raise-argument-error 'readtable-mapping \"readtable?\" rt_0)))"
"(values))))"
"(let-values((()"
"(begin"
"                        (if (char? c_0) (void) (let-values () (raise-argument-error 'readtable-mapping \"char?\" c_0)))"
"(values))))"
"(let-values(((handler_99)(hash-ref(readtable-char-ht rt_0) c_0 #f)))"
"(values"
"(let-values(((or-part_100)"
"(if handler_99"
"(if(char? handler_99)"
"(let-values() handler_99)"
"(if(eq? 'delimit(hash-ref(readtable-delimiter-ht rt_0) c_0 #f))"
"(let-values() 'terminating-macro)"
"(let-values() 'non-terminating-macro)))"
" #f)))"
"(if or-part_100 or-part_100 c_0))"
"(if(char? handler_99) #f handler_99)"
"(hash-ref(readtable-dispatch-ht rt_0) c_0 #f))))))))"
"(define-values"
"(readtable-equivalent-chars)"
"(lambda(rt_0 c_0)"
"(begin"
"(let-values(((ht_103)(readtable-char-ht rt_0)))"
"(append"
"(if(hash-ref ht_103 c_0 #f) null(list c_0))"
"(reverse$1"
"(let-values(((ht_104) ht_103))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_104)))"
"((letrec-values(((for-loop_105)"
"(lambda(fold-var_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_108 v_109)(hash-iterate-key+value ht_104 i_0)))"
"(let-values(((fold-var_110)"
"(let-values(((fold-var_111) fold-var_0))"
"(if(eqv? v_109 c_0)"
"(let-values(((fold-var_112) fold-var_111))"
"(let-values(((fold-var_113)"
"(let-values()"
"(cons(let-values() k_108) fold-var_112))))"
"(values fold-var_113)))"
" fold-var_111))))"
"(if(not #f)"
"(for-loop_105 fold-var_110(hash-iterate-next ht_104 i_0))"
" fold-var_110)))"
" fold-var_0)))))"
" for-loop_105)"
" null"
"(hash-iterate-first ht_104))))))))))"
"(define-values"
"(struct:special special1.1 special? special-value)"
"(let-values(((struct:_66 make-_67 ?_68 -ref_69 -set!_70)"
"(let-values()"
"(let-values()(make-struct-type 'special #f 1 0 #f null(current-inspector) #f '(0) #f 'special)))))"
"(values struct:_66 make-_67 ?_68(make-struct-field-accessor -ref_69 0 'value))))"
"(define-values"
"(wrap)"
"(lambda(s-exp_0 in_0 config_0 rep_0)"
"(begin"
"(let-values(((wrap_5)(read-config-wrap config_0)))"
"(if wrap_5"
"(wrap_5"
" s-exp_0"
"(let-values(((in1_6) in_0)((config2_7) config_0))(port+config->srcloc49.1 #f in1_6 config2_7))"
" rep_0)"
" s-exp_0)))))"
"(define-values(consume-char)(lambda(in_0 c_0)(begin(begin(read-char in_0)(void)))))"
"(define-values"
"(consume-char/special)"
"(lambda(in_0 config_0 c_0)"
"(begin(begin(read-char-or-special in_0 special1.1(read-config-source config_0))(void)))))"
"(define-values"
"(reader-error12.1)"
"(lambda(continuation-marks1_0 due-to2_0 end-pos4_0 who3_0 in9_0 config10_0 str11_0 new-rest_0)"
"(begin"
" 'reader-error12"
"(let-values(((in_27) in9_0))"
"(let-values(((config_28) config10_0))"
"(let-values(((continuation-marks_29)"
"(if(eq? continuation-marks1_0 unsafe-undefined)"
"(current-continuation-marks)"
" continuation-marks1_0)))"
"(let-values(((due-to_30) due-to2_0))"
"(let-values(((who_31)"
"(if(eq? who3_0 unsafe-undefined)"
"(if(read-config-for-syntax? config_28) 'read-syntax 'read)"
" who3_0)))"
"(let-values(((end-pos_32) end-pos4_0))"
"(let-values(((str_33) str11_0))"
"(let-values(((args_34) new-rest_0))"
"                      (let-values (((msg_35) (format \"~a: ~a\" who_31 (apply format str_33 args_34))))"
"(let-values(((srcloc_36)"
"(if in_27"
"(let-values(((in23_38) in_27)"
"((config24_39) config_28)"
"((end-pos25_40) end-pos_32))"
"(port+config->srcloc49.1 end-pos25_40 in23_38 config24_39))"
" #f)))"
"(raise"
"((if(eof-object? due-to_30)"
"(let-values() exn:fail:read:eof)"
"(if(not(char? due-to_30))"
"(let-values() exn:fail:read:non-char)"
"(let-values() exn:fail:read)))"
"(let-values(((s_41)"
"(if(error-print-source-location)"
"(if srcloc_36(srcloc->string srcloc_36) #f)"
" #f)))"
"                              (if s_41 (string-append s_41 \": \" msg_35) msg_35))"
" continuation-marks_29"
"(if srcloc_36(list srcloc_36) null))))))))))))))))"
"(define-values"
"(bad-syntax-error20.1)"
"(lambda(due-to15_0 in17_0 config18_0 str19_0)"
"(begin"
" 'bad-syntax-error20"
"(let-values(((in_87) in17_0))"
"(let-values(((config_88) config18_0))"
"(let-values(((str_89) str19_0))"
"(let-values(((due-to_90) due-to15_0))"
"(let-values()"
"(let-values(((in26_92) in_87)"
"((config27_93) config_88)"
"((due-to28_94) due-to_90)"
"                             ((temp29_95) \"bad syntax `~a`\")"
"((str30_96) str_89))"
"(reader-error12.1"
" unsafe-undefined"
" due-to28_94"
" #f"
" unsafe-undefined"
" in26_92"
" config27_93"
" temp29_95"
"(list str30_96)))))))))))"
"(define-values"
"(catch-and-reraise-as-reader/proc)"
"(lambda(in_0 config_0 thunk_0)"
"(begin"
"(let-values(((with-handlers-predicate31_120) exn:fail?)"
"((with-handlers-handler32_121)"
"(lambda(exn_0)"
"(begin"
" 'with-handlers-handler32"
"(let-values(((in33_124) in_0)"
"((config34_125) config_0)"
"                                     ((temp35_126) \"~a\")"
"((temp36_127)"
"(let-values(((s_129)(exn-message exn_0)))"
"                                        (regexp-replace \"^[a-z-]*: \" s_129 \"\")))"
"((temp37_128)(exn-continuation-marks exn_0)))"
"(reader-error12.1"
" temp37_128"
" '#\\x"
" #f"
" unsafe-undefined"
" in33_124"
" config34_125"
" temp35_126"
"(list temp36_127)))))))"
"(let-values(((bpz_130)(continuation-mark-set-first #f break-enabled-key)))"
"(call-handled-body"
" bpz_130"
"(lambda(e_0)"
"(select-handler/no-breaks"
" e_0"
" bpz_130"
"(list(cons with-handlers-predicate31_120 with-handlers-handler32_121))))"
"(lambda()(thunk_0))))))))"
"(define-values"
"(port-next-location*)"
"(lambda(in_0 init-c_0)"
"(begin"
"(if(not init-c_0)"
"(let-values()(port-next-location in_0))"
"(let-values()"
"(let-values(((line_3 col_4 pos_5)(port-next-location in_0)))"
"(values line_3(if col_4(max 0(sub1 col_4)) #f)(if pos_5(max 1(sub1 pos_5)) #f))))))))"
"(define-values"
"(read-char/skip-whitespace-and-comments)"
"(lambda(init-c_0 read-one_0 in_0 config_0)"
"(begin"
"(let-values(((rt_5)(read-config-readtable config_0)))"
"(let-values(((source_6)(read-config-source config_0)))"
"((letrec-values(((skip-loop_7)"
"(lambda(init-c_1)"
"(begin"
" 'skip-loop"
"(let-values(((c_9)"
"(let-values(((or-part_11) init-c_1))"
"(if or-part_11"
" or-part_11"
"(let-values(((in_12) in_0)((source_14) source_6))"
"(read-char-or-special in_12 special1.1 source_14))))))"
"(let-values(((ec_10)"
"(let-values(((rt_15) rt_5)((c_16) c_9))"
"(if(let-values(((or-part_17)(not rt_15)))"
"(if or-part_17 or-part_17(not(char? c_16))))"
"(let-values() c_16)"
"(let-values()(*readtable-effective-char rt_15 c_16))))))"
"(if(eof-object? ec_10)"
"(let-values() c_9)"
"(if(not(char? ec_10))"
"(let-values()"
"(let-values(((v_18)(special-value c_9)))"
"(if(if(1/special-comment? v_18)"
"(not(read-config-keep-comment? config_0))"
" #f)"
"(let-values()(skip-loop_7 #f))"
"(let-values() c_9))))"
"(if(char-whitespace? ec_10)"
"(let-values()(skip-loop_7 #f))"
"(if(char=? '#\\; ec_10)"
"(let-values()"
"(begin"
"((letrec-values(((loop_19)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_20)"
"(let-values(((in_21) in_0)"
"((source_23) source_6))"
"(read-char-or-special"
" in_21"
" special1.1"
" source_23))))"
"(if(let-values(((or-part_24)"
"(eof-object? c_20)))"
"(if or-part_24"
" or-part_24"
"(eqv?"
" '#\\newline"
"(effective-char c_20 config_0))))"
"(void)"
"(let-values()(loop_19))))))))"
" loop_19))"
"(if(read-config-keep-comment? config_0)"
"(result-special-comment)"
"(skip-loop_7 #f))))"
"(if(if(char=? '#\\# ec_10)"
"(eqv?"
" '#\\|"
"(let-values(((in_25) in_0)"
"((skip-count_27) 0)"
"((source_28) source_6))"
"(let-values(((c_29)"
"(peek-char-or-special"
" in_25"
" skip-count_27"
" 'special"
" source_28)))"
"(if(eq? c_29 'special)(special1.1 'special) c_29))))"
" #f)"
"(let-values()"
"(begin"
"(skip-pipe-comment! c_9 in_0 config_0)"
"(if(read-config-keep-comment? config_0)"
"(result-special-comment)"
"(skip-loop_7 #f))))"
"(if(if(char=? '#\\# ec_10)"
"(if(eqv?"
" '#\\!"
"(let-values(((in_30) in_0)"
"((skip-count_32) 0)"
"((source_33) source_6))"
"(let-values(((c_34)"
"(peek-char-or-special"
" in_30"
" skip-count_32"
" 'special"
" source_33)))"
"(if(eq? c_34 'special)(special1.1 'special) c_34))))"
"(let-values(((c3_35)"
"(let-values(((in_36) in_0)"
"((skip-count_38) 1)"
"((source_39) source_6))"
"(let-values(((c_40)"
"(peek-char-or-special"
" in_36"
" skip-count_38"
" 'special"
" source_39)))"
"(if(eq? c_40 'special)"
"(special1.1 'special)"
" c_40)))))"
"(let-values(((or-part_41)(eqv? '#\\space c3_35)))"
"(if or-part_41 or-part_41(eqv? '#\\/ c3_35))))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(skip-unix-line-comment! in_0 config_0)"
"(if(read-config-keep-comment? config_0)"
"(result-special-comment)"
"(skip-loop_7 #f))))"
"(if(if(char=? '#\\# ec_10)"
"(eqv?"
" '#\\;"
"(let-values(((in_42) in_0)"
"((skip-count_44) 0)"
"((source_45) source_6))"
"(let-values(((c_46)"
"(peek-char-or-special"
" in_42"
" skip-count_44"
" 'special"
" source_45)))"
"(if(eq? c_46 'special)(special1.1 'special) c_46))))"
" #f)"
"(let-values()"
"(let-values((()(begin(consume-char in_0 '#\\;)(values))))"
"(let-values(((v_47)(read-one_0 #f in_0 config_0)))"
"(begin"
"(if(eof-object? v_47)"
"(let-values()"
"(let-values(((in1_49) in_0)"
"((config2_50) config_0)"
"((v3_51) v_47)"
"((temp4_52)"
"                                                                            \"expected a commented-out element for `~a;`, but found end-of-file\")"
"((ec5_53) ec_10))"
"(reader-error12.1"
" unsafe-undefined"
" v3_51"
" #f"
" unsafe-undefined"
" in1_49"
" config2_50"
" temp4_52"
"(list ec5_53))))"
"(void))"
"(if(read-config-keep-comment? config_0)"
"(result-special-comment)"
"(skip-loop_7 #f))))))"
"(let-values() c_9))))))))))))))"
" skip-loop_7)"
" init-c_0))))))"
"(define-values(result-special-comment)(lambda()(begin(special1.1(1/make-special-comment #f)))))"
"(define-values"
"(skip-pipe-comment!)"
"(lambda(init-c_0 in_0 config_0)"
"(begin"
"(let-values(((source_57)(read-config-source config_0)))"
"(let-values(((line_58 col_59 pos_60)(port-next-location in_0)))"
"(begin"
"(consume-char in_0 '#\\|)"
"((letrec-values(((loop_61)"
"(lambda(prev-c_0 depth_0)"
"(begin"
" 'loop"
"(let-values(((c_64)"
"(let-values(((in_65) in_0)((source_67) source_57))"
"(read-char-or-special in_65 special1.1 source_67))))"
"(if(eof-object? c_64)"
"(let-values()"
"(let-values(((in6_69) in_0)"
"((temp7_70)(reading-at config_0 line_58 col_59 pos_60))"
"((c8_71) c_64)"
"                                                     ((temp9_72) \"end of file in `#|` comment\"))"
"(reader-error12.1"
" unsafe-undefined"
" c8_71"
" #f"
" unsafe-undefined"
" in6_69"
" temp7_70"
" temp9_72"
"(list))))"
"(if(not(char? c_64))"
"(let-values()(loop_61 #f depth_0))"
"(if(if(char=? '#\\| c_64)(eqv? prev-c_0 '#\\#) #f)"
"(let-values()(loop_61 #f(add1 depth_0)))"
"(if(if(char=? '#\\# c_64)(eqv? prev-c_0 '#\\|) #f)"
"(let-values()"
"(if(positive? depth_0)"
"(let-values()(loop_61 #f(sub1 depth_0)))"
"(void)))"
"(let-values()(loop_61 c_64 depth_0)))))))))))"
" loop_61)"
" #f"
" 0)))))))"
"(define-values"
"(skip-unix-line-comment!)"
"(lambda(in_0 config_0)"
"(begin"
"((letrec-values(((loop_75)"
"(lambda(backslash?_0)"
"(begin"
" 'loop"
"(let-values(((c_77)"
"(let-values(((in_78) in_0)((source_80)(read-config-source config_0)))"
"(read-char-or-special in_78 special1.1 source_80))))"
"(if(eof-object? c_77)"
"(let-values()(void))"
"(if(not(char? c_77))"
"(let-values()(loop_75 #f))"
"(if(char=? c_77 '#\\newline)"
"(let-values()(if backslash?_0(let-values()(loop_75 #f))(void)))"
"(if(char=? c_77 '#\\\\)"
"(let-values()(loop_75 #t))"
"(let-values()(loop_75 #f)))))))))))"
" loop_75)"
" #f))))"
"(define-values"
"(readtable-char-delimiter?)"
"(lambda(rt_0 c_0 config_0)"
"(begin"
"(let-values(((dc_4)"
"(let-values(((or-part_5)(if rt_0(hash-ref(readtable-delimiter-ht rt_0) c_0 #f) #f)))"
"(if or-part_5 or-part_5 c_0))))"
"(if(eq? dc_4 'no-delimit)"
"(let-values() #f)"
"(if(not(char? dc_4))"
"(let-values() #t)"
"(let-values()"
"(let-values(((or-part_6)(char-whitespace? dc_4)))"
"(if or-part_6"
" or-part_6"
"(let-values(((or-part_7)(char=? dc_4 '#\\()))"
"(if or-part_7"
" or-part_7"
"(let-values(((or-part_8)(char=? dc_4 '#\\))))"
"(if or-part_8"
" or-part_8"
"(let-values(((or-part_9)(char=? dc_4 '#\\[)))"
"(if or-part_9"
" or-part_9"
"(let-values(((or-part_10)(char=? dc_4 '#\\])))"
"(if or-part_10"
" or-part_10"
"(let-values(((or-part_11)(char=? dc_4 '#\\{)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_12)(char=? dc_4 '#\\})))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)(char=? dc_4 '#\\')))"
"(if or-part_13"
" or-part_13"
"(let-values(((or-part_14)(char=? dc_4 '#\\`)))"
"(if or-part_14"
" or-part_14"
"(let-values(((or-part_15)(char=? dc_4 '#\\,)))"
"(if or-part_15"
" or-part_15"
"(let-values(((or-part_16)(char=? dc_4 '#\\;)))"
"(if or-part_16"
" or-part_16"
"                                                          (let-values (((or-part_17) (char=? dc_4 '#\\\")))"
"(if or-part_17"
" or-part_17"
"(if(char=? dc_4 '#\\.)"
"(check-parameter 1/read-cdot config_0)"
" #f))))))))))))))))))))))))))))))))"
"(define-values"
"(char-delimiter?)"
"(lambda(c_0 config_0)(begin(readtable-char-delimiter?(read-config-readtable config_0) c_0 config_0))))"
"(define-values"
"(char-closer?)"
"(lambda(ec_0 config_0)"
"(begin"
"(if(not(eof-object? ec_0))"
"(let-values(((or-part_3)(char=? ec_0 '#\\))))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(char=? ec_0 '#\\])))(if or-part_4 or-part_4(char=? ec_0 '#\\})))))"
" #f))))"
" (define-values (closer-name) (lambda (c_0 config_0) (begin (effective-char-names c_0 config_0 \"closer\"))))"
" (define-values (opener-name) (lambda (c_0 config_0) (begin (effective-char-names c_0 config_0 \"opener\"))))"
"(define-values"
"(effective-char-names)"
"(lambda(c_0 config_0 fallback-str_0)"
"(begin"
"(let-values(((rt_12)(read-config-readtable config_0)))"
"(if(not rt_12)"
"          (let-values () (format \"`~a`\" c_0))"
"(let-values()"
"(let-values(((cs_13)(readtable-equivalent-chars rt_12 c_0)))"
"(if(null? cs_13)"
"(let-values() fallback-str_0)"
"(if(null?(cdr cs_13))"
"                  (let-values () (format \"`~a`\" (car cs_13)))"
"(if(null?(cddr cs_13))"
"                    (let-values () (format \"`~a` or `~a`\" (car cs_13) (cadr cs_13)))"
"(let-values()"
"(apply"
" string-append"
"((letrec-values(((loop_14)"
"(lambda(cs_0)"
"(begin"
" 'loop"
"(if(null?(cdr cs_0))"
"                                               (let-values () (list (format \"or `~a`\" (car cs_0))))"
"(let-values()"
"                                                 (cons (format \"`~a`, \" (car cs_0)) (loop_14 (cdr cs_0)))))))))"
" loop_14)"
" cs_13)))))))))))))"
"(define-values"
"(closer->opener)"
"(lambda(c_0)"
"(begin"
"(let-values(((tmp_17) c_0))"
"(if(equal? tmp_17 '#\\))"
"(let-values() '#\\()"
"(if(equal? tmp_17 '#\\])"
"(let-values() '#\\[)"
"(if(equal? tmp_17 '#\\})(let-values() '#\\{)(let-values() c_0))))))))"
" (define-values (dot-name) (lambda (config_0) (begin \"`.`\")))"
"(define-values"
"(all-openers-str)"
"(lambda(config_0)"
"(begin"
"(let-values(((p_20)(opener-name '#\\( config_0)))"
"(let-values(((s_21)"
"(if(check-parameter 1/read-square-bracket-as-paren config_0)(opener-name '#\\[ config_0) #f)))"
"(let-values(((c_22)"
"(if(check-parameter 1/read-curly-brace-as-paren config_0)(opener-name '#\\{ config_0) #f)))"
"(if(if s_21 c_22 #f)"
"              (let-values () (format \"~a, ~a, or ~a\" p_20 s_21 c_22))"
"(if(let-values(((or-part_23) s_21))(if or-part_23 or-part_23 c_22))"
"(let-values()"
"                  (format \"~a or ~a\" p_20 (let-values (((or-part_24) s_21)) (if or-part_24 or-part_24 c_22))))"
"(let-values() p_20)))))))))"
"(define-values"
"(struct:accum-string"
" accum-string1.1"
" accum-string?"
" accum-string-pos"
" accum-string-str"
" set-accum-string-pos!"
" set-accum-string-str!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type 'accum-string #f 2 0 #f null(current-inspector) #f '() #f 'accum-string)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'pos)"
"(make-struct-field-accessor -ref_4 1 'str)"
"(make-struct-field-mutator -set!_5 0 'pos)"
"(make-struct-field-mutator -set!_5 1 'str))))"
"(define-values"
"(accum-string-init!)"
"(lambda(config_0)"
"(begin"
"(let-values(((st_27)(read-config-st config_0)))"
"(let-values(((a_28)(read-config-state-accum-str st_27)))"
"(if a_28"
"(let-values()(begin(set-read-config-state-accum-str! st_27 #f)(set-accum-string-pos! a_28 0) a_28))"
"(let-values()(accum-string1.1 0(make-string 32)))))))))"
"(define-values"
"(accum-string-add!)"
"(lambda(a_0 c_0)"
"(begin"
"(let-values(((pos_31)(accum-string-pos a_0)))"
"(let-values(((str_32)(accum-string-str a_0)))"
"(let-values(((str2_33)"
"(if(< pos_31(string-length str_32))"
"(let-values() str_32)"
"(let-values()"
"(let-values(((str2_34)(make-string(*(string-length str_32) 2))))"
"(begin(string-copy! str2_34 0 str_32)(set-accum-string-str! a_0 str2_34) str2_34))))))"
"(begin(string-set! str2_33 pos_31 c_0)(set-accum-string-pos! a_0(add1 pos_31)))))))))"
"(define-values(accum-string-count)(lambda(a_0)(begin(accum-string-pos a_0))))"
"(define-values(set-accum-string-count!)(lambda(a_0 pos_0)(begin(set-accum-string-pos! a_0 pos_0))))"
"(define-values"
"(accum-string-convert!)"
"(lambda(a_0 convert_0 start-pos_0)"
"(begin"
"(let-values(((str_41)(accum-string-str a_0)))"
"(let-values(((s_42)(convert_0(substring str_41 start-pos_0(accum-string-pos a_0)))))"
"(let-values(((len_43)(string-length s_42)))"
"(begin"
"(if(<(+ len_43 start-pos_0)(string-length str_41))"
"(void)"
"(let-values()"
"(let-values(((str2_44)(make-string(+ start-pos_0 len_43))))"
"(begin(string-copy! str2_44 0 str_41 0 start-pos_0)(set-accum-string-str! a_0 str2_44)))))"
"(string-copy!(accum-string-str a_0) start-pos_0 s_42)"
"(set-accum-string-pos! a_0(+ start-pos_0 len_43)))))))))"
"(define-values"
"(accum-string-get!6.1)"
"(lambda(start-pos2_0 a4_0 config5_0)"
"(begin"
" 'accum-string-get!6"
"(let-values(((a_48) a4_0))"
"(let-values(((config_49) config5_0))"
"(let-values(((start-pos_50) start-pos2_0))"
"(let-values()"
"(let-values(((s_51)(substring(accum-string-str a_48) start-pos_50(accum-string-pos a_48))))"
"(begin(accum-string-abandon! a_48 config_49) s_51)))))))))"
"(define-values"
"(accum-string-get-bytes!13.1)"
"(lambda(start-pos9_0 a11_0 config12_0)"
"(begin"
" 'accum-string-get-bytes!13"
"(let-values(((a_72) a11_0))"
"(let-values(((config_73) config12_0))"
"(let-values(((start-pos_74) start-pos9_0))"
"(let-values()"
"(let-values(((bstr_75)"
"(string->bytes/latin-1(accum-string-str a_72) #f start-pos_74(accum-string-pos a_72))))"
"(begin(accum-string-abandon! a_72 config_73) bstr_75)))))))))"
"(define-values"
"(accum-string-abandon!)"
"(lambda(a_0 config_0)(begin(set-read-config-state-accum-str!(read-config-st config_0) a_0))))"
"(define-values"
"(struct:indentation"
" indentation1.1"
" indentation?"
" indentation-closer"
" indentation-suspicious-closer"
" indentation-multiline?"
" indentation-start-line"
" indentation-last-line"
" indentation-suspicious-line"
" indentation-max-indent"
" indentation-suspicious-quote"
" set-indentation-suspicious-closer!"
" set-indentation-multiline?!"
" set-indentation-last-line!"
" set-indentation-suspicious-line!"
" set-indentation-max-indent!"
" set-indentation-suspicious-quote!)"
"(let-values(((struct:_1 make-_2 ?_3 -ref_4 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type 'indentation #f 8 0 #f null(current-inspector) #f '(0 3) #f 'indentation)))))"
"(values"
" struct:_1"
" make-_2"
" ?_3"
"(make-struct-field-accessor -ref_4 0 'closer)"
"(make-struct-field-accessor -ref_4 1 'suspicious-closer)"
"(make-struct-field-accessor -ref_4 2 'multiline?)"
"(make-struct-field-accessor -ref_4 3 'start-line)"
"(make-struct-field-accessor -ref_4 4 'last-line)"
"(make-struct-field-accessor -ref_4 5 'suspicious-line)"
"(make-struct-field-accessor -ref_4 6 'max-indent)"
"(make-struct-field-accessor -ref_4 7 'suspicious-quote)"
"(make-struct-field-mutator -set!_5 1 'suspicious-closer)"
"(make-struct-field-mutator -set!_5 2 'multiline?)"
"(make-struct-field-mutator -set!_5 4 'last-line)"
"(make-struct-field-mutator -set!_5 5 'suspicious-line)"
"(make-struct-field-mutator -set!_5 6 'max-indent)"
"(make-struct-field-mutator -set!_5 7 'suspicious-quote))))"
"(define-values"
"(make-indentation)"
"(lambda(closer_0 in_0 config_0)"
"(begin"
"(let-values(((line_59 col_60 pos_61)(port-next-location in_0)))"
"(indentation1.1 closer_0 #f #f line_59 line_59 #f(if col_60(add1 col_60) #f) #f)))))"
"(define-values"
"(track-indentation!)"
"(lambda(config_0 line_0 col_0)"
"(begin"
"(let-values(((indts_65)(read-config-indentations config_0)))"
"(let-values(((indt_66)(if(pair? indts_65)(car indts_65) #f)))"
"(if(if indt_66"
"(if line_0(if(indentation-last-line indt_66)(> line_0(indentation-last-line indt_66)) #f) #f)"
" #f)"
"(let-values()"
"(begin"
"(set-indentation-last-line! indt_66 line_0)"
"(set-indentation-multiline?! indt_66 #t)"
"(if(>= col_0(indentation-max-indent indt_66))"
"(let-values()(set-indentation-max-indent! indt_66 col_0))"
"(let-values()"
"(if(indentation-suspicious-line indt_66)"
"(void)"
"(let-values()"
"(begin"
"(set-indentation-suspicious-closer! indt_66(indentation-closer indt_66))"
"(set-indentation-suspicious-line! indt_66 line_0))))))))"
"(void)))))))"
"(define-values"
"(indentation-possible-cause)"
"(lambda(config_0)"
"(begin"
"(let-values(((indt_68)(car(read-config-indentations config_0))))"
"(if(indentation-suspicious-line indt_68)"
"(let-values()"
"(format"
"             \"\\n  possible cause: indentation suggests a missing ~a before line ~a\""
"(closer-name(indentation-suspicious-closer indt_68) config_0)"
"(indentation-suspicious-line indt_68)))"
"          (let-values () \"\"))))))"
"(define-values"
"(indentation-unexpected-closer-message)"
"(lambda(ec_0 c_0 config_0)"
"(begin"
"(let-values(((indts_72)(read-config-indentations config_0)))"
"(if(null? indts_72)"
"          (let-values () (format \"unexpected `~a`\" c_0))"
"(let-values()"
"(let-values(((indt_73)(car indts_72)))"
"(string-append"
"(if(char=? ec_0(indentation-closer indt_73))"
"                 (let-values () (format \"unexpected `~a`\" c_0))"
"(let-values()"
"(let-values(((missing_74)"
"(let-values(((or-part_76)"
"(let-values(((lst_77)(cdr indts_72)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_77)))"
"((letrec-values(((for-loop_78)"
"(lambda(result_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((indt_81)(unsafe-car lst_0))"
"((rest_82)(unsafe-cdr lst_0)))"
"(let-values(((result_83)"
"(let-values()"
"(let-values(((result_85)"
"(let-values()"
"(let-values()"
"(if(char=?"
" ec_0"
"(indentation-closer"
" indt_81))"
"                                                                                                                 \"missing\""
" #f)))))"
"(values result_85)))))"
"(if(if(not"
"((lambda x_0 result_83)"
" indt_81))"
"(not #f)"
" #f)"
"(for-loop_78 result_83 rest_82)"
" result_83)))"
" result_0)))))"
" for-loop_78)"
" #f"
" lst_77)))))"
"                                   (if or-part_76 or-part_76 \"expected\"))))"
"(let-values(((opener-str_75)"
"(opener-name(closer->opener(indentation-closer indt_73)) config_0)))"
"(format"
"                        \"~a ~a to close ~a, found instead `~a`\""
" missing_74"
"(closer-name(indentation-closer indt_73) config_0)"
"(if(indentation-multiline? indt_73)"
"                          (let-values () (format \"~a on line ~a\" opener-str_75 (indentation-start-line indt_73)))"
"                          (let-values () (format \"preceding ~a\" opener-str_75)))"
" c_0)))))"
"(indentation-possible-cause config_0)))))))))"
"(define-values"
"(read-unwrapped-sequence17.1)"
"(lambda(dot-mode2_0"
" elem-config1_0"
" first-read-one5_0"
" shape-tag?3_0"
" whitespace-read-one4_0"
" read-one11_0"
" opener-c12_0"
" opener13_0"
" closer14_0"
" in15_0"
" seq-config16_0)"
"(begin"
" 'read-unwrapped-sequence17"
"(let-values(((read-one_12) read-one11_0))"
"(let-values(((opener-c_13) opener-c12_0))"
"(let-values(((opener_14) opener13_0))"
"(let-values(((closer_15) closer14_0))"
"(let-values(((in_16) in15_0))"
"(let-values(((seq-config_17) seq-config16_0))"
"(let-values(((elem-config_18)"
"(if(eq? elem-config1_0 unsafe-undefined)"
"(next-readtable seq-config_17)"
" elem-config1_0)))"
"(let-values(((dot-mode_19) dot-mode2_0))"
"(let-values(((shape-tag?_20) shape-tag?3_0))"
"(let-values(((whitespace-read-one_21)"
"(if(eq? whitespace-read-one4_0 unsafe-undefined)"
" read-one_12"
" whitespace-read-one4_0)))"
"(let-values(((first-read-one_22)"
"(if(eq? first-read-one5_0 unsafe-undefined) read-one_12 first-read-one5_0)))"
"(let-values()"
"(let-values(((head_23) #f))"
"(let-values(((indentation_24)(make-indentation closer_15 in_16 seq-config_17)))"
"(let-values(((config_25)"
"(let-values(((v_33) elem-config_18))"
"(let-values(((the-struct_34) v_33))"
"(if(read-config/outer? the-struct_34)"
"(let-values(((indentations20_35)"
"(cons"
" indentation_24"
"(read-config-indentations seq-config_17)))"
"((inner21_36)(read-config/outer-inner v_33)))"
"(read-config/outer1.1"
" inner21_36"
"(read-config/outer-wrap the-struct_34)"
"(read-config/outer-line the-struct_34)"
"(read-config/outer-col the-struct_34)"
"(read-config/outer-pos the-struct_34)"
" indentations20_35"
"(read-config/outer-keep-comment? the-struct_34)))"
"(raise-argument-error"
" 'struct-copy"
"                                                       \"read-config/outer?\""
" the-struct_34))))))"
"(let-values(((open-end-line_26 open-end-col_27 open-end-pos_28)"
"(port-next-location in_16)))"
"(let-values(((config/keep-comment_29)(keep-comment config_25)))"
"(let-values(((read-one/not-eof_30)"
"(lambda(init-c_0 read-one_0 config_0)"
"(begin"
" 'read-one/not-eof"
"(let-values(((e_40)(read-one_0 init-c_0 in_16 config_0)))"
"(begin"
"(if(eof-object? e_40)"
"(let-values()"
"(let-values(((in22_42) in_16)"
"((seq-config23_43) seq-config_17)"
"((e24_44) e_40)"
"((open-end-pos25_45) open-end-pos_28)"
"((temp26_46)"
"                                                                                \"expected a ~a to close `~a`~a\")"
"((temp27_47)"
"(closer-name closer_15 config_0))"
"((opener-c28_48) opener-c_13)"
"((temp29_49)"
"(indentation-possible-cause config_0)))"
"(reader-error12.1"
" unsafe-undefined"
" e24_44"
" open-end-pos25_45"
" unsafe-undefined"
" in22_42"
" seq-config23_43"
" temp26_46"
"(list temp27_47 opener-c28_48 temp29_49))))"
"(void))"
" e_40))))))"
"(let-values(((seq_31)"
"((letrec-values(((loop_50)"
"(lambda(depth_0"
" accum_0"
" init-c_0"
" first?_0"
" first-read-one_0)"
"(begin"
" 'loop"
"(let-values(((c_56)"
"(read-char/skip-whitespace-and-comments"
" init-c_0"
" whitespace-read-one_21"
" in_16"
" seq-config_17)))"
"(let-values(((ec_57)"
"(effective-char"
" c_56"
" seq-config_17)))"
"(if(eqv? ec_57 closer_15)"
"(let-values()"
"(if(null? accum_0)"
" null"
"(reverse$1 accum_0)))"
"(if(if(not first?_0)"
"(if(eqv? ec_57 '#\\.)"
"(if(check-parameter"
" 1/read-accept-dot"
" config_25)"
"(char-delimiter?"
"(let-values(((in_58)"
" in_16)"
"((skip-count_60)"
" 0)"
"((source_61)"
"(read-config-source"
" config_25)))"
"(let-values(((c_62)"
"(peek-char-or-special"
" in_58"
" skip-count_60"
" 'special"
" source_61)))"
"(if(eq?"
" c_62"
" 'special)"
"(special1.1"
" 'special)"
" c_62)))"
" seq-config_17)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((dot-line_63"
" dot-col_64"
" dot-pos_65)"
"(port-next-location*"
" in_16"
" c_56)))"
"(let-values((()"
"(begin"
"(track-indentation!"
" config_25"
" dot-line_63"
" dot-col_64)"
"(values))))"
"(let-values((()"
"(begin"
"(if(if dot-mode_19"
"(not"
" head_23)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in30_69)"
" in_16)"
"((temp31_70)"
"(reading-at"
" config_25"
" dot-line_63"
" dot-col_64"
" dot-pos_65))"
"((temp32_71)"
"                                                                                                                              \"illegal use of `.`\"))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in30_69"
" temp31_70"
" temp32_71"
"(list)))))"
"(values))))"
"(let-values(((v_66)"
"(read-one/not-eof_30"
" #f"
" first-read-one_0"
" config_25)))"
"(let-values(((rest-c_67)"
"(read-char/skip-whitespace-and-comments"
" #f"
" whitespace-read-one_21"
" in_16"
" seq-config_17)))"
"(let-values(((rest-ec_68)"
"(effective-char"
" rest-c_67"
" seq-config_17)))"
"(if(eqv?"
" rest-ec_68"
" closer_15)"
"(let-values()"
"(if(null?"
" accum_0)"
" v_66"
"(append"
"(reverse$1"
" accum_0)"
" v_66)))"
"(if(if(eqv?"
" rest-ec_68"
" '#\\.)"
"(if(check-parameter"
" 1/read-accept-dot"
" config_25)"
"(if(check-parameter"
" 1/read-accept-infix-dot"
" config_25)"
"(char-delimiter?"
"(let-values(((in_72)"
" in_16)"
"((skip-count_74)"
" 0)"
"((source_75)"
"(read-config-source"
" config_25)))"
"(let-values(((c_76)"
"(peek-char-or-special"
" in_72"
" skip-count_74"
" 'special"
" source_75)))"
"(if(eq?"
" c_76"
" 'special)"
"(special1.1"
" 'special)"
" c_76)))"
" seq-config_17)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! head_23"
"(box"
" v_66))"
"(values))))"
"(let-values(((dot2-line_77"
" dot2-col_78"
" dot2-pos_79)"
"(port-next-location"
" in_16)))"
"(let-values((()"
"(begin"
"(track-indentation!"
" config_25"
" dot2-line_77"
" dot2-col_78)"
"(values))))"
"(let-values(((post-c_80)"
"(read-char/skip-whitespace-and-comments"
" #f"
" whitespace-read-one_21"
" in_16"
" seq-config_17)))"
"(let-values(((post-ec_81)"
"(effective-char"
" post-c_80"
" seq-config_17)))"
"(begin"
"(if(let-values(((or-part_82)"
"(eof-object?"
" post-ec_81)))"
"(if or-part_82"
" or-part_82"
"(eqv?"
" post-ec_81"
" closer_15)))"
"(let-values()"
"(let-values(((in33_84)"
" in_16)"
"((temp34_85)"
"(reading-at"
" config_25"
" dot-line_63"
" dot-col_64"
" dot-pos_65))"
"((post-ec35_86)"
" post-ec_81)"
"((temp36_87)"
"                                                                                                                                        \"illegal use of `.`\"))"
"(reader-error12.1"
" unsafe-undefined"
" post-ec35_86"
" #f"
" unsafe-undefined"
" in33_84"
" temp34_85"
" temp36_87"
"(list))))"
"(void))"
"(loop_50"
" depth_0"
" accum_0"
" post-c_80"
" #f"
" read-one_12))))))))"
"(let-values()"
"(let-values(((in37_89)"
" in_16)"
"((temp38_90)"
"(reading-at"
" config_25"
" dot-line_63"
" dot-col_64"
" dot-pos_65))"
"((rest-c39_91)"
" rest-c_67)"
"((temp40_92)"
"                                                                                                                        \"illegal use of `.`\"))"
"(reader-error12.1"
" unsafe-undefined"
" rest-c39_91"
" #f"
" unsafe-undefined"
" in37_89"
" temp38_90"
" temp40_92"
"(list)))))))))))))"
"(let-values()"
"(let-values(((v_93)"
"(read-one/not-eof_30"
" c_56"
" first-read-one_0"
" config/keep-comment_29)))"
"(if(1/special-comment? v_93)"
"(let-values()"
"(loop_50"
" depth_0"
" accum_0"
" #f"
" #f"
" read-one_12))"
"(if(> depth_0 1024)"
"(let-values()"
"(loop_50"
" depth_0"
"(cons v_93 accum_0)"
" #f"
" #f"
" read-one_12))"
"(let-values()"
"(cons"
" v_93"
"(loop_50"
"(add1 depth_0)"
" null"
" #f"
" #f"
" read-one_12)))))))))))))))"
" loop_50)"
" 0"
" null"
" #f"
" #t"
" first-read-one_22)))"
"(let-values(((full-seq_32)"
"(if head_23(cons(unbox head_23) seq_31) seq_31)))"
"(if shape-tag?_20"
"(add-shape-tag opener_14 in_16 config_25 full-seq_32)"
" full-seq_32))))))))))))))))))))))))"
"(define-values"
"(add-shape-tag)"
"(lambda(opener_0 in_0 config_0 seq_0)"
"(begin"
"(let-values(((tag_151)"
"(let-values(((tmp_152) opener_0))"
"(if(equal? tmp_152 '#\\[)"
"(let-values()(if(check-parameter 1/read-square-bracket-with-tag config_0) '#%brackets #f))"
"(if(equal? tmp_152 '#\\{)"
"(let-values()(if(check-parameter 1/read-curly-brace-with-tag config_0) '#%braces #f))"
"(let-values() #f))))))"
"(if tag_151(cons(wrap tag_151 in_0 config_0 #f) seq_0) seq_0)))))"
" (define-values (not-an-fX.1$1) (lambda (who_0 v_0) (begin 'not-an-fX (raise-argument-error who_0 \"flonum?\" v_0))))"
"(define-values"
"(read-digits12.1)"
"(lambda(base1_0 init3_0 max-count2_0 zero-digits-result4_0 in10_0 config11_0 accum-str9_0)"
"(begin"
" 'read-digits12"
"(let-values(((in_27) in10_0))"
"(let-values(((config_28) config11_0))"
"(let-values(((accum-str_29) accum-str9_0))"
"(let-values(((base_30) base1_0))"
"(let-values(((max-count_31) max-count2_0))"
"(let-values(((init-v_32) init3_0))"
"(let-values(((zero-digits-result_33) zero-digits-result4_0))"
"(let-values()"
"(let-values(((c_34)"
"(let-values(((in_35) in_27)"
"((skip-count_37) 0)"
"((source_38)(read-config-source config_28)))"
"(let-values(((c_39)"
"(peek-char-or-special in_35 skip-count_37 'special source_38)))"
"(if(eq? c_39 'special)(special1.1 'special) c_39)))))"
"(if(digit?$1 c_34 base_30)"
"(let-values()"
"(begin"
"(consume-char in_27 c_34)"
"(if accum-str_29(let-values()(accum-string-add! accum-str_29 c_34))(void))"
"((letrec-values(((loop_40)"
"(lambda(v_0 max-count_0)"
"(begin"
" 'loop"
"(if(zero? max-count_0)"
"(let-values() v_0)"
"(let-values()"
"(let-values(((c_43)"
"(let-values(((in_44) in_27)"
"((skip-count_46) 0)"
"((source_47)"
"(read-config-source config_28)))"
"(let-values(((c_48)"
"(peek-char-or-special"
" in_44"
" skip-count_46"
" 'special"
" source_47)))"
"(if(eq? c_48 'special)"
"(special1.1 'special)"
" c_48)))))"
"(if(digit?$1 c_43 base_30)"
"(let-values()"
"(begin"
"(consume-char in_27 c_43)"
"(if accum-str_29"
"(let-values()(accum-string-add! accum-str_29 c_43))"
"(void))"
"(loop_40"
"(+(digit->number c_43)(* v_0 base_30))"
"(sub1 max-count_0))))"
"(let-values() v_0)))))))))"
" loop_40)"
"(+(digit->number c_34)(* init-v_32 base_30))"
"(sub1 max-count_31))))"
"(if zero-digits-result_33"
"(let-values() zero-digits-result_33)"
"(let-values() c_34)))))))))))))))"
"(define-values"
"(digit?$1)"
"(lambda(c_0 base_0)"
"(begin"
" 'digit?"
"(if(not(char? c_0))"
"(let-values() #f)"
"(if(= base_0 8)"
"(let-values()(octal-digit? c_0))"
"(if(= base_0 16)(let-values()(hex-digit? c_0))(let-values()(decimal-digit? c_0))))))))"
"(define-values(decimal-digit?)(lambda(c_0)(begin(if(char>=? c_0 '#\\0)(char<=? c_0 '#\\9) #f))))"
"(define-values(octal-digit?)(lambda(c_0)(begin(if(char>=? c_0 '#\\0)(char<=? c_0 '#\\7) #f))))"
"(define-values"
"(hex-digit?)"
"(lambda(c_0)"
"(begin"
"(let-values(((or-part_82)(if(char>=? c_0 '#\\0)(char<=? c_0 '#\\9) #f)))"
"(if or-part_82"
" or-part_82"
"(let-values(((or-part_83)(if(char>=? c_0 '#\\A)(char<=? c_0 '#\\F) #f)))"
"(if or-part_83 or-part_83(if(char>=? c_0 '#\\a)(char<=? c_0 '#\\f) #f))))))))"
"(define-values"
"(digit->number)"
"(lambda(c_0)"
"(begin"
"(if(if(char>=? c_0 '#\\0)(char<=? c_0 '#\\9) #f)"
"(let-values()(-(char->integer c_0)(char->integer '#\\0)))"
"(if(if(char>=? c_0 '#\\A)(char<=? c_0 '#\\F) #f)"
"(let-values()(-(char->integer c_0)(-(char->integer '#\\A) 10)))"
"(let-values()(-(char->integer c_0)(-(char->integer '#\\a) 10))))))))"
"(define-values(string->number$1) string->number)"
"(define-values"
"(1/string->number)"
"(let-values(((string->number5_39)"
"(lambda(s4_0 radix1_0 convert-mode2_0 decimal-mode3_0)"
"(begin"
" 'string->number5"
"(let-values(((s_44) s4_0))"
"(let-values(((radix_45) radix1_0))"
"(let-values(((convert-mode_46) convert-mode2_0))"
"(let-values(((decimal-mode_47)"
"(if(eq? decimal-mode3_0 unsafe-undefined)"
"(if(1/read-decimal-as-inexact) 'decimal-as-inexact 'decimal-as-exact)"
" decimal-mode3_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(string? s_44)"
"(void)"
"                                      (let-values () (raise-argument-error 'string->number \"string?\" s_44)))"
"(if((lambda(p_0)(if(exact-integer? radix_45)(<= 2 radix_45 16) #f)) radix_45)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'string->number \"(integer-in 2 16)\" radix_45)))"
"(if((lambda(p_0)"
"(let-values(((or-part_51)(eq? p_0 'number-or-false)))"
"(if or-part_51 or-part_51(eq? p_0 'read))))"
" convert-mode_46)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'string->number"
"                                         \"(or/c 'number-or-false 'read)\""
" convert-mode_46)))"
"(if((lambda(p_0)"
"(let-values(((or-part_53)(eq? p_0 'decimal-as-inexact)))"
"(if or-part_53 or-part_53(eq? p_0 'decimal-as-exact))))"
" decimal-mode_47)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'string->number"
"                                         \"(or/c 'decimal-as-inexact decimal-as-exact)\""
" decimal-mode_47)))"
"(let-values(((s66_55) s_44)"
"((temp67_56) 0)"
"((temp68_57)(string-length s_44))"
"((radix69_58) radix_45)"
"((temp70_59) #f)"
"((decimal-mode71_60) decimal-mode_47)"
"((convert-mode72_61) convert-mode_46))"
"(do-string->number17.1"
" #f"
" temp70_59"
" s66_55"
" temp67_56"
" temp68_57"
" radix69_58"
" decimal-mode71_60"
" convert-mode72_61))))))))))))))"
"(case-lambda"
"((s_0)(begin 'string->number(string->number5_39 s_0 10 'number-or-false unsafe-undefined)))"
"((s_0 radix_0 convert-mode_0 decimal-mode3_0)(string->number5_39 s_0 radix_0 convert-mode_0 decimal-mode3_0))"
"((s_0 radix_0 convert-mode2_0)(string->number5_39 s_0 radix_0 convert-mode2_0 unsafe-undefined))"
"((s_0 radix1_0)(string->number5_39 s_0 radix1_0 'number-or-false unsafe-undefined)))))"
"(define-values"
"(do-string->number17.1)"
"(lambda(in-complex8_0 radix-set?7_0 s11_0 start12_0 end13_0 radix14_0 exactness15_0 convert-mode16_0)"
"(begin"
" 'do-string->number17"
"(let-values(((s_94) s11_0))"
"(let-values(((start_95) start12_0))"
"(let-values(((end_96) end13_0))"
"(let-values(((radix_97) radix14_0))"
"(let-values(((radix-set?_98) radix-set?7_0))"
"(let-values(((exactness_99) exactness15_0))"
"(let-values(((in-complex_100) in-complex8_0))"
"(let-values(((convert-mode_101) convert-mode16_0))"
"(let-values()"
"(if(= start_95 end_96)"
"(let-values()"
"(if(eq? convert-mode_101 'must-read)"
"                              (let-values () (format \"no digits\"))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((c_102)(string-ref s_94 start_95)))"
"(if(char=? '#\\# c_102)"
"(let-values()"
"(let-values(((next_103)(add1 start_95)))"
"(if(= next_103 end_96)"
"(let-values()"
"(if(eq? convert-mode_101 'must-read)"
"                                          (let-values () (format \"no character after `#` indicator in `~.a`\" s_94))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((i_104)(string-ref s_94 next_103)))"
"(let-values(((tmp_105) i_104))"
"(let-values(((index_106)"
"(if(char? tmp_105)"
"(let-values(((codepoint_107)(char->integer tmp_105)))"
"(if(if(unsafe-fx>= codepoint_107 66)"
"(unsafe-fx< codepoint_107 121)"
" #f)"
"(let-values(((tbl_108)"
" '#(2"
" 0"
" 2"
" 1"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 2"
" 1"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2)))"
"(unsafe-vector*-ref"
" tbl_108"
"(unsafe-fx- codepoint_107 66)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_106 1)"
"(let-values()"
"(if(eq?(read-complains convert-mode_101) 'must-read)"
"(let-values()"
"(format"
"                                                       \"bad `#` indicator `~a` at `~.a`\""
" i_104"
"(substring s_94 start_95 end_96)))"
"(let-values() #f)))"
"(if(unsafe-fx< index_106 2)"
"(let-values()"
"(if(let-values(((or-part_109)(exactness-set? exactness_99)))"
"(if or-part_109 or-part_109 in-complex_100))"
"(let-values()"
"(if(eq? convert-mode_101 'must-read)"
"(let-values()"
"(format"
"                                                             \"misplaced exactness specification at `~.a`\""
"(substring s_94 start_95 end_96)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((s73_111) s_94)"
"((temp74_112)(add1 next_103))"
"((end75_113) end_96)"
"((radix76_114) radix_97)"
"((radix-set?77_115) radix-set?_98)"
"((temp78_116)"
"(if(let-values(((or-part_118)"
"(char=? i_104 '#\\e)))"
"(if or-part_118"
" or-part_118"
"(char=? i_104 '#\\E)))"
" 'exact"
" 'inexact))"
"((temp79_117)"
"(if(eq? convert-mode_101 'read)"
" 'must-read"
" convert-mode_101)))"
"(do-string->number17.1"
" #f"
" radix-set?77_115"
" s73_111"
" temp74_112"
" end75_113"
" radix76_114"
" temp78_116"
" temp79_117)))))"
"(let-values()"
"(if(let-values(((or-part_119) radix-set?_98))"
"(if or-part_119 or-part_119 in-complex_100))"
"(let-values()"
"(if(eq? convert-mode_101 'must-read)"
"(let-values()"
"(format"
"                                                             \"misplaced radix specification at `~.a`\""
"(substring s_94 start_95 end_96)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((radix_120)"
"(let-values(((tmp_121) i_104))"
"(if(if(equal? tmp_121 '#\\b)"
" #t"
"(equal? tmp_121 '#\\B))"
"(let-values() 2)"
"(if(if(equal? tmp_121 '#\\o)"
" #t"
"(equal? tmp_121 '#\\O))"
"(let-values() 8)"
"(if(if(equal? tmp_121 '#\\d)"
" #t"
"(equal? tmp_121 '#\\D))"
"(let-values() 10)"
"(let-values() 16)))))))"
"(let-values(((s80_123) s_94)"
"((temp81_124)(add1 next_103))"
"((end82_125) end_96)"
"((radix83_126) radix_120)"
"((temp84_127) #t)"
"((exactness85_128) exactness_99)"
"((temp86_129)"
"(if(eq? convert-mode_101 'read)"
" 'must-read"
" convert-mode_101)))"
"(do-string->number17.1"
" #f"
" temp84_127"
" s80_123"
" temp81_124"
" end82_125"
" radix83_126"
" exactness85_128"
" temp86_129)))))))))))))))"
"(let-values(((c1_130)"
"(if(char-sign? c_102)"
"(read-special-number s_94 start_95 end_96 convert-mode_101)"
" #f)))"
"(if c1_130"
"((lambda(v_0)"
"(if(eq? exactness_99 'exact)"
"(let-values()"
"(if(eq? convert-mode_101 'must-read)"
"                                             (let-values () (format \"no exact representation for `~a`\" v_0))"
"(let-values() #f)))"
"(let-values() v_0)))"
" c1_130)"
"(let-values(((c2_132)"
"(if(char-sign? c_102)"
"(if(not in-complex_100)"
"(if(>(- end_96 start_95) 7)"
"(if(char=? '#\\i(string-ref s_94(sub1 end_96)))"
"(if(char-sign?(string-ref s_94 6))"
"(read-special-number"
" s_94"
" start_95"
"(+ start_95 6)"
" convert-mode_101)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if c2_132"
"((lambda(v_0)"
"(let-values(((s87_135) s_94)"
"((temp88_136)(+ start_95 6))"
"((temp89_137)(sub1 end_96))"
"((radix90_138) radix_97)"
"((exactness91_139) exactness_99)"
"((convert-mode92_140) convert-mode_101)"
"((temp93_141) 'i)"
"((v94_142) v_0)"
"((temp95_143)"
"(lambda(v_1 v2_0)"
"(begin 'temp95(make-rectangular v_1 v2_0)))))"
"(read-for-special-compound62.1"
" temp93_141"
" #f"
" s87_135"
" temp88_136"
" temp89_137"
" radix90_138"
" exactness91_139"
" convert-mode92_140"
" v94_142"
" temp95_143)))"
" c2_132)"
"(let-values(((c3_146)"
"(if(not in-complex_100)"
"(if(>=(- end_96 start_95) 7)"
"(if(char=? '#\\i(string-ref s_94(sub1 end_96)))"
"(if(char-sign?(string-ref s_94(- end_96 7)))"
"(read-special-number"
" s_94"
"(- end_96 7)"
"(sub1 end_96)"
" convert-mode_101)"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if c3_146"
"((lambda(v2_0)"
"(if(if(= start_95(- end_96 7))(not(extflonum? v2_0)) #f)"
"(let-values()(make-rectangular 0 v2_0))"
"(let-values()"
"(let-values(((s96_149) s_94)"
"((start97_150) start_95)"
"((temp98_151)(- end_96 7))"
"((radix99_152) radix_97)"
"((exactness100_153) exactness_99)"
"((convert-mode101_154) convert-mode_101)"
"((temp102_155) 'i)"
"((temp103_156) #t)"
"((v2104_157) v2_0)"
"((temp105_158)"
"(lambda(v2_1 v_0)"
"(begin 'temp105(make-rectangular v_0 v2_1)))))"
"(read-for-special-compound62.1"
" temp102_155"
" temp103_156"
" s96_149"
" start97_150"
" temp98_151"
" radix99_152"
" exactness100_153"
" convert-mode101_154"
" v2104_157"
" temp105_158)))))"
" c3_146)"
"(let-values(((c4_161)"
"(if(char-sign? c_102)"
"(if(not in-complex_100)"
"(if(>(- end_96 start_95) 7)"
"(if(char=? '#\\@(string-ref s_94(+ start_95 6)))"
"(read-special-number"
" s_94"
" start_95"
"(+ start_95 6)"
" convert-mode_101)"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if c4_161"
"((lambda(v_0)"
"(let-values(((s106_164) s_94)"
"((temp107_165)(+ start_95 7))"
"((end108_166) end_96)"
"((radix109_167) radix_97)"
"((exactness110_168) exactness_99)"
"((convert-mode111_169) convert-mode_101)"
"((temp112_170) '@)"
"((v113_171) v_0)"
"((temp114_172)"
"(lambda(v_1 v2_0)"
"(begin 'temp114(make-polar v_1 v2_0)))))"
"(read-for-special-compound62.1"
" temp112_170"
" #f"
" s106_164"
" temp107_165"
" end108_166"
" radix109_167"
" exactness110_168"
" convert-mode111_169"
" v113_171"
" temp114_172)))"
" c4_161)"
"(let-values(((c5_175)"
"(if(not in-complex_100)"
"(if(>(- end_96 start_95) 7)"
"(if(char=? '#\\@(string-ref s_94(- end_96 7)))"
"(read-special-number"
" s_94"
"(- end_96 6)"
" end_96"
" convert-mode_101)"
" #f)"
" #f)"
" #f)))"
"(if c5_175"
"((lambda(v2_0)"
"(let-values(((s115_178) s_94)"
"((start116_179) start_95)"
"((temp117_180)(- end_96 7))"
"((radix118_181) radix_97)"
"((exactness119_182) exactness_99)"
"((convert-mode120_183) convert-mode_101)"
"((temp121_184) '@)"
"((temp122_185) #t)"
"((v2123_186) v2_0)"
"((temp124_187)"
"(lambda(v2_1 v_0)"
"(begin 'temp124(make-polar v_0 v2_1)))))"
"(read-for-special-compound62.1"
" temp121_184"
" temp122_185"
" s115_178"
" start116_179"
" temp117_180"
" radix118_181"
" exactness119_182"
" convert-mode120_183"
" v2123_186"
" temp124_187)))"
" c5_175)"
"(let-values()"
"(let-values(((s125_191) s_94)"
"((start126_192) start_95)"
"((end127_193) end_96)"
"((radix128_194) radix_97)"
"((radix-set?129_195) radix-set?_98)"
"((exactness130_196) exactness_99)"
"((in-complex131_197) in-complex_100)"
"((convert-mode132_198) convert-mode_101))"
"(do-string->non-special-number30.1"
" in-complex131_197"
" radix-set?129_195"
" s125_191"
" start126_192"
" end127_193"
" radix128_194"
" exactness130_196"
" convert-mode132_198)))))))))))))))))))))))))))))"
"(define-values"
"(do-string->non-special-number30.1)"
"(lambda(in-complex21_0 radix-set?20_0 s24_0 start25_0 end26_0 radix27_0 exactness28_0 convert-mode29_0)"
"(begin"
" 'do-string->non-special-number30"
"(let-values(((s_244) s24_0))"
"(let-values(((start_245) start25_0))"
"(let-values(((end_246) end26_0))"
"(let-values(((radix_247) radix27_0))"
"(let-values(((radix-set?_248) radix-set?20_0))"
"(let-values(((exactness_249) exactness28_0))"
"(let-values(((in-complex_250) in-complex21_0))"
"(let-values(((convert-mode_251) convert-mode29_0))"
"(let-values()"
"((letrec-values(((loop_252)"
"(lambda(i_0"
" any-digits?_0"
" any-hashes?_0"
" i-pos_0"
" @-pos_0"
" sign-pos_0"
" dot-pos_0"
" slash-pos_0"
" exp-pos_0"
" must-i?_0)"
"(begin"
" 'loop"
"(if(= i_0 end_246)"
"(let-values()"
"(if(if(not any-digits?_0)(not i-pos_0) #f)"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                           \"no digits in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if(if must-i?_0(not i-pos_0) #f)"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                             \"too many signs in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if(if sign-pos_0"
"(let-values(((or-part_263)"
"(if dot-pos_0(< dot-pos_0 sign-pos_0) #f)))"
"(if or-part_263"
" or-part_263"
"(if slash-pos_0(< slash-pos_0 sign-pos_0) #f)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                               \"misplaced sign in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if i-pos_0"
"(let-values()"
"(let-values(((s133_265) s_244)"
"((start134_266) start_245)"
"((sign-pos135_267) sign-pos_0)"
"((sign-pos136_268) sign-pos_0)"
"((temp137_269)(sub1 end_246))"
"((i-pos138_270) i-pos_0)"
"((sign-pos139_271) sign-pos_0)"
"((radix140_272) radix_247)"
"((radix-set?141_273) radix-set?_248)"
"((exactness142_274) exactness_249)"
"((temp143_275) 'i)"
"((convert-mode144_276) convert-mode_251))"
"(string->complex-number47.1"
" temp143_275"
" radix-set?141_273"
" s133_265"
" start134_266"
" sign-pos135_267"
" sign-pos136_268"
" temp137_269"
" i-pos138_270"
" sign-pos139_271"
" radix140_272"
" exactness142_274"
" convert-mode144_276)))"
"(if @-pos_0"
"(let-values()"
"(let-values(((s145_278) s_244)"
"((start146_279) start_245)"
"((@-pos147_280) @-pos_0)"
"((temp148_281)(add1 @-pos_0))"
"((end149_282) end_246)"
"((i-pos150_283) i-pos_0)"
"((sign-pos151_284) sign-pos_0)"
"((radix152_285) radix_247)"
"((radix-set?153_286) radix-set?_248)"
"((exactness154_287) exactness_249)"
"((temp155_288) '@)"
"((convert-mode156_289) convert-mode_251))"
"(string->complex-number47.1"
" temp155_288"
" radix-set?153_286"
" s145_278"
" start146_279"
" @-pos147_280"
" temp148_281"
" end149_282"
" i-pos150_283"
" sign-pos151_284"
" radix152_285"
" exactness154_287"
" convert-mode156_289)))"
"(let-values()"
"(string->real-number"
" s_244"
" start_245"
" end_246"
" dot-pos_0"
" slash-pos_0"
" exp-pos_0"
" any-hashes?_0"
" radix_247"
" exactness_249"
" convert-mode_251))))))))"
"(let-values()"
"(let-values(((c_290)(string-ref s_244 i_0)))"
"(if(digit? c_290 radix_247)"
"(let-values()"
"(loop_252"
"(add1 i_0)"
" #t"
" any-hashes?_0"
" i-pos_0"
" @-pos_0"
" sign-pos_0"
" dot-pos_0"
" slash-pos_0"
" exp-pos_0"
" must-i?_0))"
"(if(char=? c_290 '#\\#)"
"(let-values()"
"(loop_252"
"(add1 i_0)"
" #t"
" #t"
" i-pos_0"
" @-pos_0"
" sign-pos_0"
" dot-pos_0"
" slash-pos_0"
" exp-pos_0"
" must-i?_0))"
"(if(char-sign? c_290)"
"(let-values()"
"(if(if sign-pos_0 must-i?_0 #f)"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                     \"too many signs in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(let-values()"
"(loop_252"
"(add1 i_0)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_0"
" @-pos_0"
" i_0"
" dot-pos_0"
" slash-pos_0"
" #f"
"(if(> i_0 start_245)"
"(let-values(((or-part_291)(not @-pos_0)))"
"(if or-part_291"
" or-part_291"
"(> i_0(add1 @-pos_0))))"
" #f)))))"
"(if(char=? c_290 '#\\.)"
"(let-values()"
"(if(let-values(((or-part_292)"
"(if exp-pos_0"
"(let-values(((or-part_293)"
"(not sign-pos_0)))"
"(if or-part_293"
" or-part_293"
"(> exp-pos_0 sign-pos_0)))"
" #f)))"
"(if or-part_292"
" or-part_292"
"(if dot-pos_0"
"(let-values(((or-part_294)(not sign-pos_0)))"
"(if or-part_294"
" or-part_294"
"(> dot-pos_0 sign-pos_0)))"
" #f)))"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                       \"misplaced `.` in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if(if slash-pos_0"
"(let-values(((or-part_295)(not sign-pos_0)))"
"(if or-part_295"
" or-part_295"
"(> slash-pos_0 sign-pos_0)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                         \"decimal points and fractions annot be mixed `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(let-values()"
"(loop_252"
"(add1 i_0)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_0"
" @-pos_0"
" sign-pos_0"
" i_0"
" #f"
" #f"
" must-i?_0)))))"
"(if(char=? c_290 '#\\/)"
"(let-values()"
"(if(if dot-pos_0"
"(let-values(((or-part_296)(not sign-pos_0)))"
"(if or-part_296"
" or-part_296"
"(> dot-pos_0 sign-pos_0)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                         \"decimal points and fractions annot be mixed `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if(let-values(((or-part_297)"
"(if exp-pos_0"
"(let-values(((or-part_298)"
"(not sign-pos_0)))"
"(if or-part_298"
" or-part_298"
"(> exp-pos_0 sign-pos_0)))"
" #f)))"
"(if or-part_297"
" or-part_297"
"(if slash-pos_0"
"(let-values(((or-part_299)"
"(not sign-pos_0)))"
"(if or-part_299"
" or-part_299"
"(> slash-pos_0 sign-pos_0)))"
" #f)))"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                           \"misplaced `/` in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(let-values()"
"(loop_252"
"(add1 i_0)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_0"
" @-pos_0"
" sign-pos_0"
" #f"
" i_0"
" #f"
" must-i?_0)))))"
"(if(let-values(((or-part_300)(char=? c_290 '#\\e)))"
"(if or-part_300"
" or-part_300"
"(let-values(((or-part_301)(char=? c_290 '#\\E)))"
"(if or-part_301"
" or-part_301"
"(let-values(((or-part_302)"
"(char=? c_290 '#\\f)))"
"(if or-part_302"
" or-part_302"
"(let-values(((or-part_303)"
"(char=? c_290 '#\\F)))"
"(if or-part_303"
" or-part_303"
"(let-values(((or-part_304)"
"(char=? c_290 '#\\d)))"
"(if or-part_304"
" or-part_304"
"(let-values(((or-part_305)"
"(char=?"
" c_290"
" '#\\D)))"
"(if or-part_305"
" or-part_305"
"(let-values(((or-part_306)"
"(char=?"
" c_290"
" '#\\s)))"
"(if or-part_306"
" or-part_306"
"(let-values(((or-part_307)"
"(char=?"
" c_290"
" '#\\S)))"
"(if or-part_307"
" or-part_307"
"(let-values(((or-part_308)"
"(char=?"
" c_290"
" '#\\l)))"
"(if or-part_308"
" or-part_308"
"(let-values(((or-part_309)"
"(char=?"
" c_290"
" '#\\L)))"
"(if or-part_309"
" or-part_309"
"(let-values(((or-part_310)"
"(char=?"
" c_290"
" '#\\t)))"
"(if or-part_310"
" or-part_310"
"(char=?"
" c_290"
" '#\\T)))))))))))))))))))))))"
"(let-values()"
"(if exp-pos_0"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                           \"misplaced `~a` in `~.a`\""
" c_290"
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if(if(<(add1 i_0) end_246)"
"(char-sign?(string-ref s_244(add1 i_0)))"
" #f)"
"(let-values()"
"(loop_252"
"(+ i_0 2)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_0"
" @-pos_0"
" sign-pos_0"
" dot-pos_0"
" slash-pos_0"
"(let-values(((or-part_311) exp-pos_0))"
"(if or-part_311 or-part_311 i_0))"
" must-i?_0))"
"(let-values()"
"(loop_252"
"(+ i_0 1)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_0"
" @-pos_0"
" sign-pos_0"
" dot-pos_0"
" slash-pos_0"
"(let-values(((or-part_312) exp-pos_0))"
"(if or-part_312 or-part_312 i_0))"
" must-i?_0)))))"
"(if(char=? c_290 '#\\@)"
"(let-values()"
"(if(eq? in-complex_250 'i)"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                             \"cannot mix `@` and `i` in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if(let-values(((or-part_313) @-pos_0))"
"(if or-part_313"
" or-part_313"
"(eq? in-complex_250 '@)))"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                               \"too many `@`s in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if(= i_0 start_245)"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                                 \"`@` cannot be at start in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if must-i?_0"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                                   \"too many signs in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(let-values()"
"(loop_252"
"(add1 i_0)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_0"
" i_0"
" #f"
" #f"
" #f"
" #f"
" must-i?_0)))))))"
"(if(if(let-values(((or-part_314)"
"(char=? c_290 '#\\i)))"
"(if or-part_314"
" or-part_314"
"(char=? c_290 '#\\I)))"
" sign-pos_0"
" #f)"
"(let-values()"
"(if(let-values(((or-part_315) @-pos_0))"
"(if or-part_315"
" or-part_315"
"(eq? in-complex_250 '@)))"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                               \"cannot mix `@` and `i` in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(if(let-values(((or-part_316)"
"(<(add1 i_0) end_246)))"
"(if or-part_316"
" or-part_316"
"(eq? in-complex_250 'i)))"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"(format"
"                                                                                 \"`i` must be at the end in `~.a`\""
"(substring s_244 start_245 end_246)))"
"(let-values() #f)))"
"(let-values()"
"(loop_252"
"(add1 i_0)"
" any-digits?_0"
" any-hashes?_0"
" i_0"
" @-pos_0"
" sign-pos_0"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values()"
"(if(char=? c_290 '#\\nul)"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"                                                                              (format \"nul character in `~.a`\" s_244))"
"(let-values() #f)))"
"(let-values()"
"(if(eq? convert-mode_251 'must-read)"
"(let-values()"
"                                                                              (format \"bad digit `~a`\" c_290))"
"(let-values() #f))))))))))))))))))))"
" loop_252)"
" start_245"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))))))))))))"
"(define-values"
"(string->complex-number47.1)"
"(lambda(in-complex34_0"
" radix-set?33_0"
" s37_0"
" start138_0"
" end139_0"
" start240_0"
" end241_0"
" i-pos42_0"
" sign-pos43_0"
" radix44_0"
" exactness45_0"
" convert-mode46_0)"
"(begin"
" 'string->complex-number47"
"(let-values(((s_374) s37_0))"
"(let-values(((start1_375) start138_0))"
"(let-values(((end1_376) end139_0))"
"(let-values(((start2_377) start240_0))"
"(let-values(((end2_378) end241_0))"
"(let-values()"
"(let-values()"
"(let-values(((radix_381) radix44_0))"
"(let-values(((radix-set?_382) radix-set?33_0))"
"(let-values(((exactness_383) exactness45_0))"
"(let-values(((in-complex_384) in-complex34_0))"
"(let-values(((convert-mode_385) convert-mode46_0))"
"(let-values()"
"(let-values(((v1_386)"
"(if(= start1_375 end1_376)"
"(let-values()(if(eq? exactness_383 'inexact) 0.0 0))"
"(let-values()"
"(let-values(((s157_389) s_374)"
"((start1158_390) start1_375)"
"((end1159_391) end1_376)"
"((radix160_392) radix_381)"
"((radix-set?161_393) radix-set?_382)"
"((exactness162_394) exactness_383)"
"((in-complex163_395) in-complex_384)"
"((convert-mode164_396) convert-mode_385))"
"(do-string->number17.1"
" in-complex163_395"
" radix-set?161_393"
" s157_389"
" start1158_390"
" end1159_391"
" radix160_392"
" exactness162_394"
" convert-mode164_396))))))"
"(let-values(((v2_387)"
"(if(if(eq? in-complex_384 'i)(=(- end2_378 start2_377) 1) #f)"
"(let-values()"
"(let-values(((neg?_397)"
"(char=?(string-ref s_374 start2_377) '#\\-)))"
"(if(eq? exactness_383 'inexact)"
"(let-values()(if neg?_397 -1.0 1.0))"
"(let-values()(if neg?_397 -1 1)))))"
"(let-values()"
"(let-values(((s165_399) s_374)"
"((start2166_400) start2_377)"
"((end2167_401) end2_378)"
"((radix168_402) radix_381)"
"((radix-set?169_403) radix-set?_382)"
"((exactness170_404) exactness_383)"
"((in-complex171_405) in-complex_384)"
"((convert-mode172_406) convert-mode_385))"
"(do-string->number17.1"
" in-complex171_405"
" radix-set?169_403"
" s165_399"
" start2166_400"
" end2167_401"
" radix168_402"
" exactness170_404"
" convert-mode172_406))))))"
"(if(let-values(((or-part_407)(not v1_386)))"
"(if or-part_407 or-part_407(not v2_387)))"
"(let-values() #f)"
"(if(if(let-values(((or-part_408)(extflonum? v1_386)))"
"(if or-part_408 or-part_408(extflonum? v2_387)))"
"(not(eq? convert-mode_385 'must-read))"
" #f)"
"(let-values()(fail-extflonum convert-mode_385 v1_386))"
"(if(string? v1_386)"
"(let-values() v1_386)"
"(if(extflonum? v1_386)"
"(let-values()(fail-extflonum convert-mode_385 v1_386))"
"(if(string? v2_387)"
"(let-values() v2_387)"
"(if(extflonum? v2_387)"
"(let-values()(fail-extflonum convert-mode_385 v2_387))"
"(if(eq? in-complex_384 'i)"
"(let-values()(make-rectangular v1_386 v2_387))"
"(let-values()"
"(let-values(((p_409)(make-polar v1_386 v2_387)))"
"(if(eq? exactness_383 'exact)"
"(inexact->exact p_409)"
" p_409))))))))))))))))))))))))))))"
"(define-values"
"(string->real-number)"
"(lambda(s_0 start_0 end_0 dot-pos_0 slash-pos_0 exp-pos_0 any-hashes?_0 radix_0 exactness_0 convert-mode_0)"
"(begin"
"(let-values(((extfl-mark?_452)"
"(lambda()(begin 'extfl-mark?(char=?(char-downcase(string-ref s_0 exp-pos_0)) '#\\t)))))"
"(let-values(((simple?_453)"
"(if(not slash-pos_0)"
"(if(let-values(((or-part_455)(eq? exactness_0 'inexact)))"
"(if or-part_455"
" or-part_455"
"(let-values(((or-part_456)(eq? exactness_0 'decimal-as-inexact)))"
"(if or-part_456 or-part_456(if(not dot-pos_0)(not exp-pos_0) #f)))))"
"(if(let-values(((or-part_457)(not exp-pos_0)))"
"(if or-part_457"
" or-part_457"
"(let-values(((or-part_458)(not(eq? convert-mode_0 'number-or-false))))"
"(if or-part_458 or-part_458(not(extfl-mark?_452))))))"
"(not(if any-hashes?_0(hashes? s_0 start_0 end_0) #f))"
" #f)"
" #f)"
" #f)))"
"(let-values(((has-sign?_454)(if(> end_0 start_0)(char-sign?(string-ref s_0 start_0)) #f)))"
"(if(=(- end_0 start_0)(+(if dot-pos_0 1 0)(if exp-pos_0 1 0)(if has-sign?_454 1 0)))"
"(let-values()"
"(if(= end_0 start_0)"
"                  (if (eq? convert-mode_0 'must-read) (let-values () (format \"missing digits\")) (let-values () #f))"
"(if(eq? convert-mode_0 'must-read)"
"                    (let-values () (format \"missing digits in `~.a`\" (substring s_0 start_0 end_0)))"
"(let-values() #f))))"
"(if simple?_453"
"(let-values()"
"(if(if exp-pos_0"
"(="
"(- exp-pos_0 start_0)"
"(+(if(if dot-pos_0(< dot-pos_0 exp-pos_0) #f) 1 0)(if has-sign?_454 1 0)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_0 'must-read)"
"(let-values()"
"                          (format \"missing digits before exponent marker in `~.a`\" (substring s_0 start_0 end_0)))"
"(let-values() #f)))"
"(if(if exp-pos_0"
"(let-values(((or-part_459)(= exp-pos_0(sub1 end_0))))"
"(if or-part_459"
" or-part_459"
"(if(= exp-pos_0(- end_0 2))(char-sign?(string-ref s_0(sub1 end_0))) #f)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_0 'must-read)"
"(let-values()"
"                            (format \"missing digits after exponent marker in `~.a`\" (substring s_0 start_0 end_0)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_460)"
"(string->number$1"
"(maybe-substring s_0 start_0 end_0)"
" radix_0"
"(if(let-values(((or-part_461)(eq? convert-mode_0 'number-or-false)))"
"(if or-part_461"
" or-part_461"
"(let-values(((or-part_462)(not exp-pos_0)))"
"(if or-part_462 or-part_462(not(extfl-mark?_452))))))"
" 'number-or-false"
" 'read))))"
"(if(let-values(((or-part_463)(not n_460)))(if or-part_463 or-part_463(string? n_460)))"
"(let-values()"
"(error"
" 'string->number"
"                               \"host `string->number` failed on ~s\""
"(substring s_0 start_0 end_0)))"
"(if(eq? exactness_0 'inexact)"
"(let-values()"
"(if(extflonum? n_460)"
"(let-values()"
"(if(eq? convert-mode_0 'must-read)"
"(let-values()"
"(format"
"                                         \"cannot convert extflonum `~.a` to inexact\""
"(substring s_0 start_0 end_0)))"
"(let-values() #f)))"
"(if(if(eqv? n_460 0)(char=?(string-ref s_0 start_0) '#\\-) #f)"
"(let-values() -0.0)"
"(let-values()(exact->inexact n_460)))))"
"(let-values() n_460))))))))"
"(if exp-pos_0"
"(let-values()"
"(let-values(((m-v_464)"
"(string->real-number"
" s_0"
" start_0"
" exp-pos_0"
" dot-pos_0"
" slash-pos_0"
" #f"
" any-hashes?_0"
" radix_0"
" 'exact"
" convert-mode_0)))"
"(let-values(((e-v_465)"
"(string->exact-integer-number s_0(+ exp-pos_0 1) end_0 radix_0 convert-mode_0)))"
"(let-values(((real->precision-inexact_466)"
"(lambda(r_0)"
"(begin"
" 'real->precision-inexact"
"(let-values(((tmp_469)(string-ref s_0 exp-pos_0)))"
"(if(if(equal? tmp_469 '#\\s)"
" #t"
"(if(equal? tmp_469 '#\\S)"
" #t"
"(if(equal? tmp_469 '#\\f) #t(equal? tmp_469 '#\\F))))"
"(let-values()(real->single-flonum r_0))"
"(if(if(equal? tmp_469 '#\\t) #t(equal? tmp_469 '#\\T))"
"(let-values()"
"(if(extflonum-available?)"
"(real->extfl r_0)"
"(string->number$1"
"(replace-hashes s_0 start_0 end_0)"
" radix_0"
" 'read)))"
"(let-values()(real->double-flonum r_0)))))))))"
"(let-values(((get-extfl?_467)(extfl-mark?_452)))"
"(if(let-values(((or-part_470)(not m-v_464)))(if or-part_470 or-part_470(not e-v_465)))"
"(let-values() #f)"
"(if(string? m-v_464)"
"(let-values() m-v_464)"
"(if(string? e-v_465)"
"(let-values() e-v_465)"
"(if(if(eq? convert-mode_0 'number-or-false) get-extfl?_467 #f)"
"(let-values() #f)"
"(if(if(let-values(((or-part_471)(eq? exactness_0 'inexact)))"
"(if or-part_471 or-part_471(eq? exactness_0 'decimal-as-inexact)))"
"(>(abs e-v_465)(if get-extfl?_467 6000 400))"
" #f)"
"(let-values()"
"(real->precision-inexact_466"
"(if(eqv? m-v_464 0)"
"(let-values()(if(char=?(string-ref s_0 start_0) '#\\-) -0.0 0.0))"
"(if(positive? m-v_464)"
"(let-values()(if(positive? e-v_465) +inf.0 0.0))"
"(let-values()(if(positive? e-v_465) -inf.0 -0.0))))))"
"(if(if(exactness-set? exactness_0) get-extfl?_467 #f)"
"(let-values()"
"(if(eq? convert-mode_0 'must-read)"
"(let-values()"
"(format"
"                                               \"cannot convert extflonum `~.a` to ~a\""
"(substring s_0 start_0 end_0)"
" exactness_0))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_472)(* m-v_464(expt radix_0 e-v_465))))"
"(if(if(not get-extfl?_467)"
"(let-values(((or-part_473)(eq? exactness_0 'exact)))"
"(if or-part_473 or-part_473(eq? exactness_0 'decimal-as-exact)))"
" #f)"
"(let-values() n_472)"
"(if(if(eqv? n_472 0)(char=?(string-ref s_0 start_0) '#\\-) #f)"
"(let-values()(real->precision-inexact_466 -0.0))"
"(let-values()(real->precision-inexact_466 n_472)))))))))))))))))"
"(if slash-pos_0"
"(let-values()"
"(let-values(((n-v_474)"
"(string->real-number"
" s_0"
" start_0"
" slash-pos_0"
" #f"
" #f"
" #f"
" any-hashes?_0"
" radix_0"
" 'exact"
" convert-mode_0)))"
"(let-values(((d-v_475)"
"(string->real-number"
" s_0"
"(add1 slash-pos_0)"
" end_0"
" #f"
" #f"
" #f"
" any-hashes?_0"
" radix_0"
" 'exact"
" convert-mode_0)))"
"(let-values(((get-inexact?_476)"
"(lambda(from-pos_0)"
"(begin"
" 'get-inexact?"
"(let-values(((or-part_478)(eq? exactness_0 'inexact)))"
"(if or-part_478"
" or-part_478"
"(if(not(eq? exactness_0 'exact))"
"(hashes? s_0 from-pos_0 end_0)"
" #f)))))))"
"(if(let-values(((or-part_479)(not n-v_474)))(if or-part_479 or-part_479(not d-v_475)))"
"(let-values() #f)"
"(if(string? n-v_474)"
"(let-values() n-v_474)"
"(if(string? d-v_475)"
"(let-values() d-v_475)"
"(if(eqv? d-v_475 0)"
"(let-values()"
"(if(get-inexact?_476(add1 slash-pos_0))"
"(let-values()(if(negative? n-v_474) -inf.0 +inf.0))"
"(let-values()"
"(if(eq?(read-complains convert-mode_0) 'must-read)"
"(let-values()"
"                                              (format \"division by zero in `~.a`\" (substring s_0 start_0 end_0)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((n_480)(/ n-v_474 d-v_475)))"
"(if(get-inexact?_476 start_0)(exact->inexact n_480) n_480)))))))))))"
"(let-values()"
"(string->decimal-number s_0 start_0 end_0 dot-pos_0 radix_0 exactness_0 convert-mode_0))))))))))))"
"(define-values"
"(string->decimal-number)"
"(lambda(s_0 start_0 end_0 dot-pos_0 radix_0 exactness_0 convert-mode_0)"
"(begin"
"(let-values(((get-exact?_488)"
"(let-values(((or-part_490)(eq? exactness_0 'exact)))"
"(if or-part_490 or-part_490(eq? exactness_0 'decimal-as-exact)))))"
"(let-values(((new-str_489)(make-string(- end_0 start_0(if(if dot-pos_0 get-exact?_488 #f) 1 0)))))"
"((letrec-values(((loop_491)"
"(lambda(i_0 j_0 hashes-pos_0)"
"(begin"
" 'loop"
"(if(< i_0 start_0)"
"(let-values()"
"(if(= hashes-pos_0 start_0)"
"(let-values()"
"(if(eq? convert-mode_0 'must-read)"
"(let-values()"
"                                            (format \"misplaced `#` in `~.a`\" (substring s_0 start_0 end_0)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_495)(string->number$1 new-str_489 radix_0)))"
"(if(not n_495)"
"(let-values()(fail-bad-number convert-mode_0 s_0 start_0 end_0))"
"(if(not get-exact?_488)"
"(let-values()"
"(if(if(eqv? n_495 0)(char=?(string-ref s_0 start_0) '#\\-) #f)"
" -0.0"
"(exact->inexact n_495)))"
"(if(if dot-pos_0 get-exact?_488 #f)"
"(let-values()(/ n_495(expt 10(- end_0 dot-pos_0 1))))"
"(let-values() n_495))))))))"
"(let-values()"
"(let-values(((c_496)(string-ref s_0 i_0)))"
"(if(char=? c_496 '#\\.)"
"(let-values()"
"(if get-exact?_488"
"(let-values()"
"(loop_491"
"(sub1 i_0)"
" j_0"
"(if(= hashes-pos_0(add1 i_0)) i_0 hashes-pos_0)))"
"(let-values()"
"(begin"
"(string-set! new-str_489 j_0 c_496)"
"(loop_491"
"(sub1 i_0)"
"(sub1 j_0)"
"(if(= hashes-pos_0(add1 i_0)) i_0 hashes-pos_0))))))"
"(if(let-values(((or-part_497)(char=? c_496 '#\\-)))"
"(if or-part_497 or-part_497(char=? c_496 '#\\+)))"
"(let-values()"
"(begin"
"(string-set! new-str_489 j_0 c_496)"
"(loop_491"
"(sub1 i_0)"
"(sub1 j_0)"
"(if(= hashes-pos_0(add1 i_0)) i_0 hashes-pos_0))))"
"(if(char=? c_496 '#\\#)"
"(let-values()"
"(if(= hashes-pos_0(add1 i_0))"
"(let-values()"
"(begin"
"(string-set! new-str_489 j_0 '#\\0)"
"(loop_491(sub1 i_0)(sub1 j_0) i_0)))"
"(let-values()"
"(if(eq? convert-mode_0 'must-read)"
"(let-values()"
"                                                      (format \"misplaced `#` in `~.a`\" (substring s_0 start_0 end_0)))"
"(let-values() #f)))))"
"(let-values()"
"(begin"
"(string-set! new-str_489 j_0 c_496)"
"(loop_491(sub1 i_0)(sub1 j_0) hashes-pos_0)))))))))))))"
" loop_491)"
"(sub1 end_0)"
"(sub1(string-length new-str_489))"
" end_0))))))"
"(define-values"
"(string->exact-integer-number)"
"(lambda(s_0 start_0 end_0 radix_0 convert-mode_0)"
"(begin"
"(if(hashes? s_0 start_0 end_0)"
"(let-values()"
"(if(eq? convert-mode_0 'must-read)"
"            (let-values () (format \"misplaced `#` in `~.a`\" (substring s_0 start_0 end_0)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_503)(string->number$1(maybe-substring s_0 start_0 end_0) radix_0)))"
"(if(not n_503)"
"(let-values()"
"(if(eq? convert-mode_0 'must-read)"
"                  (let-values () (format \"bad exponent `~.a`\" (substring s_0 start_0 end_0)))"
"(let-values() #f)))"
"(let-values() n_503))))))))"
"(define-values"
"(read-special-number)"
"(lambda(s_0 start_0 end_0 convert-mode_0)"
"(begin"
"(if(=(- end_0 start_0) 6)"
"(if(let-values(((or-part_508)(char=?(string-ref s_0 start_0) '#\\+)))"
"(if or-part_508 or-part_508(char=?(string-ref s_0 start_0) '#\\-)))"
"(let-values(((or-part_509)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 1))) '#\\i)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 2))) '#\\n)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 3))) '#\\f)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 4))) '#\\.)"
"(let-values(((or-part_510)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 5))) '#\\0)"
"(if(char=?(string-ref s_0 start_0) '#\\+) +inf.0 -inf.0)"
" #f)))"
"(if or-part_510"
" or-part_510"
"(let-values(((or-part_511)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 5))) '#\\f)"
"(if(char=?(string-ref s_0 start_0) '#\\+) +inf.f -inf.f)"
" #f)))"
"(if or-part_511"
" or-part_511"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 5))) '#\\t)"
"(if(not(eq? convert-mode_0 'number-or-false))"
"(if(char=?(string-ref s_0 start_0) '#\\+) '+inf.t '-inf.t)"
" #f)"
" #f)))))"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if or-part_509"
" or-part_509"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 1))) '#\\n)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 2))) '#\\a)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 3))) '#\\n)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 4))) '#\\.)"
"(let-values(((or-part_512)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 5))) '#\\0) +nan.0 #f)))"
"(if or-part_512"
" or-part_512"
"(let-values(((or-part_513)"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 5))) '#\\f) +nan.f #f)))"
"(if or-part_513"
" or-part_513"
"(if(char=?(char-downcase(string-ref s_0(+ start_0 5))) '#\\t)"
"(if(not(eq? convert-mode_0 'number-or-false)) '+nan.t #f)"
" #f)))))"
" #f)"
" #f)"
" #f)"
" #f)))"
" #f)"
" #f))))"
"(define-values"
"(fail-extflonum)"
"(lambda(convert-mode_0 v_0)"
"(begin"
"(if(eq? convert-mode_0 'must-read)"
"        (let-values () (format \"cannot combine extflonum `~a` into complex number\" v_0))"
"(let-values() #f)))))"
"(define-values"
"(read-for-special-compound62.1)"
"(lambda(in-complex50_0"
" reading-first?51_0"
" s54_0"
" start55_0"
" end56_0"
" radix57_0"
" exactness58_0"
" convert-mode59_0"
" v60_0"
" combine61_0)"
"(begin"
" 'read-for-special-compound62"
"(let-values(((s_544) s54_0))"
"(let-values(((start_545) start55_0))"
"(let-values(((end_546) end56_0))"
"(let-values(((radix_547) radix57_0))"
"(let-values(((exactness_548) exactness58_0))"
"(let-values(((convert-mode_549) convert-mode59_0))"
"(let-values(((in-complex_550) in-complex50_0))"
"(let-values(((reading-first?_551) reading-first?51_0))"
"(let-values(((v_552) v60_0))"
"(let-values(((combine_553) combine61_0))"
"(let-values()"
"(if(eq? exactness_548 'exact)"
"(let-values()"
"(if(eq? convert-mode_549 'must-read)"
"                                  (let-values () (format \"no exact representation for `~a`\" v_552))"
"(let-values() #f)))"
"(if(if(extflonum? v_552)"
"(let-values(((or-part_554)(not reading-first?_551)))"
"(if or-part_554 or-part_554(not(eq? convert-mode_549 'must-read))))"
" #f)"
"(let-values()(fail-extflonum convert-mode_549 v_552))"
"(let-values()"
"(let-values(((v2_555)"
"(let-values(((s173_557) s_544)"
"((start174_558) start_545)"
"((end175_559) end_546)"
"((radix176_560) radix_547)"
"((temp177_561) #t)"
"((exactness178_562) exactness_548)"
"((in-complex179_563) in-complex_550)"
"((convert-mode180_564) convert-mode_549))"
"(do-string->number17.1"
" in-complex179_563"
" temp177_561"
" s173_557"
" start174_558"
" end175_559"
" radix176_560"
" exactness178_562"
" convert-mode180_564))))"
"(if(string? v2_555)"
"(let-values() v2_555)"
"(if(not v2_555)"
"(let-values() v2_555)"
"(if(extflonum? v_552)"
"(let-values()(fail-extflonum convert-mode_549 v_552))"
"(let-values()(combine_553 v_552 v2_555)))))))))))))))))))))))"
"(define-values"
"(hashes?)"
"(lambda(s_0 start_0 end_0)"
"(begin"
"(let-values(((v*_595 start*_596 stop*_597 step*_598)"
"(normalise-inputs"
" 'in-string"
"                     \"string\""
"(lambda(x_0)(string? x_0))"
"(lambda(x_0)(unsafe-string-length x_0))"
" s_0"
" start_0"
" end_0"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_601)"
"(lambda(result_0 idx_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< idx_0 stop*_597)"
"(let-values(((c_604)(string-ref v*_595 idx_0)))"
"(let-values(((result_605)"
"(let-values()"
"(let-values(((result_607)"
"(let-values()(let-values()(char=? c_604 '#\\#)))))"
"(values result_607)))))"
"(if(if(not((lambda x_0 result_605) c_604))(not #f) #f)"
"(for-loop_601 result_605(unsafe-fx+ idx_0 1))"
" result_605)))"
" result_0)))))"
" for-loop_601)"
" #f"
" start*_596))))))"
"(define-values"
"(replace-hashes)"
"(lambda(s_0 start_0 end_0)"
"(begin"
"(let-values(((new-s_612)(make-string(- end_0 start_0))))"
"(begin"
"(let-values(((v*_613 start*_614 stop*_615 step*_616)"
"(normalise-inputs"
" 'in-string"
"                         \"string\""
"(lambda(x_0)(string? x_0))"
"(lambda(x_0)(unsafe-string-length x_0))"
" s_0"
" start_0"
" end_0"
" 1))"
"((start_617) 0))"
"(begin"
" #t"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_617)))"
"((letrec-values(((for-loop_620)"
"(lambda(idx_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(unsafe-fx< idx_0 stop*_615) #t #f)"
"(let-values(((c_623)(string-ref v*_613 idx_0))((i_624) pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(char=? c_623 '#\\#)"
"(string-set! new-s_612 i_624 '#\\0)"
"(string-set! new-s_612 i_624 c_623)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_620(unsafe-fx+ idx_0 1)(+ pos_0 1))(values))))"
"(values))))))"
" for-loop_620)"
" start*_614"
" start_617)))"
"(void)"
" new-s_612)))))"
"(define-values"
"(maybe-substring)"
"(lambda(s_0 start_0 end_0)"
"(begin(if(if(= 0 start_0)(= end_0(string-length s_0)) #f) s_0(substring s_0 start_0 end_0)))))"
"(define-values"
"(exactness-set?)"
"(lambda(exactness_0)"
"(begin"
"(let-values(((or-part_629)(eq? exactness_0 'exact)))(if or-part_629 or-part_629(eq? exactness_0 'inexact))))))"
"(define-values"
"(char-sign?)"
"(lambda(c_0)"
"(begin(let-values(((or-part_631)(char=? c_0 '#\\-)))(if or-part_631 or-part_631(char=? c_0 '#\\+))))))"
"(define-values"
"(digit?)"
"(lambda(c_0 radix_0)"
"(begin"
"(let-values(((v_634)(char->integer c_0)))"
"(let-values(((or-part_635)(if(>= v_634(char->integer '#\\0))(<(- v_634(char->integer '#\\0)) radix_0) #f)))"
"(if or-part_635"
" or-part_635"
"(if(> radix_0 10)"
"(let-values(((or-part_636)"
"(if(>= v_634(char->integer '#\\a))(<(- v_634(-(char->integer '#\\a) 10)) radix_0) #f)))"
"(if or-part_636"
" or-part_636"
"(if(>= v_634(char->integer '#\\A))(<(- v_634(-(char->integer '#\\A) 10)) radix_0) #f)))"
" #f)))))))"
"(define-values"
"(fail-bad-number)"
"(lambda(convert-mode_0 s_0 start_0 end_0)"
"(begin"
"(if(eq? convert-mode_0 'must-read)"
"        (let-values () (format \"bad number `~.a`\" (substring s_0 start_0 end_0)))"
"(let-values() #f)))))"
"(define-values"
"(read-complains)"
"(lambda(convert-mode_0)(begin(if(eq? convert-mode_0 'read) 'must-read convert-mode_0))))"
"(define-values"
"(read-symbol-or-number8.1)"
"(lambda(extra-prefix2_0 mode1_0 init-c5_0 in6_0 orig-config7_0)"
"(begin"
" 'read-symbol-or-number8"
"(let-values(((init-c_6) init-c5_0))"
"(let-values(((in_7) in6_0))"
"(let-values(((orig-config_8) orig-config7_0))"
"(let-values(((mode_9) mode1_0))"
"(let-values(((extra-prefix_10) extra-prefix2_0))"
"(let-values()"
"(let-values(((config_11)"
"(if(string? mode_9)(override-parameter 1/read-cdot orig-config_8 #f) orig-config_8)))"
"(let-values(((rt_12)(read-config-readtable config_11)))"
"(let-values(((c1_13)"
"(if rt_12"
"(if(let-values(((or-part_14)(eq? mode_9 'symbol-or-number)))"
"(if or-part_14 or-part_14(eq? mode_9 'symbol/indirect)))"
"(readtable-symbol-parser rt_12)"
" #f)"
" #f)))"
"(if c1_13"
"((lambda(handler_0)"
"(readtable-apply"
" handler_0"
" init-c_6"
" in_7"
" config_11"
"(read-config-line config_11)"
"(read-config-col config_11)"
"(read-config-pos config_11)))"
" c1_13)"
"(let-values()"
"(let-values(((accum-str_16)(accum-string-init! config_11)))"
"(let-values(((quoted-ever?_17) #f))"
"(let-values(((case-sens?_18)(check-parameter read-case-sensitive config_11)))"
"(let-values((()"
"(begin"
"(if extra-prefix_10"
"(let-values()(accum-string-add! accum-str_16 extra-prefix_10))"
"(void))"
"(values))))"
"(let-values(((source_19)(read-config-source config_11)))"
"(let-values(((unexpected-quoted_20)"
"(lambda(c_0 after-c_0)"
"(begin"
" 'unexpected-quoted"
"(let-values(((in11_26) in_7)"
"((config12_27) config_11)"
"((c13_28) c_0)"
"                                                                     ((temp14_29) \"~a following `~a` in ~a\")"
"((temp15_30)"
"(if(eof-object? c_0)"
"                                                                        \"end-of-file\""
"                                                                        \"non-character\"))"
"((after-c16_31) after-c_0)"
"((temp17_32)"
"(if(eq? mode_9 'keyword)"
"                                                                        (let-values () \"keyword\")"
"(if(string? mode_9)"
"                                                                          (let-values () \"number\")"
"                                                                          (let-values () \"symbol\")))))"
"(reader-error12.1"
" unsafe-undefined"
" c13_28"
" #f"
" unsafe-undefined"
" in11_26"
" config12_27"
" temp14_29"
"(list temp15_30 after-c16_31 temp17_32)))))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_33)"
"(lambda(init-c_0"
" pipe-quote-c_0"
" foldcase-from_0)"
"(begin"
" 'loop"
"(let-values(((c_37)"
"(let-values(((or-part_39)"
" init-c_0))"
"(if or-part_39"
" or-part_39"
"(let-values(((in_40)"
" in_7)"
"((skip-count_42)"
" 0)"
"((source_43)"
" source_19))"
"(let-values(((c_44)"
"(peek-char-or-special"
" in_40"
" skip-count_42"
" 'special"
" source_43)))"
"(if(eq?"
" c_44"
" 'special)"
"(special1.1"
" 'special)"
" c_44)))))))"
"(let-values(((ec_38)"
"(let-values(((rt_45)"
" rt_12)"
"((c_46)"
" c_37))"
"(if(let-values(((or-part_47)"
"(not"
" rt_45)))"
"(if or-part_47"
" or-part_47"
"(not"
"(char? c_46))))"
"(let-values() c_46)"
"(let-values()"
"(*readtable-effective-char"
" rt_45"
" c_46))))))"
"(if(if pipe-quote-c_0"
"(not(char? ec_38))"
" #f)"
"(let-values()"
"(begin"
"(if init-c_0"
"(void)"
"(let-values()"
"(consume-char/special"
" in_7"
" config_11"
" c_37)))"
"(unexpected-quoted_20"
" c_37"
" pipe-quote-c_0)))"
"(if(if(not pipe-quote-c_0)"
"(readtable-char-delimiter?"
" rt_12"
" c_37"
" config_11)"
" #f)"
"(let-values()"
"(if case-sens?_18"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_16"
" string-foldcase"
" foldcase-from_0))))"
"(if(if pipe-quote-c_0"
"(char=? c_37 pipe-quote-c_0)"
" #f)"
"(let-values()"
"(begin"
"(if init-c_0"
"(void)"
"(let-values()"
"(consume-char"
" in_7"
" c_37)))"
"(loop_33"
" #f"
" #f"
"(accum-string-count"
" accum-str_16))))"
"(if(if(char=? ec_38 '#\\|)"
"(check-parameter"
" read-accept-bar-quote"
" config_11)"
" #f)"
"(let-values()"
"(begin"
"(if init-c_0"
"(void)"
"(let-values()"
"(consume-char"
" in_7"
" c_37)))"
"(set! quoted-ever?_17 #t)"
"(if case-sens?_18"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_16"
" string-foldcase"
" foldcase-from_0)))"
"(loop_33"
" #f"
" c_37"
"(accum-string-count"
" accum-str_16))))"
"(if(if(char=? ec_38 '#\\\\)"
"(not pipe-quote-c_0)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if init-c_0"
"(void)"
"(let-values()"
"(consume-char"
" in_7"
" c_37)))"
"(values))))"
"(let-values(((next-c_48)"
"(let-values(((in_49)"
" in_7)"
"((source_51)"
" source_19))"
"(read-char-or-special"
" in_49"
" special1.1"
" source_51))))"
"(begin"
"(if(char?"
" next-c_48)"
"(void)"
"(let-values()"
"(unexpected-quoted_20"
" next-c_48"
" c_37)))"
"(if(let-values(((or-part_52)"
" pipe-quote-c_0))"
"(if or-part_52"
" or-part_52"
" case-sens?_18))"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_16"
" string-foldcase"
" foldcase-from_0)))"
"(accum-string-add!"
" accum-str_16"
" next-c_48)"
"(set! quoted-ever?_17"
" #t)"
"(loop_33"
" #f"
" #f"
"(accum-string-count"
" accum-str_16))))))"
"(let-values()"
"(begin"
"(if init-c_0"
"(void)"
"(let-values()"
"(consume-char"
" in_7"
" c_37)))"
"(accum-string-add!"
" accum-str_16"
" c_37)"
"(loop_33"
" #f"
" pipe-quote-c_0"
" foldcase-from_0))))))))))))))"
" loop_33)"
" init-c_6"
" #f"
" 0)"
"(values))))"
"(let-values(((str_21)"
"(let-values(((accum-str18_53) accum-str_16)"
"((config19_54) config_11))"
"(accum-string-get!6.1 0 accum-str18_53 config19_54))))"
"(let-values((()"
"(begin"
"(if(if(= 1(string-length str_21))"
"(if(not quoted-ever?_17)"
"(char=?"
" '#\\."
"(effective-char(string-ref str_21 0) config_11))"
" #f)"
" #f)"
"(let-values()"
"(let-values(((in20_55) in_7)"
"((config21_56) config_11)"
"                                                                             ((temp22_57) \"illegal use of `.`\"))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in20_55"
" config21_56"
" temp22_57"
"(list))))"
"(void))"
"(values))))"
"(let-values(((num_22)"
"(if(let-values(((or-part_58)"
"(eq? mode_9 'symbol-or-number)))"
"(if or-part_58 or-part_58(string? mode_9)))"
"(if(not quoted-ever?_17)"
"(1/string->number"
"(if(string? mode_9)"
"(string-append mode_9 str_21)"
" str_21)"
" 10"
" 'read"
"(if(check-parameter"
" 1/read-decimal-as-inexact"
" config_11)"
" 'decimal-as-inexact"
" 'decimal-as-exact))"
" #f)"
" #f)))"
"(begin"
"(if(string? num_22)"
"(let-values()"
"(let-values(((in23_59) in_7)"
"((config24_60) config_11)"
"                                                                   ((temp25_61) \"~a\")"
"((num26_62) num_22))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in23_59"
" config24_60"
" temp25_61"
"(list num26_62))))"
"(void))"
"(if(if(not num_22)(string? mode_9) #f)"
"(let-values()"
"(let-values(((in27_63) in_7)"
"((config28_64) config_11)"
"                                                                   ((temp29_65) \"bad number: `~a`\")"
"((temp30_66)(string-append mode_9 str_21)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in27_63"
" config28_64"
" temp29_65"
"(list temp30_66))))"
"(void))"
"(wrap"
"(let-values(((or-part_67) num_22))"
"(if or-part_67"
" or-part_67"
"(let-values(((or-part_68)"
"(if(eq? mode_9 'keyword)"
"(string->keyword str_21)"
" #f)))"
"(if or-part_68 or-part_68(string->symbol str_21)))))"
" in_7"
" config_11"
" str_21))))))))))))))))))))))))))"
"(define-values"
"(read-fixnum)"
"(lambda(read-one_0 init-c_0 in_0 config_0)"
"(begin"
"(let-values(((c_5)(read-char/skip-whitespace-and-comments init-c_0 read-one_0 in_0 config_0)))"
"(let-values(((line_6 col_7 pos_8)(port-next-location* in_0 c_5)))"
"          (let-values (((v_9) (read-number-literal c_5 in_0 config_0 \"#e\")))"
"(if(fixnum? v_9)"
"(let-values() v_9)"
"(if(eof-object? v_9)"
"(let-values() v_9)"
"(let-values()"
"(let-values(((in1_10) in_0)"
"((temp2_11)(reading-at config_0 line_6 col_7 pos_8))"
"                               ((temp3_12) \"expected a fixnum, found ~a\")"
"((v4_13) v_9))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in1_10"
" temp2_11"
" temp3_12"
"(list v4_13))))))))))))"
"(define-values"
"(read-flonum)"
"(lambda(read-one_0 init-c_0 in_0 config_0)"
"(begin"
"(let-values(((c_18)(read-char/skip-whitespace-and-comments init-c_0 read-one_0 in_0 config_0)))"
"(let-values(((line_19 col_20 pos_21)(port-next-location* in_0 c_18)))"
"          (let-values (((v_22) (read-number-literal c_18 in_0 config_0 \"#i\")))"
"(if(flonum? v_22)"
"(let-values() v_22)"
"(if(eof-object? v_22)"
"(let-values() v_22)"
"(let-values()"
"(let-values(((in5_23) in_0)"
"((temp6_24)(reading-at config_0 line_19 col_20 pos_21))"
"                               ((temp7_25) \"expected a flonum, found ~a\")"
"((v8_26) v_22))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in5_23"
" temp6_24"
" temp7_25"
"(list v8_26))))))))))))"
"(define-values"
"(read-number-literal)"
"(lambda(c_0 in_0 config_0 mode_0)"
"(begin"
"(if(not(char? c_0))"
"(let-values() c_0)"
"(let-values()"
"(let-values(((c9_32) c_0)((in10_33) in_0)((config11_34) config_0)((mode12_35) mode_0))"
"(read-symbol-or-number8.1 #f mode12_35 c9_32 in10_33 config11_34)))))))"
"(define-values"
"(read-vector11.1)"
"(lambda(length2_0 mode1_0 read-one5_0 opener-c6_0 opener7_0 closer8_0 in9_0 config10_0)"
"(begin"
" 'read-vector11"
"(let-values(((read-one_9) read-one5_0))"
"(let-values(((opener-c_10) opener-c6_0))"
"(let-values(((opener_11) opener7_0))"
"(let-values(((closer_12) closer8_0))"
"(let-values(((in_13) in9_0))"
"(let-values(((config_14) config10_0))"
"(let-values(((vector-mode_15) mode1_0))"
"(let-values(((expected-len_16) length2_0))"
"(let-values()"
"(let-values(((read-one-element_17)"
"(let-values(((tmp_20) vector-mode_15))"
"(if(equal? tmp_20 'any)"
"(let-values() read-one_9)"
"(if(equal? tmp_20 'fixnum)"
"(let-values()"
"(lambda(init-c_0 in_0 config_0)"
"(begin"
" 'read-one-element"
"(read-fixnum read-one_9 init-c_0 in_0 config_0))))"
"(if(equal? tmp_20 'flonum)"
"(let-values()"
"(lambda(init-c_0 in_0 config_0)"
"(begin"
" 'read-one-element"
"(read-flonum read-one_9 init-c_0 in_0 config_0))))"
"(let-values()(void))))))))"
"(let-values(((seq_18)"
"(let-values(((read-one-element14_28) read-one-element_17)"
"((opener-c15_29) opener-c_10)"
"((opener16_30) opener_11)"
"((closer17_31) closer_12)"
"((in18_32) in_13)"
"((config19_33) config_14)"
"((read-one20_34) read-one_9)"
"((temp21_35) #f))"
"(read-unwrapped-sequence17.1"
" temp21_35"
" unsafe-undefined"
" unsafe-undefined"
" #f"
" read-one20_34"
" read-one-element14_28"
" opener-c15_29"
" opener16_30"
" closer17_31"
" in18_32"
" config19_33))))"
"(let-values(((vec_19)"
"(if(not expected-len_16)"
"(let-values()"
"(let-values(((tmp_36) vector-mode_15))"
"(if(equal? tmp_36 'any)"
"(let-values()(list->vector seq_18))"
"(if(equal? tmp_36 'fixnum)"
"(let-values()"
"(let-values(((len_37)(length seq_18)))"
"(begin"
"(if(exact-nonnegative-integer? len_37)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/fxvector"
"                                                               \"exact-nonnegative-integer?\""
" len_37)))"
"(let-values(((fill_38) 0))"
"(let-values(((v_39)(make-fxvector len_37 fill_38)))"
"(begin"
"(if(zero? len_37)"
"(void)"
"(let-values()"
"(let-values(((lst_40) seq_18))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_40)))"
"((letrec-values(((for-loop_41)"
"(lambda(i_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_44)"
"(unsafe-car"
" lst_0))"
"((rest_45)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((i_46)"
"(let-values(((i_47)"
" i_0))"
"(let-values(((i_48)"
"(let-values()"
"(begin"
"(let-values(((elem_49)"
"(let-values()"
" e_44)))"
"(if(fixnum?"
" elem_49)"
"(unsafe-fxvector-set!"
" v_39"
" i_47"
" elem_49)"
"(not-an-fX.1"
" 'for*/vector"
" elem_49)))"
"(unsafe-fx+"
" 1"
" i_47)))))"
"(values"
" i_48)))))"
"(if(if(not"
"((lambda x_0"
"(unsafe-fx="
" i_46"
" len_37))"
" e_44))"
"(not #f)"
" #f)"
"(for-loop_41"
" i_46"
" rest_45)"
" i_46)))"
" i_0)))))"
" for-loop_41)"
" 0"
" lst_40)))))"
" v_39))))))"
"(if(equal? tmp_36 'flonum)"
"(let-values()"
"(let-values(((len_51)(length seq_18)))"
"(begin"
"(if(exact-nonnegative-integer? len_51)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/flvector"
"                                                                 \"exact-nonnegative-integer?\""
" len_51)))"
"(let-values(((fill_52) 0.0))"
"(let-values(((v_53)(make-flvector len_51 fill_52)))"
"(begin"
"(if(zero? len_51)"
"(void)"
"(let-values()"
"(let-values(((lst_54) seq_18))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_54)))"
"((letrec-values(((for-loop_55)"
"(lambda(i_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_58)"
"(unsafe-car"
" lst_0))"
"((rest_59)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((i_60)"
"(let-values(((i_61)"
" i_0))"
"(let-values(((i_62)"
"(let-values()"
"(begin"
"(let-values(((elem_63)"
"(let-values()"
" e_58)))"
"(if(flonum?"
" elem_63)"
"(unsafe-flvector-set!"
" v_53"
" i_61"
" elem_63)"
"(not-an-fX.1$1"
" 'for*/vector"
" elem_63)))"
"(unsafe-fx+"
" 1"
" i_61)))))"
"(values"
" i_62)))))"
"(if(if(not"
"((lambda x_0"
"(unsafe-fx="
" i_60"
" len_51))"
" e_58))"
"(not #f)"
" #f)"
"(for-loop_55"
" i_60"
" rest_59)"
" i_60)))"
" i_0)))))"
" for-loop_55)"
" 0"
" lst_54)))))"
" v_53))))))"
"(let-values()(void)))))))"
"(let-values()"
"(let-values(((len_65)(length seq_18)))"
"(if(= expected-len_16 len_65)"
"(let-values()(list->vector seq_18))"
"(if(< expected-len_16 len_65)"
"(let-values()"
"(let-values(((in22_66) in_13)"
"((config23_67) config_14)"
"((temp24_68)"
"                                                                    \"~avector length ~a is too small, ~a values provided\")"
"((temp25_69)"
"(let-values(((tmp_72) vector-mode_15))"
"(if(equal? tmp_72 'any)"
"                                                                        (let-values () \"\")"
"(if(equal? tmp_72 'fixnum)"
"                                                                          (let-values () \"fx\")"
"(if(equal? tmp_72 'flonum)"
"                                                                            (let-values () \"fl\")"
"(let-values()(void)))))))"
"((expected-len26_70) expected-len_16)"
"((len27_71) len_65))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in22_66"
" config23_67"
" temp24_68"
"(list temp25_69 expected-len26_70 len27_71))))"
"(let-values()"
"(let-values(((last-or_73)"
"(lambda(v_0)"
"(begin"
" 'last-or"
"(if(null? seq_18)"
"(wrap v_0 in_13 config_14 #f)"
"((letrec-values(((loop_76)"
"(lambda(seq_0)"
"(begin"
" 'loop"
"(if(null?(cdr seq_0))"
"(car seq_0)"
"(loop_76"
"(cdr seq_0)))))))"
" loop_76)"
" seq_18))))))"
"(let-values((()"
"(begin"
"(if(>=(integer-length expected-len_16) 48)"
"(let-values()"
"(raise"
"(exn:fail:out-of-memory"
"                                                                              \"out of memory\""
"(current-continuation-marks))))"
"(void))"
"(values))))"
"(let-values(((vec_74)"
"(let-values(((tmp_78) vector-mode_15))"
"(if(equal? tmp_78 'any)"
"(let-values()"
"(make-vector"
" expected-len_16"
"(last-or_73 0)))"
"(if(equal? tmp_78 'fixnum)"
"(let-values()"
"(make-fxvector"
" expected-len_16"
"(last-or_73 0)))"
"(if(equal? tmp_78 'flonum)"
"(let-values()"
"(make-flvector"
" expected-len_16"
"(last-or_73 0.0)))"
"(let-values()(void))))))))"
"(begin"
"(let-values(((tmp_79) vector-mode_15))"
"(if(equal? tmp_79 'any)"
"(let-values()"
"(begin"
"(let-values(((lst_80) seq_18)((start_81) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_80)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_81)))"
"((letrec-values(((for-loop_82)"
"(lambda(lst_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)"
" #t"
" #f)"
"(let-values(((e_85)"
"(unsafe-car"
" lst_0))"
"((rest_86)"
"(unsafe-cdr"
" lst_0))"
"((i_87)"
" pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" vec_74"
" i_87"
" e_85))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_82"
" rest_86"
"(+ pos_0 1))"
"(values))))"
"(values))))))"
" for-loop_82)"
" lst_80"
" start_81)))"
"(void)))"
"(if(equal? tmp_79 'fixnum)"
"(let-values()"
"(begin"
"(let-values(((lst_88) seq_18)((start_89) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_88)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_89)))"
"((letrec-values(((for-loop_90)"
"(lambda(lst_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)"
" #t"
" #f)"
"(let-values(((e_93)"
"(unsafe-car"
" lst_0))"
"((rest_94)"
"(unsafe-cdr"
" lst_0))"
"((i_95)"
" pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(fxvector-set!"
" vec_74"
" i_95"
" e_93))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_90"
" rest_94"
"(+ pos_0 1))"
"(values))))"
"(values))))))"
" for-loop_90)"
" lst_88"
" start_89)))"
"(void)))"
"(if(equal? tmp_79 'flonum)"
"(let-values()"
"(begin"
"(let-values(((lst_96) seq_18)((start_97) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_96)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-naturals start_97)))"
"((letrec-values(((for-loop_98)"
"(lambda(lst_0 pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
" #t"
" #f)"
"(let-values(((e_101)"
"(unsafe-car"
" lst_0))"
"((rest_102)"
"(unsafe-cdr"
" lst_0))"
"((i_103)"
" pos_0))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(flvector-set!"
" vec_74"
" i_103"
" e_101))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_98"
" rest_102"
"(+"
" pos_0"
" 1))"
"(values))))"
"(values))))))"
" for-loop_98)"
" lst_96"
" start_97)))"
"(void)))"
"(let-values()(void))))))"
" vec_74))))))))))))"
"(wrap vec_19 in_13 config_14 opener_11))))))))))))))))"
"(define-values"
"(read-fixnum-or-flonum-vector)"
"(lambda(read-one_0 dispatch-c_0 c_0 c2_0 in_0 config_0)"
"(begin"
"(let-values(((vector-mode_145)(if(char=? c2_0 '#\\x) 'fixnum 'flonum)))"
"(let-values((()(begin(consume-char in_0 c2_0)(values))))"
"(let-values((()"
"(begin"
"(if(read-config-for-syntax? config_0)"
"(let-values()"
"(let-values(((in28_169) in_0)"
"((config29_170) config_0)"
"                                           ((temp30_171) \"literal f~avectors not allowed\")"
"((c231_172) c2_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in28_169"
" config29_170"
" temp30_171"
"(list c231_172))))"
"(void))"
"(values))))"
"(let-values(((c3_146)"
"(let-values(((in_173) in_0)((source_175)(read-config-source config_0)))"
"(read-char-or-special in_173 special1.1 source_175))))"
"(let-values(((vector-len_147 len-str_148 c4_149)"
"(if(decimal-digit? c3_146)"
"(let-values()(read-simple-number in_0 config_0 c3_146))"
"                              (let-values () (values #f \"\" c3_146)))))"
"(let-values(((tmp_176) c4_149))"
"(if(equal? tmp_176 '#\\()"
"(let-values()"
"(let-values(((read-one32_178) read-one_0)"
"((temp33_179) '#\\()"
"((temp34_180) '#\\()"
"((temp35_181) '#\\))"
"((in36_182) in_0)"
"((config37_183) config_0)"
"((vector-mode38_184) vector-mode_145)"
"((vector-len39_185) vector-len_147))"
"(read-vector11.1"
" vector-len39_185"
" vector-mode38_184"
" read-one32_178"
" temp33_179"
" temp34_180"
" temp35_181"
" in36_182"
" config37_183)))"
"(if(equal? tmp_176 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_0)"
"(let-values()"
"(let-values(((read-one40_187) read-one_0)"
"((temp41_188) '#\\[)"
"((temp42_189) '#\\[)"
"((temp43_190) '#\\])"
"((in44_191) in_0)"
"((config45_192) config_0)"
"((vector-mode46_193) vector-mode_145)"
"((vector-len47_194) vector-len_147))"
"(read-vector11.1"
" vector-len47_194"
" vector-mode46_193"
" read-one40_187"
" temp41_188"
" temp42_189"
" temp43_190"
" in44_191"
" config45_192)))"
"(let-values()"
"(let-values(((in48_195) in_0)"
"((config49_196) config_0)"
"                                         ((temp50_197) (format \"~a~a\" dispatch-c_0 (format \"~a~a\" c_0 c2_0))))"
"(bad-syntax-error20.1 '#\\x in48_195 config49_196 temp50_197)))))"
"(if(equal? tmp_176 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_0)"
"(let-values()"
"(let-values(((read-one51_199) read-one_0)"
"((temp52_200) '#\\{)"
"((temp53_201) '#\\{)"
"((temp54_202) '#\\})"
"((in55_203) in_0)"
"((config56_204) config_0)"
"((vector-mode57_205) vector-mode_145)"
"((vector-len58_206) vector-len_147))"
"(read-vector11.1"
" vector-len58_206"
" vector-mode57_205"
" read-one51_199"
" temp52_200"
" temp53_201"
" temp54_202"
" in55_203"
" config56_204)))"
"(let-values()"
"(let-values(((in59_207) in_0)"
"((config60_208) config_0)"
"                                           ((temp61_209) (format \"~a~a\" dispatch-c_0 (format \"~a~a\" c_0 c2_0))))"
"(bad-syntax-error20.1 '#\\x in59_207 config60_208 temp61_209)))))"
"(let-values()"
"(let-values(((in62_211) in_0)"
"((config63_212) config_0)"
"((c464_213) c4_149)"
"                                       ((temp65_214) \"expected `(`, `[`, or `{` after `#~a~a~a`\")"
"((c66_215) c_0)"
"((c267_216) c2_0)"
"((len-str68_217) len-str_148))"
"(reader-error12.1"
" unsafe-undefined"
" c464_213"
" #f"
" unsafe-undefined"
" in62_211"
" config63_212"
" temp65_214"
"(list c66_215 c267_216 len-str68_217))))))))))))))))"
"(define-values"
"(read-simple-number)"
"(lambda(in_0 config_0 init-c_0)"
"(begin"
"(let-values(((accum-str_221)(accum-string-init! config_0)))"
"(let-values((()(begin(accum-string-add! accum-str_221 init-c_0)(values))))"
"(let-values(((init-v_222)(digit->number init-c_0)))"
"(let-values(((v_223)"
"(let-values(((in69_225) in_0)"
"((config70_226) config_0)"
"((accum-str71_227) accum-str_221)"
"((temp72_228) 10)"
"((temp73_229) +inf.0)"
"((init-v74_230) init-v_222)"
"((init-v75_231) init-v_222))"
"(read-digits12.1"
" temp72_228"
" init-v74_230"
" temp73_229"
" init-v75_231"
" in69_225"
" config70_226"
" accum-str71_227))))"
"(values"
" v_223"
"(let-values(((accum-str76_232) accum-str_221)((config77_233) config_0))"
"(accum-string-get!6.1 0 accum-str76_232 config77_233))"
"(let-values(((in_234) in_0)((source_236)(read-config-source config_0)))"
"(read-char-or-special in_234 special1.1 source_236))))))))))"
"(define-values"
"(read-struct)"
"(lambda(read-one_0 dispatch-c_0 in_0 config_0)"
"(begin"
"(let-values(((c_5)"
"(let-values(((in_25) in_0)((source_27)(read-config-source config_0)))"
"(read-char-or-special in_25 special1.1 source_27))))"
"(let-values(((ec_22)(effective-char c_5 config_0)))"
"(let-values(((seq_23)"
"(let-values(((tmp_28) ec_22))"
"(if(equal? tmp_28 '#\\()"
"(let-values()(read-struct-sequence read-one_0 c_5 '#\\( '#\\) in_0 config_0))"
"(if(equal? tmp_28 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_0)"
"(let-values()(read-struct-sequence read-one_0 c_5 '#\\[ '#\\] in_0 config_0))"
"(let-values()"
"(let-values(((in1_29) in_0)"
"((config2_30) config_0)"
"                                                 ((temp3_31) (format \"~as~a\" dispatch-c_0 c_5)))"
"(bad-syntax-error20.1 '#\\x in1_29 config2_30 temp3_31)))))"
"(if(equal? tmp_28 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_0)"
"(let-values()(read-struct-sequence read-one_0 c_5 '#\\{ '#\\} in_0 config_0))"
"(let-values()"
"(let-values(((in4_32) in_0)"
"((config5_33) config_0)"
"                                                   ((temp6_34) (format \"~as~a\" dispatch-c_0 c_5)))"
"(bad-syntax-error20.1 '#\\x in4_32 config5_33 temp6_34)))))"
"(let-values()"
"(let-values(((in7_35) in_0)"
"((config8_36) config_0)"
"                                               ((temp9_37) \"expected ~a after `~as`\")"
"((temp10_38)(all-openers-str config_0))"
"((dispatch-c11_39) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in7_35"
" config8_36"
" temp9_37"
"(list temp10_38 dispatch-c11_39))))))))))"
"(let-values((()"
"(begin"
"(if(null? seq_23)"
"(let-values()"
"(let-values(((in12_40) in_0)"
"((config13_41) config_0)"
"                                             ((temp14_42) \"missing structure description in `~as` form\")"
"((dispatch-c15_43) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in12_40"
" config13_41"
" temp14_42"
"(list dispatch-c15_43))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(prefab-key?(car seq_23))"
"(void)"
"(let-values()"
"(let-values(((in16_44) in_0)"
"((config17_45) config_0)"
"                                               ((temp18_46) \"invalid structure description in `~as` form\")"
"((dispatch-c19_47) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in16_44"
" config17_45"
" temp18_46"
"(list dispatch-c19_47)))))"
"(values))))"
"(let-values(((st_24)"
"(let-values(((with-handlers-predicate20_48) exn:fail?)"
"((with-handlers-handler21_49)"
"(lambda(exn_0)(begin 'with-handlers-handler21 #f))))"
"(let-values(((bpz_51)(continuation-mark-set-first #f break-enabled-key)))"
"(call-handled-body"
" bpz_51"
"(lambda(e_0)"
"(select-handler/no-breaks"
" e_0"
" bpz_51"
"(list(cons with-handlers-predicate20_48 with-handlers-handler21_49))))"
"(lambda()(prefab-key->struct-type(car seq_23)(length(cdr seq_23)))))))))"
"(begin"
"(if st_24"
"(void)"
"(let-values()"
"(let-values(((in22_53) in_0)"
"((config23_54) config_0)"
"((temp24_55)"
"(string-append"
"                                       \"mismatch between structure description\""
"                                       \" and number of provided field values in `~as` form\"))"
"((dispatch-c25_56) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in22_53"
" config23_54"
" temp24_55"
"(list dispatch-c25_56)))))"
"(if(read-config-for-syntax? config_0)"
"(let-values()"
"(if(all-fields-immutable?(car seq_23))"
"(void)"
"(let-values()"
"(let-values(((in26_57) in_0)"
"((config27_58) config_0)"
"                                         ((temp28_59) \"cannot read mutable `~as` form as syntax\")"
"((dispatch-c29_60) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in26_57"
" config27_58"
" temp28_59"
"(list dispatch-c29_60))))))"
"(void))"
"(wrap(apply make-prefab-struct seq_23) in_0 config_0 ec_22)))))))))))"
"(define-values"
"(read-struct-sequence)"
"(lambda(read-one_0 opener-c_0 opener_0 closer_0 in_0 config_0)"
"(begin"
"(let-values(((read-one30_68) read-one_0)"
"((opener-c31_69) opener-c_0)"
"((opener32_70) opener_0)"
"((closer33_71) closer_0)"
"((in34_72) in_0)"
"((config35_73) config_0)"
"((temp36_74)"
"(lambda(init-c_0 in_1 config_1)(read-one_0 init-c_0 in_1(disable-wrapping config_1)))))"
"(read-unwrapped-sequence17.1"
" 'all"
" unsafe-undefined"
" temp36_74"
" #f"
" unsafe-undefined"
" read-one30_68"
" opener-c31_69"
" opener32_70"
" closer33_71"
" in34_72"
" config35_73)))))"
"(define-values"
"(read-vector-or-graph)"
"(lambda(read-one_0 dispatch-c_0 init-c_0 in_0 config_0)"
"(begin"
"(let-values(((accum-str_6)(accum-string-init! config_0)))"
"(let-values((()(begin(accum-string-add! accum-str_6 init-c_0)(values))))"
"(let-values(((init-v_7)(digit->number init-c_0)))"
"(let-values(((v_8)"
"(let-values(((in1_35) in_0)"
"((config2_36) config_0)"
"((accum-str3_37) accum-str_6)"
"((temp4_38) 10)"
"((temp5_39) +inf.0)"
"((init-v6_40) init-v_7)"
"((init-v7_41) init-v_7))"
"(read-digits12.1 temp4_38 init-v6_40 temp5_39 init-v7_41 in1_35 config2_36 accum-str3_37))))"
"(let-values(((post-line_9 post-col_10 post-pos_11)(port-next-location in_0)))"
"(let-values(((get-accum_12)"
"(lambda(c_0)"
"(begin"
" 'get-accum"
"(format"
"                                   \"~a~a~a\""
" dispatch-c_0"
"(let-values(((accum-str8_43) accum-str_6)((config9_44) config_0))"
"(accum-string-get!6.1 0 accum-str8_43 config9_44))"
" c_0)))))"
"(let-values(((c_32)"
"(let-values(((in_45) in_0)((source_47)(read-config-source config_0)))"
"(read-char-or-special in_45 special1.1 source_47))))"
"(let-values(((ec_33)(effective-char c_32 config_0)))"
"(let-values(((tmp_48) ec_33))"
"(if(equal? tmp_48 '#\\()"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_6 config_0)"
"(let-values(((read-one10_50) read-one_0)"
"((c11_51) c_32)"
"((temp12_52) '#\\()"
"((temp13_53) '#\\))"
"((in14_54) in_0)"
"((config15_55) config_0)"
"((v16_56) v_8))"
"(read-vector11.1"
" v16_56"
" 'any"
" read-one10_50"
" c11_51"
" temp12_52"
" temp13_53"
" in14_54"
" config15_55))))"
"(if(equal? tmp_48 '#\\[)"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_6 config_0)"
"(if(check-parameter 1/read-square-bracket-as-paren config_0)"
"(let-values()"
"(let-values(((read-one17_58) read-one_0)"
"((c18_59) c_32)"
"((temp19_60) '#\\[)"
"((temp20_61) '#\\])"
"((in21_62) in_0)"
"((config22_63) config_0)"
"((v23_64) v_8))"
"(read-vector11.1"
" v23_64"
" 'any"
" read-one17_58"
" c18_59"
" temp19_60"
" temp20_61"
" in21_62"
" config22_63)))"
"(let-values()"
"(let-values(((in24_65) in_0)"
"((config25_66) config_0)"
"((temp26_67)(get-accum_12(get-accum_12 c_32))))"
"(bad-syntax-error20.1 '#\\x in24_65 config25_66 temp26_67))))))"
"(if(equal? tmp_48 '#\\{)"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_6 config_0)"
"(if(check-parameter 1/read-curly-brace-as-paren config_0)"
"(let-values()"
"(let-values(((read-one27_69) read-one_0)"
"((c28_70) c_32)"
"((temp29_71) '#\\{)"
"((temp30_72) '#\\})"
"((in31_73) in_0)"
"((config32_74) config_0)"
"((v33_75) v_8))"
"(read-vector11.1"
" v33_75"
" 'any"
" read-one27_69"
" c28_70"
" temp29_71"
" temp30_72"
" in31_73"
" config32_74)))"
"(let-values()"
"(let-values(((in34_76) in_0)"
"((config35_77) config_0)"
"((temp36_78)(get-accum_12(get-accum_12 c_32))))"
"(bad-syntax-error20.1 '#\\x in34_76 config35_77 temp36_78))))))"
"(let-values()"
"(let-values(((tmp_79) c_32))"
"(if(if(equal? tmp_79 '#\\=) #t(equal? tmp_79 '#\\#))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_80)(read-config-for-syntax? config_0)))"
"(if or-part_80"
" or-part_80"
"(not(check-parameter 1/read-accept-graph config_0))))"
"(let-values()"
"(let-values(((in37_81) in_0)"
"((config38_82) config_0)"
"                                                         ((temp39_83) \"`#...~a` forms not ~a\")"
"((c40_84) c_32)"
"((temp41_85)"
"(if(read-config-for-syntax? config_0)"
"                                                            \"enabled\""
"                                                            \"allowed in `read-syntax` mode\")))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in37_81"
" config38_82"
" temp39_83"
"(list c40_84 temp41_85))))"
"(void))"
"(if(<=(accum-string-count accum-str_6) 8)"
"(void)"
"(let-values()"
"(let-values(((in42_86) in_0)"
"((config43_87) config_0)"
"                                                         ((temp44_88) \"graph ID too long in `~a~a~a`\")"
"((dispatch-c45_89) dispatch-c_0)"
"((temp46_90)"
"(let-values(((accum-str48_92) accum-str_6)"
"((config49_93) config_0))"
"(accum-string-get!6.1 0 accum-str48_92 config49_93)))"
"((c47_91) c_32))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in42_86"
" config43_87"
" temp44_88"
"(list dispatch-c45_89 temp46_90 c47_91)))))"
"(let-values(((tmp_94) c_32))"
"(if(equal? tmp_94 '#\\=)"
"(let-values()"
"(let-values(((ph_95)(make-placeholder 'placeholder)))"
"(let-values(((ht_96)(get-graph-hash config_0)))"
"(let-values((()"
"(begin"
"(if(hash-ref ht_96 v_8 #f)"
"(let-values()"
"(let-values(((in50_98) in_0)"
"((config51_99) config_0)"
"((temp52_100)"
"                                                                                    \"multiple `~a~a~a` tags\")"
"((dispatch-c53_101) dispatch-c_0)"
"((temp54_102)"
"(let-values(((accum-str56_104)"
" accum-str_6)"
"((config57_105)"
" config_0))"
"(accum-string-get!6.1"
" 0"
" accum-str56_104"
" config57_105)))"
"((c55_103) c_32))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in50_98"
" config51_99"
" temp52_100"
"(list dispatch-c53_101 temp54_102 c55_103))))"
"(void))"
"(values))))"
"(let-values((()(begin(hash-set! ht_96 v_8 ph_95)(values))))"
"(let-values(((result-v_97)"
"(read-one_0 #f in_0(next-readtable config_0))))"
"(begin"
"(if(eof-object? result-v_97)"
"(let-values()"
"(let-values(((in58_107) in_0)"
"((config59_108) config_0)"
"((result-v60_109) result-v_97)"
"((temp61_110)"
"                                                                            \"expected an element for graph after `~a~a~a`, found end-of-file\")"
"((dispatch-c62_111) dispatch-c_0)"
"((temp63_112)"
"(let-values(((accum-str65_114) accum-str_6)"
"((config66_115) config_0))"
"(accum-string-get!6.1"
" 0"
" accum-str65_114"
" config66_115)))"
"((c64_113) c_32))"
"(reader-error12.1"
" unsafe-undefined"
" result-v60_109"
" #f"
" unsafe-undefined"
" in58_107"
" config59_108"
" temp61_110"
"(list dispatch-c62_111 temp63_112 c64_113))))"
"(void))"
"(accum-string-abandon! accum-str_6 config_0)"
"(placeholder-set! ph_95 result-v_97)"
" ph_95)))))))"
"(if(equal? tmp_94 '#\\#)"
"(let-values()"
"(begin0"
"(hash-ref"
"(let-values(((or-part_116)"
"(read-config-state-graph(read-config-st config_0))))"
"(if or-part_116 or-part_116 '#hash()))"
" v_8"
"(lambda()"
"(let-values(((in67_117) in_0)"
"((config68_118) config_0)"
"                                                                  ((temp69_119) \"no preceding `~a~a=` for `~a~a~a`\")"
"((dispatch-c70_120) dispatch-c_0)"
"((v71_121) v_8)"
"((dispatch-c72_122) dispatch-c_0)"
"((temp73_123)"
"(let-values(((accum-str75_125) accum-str_6)"
"((config76_126) config_0))"
"(accum-string-get!6.1"
" 0"
" accum-str75_125"
" config76_126)))"
"((c74_124) c_32))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in67_117"
" config68_118"
" temp69_119"
"(list"
" dispatch-c70_120"
" v71_121"
" dispatch-c72_122"
" temp73_123"
" c74_124)))))"
"(accum-string-abandon! accum-str_6 config_0)))"
"(let-values()(void)))))))"
"(let-values()"
"(let-values(((in77_128) in_0)"
"((config78_129) config_0)"
"((c79_130) c_32)"
"                                                   ((temp80_131) \"bad syntax `~a`\")"
"((temp81_132)(get-accum_12 c_32)))"
"(reader-error12.1"
" unsafe-undefined"
" c79_130"
" #f"
" unsafe-undefined"
" in77_128"
" config78_129"
" temp80_131"
"(list temp81_132))))))))))))))))))))))"
"(define-values"
"(get-graph-hash)"
"(lambda(config_0)"
"(begin"
"(let-values(((st_134)(read-config-st config_0)))"
"(let-values(((or-part_135)(read-config-state-graph st_134)))"
"(if or-part_135"
" or-part_135"
"(let-values(((ht_136)(make-hasheqv)))(begin(set-read-config-state-graph! st_134 ht_136) ht_136))))))))"
"(define-values"
"(coerce-key)"
"(lambda(key_0 config_0)"
"(begin"
"(let-values(((for-syntax?_3)(read-config-for-syntax? config_0)))"
"((read-config-coerce-key config_0) for-syntax?_3 key_0)))))"
"(define-values"
"(read-hash)"
"(lambda(read-one_0 dispatch-c_0 init-c_0 in_0 config_0)"
"(begin"
"(let-values(((accum-str_6)(accum-string-init! config_0)))"
"(let-values((()(begin(accum-string-add! accum-str_6 dispatch-c_0)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_6 init-c_0)(values))))"
"(let-values(((get-next!_7)"
"(lambda(expect-c_0 expect-alt-c_0)"
"(begin"
" 'get-next!"
"(let-values(((c_14)"
"(let-values(((in_15) in_0)((source_17)(read-config-source config_0)))"
"(read-char-or-special in_15 special1.1 source_17))))"
"(begin"
"(if(let-values(((or-part_18)(eqv? c_14 expect-c_0)))"
"(if or-part_18 or-part_18(eqv? c_14 expect-alt-c_0)))"
"(void)"
"(let-values()"
"(let-values(((in1_20) in_0)"
"((config2_21) config_0)"
"((c3_22) c_14)"
"                                                   ((temp4_23) \"expected `~a` after `~a`\")"
"((expect-c5_24) expect-c_0)"
"((temp6_25)"
"(let-values(((accum-str7_26) accum-str_6)((config8_27) config_0))"
"(accum-string-get!6.1 0 accum-str7_26 config8_27))))"
"(reader-error12.1"
" unsafe-undefined"
" c3_22"
" #f"
" unsafe-undefined"
" in1_20"
" config2_21"
" temp4_23"
"(list expect-c5_24 temp6_25)))))"
"(accum-string-add! accum-str_6 c_14)))))))"
"(let-values((()(begin(get-next!_7 '#\\a '#\\A)(values))))"
"(let-values((()(begin(get-next!_7 '#\\s '#\\S)(values))))"
"(let-values((()(begin(get-next!_7 '#\\h '#\\H)(values))))"
"(let-values(((content_8 opener_9 mode_10)"
"((letrec-values(((loop_28)"
"(lambda(mode_0)"
"(begin"
" 'loop"
"(let-values(((c_30)"
"(let-values(((in_32) in_0)"
"((source_34)"
"(read-config-source config_0)))"
"(read-char-or-special"
" in_32"
" special1.1"
" source_34))))"
"(let-values(((ec_31)(effective-char c_30 config_0)))"
"(let-values(((tmp_35) ec_31))"
"(if(equal? tmp_35 '#\\()"
"(let-values()"
"(let-values(((open-end-line_36"
" open-end-col_37"
" open-end-pos_38)"
"(port-next-location in_0)))"
"(let-values(((read-one-key+value_39)"
"(make-read-one-key+value"
" read-one_0"
" c_30"
" '#\\)"
" open-end-pos_38)))"
"(values"
"(let-values(((read-one-key+value9_41)"
" read-one-key+value_39)"
"((c10_42) c_30)"
"((temp11_43) '#\\()"
"((temp12_44) '#\\))"
"((in13_45) in_0)"
"((config14_46) config_0)"
"((config15_47) config_0)"
"((temp16_48) #f))"
"(read-unwrapped-sequence17.1"
" temp16_48"
" config15_47"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" read-one-key+value9_41"
" c10_42"
" temp11_43"
" temp12_44"
" in13_45"
" config14_46))"
" ec_31"
" mode_0))))"
"(if(equal? tmp_35 '#\\[)"
"(let-values()"
"(if(check-parameter"
" 1/read-square-bracket-as-paren"
" config_0)"
"(let-values()"
"(let-values(((open-end-line_49"
" open-end-col_50"
" open-end-pos_51)"
"(port-next-location in_0)))"
"(let-values(((read-one-key+value_52)"
"(make-read-one-key+value"
" read-one_0"
" c_30"
" '#\\]"
" open-end-pos_51)))"
"(values"
"(let-values(((read-one-key+value17_54)"
" read-one-key+value_52)"
"((c18_55) c_30)"
"((temp19_56) '#\\[)"
"((temp20_57) '#\\])"
"((in21_58) in_0)"
"((config22_59) config_0)"
"((config23_60) config_0)"
"((temp24_61) #f))"
"(read-unwrapped-sequence17.1"
" temp24_61"
" config23_60"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" read-one-key+value17_54"
" c18_55"
" temp19_56"
" temp20_57"
" in21_58"
" config22_59))"
" ec_31"
" mode_0))))"
"(let-values()"
"(let-values(((in25_62) in_0)"
"((config26_63) config_0)"
"                                                                                     ((temp27_64) \"illegal use of `~a`\")"
"((c28_65) c_30))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in25_62"
" config26_63"
" temp27_64"
"(list c28_65))))))"
"(if(equal? tmp_35 '#\\{)"
"(let-values()"
"(if(check-parameter"
" 1/read-curly-brace-as-paren"
" config_0)"
"(let-values()"
"(let-values(((open-end-line_66"
" open-end-col_67"
" open-end-pos_68)"
"(port-next-location in_0)))"
"(let-values(((read-one-key+value_69)"
"(make-read-one-key+value"
" read-one_0"
" c_30"
" '#\\}"
" open-end-pos_68)))"
"(values"
"(let-values(((read-one-key+value29_71)"
" read-one-key+value_69)"
"((c30_72) c_30)"
"((temp31_73) '#\\{)"
"((temp32_74) '#\\})"
"((in33_75) in_0)"
"((config34_76) config_0)"
"((config35_77) config_0)"
"((temp36_78) #f))"
"(read-unwrapped-sequence17.1"
" temp36_78"
" config35_77"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" read-one-key+value29_71"
" c30_72"
" temp31_73"
" temp32_74"
" in33_75"
" config34_76))"
" ec_31"
" mode_0))))"
"(let-values()"
"(let-values(((in37_79) in_0)"
"((config38_80) config_0)"
"((temp39_81)"
"                                                                                        \"illegal use of `~a`\")"
"((c40_82) c_30))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in37_79"
" config38_80"
" temp39_81"
"(list c40_82))))))"
"(if(if(equal? tmp_35 '#\\e)"
" #t"
"(equal? tmp_35 '#\\E))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_6 c_30)"
"(get-next!_7 '#\\q '#\\Q)"
"(loop_28 'eq)))"
"(if(if(equal? tmp_35 '#\\v)"
" #t"
"(equal? tmp_35 '#\\V))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_6 c_30)"
"(if(eq? mode_0 'eq)"
"(loop_28 'eqv)"
"(let-values(((in41_83) in_0)"
"((config42_84) config_0)"
"((temp43_85)"
"                                                                                            \"bad syntax `~a`\")"
"((temp44_86)"
"(let-values(((accum-str45_87)"
" accum-str_6)"
"((config46_88)"
" config_0))"
"(accum-string-get!6.1"
" 0"
" accum-str45_87"
" config46_88))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in41_83"
" config42_84"
" temp43_85"
"(list temp44_86))))))"
"(let-values()"
"(begin"
"(if(char? c_30)"
"(let-values()"
"(accum-string-add! accum-str_6 c_30))"
"(void))"
"(let-values(((in47_90) in_0)"
"((config48_91) config_0)"
"((c49_92) c_30)"
"                                                                                         ((temp50_93) \"bad syntax `~a`\")"
"((temp51_94)"
"(let-values(((accum-str52_95)"
" accum-str_6)"
"((config53_96)"
" config_0))"
"(accum-string-get!6.1"
" 0"
" accum-str52_95"
" config53_96))))"
"(reader-error12.1"
" unsafe-undefined"
" c49_92"
" #f"
" unsafe-undefined"
" in47_90"
" config48_91"
" temp50_93"
"(list temp51_94)))))))))))))))))"
" loop_28)"
" 'equal)))"
"(let-values(((graph?_11)(if(read-config-state-graph(read-config-st config_0)) #t #f)))"
"(wrap"
"(let-values(((tmp_97) mode_10))"
"(if(equal? tmp_97 'equal)"
"(let-values()"
"(if graph?_11(make-hash-placeholder content_8)(make-immutable-hash content_8)))"
"(if(equal? tmp_97 'eq)"
"(let-values()"
"(if graph?_11(make-hasheq-placeholder content_8)(make-immutable-hasheq content_8)))"
"(if(equal? tmp_97 'eqv)"
"(let-values()"
"(if graph?_11"
"(make-hasheqv-placeholder content_8)"
"(make-immutable-hasheqv content_8)))"
"(let-values()(void))))))"
" in_0"
" config_0"
" opener_9)))))))))))))"
"(define-values"
"(make-read-one-key+value)"
"(lambda(read-one_0 overall-opener-c_0 overall-closer-ec_0 prefix-end-pos_0)"
"(begin"
"(lambda(init-c_0 in_0 config_0)"
"(let-values(((c_105)(read-char/skip-whitespace-and-comments init-c_0 read-one_0 in_0 config_0)))"
"(let-values(((open-line_106 open-col_107 open-pos_108)(port-next-location* in_0 c_105)))"
"(let-values(((ec_109)(effective-char c_105 config_0)))"
"(let-values(((elem-config_110)(next-readtable config_0)))"
"(let-values(((closer_111)"
"(let-values(((tmp_112) ec_109))"
"(if(equal? tmp_112 '#\\()"
"(let-values() '#\\))"
"(if(equal? tmp_112 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_0) '#\\] #f))"
"(if(equal? tmp_112 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_0) '#\\} #f))"
"(let-values() #f)))))))"
"(if(not closer_111)"
"(let-values()"
"(if(eof-object? c_105)"
"(let-values()"
"(let-values(((in54_114) in_0)"
"((config55_115) config_0)"
"((c56_116) c_105)"
"((prefix-end-pos57_117) prefix-end-pos_0)"
"                                       ((temp58_118) \"expected ~a to close `~a`\")"
"((temp59_119)(closer-name overall-closer-ec_0 config_0))"
"((overall-opener-c60_120) overall-opener-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" c56_116"
" prefix-end-pos57_117"
" unsafe-undefined"
" in54_114"
" config55_115"
" temp58_118"
"(list temp59_119 overall-opener-c60_120))))"
"(if(char-closer? ec_109 config_0)"
"(let-values()"
"(let-values(((in61_121) in_0)"
"((temp62_122)(reading-at config_0 open-line_106 open-col_107 open-pos_108))"
"                                         ((temp63_123) \"~a\")"
"((temp64_124)(indentation-unexpected-closer-message ec_109 c_105 config_0)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in61_121"
" temp62_122"
" temp63_123"
"(list temp64_124))))"
"(let-values()"
"(let-values(((v_125)(read-one_0 c_105 in_0(keep-comment elem-config_110))))"
"(if(1/special-comment? v_125)"
"(let-values()"
"((make-read-one-key+value"
" read-one_0"
" overall-opener-c_0"
" overall-closer-ec_0"
" prefix-end-pos_0)"
" #f"
" in_0"
" config_0))"
"(let-values()"
"(let-values(((in65_126) in_0)"
"((temp66_127)"
"(reading-at config_0 open-line_106 open-col_107 open-pos_108))"
"                                               ((temp67_128) \"expected ~a to start a hash pair\")"
"((temp68_129)(all-openers-str config_0)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in65_126"
" temp66_127"
" temp67_128"
"(list temp68_129))))))))))"
"(let-values()"
"(let-values(((k_130)(read-one_0 #f in_0(disable-wrapping elem-config_110))))"
"(let-values(((dot-c_131)(read-char/skip-whitespace-and-comments #f read-one_0 in_0 config_0)))"
"(let-values(((dot-line_132 dot-col_133 dot-pos_134)(port-next-location* in_0 dot-c_131)))"
"(let-values(((dot-ec_135)(effective-char dot-c_131 config_0)))"
"(let-values((()"
"(begin"
"(if(if(eqv? dot-ec_135 '#\\.)"
"(char-delimiter?"
"(let-values(((in_142) in_0)"
"((skip-count_144) 0)"
"((source_145)(read-config-source config_0)))"
"(let-values(((c_146)"
"(peek-char-or-special"
" in_142"
" skip-count_144"
" 'special"
" source_145)))"
"(if(eq? c_146 'special)(special1.1 'special) c_146)))"
" config_0)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in69_148) in_0)"
"((temp70_149)"
"(reading-at"
" config_0"
" dot-line_132"
" dot-col_133"
" dot-pos_134))"
"((dot-c71_150) dot-c_131)"
"                                                               ((temp72_151) \"expected ~a and value for hash\")"
"((temp73_152)(dot-name config_0)))"
"(reader-error12.1"
" unsafe-undefined"
" dot-c71_150"
" #f"
" unsafe-undefined"
" in69_148"
" temp70_149"
" temp72_151"
"(list temp73_152)))))"
"(values))))"
"(let-values(((v_136)(read-one_0 #f in_0 elem-config_110)))"
"(let-values(((closer-c_137)"
"(read-char/skip-whitespace-and-comments #f read-one_0 in_0 config_0)))"
"(let-values(((closer-line_138 closer-col_139 closer-pos_140)"
"(port-next-location* in_0 closer-c_137)))"
"(let-values(((closer-ec_141)(effective-char closer-c_137 config_0)))"
"(begin"
"(if(eqv? closer-ec_141 closer_111)"
"(void)"
"(let-values()"
"(let-values(((in74_154) in_0)"
"((temp75_155)"
"(reading-at"
" config_0"
" closer-line_138"
" closer-col_139"
" closer-pos_140))"
"((closer-c76_156) closer-c_137)"
"                                                           ((temp77_157) \"expected ~a after value within a hash\")"
"((temp78_158)(closer-name closer_111 config_0)))"
"(reader-error12.1"
" unsafe-undefined"
" closer-c76_156"
" #f"
" unsafe-undefined"
" in74_154"
" temp75_155"
" temp77_157"
"(list temp78_158)))))"
"(cons(coerce-key k_130 elem-config_110) v_136))))))))))))))))))))))"
"(define-values"
"(read-string5.1)"
"(lambda(mode1_0 in3_0 config4_0)"
"(begin"
" 'read-string5"
"(let-values(((in_4) in3_0))"
"(let-values(((config_5) config4_0))"
"(let-values(((mode_6) mode1_0))"
"(let-values()"
"(let-values(((source_7)(read-config-source config_5)))"
"(let-values(((open-end-line_8 open-end-col_9 open-end-pos_10)(port-next-location in_4)))"
"(let-values(((accum-str_11)(accum-string-init! config_5)))"
"(let-values(((bad-end_12)"
"(lambda(c_0)"
"(begin"
" 'bad-end"
"(if(eof-object? c_0)"
"(let-values()"
"(let-values(((in8_16) in_4)"
"((config9_17) config_5)"
"((c10_18) c_0)"
"((open-end-pos11_19) open-end-pos_10)"
"                                                       ((temp12_20) \"expected a closing `\\\"`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c10_18"
" open-end-pos11_19"
" unsafe-undefined"
" in8_16"
" config9_17"
" temp12_20"
"(list))))"
"(let-values()"
"(let-values(((in13_22) in_4)"
"((config14_23) config_5)"
"((c15_24) c_0)"
"                                                       ((temp16_25) \"found non-character while reading a ~a\")"
"((mode17_26) mode_6))"
"(reader-error12.1"
" unsafe-undefined"
" c15_24"
" #f"
" unsafe-undefined"
" in13_22"
" config14_23"
" temp16_25"
"(list mode17_26)))))))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_27)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_28)"
"(let-values(((in_29) in_4)"
"((source_31) source_7))"
"(read-char-or-special"
" in_29"
" special1.1"
" source_31))))"
"(if(not(char? c_28))"
"(let-values()(bad-end_12 c_28))"
"(if(char=? '#\\\\ c_28)"
"(let-values()"
"(let-values(((escaping-c_32) c_28))"
"(let-values(((escaped-c_33)"
"(let-values(((in_35) in_4)"
"((source_37) source_7))"
"(read-char-or-special"
" in_35"
" special1.1"
" source_37))))"
"(let-values((()"
"(begin"
"(if(not(char? escaped-c_33))"
"(let-values()"
"(bad-end_12 escaped-c_33))"
"(void))"
"(values))))"
"(let-values(((unknown-error_34)"
"(lambda()"
"(begin"
" 'unknown-error"
"(let-values(((in18_38)"
" in_4)"
"((config19_39)"
" config_5)"
"((temp20_40)"
"                                                                                                          \"unknown escape sequence `~a~a` in ~a\")"
"((escaping-c21_41)"
" escaping-c_32)"
"((escaped-c22_42)"
" escaped-c_33)"
"((mode23_43)"
" mode_6))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in18_38"
" config19_39"
" temp20_40"
"(list"
" escaping-c21_41"
" escaped-c22_42"
" mode23_43)))))))"
"(begin"
"(let-values(((tmp_44) escaped-c_33))"
"(let-values(((index_45)"
"(if(char? tmp_44)"
"(let-values(((codepoint_46)"
"(char->integer"
" tmp_44)))"
"(if(if(unsafe-fx>="
" codepoint_46"
" 10)"
"(unsafe-fx<"
" codepoint_46"
" 121)"
" #f)"
"(let-values(((tbl_47)"
" '#(10"
" 0"
" 0"
" 11"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 15"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 2"
" 3"
" 0"
" 0"
" 9"
" 7"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 5"
" 0"
" 0"
" 0"
" 8"
" 0"
" 4"
" 14"
" 6"
" 0"
" 13)))"
"(unsafe-vector*-ref"
" tbl_47"
"(unsafe-fx-"
" codepoint_46"
" 10)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_45 7)"
"(if(unsafe-fx< index_45 3)"
"(if(unsafe-fx< index_45 1)"
"(let-values()"
"(unknown-error_34))"
"(if(unsafe-fx< index_45 2)"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" escaped-c_33))"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" '#\\u0007))))"
"(if(unsafe-fx< index_45 4)"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" '#\\backspace))"
"(if(unsafe-fx< index_45 5)"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" '#\\tab))"
"(if(unsafe-fx< index_45 6)"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" '#\\newline))"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" '#\\vtab))))))"
"(if(unsafe-fx< index_45 11)"
"(if(unsafe-fx< index_45 8)"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" '#\\page))"
"(if(unsafe-fx< index_45 9)"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" '#\\return))"
"(if(unsafe-fx< index_45 10)"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" '#\\u001B))"
"(let-values()(void)))))"
"(if(unsafe-fx< index_45 13)"
"(if(unsafe-fx< index_45 12)"
"(let-values()"
"(let-values(((maybe-newline-c_48)"
"(let-values(((in_49)"
" in_4)"
"((skip-count_51)"
" 0)"
"((source_52)"
" source_7))"
"(let-values(((c_53)"
"(peek-char-or-special"
" in_49"
" skip-count_51"
" 'special"
" source_52)))"
"(if(eq?"
" c_53"
" 'special)"
"(special1.1"
" 'special)"
" c_53)))))"
"(begin"
"(if(eqv?"
" maybe-newline-c_48"
" '#\\newline)"
"(let-values()"
"(consume-char"
" in_4"
" maybe-newline-c_48))"
"(void))"
"(void))))"
"(let-values()"
"(let-values(((pos_54)"
"(accum-string-count"
" accum-str_11)))"
"(let-values((()"
"(begin"
"(accum-string-add!"
" accum-str_11"
" escaped-c_33)"
"(values))))"
"(let-values(((init-v_55)"
"(digit->number"
" escaped-c_33)))"
"(let-values(((v_56)"
"(let-values(((in24_58)"
" in_4)"
"((config25_59)"
" config_5)"
"((accum-str26_60)"
" accum-str_11)"
"((temp27_61)"
" 8)"
"((temp28_62)"
" 2)"
"((init-v29_63)"
" init-v_55)"
"((init-v30_64)"
" init-v_55))"
"(read-digits12.1"
" temp27_61"
" init-v29_63"
" temp28_62"
" init-v30_64"
" in24_58"
" config25_59"
" accum-str26_60))))"
"(begin"
"(if(<= v_56 255)"
"(void)"
"(let-values()"
"(let-values(((in31_65)"
" in_4)"
"((config32_66)"
" config_5)"
"((temp33_67)"
"                                                                                                                        \"escape sequence `~a~a` is out of range in ~a\")"
"((escaping-c34_68)"
" escaping-c_32)"
"((temp35_69)"
"(let-values(((accum-str37_72)"
" accum-str_11)"
"((config38_73)"
" config_5)"
"((pos39_74)"
" pos_54))"
"(accum-string-get!6.1"
" pos39_74"
" accum-str37_72"
" config38_73)))"
"((mode36_70)"
" mode_6))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in31_65"
" config32_66"
" temp33_67"
"(list"
" escaping-c34_68"
" temp35_69"
" mode36_70)))))"
"(set-accum-string-count!"
" accum-str_11"
" pos_54)"
"(accum-string-add!"
" accum-str_11"
"(integer->char"
" v_56)))))))))"
"(if(unsafe-fx< index_45 14)"
"(let-values()"
"(let-values(((pos_75)"
"(accum-string-count"
" accum-str_11)))"
"(let-values(((v_76)"
"(let-values(((in40_78)"
" in_4)"
"((config41_79)"
" config_5)"
"((accum-str42_80)"
" accum-str_11)"
"((temp43_81)"
" 16)"
"((temp44_82)"
" 2))"
"(read-digits12.1"
" temp43_81"
" 0"
" temp44_82"
" #f"
" in40_78"
" config41_79"
" accum-str42_80))))"
"(begin"
"(if(integer? v_76)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_4"
" config_5"
" v_76"
" escaping-c_32"
" escaped-c_33)))"
"(set-accum-string-count!"
" accum-str_11"
" pos_75)"
"(accum-string-add!"
" accum-str_11"
"(integer->char"
" v_76))))))"
"(if(unsafe-fx< index_45 15)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(eq?"
" mode_6"
" 'string)"
"(void)"
"(let-values()"
"(unknown-error_34)))"
"(values))))"
"(let-values(((pos_83)"
"(accum-string-count"
" accum-str_11)))"
"(let-values(((v_84)"
"(let-values(((in45_86)"
" in_4)"
"((config46_87)"
" config_5)"
"((accum-str47_88)"
" accum-str_11)"
"((temp48_89)"
" 16)"
"((temp49_90)"
" 4))"
"(read-digits12.1"
" temp48_89"
" 0"
" temp49_90"
" #f"
" in45_86"
" config46_87"
" accum-str47_88))))"
"(begin"
"(if(integer?"
" v_84)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_4"
" config_5"
" v_84"
" escaping-c_32"
" escaped-c_33)))"
"(if(let-values(((or-part_91)"
"(<"
" v_84"
" 55296)))"
"(if or-part_91"
" or-part_91"
"(>"
" v_84"
" 57343)))"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_11"
" pos_83)"
"(accum-string-add!"
" accum-str_11"
"(integer->char"
" v_84))))"
"(let-values()"
"(let-values(((next!_92)"
"(lambda()"
"(begin"
" 'next!"
"(let-values(((next-c_94)"
"(let-values(((in_95)"
" in_4)"
"((source_97)"
" source_7))"
"(read-char-or-special"
" in_95"
" special1.1"
" source_97))))"
"(begin"
"(if(char?"
" next-c_94)"
"(let-values()"
"(accum-string-add!"
" accum-str_11"
" next-c_94))"
"(void))"
" next-c_94))))))"
"(let-values(((v2_93)"
"(let-values(((next-c_98)"
"(next!_92)))"
"(if(char=?"
" next-c_98"
" '#\\\\)"
"(let-values()"
"(let-values(((next-c_99)"
"(next!_92)))"
"(if(char=?"
" next-c_99"
" '#\\u)"
"(let-values()"
"(let-values(((v2_100)"
"(let-values(((in50_102)"
" in_4)"
"((config51_103)"
" config_5)"
"((accum-str52_104)"
" accum-str_11)"
"((temp53_105)"
" 16)"
"((temp54_106)"
" 4))"
"(read-digits12.1"
" temp53_105"
" 0"
" temp54_106"
" #f"
" in50_102"
" config51_103"
" accum-str52_104))))"
"(if(integer?"
" v2_100)"
"(let-values()"
"(if(>="
" v2_100"
" 56320)"
"(if(<="
" v2_100"
" 57343)"
" v2_100"
" #f)"
" #f))"
"(let-values()"
" v2_100))))"
"(let-values()"
" next-c_99))))"
"(let-values()"
" next-c_98)))))"
"(if(integer?"
" v2_93)"
"(let-values()"
"(let-values(((combined-v_107)"
"(+"
"(arithmetic-shift"
"(-"
" v_84"
" 55296)"
" 10)"
"(-"
" v2_93"
" 56320)"
" 65536)))"
"(if(>"
" combined-v_107"
" 1114111)"
"(let-values()"
"(let-values(((in55_108)"
" in_4)"
"((config56_109)"
" config_5)"
"((temp57_110)"
"                                                                                                                                      \"escape sequence `~au~a` is out of range in string\")"
"((escaping-c58_111)"
" escaping-c_32)"
"((temp59_112)"
"(let-values(((accum-str60_114)"
" accum-str_11)"
"((config61_115)"
" config_5)"
"((pos62_116)"
" pos_83))"
"(accum-string-get!6.1"
" pos62_116"
" accum-str60_114"
" config61_115))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in55_108"
" config56_109"
" temp57_110"
"(list"
" escaping-c58_111"
" temp59_112))))"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_11"
" pos_83)"
"(accum-string-add!"
" accum-str_11"
"(integer->char"
" combined-v_107)))))))"
"(let-values()"
"(let-values(((in63_118)"
" in_4)"
"((config64_119)"
" config_5)"
"((v265_120)"
" v2_93)"
"((temp66_121)"
"                                                                                                                                \"bad or incomplete surrogate-style encoding at `~au~a`\")"
"((escaping-c67_122)"
" escaping-c_32)"
"((temp68_123)"
"(let-values(((accum-str69_125)"
" accum-str_11)"
"((config70_126)"
" config_5)"
"((pos71_127)"
" pos_83))"
"(accum-string-get!6.1"
" pos71_127"
" accum-str69_125"
" config70_126))))"
"(reader-error12.1"
" unsafe-undefined"
" v265_120"
" #f"
" unsafe-undefined"
" in63_118"
" config64_119"
" temp66_121"
"(list"
" escaping-c67_122"
" temp68_123))))))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(eq?"
" mode_6"
" 'string)"
"(void)"
"(let-values()"
"(unknown-error_34)))"
"(values))))"
"(let-values(((pos_128)"
"(accum-string-count"
" accum-str_11)))"
"(let-values(((v_129)"
"(let-values(((in72_131)"
" in_4)"
"((config73_132)"
" config_5)"
"((accum-str74_133)"
" accum-str_11)"
"((temp75_134)"
" 16)"
"((temp76_135)"
" 8))"
"(read-digits12.1"
" temp75_134"
" 0"
" temp76_135"
" #f"
" in72_131"
" config73_132"
" accum-str74_133))))"
"(begin"
"(if(integer?"
" v_129)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_4"
" config_5"
" v_129"
" escaping-c_32"
" escaped-c_33)))"
"(if(if(let-values(((or-part_136)"
"(<"
" v_129"
" 55296)))"
"(if or-part_136"
" or-part_136"
"(>"
" v_129"
" 57343)))"
"(<="
" v_129"
" 1114111)"
" #f)"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_11"
" pos_128)"
"(accum-string-add!"
" accum-str_11"
"(integer->char"
" v_129))))"
"(let-values()"
"(let-values(((in77_137)"
" in_4)"
"((config78_138)"
" config_5)"
"((temp79_139)"
"                                                                                                                        \"escape sequence `~aU~a` is out of range in string\")"
"((escaping-c80_140)"
" escaping-c_32)"
"((temp81_141)"
"(let-values(((accum-str82_143)"
" accum-str_11)"
"((config83_144)"
" config_5)"
"((pos84_145)"
" pos_128))"
"(accum-string-get!6.1"
" pos84_145"
" accum-str82_143"
" config83_144))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in77_137"
" config78_138"
" temp79_139"
"(list"
" escaping-c80_140"
" temp81_141)))))))))))))))))"
"(loop_27)))))))"
"                                                                  (if (char=? '#\\\" c_28)"
"(let-values() null)"
"(let-values()"
"(begin"
"(if(eq? mode_6 '|byte string|)"
"(let-values()"
"(if(byte?(char->integer c_28))"
"(void)"
"(let-values()"
"(let-values(((in85_146) in_4)"
"((config86_147) config_5)"
"((temp87_148)"
"                                                                                              \"character `~a` is out of range in byte string\")"
"((c88_149) c_28))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in85_146"
" config86_147"
" temp87_148"
"(list c88_149))))))"
"(void))"
"(accum-string-add! accum-str_11 c_28)"
"(loop_27)))))))))))"
" loop_27))"
"(values))))"
"(let-values(((str_13)"
"(if(eq? mode_6 '|byte string|)"
"(let-values(((accum-str89_150) accum-str_11)((config90_151) config_5))"
"(accum-string-get-bytes!13.1 0 accum-str89_150 config90_151))"
"(let-values(((accum-str91_152) accum-str_11)((config92_153) config_5))"
"(accum-string-get!6.1 0 accum-str91_152 config92_153)))))"
"(wrap str_13 in_4 config_5 str_13))))))))))))))"
"(define-values"
"(read-here-string)"
"(lambda(in_0 config_0)"
"(begin"
"(let-values(((source_173)(read-config-source config_0)))"
"(let-values(((open-end-line_174 open-end-col_175 open-end-pos_176)(port-next-location in_0)))"
"(let-values(((accum-str_177)(accum-string-init! config_0)))"
"(let-values(((full-terminator_178)"
"(cons"
" '#\\newline"
"((letrec-values(((loop_180)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_181)"
"(let-values(((in_182) in_0)((source_184) source_173))"
"(read-char-or-special in_182 special1.1 source_184))))"
"(if(eof-object? c_181)"
"(let-values()"
"(let-values(((in93_186) in_0)"
"((config94_187) config_0)"
"((c95_188) c_181)"
"((temp96_189)"
"                                                                     \"found end-of-file after `#<<` and before a newline\"))"
"(reader-error12.1"
" unsafe-undefined"
" c95_188"
" #f"
" unsafe-undefined"
" in93_186"
" config94_187"
" temp96_189"
"(list))))"
"(if(not(char? c_181))"
"(let-values()"
"(let-values(((in97_191) in_0)"
"((config98_192) config_0)"
"((c99_193) c_181)"
"((temp100_194)"
"                                                                       \"found non-character while reading `#<<`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c99_193"
" #f"
" unsafe-undefined"
" in97_191"
" config98_192"
" temp100_194"
"(list))))"
"(if(char=? c_181 '#\\newline)"
"(let-values() null)"
"(let-values()(cons c_181(loop_180)))))))))))"
" loop_180)))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_195)"
"(lambda(terminator_0 terminator-accum_0)"
"(begin"
" 'loop"
"(let-values(((c_198)"
"(let-values(((in_199) in_0)"
"((source_201) source_173))"
"(read-char-or-special"
" in_199"
" special1.1"
" source_201))))"
"(if(eof-object? c_198)"
"(let-values()"
"(if(null? terminator_0)"
"(void)"
"(let-values()"
"(let-values(((in101_203) in_0)"
"((config102_204) config_0)"
"((c103_205) c_198)"
"((open-end-pos104_206) open-end-pos_176)"
"((temp105_207)"
"                                                                            \"found end-of-file before terminating `~a`\")"
"((temp106_208)"
"(list->string(cdr full-terminator_178))))"
"(reader-error12.1"
" unsafe-undefined"
" c103_205"
" open-end-pos104_206"
" unsafe-undefined"
" in101_203"
" config102_204"
" temp105_207"
"(list temp106_208))))))"
"(if(not(char? c_198))"
"(let-values()"
"(let-values(((in107_210) in_0)"
"((config108_211) config_0)"
"((c109_212) c_198)"
"((temp110_213)"
"                                                                          \"found non-character while reading `#<<`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c109_212"
" #f"
" unsafe-undefined"
" in107_210"
" config108_211"
" temp110_213"
"(list))))"
"(if(if(pair? terminator_0)"
"(char=? c_198(car terminator_0))"
" #f)"
"(let-values()"
"(loop_195"
"(cdr terminator_0)"
"(cons(car terminator_0) terminator-accum_0)))"
"(if(if(null? terminator_0)(char=? c_198 '#\\newline) #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(if(null? terminator-accum_0)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_214)"
"(reverse$1 terminator-accum_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_214)))"
"((letrec-values(((for-loop_215)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((c_217)"
"(unsafe-car"
" lst_0))"
"((rest_218)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(accum-string-add!"
" accum-str_177"
" c_217))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_215"
" rest_218)"
"(values))))"
"(values))))))"
" for-loop_215)"
" lst_214)))"
"(void))))"
"(if(char=? c_198 '#\\newline)"
"(let-values()"
"(loop_195"
"(cdr full-terminator_178)"
"(list '#\\newline)))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_177 c_198)"
"(loop_195"
" full-terminator_178"
" null)))))))))))))))"
" loop_195)"
"(cdr full-terminator_178)"
" null)"
"(values))))"
"(let-values(((str_179)"
"(let-values(((accum-str111_219) accum-str_177)((config112_220) config_0))"
"(accum-string-get!6.1 0 accum-str111_219 config112_220))))"
"(wrap str_179 in_0 config_0 str_179))))))))))"
"(define-values"
"(no-hex-digits)"
"(lambda(in_0 config_0 c_0 escaping-c_0 escaped-c_0)"
"(begin"
"(let-values(((in113_227) in_0)"
"((config114_228) config_0)"
"((c115_229) c_0)"
"                   ((temp116_230) \"no hex digit following `~a~a`\")"
"((escaping-c117_231) escaping-c_0)"
"((escaped-c118_232) escaped-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" c115_229"
" #f"
" unsafe-undefined"
" in113_227"
" config114_228"
" temp116_230"
"(list escaping-c117_231 escaped-c118_232))))))"
"(define-values"
"(read-character)"
"(lambda(in_0 config_0)"
"(begin"
"(let-values(((c_3)"
"(let-values(((in_5) in_0)((source_7)(read-config-source config_0)))"
"(read-char-or-special in_5 special1.1 source_7))))"
"(let-values(((char_4)"
"(if(eof-object? c_3)"
"(let-values()"
"(let-values(((in1_9) in_0)"
"((config2_10) config_0)"
"((c3_11) c_3)"
"                                       ((temp4_12) \"expected a character after `#\\\\`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c3_11"
" #f"
" unsafe-undefined"
" in1_9"
" config2_10"
" temp4_12"
"(list))))"
"(if(not(char? c_3))"
"(let-values()"
"(let-values(((in5_14) in_0)"
"((config6_15) config_0)"
"((c7_16) c_3)"
"                                         ((temp8_17) \"found non-character after `#\\\\`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c7_16"
" #f"
" unsafe-undefined"
" in5_14"
" config6_15"
" temp8_17"
"(list))))"
"(if(octal-digit? c_3)"
"(let-values()"
"(let-values(((c2_18)"
"(let-values(((in_19) in_0)"
"((skip-count_21) 0)"
"((source_22)(read-config-source config_0)))"
"(let-values(((c_23)"
"(peek-char-or-special"
" in_19"
" skip-count_21"
" 'special"
" source_22)))"
"(if(eq? c_23 'special)(special1.1 'special) c_23)))))"
"(if(if(char? c2_18)(octal-digit? c2_18) #f)"
"(let-values()"
"(let-values((()(begin(consume-char in_0 c2_18)(values))))"
"(let-values(((c3_24)"
"(let-values(((in_26) in_0)"
"((source_28)(read-config-source config_0)))"
"(read-char-or-special in_26 special1.1 source_28))))"
"(let-values(((v_25)"
"(if(if(char? c3_24)(octal-digit? c3_24) #f)"
"(let-values()"
"(+"
"(arithmetic-shift(digit->number c_3) 6)"
"(arithmetic-shift(digit->number c2_18) 3)"
"(digit->number c3_24)))"
"(let-values() #f))))"
"(begin"
"(if(if v_25(<= v_25 255) #f)"
"(void)"
"(let-values()"
"(let-values(((in9_30) in_0)"
"((config10_31) config_0)"
"((c311_32) c3_24)"
"                                                             ((temp12_33) \"bad character constant `#\\\\~a~a~a`\")"
"((c13_34) c_3)"
"((c214_35) c2_18)"
"                                                             ((temp15_36) (if (char? c3_24) c3_24 \"\")))"
"(reader-error12.1"
" unsafe-undefined"
" c311_32"
" #f"
" unsafe-undefined"
" in9_30"
" config10_31"
" temp12_33"
"(list c13_34 c214_35 temp15_36)))))"
"(integer->char v_25))))))"
"(let-values() c_3))))"
"(if(let-values(((or-part_37)(char=? c_3 '#\\u)))"
"(if or-part_37 or-part_37(char=? c_3 '#\\U)))"
"(let-values()"
"(let-values(((accum-str_38)(accum-string-init! config_0)))"
"(let-values(((v_39)"
"(let-values(((in16_41) in_0)"
"((config17_42) config_0)"
"((accum-str18_43) accum-str_38)"
"((temp19_44) 16)"
"((temp20_45)(if(char=? c_3 '#\\u) 4 8)))"
"(read-digits12.1"
" temp19_44"
" 0"
" temp20_45"
" #f"
" in16_41"
" config17_42"
" accum-str18_43))))"
"(if(integer? v_39)"
"(let-values()"
"(if(if(let-values(((or-part_46)(< v_39 55296)))"
"(if or-part_46 or-part_46(> v_39 57343)))"
"(<= v_39 1114111)"
" #f)"
"(let-values()"
"(begin(accum-string-abandon! accum-str_38 config_0)(integer->char v_39)))"
"(let-values()"
"(let-values(((in21_47) in_0)"
"((config22_48) config_0)"
"                                                         ((temp23_49) \"bad character constant `#\\\\u~a`\")"
"((temp24_50)"
"(let-values(((accum-str25_51) accum-str_38)"
"((config26_52) config_0))"
"(accum-string-get!6.1 0 accum-str25_51 config26_52))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in21_47"
" config22_48"
" temp23_49"
"(list temp24_50))))))"
"(let-values()(begin(accum-string-abandon! accum-str_38 config_0) c_3))))))"
"(if(char-alphabetic? c_3)"
"(let-values()"
"(let-values(((next-c_53)"
"(let-values(((in_54) in_0)"
"((skip-count_56) 0)"
"((source_57)(read-config-source config_0)))"
"(let-values(((c_58)"
"(peek-char-or-special"
" in_54"
" skip-count_56"
" 'special"
" source_57)))"
"(if(eq? c_58 'special)(special1.1 'special) c_58)))))"
"(if(if(char? next-c_53)(char-alphabetic? next-c_53) #f)"
"(let-values()"
"(let-values(((accum-str_59)(accum-string-init! config_0)))"
"(let-values((()(begin(accum-string-add! accum-str_59 c_3)(values))))"
"(let-values((()"
"(begin(accum-string-add! accum-str_59 next-c_53)(values))))"
"(let-values((()(begin(consume-char in_0 next-c_53)(values))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_61)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((next-c_62)"
"(let-values(((in_63)"
" in_0)"
"((skip-count_65)"
" 0)"
"((source_66)"
"(read-config-source"
" config_0)))"
"(let-values(((c_67)"
"(peek-char-or-special"
" in_63"
" skip-count_65"
" 'special"
" source_66)))"
"(if(eq?"
" c_67"
" 'special)"
"(special1.1"
" 'special)"
" c_67)))))"
"(if(if(char? next-c_62)"
"(char-alphabetic?"
" next-c_62)"
" #f)"
"(let-values()"
"(begin"
"(accum-string-add!"
" accum-str_59"
" next-c_62)"
"(consume-char"
" in_0"
" next-c_62)"
"(loop_61)))"
"(void)))))))"
" loop_61))"
"(values))))"
"(let-values(((name_60)"
"(string-foldcase"
"(let-values(((accum-str27_68) accum-str_59)"
"((config28_69) config_0))"
"(accum-string-get!6.1"
" 0"
" accum-str27_68"
" config28_69)))))"
"(let-values(((tmp_70) name_60))"
"                                                      (if (if (equal? tmp_70 \"nul\") #t (equal? tmp_70 \"null\"))"
"(let-values() '#\\nul)"
"                                                        (if (equal? tmp_70 \"backspace\")"
"(let-values() '#\\backspace)"
"                                                          (if (equal? tmp_70 \"tab\")"
"(let-values() '#\\tab)"
"                                                            (if (if (equal? tmp_70 \"newline\")"
" #t"
"                                                                  (equal? tmp_70 \"linefeed\"))"
"(let-values() '#\\newline)"
"                                                              (if (equal? tmp_70 \"vtab\")"
"(let-values() '#\\vtab)"
"                                                                (if (equal? tmp_70 \"page\")"
"(let-values() '#\\page)"
"                                                                  (if (equal? tmp_70 \"return\")"
"(let-values() '#\\return)"
"                                                                    (if (equal? tmp_70 \"space\")"
"(let-values() '#\\space)"
"                                                                      (if (equal? tmp_70 \"rubout\")"
"(let-values() '#\\rubout)"
"(let-values()"
"(let-values(((in29_71) in_0)"
"((config30_72) config_0)"
"((temp31_73)"
"                                                                                        \"bad character constant `#\\\\~a`\")"
"((name32_74) name_60))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in29_71"
" config30_72"
" temp31_73"
"(list name32_74)))))))))))))))))))))"
"(let-values() c_3))))"
"(let-values() c_3))))))))"
"(wrap char_4 in_0 config_0 char_4))))))"
"(define-values"
"(read-quote)"
"(lambda(read-one_0 sym_0 desc_0 c_0 in_0 config_0)"
"(begin"
"(let-values(((wrapped-sym_7)(wrap sym_0 in_0 config_0 c_0)))"
"(let-values(((end-line_8 end-col_9 end-pos_10)(port-next-location in_0)))"
"(let-values(((e_11)(read-one_0 #f in_0 config_0)))"
"(begin"
"(if(eof-object? e_11)"
"(let-values()"
"(let-values(((in1_13) in_0)"
"((config2_14) config_0)"
"((e3_15) e_11)"
"((end-pos4_16) end-pos_10)"
"                               ((temp5_17) \"expected an element for ~a, found end-of-file\")"
"((desc6_18) desc_0))"
"(reader-error12.1"
" unsafe-undefined"
" e3_15"
" end-pos4_16"
" unsafe-undefined"
" in1_13"
" config2_14"
" temp5_17"
"(list desc6_18))))"
"(void))"
"(wrap(list wrapped-sym_7 e_11) in_0 config_0 #f))))))))"
"(define-values"
"(read-delimited-constant)"
"(lambda(init-c_0 can-match?_0 chars_0 val_0 in_0 config_0)"
"(begin"
"(let-values(((accum-str_7)(accum-string-init! config_0)))"
"(begin"
"(accum-string-add! accum-str_7 init-c_0)"
"((letrec-values(((loop_8)"
"(lambda(chars_1)"
"(begin"
" 'loop"
"(let-values(((c_10)"
"(let-values(((in_11) in_0)"
"((skip-count_13) 0)"
"((source_14)(read-config-source config_0)))"
"(let-values(((c_15)"
"(peek-char-or-special"
" in_11"
" skip-count_13"
" 'special"
" source_14)))"
"(if(eq? c_15 'special)(special1.1 'special) c_15)))))"
"(if(char-delimiter? c_10 config_0)"
"(let-values()"
"(if(null? chars_1)"
"(void)"
"(let-values()"
"(let-values(((in1_17) in_0)"
"((config2_18) config_0)"
"((c3_19) c_10)"
"                                                       ((temp4_20) \"bad syntax `#~a`\")"
"((temp5_21)"
"(let-values(((accum-str6_22) accum-str_7)"
"((config7_23) config_0))"
"(accum-string-get!6.1 0 accum-str6_22 config7_23))))"
"(reader-error12.1"
" unsafe-undefined"
" c3_19"
" #f"
" unsafe-undefined"
" in1_17"
" config2_18"
" temp4_20"
"(list temp5_21))))))"
"(if(null? chars_1)"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_7 c_10)"
"(let-values(((in8_24) in_0)"
"((config9_25) config_0)"
"                                                       ((temp10_26) \"bad syntax `#~a`\")"
"((temp11_27)"
"(let-values(((accum-str12_28) accum-str_7)"
"((config13_29) config_0))"
"(accum-string-get!6.1 0 accum-str12_28 config13_29))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in8_24"
" config9_25"
" temp10_26"
"(list temp11_27)))))"
"(if(if can-match?_0(char=? c_10(car chars_1)) #f)"
"(let-values()"
"(begin"
"(consume-char in_0 c_10)"
"(accum-string-add! accum-str_7 c_10)"
"(loop_8(cdr chars_1))))"
"(let-values()"
"(begin"
"(consume-char/special in_0 config_0 c_10)"
"(accum-string-add! accum-str_7 c_10)"
"(let-values(((in14_30) in_0)"
"((config15_31) config_0)"
"                                                         ((temp16_32) \"bad syntax `#~a`\")"
"((temp17_33)"
"(let-values(((accum-str18_34) accum-str_7)"
"((config19_35) config_0))"
"(accum-string-get!6.1 0 accum-str18_34 config19_35))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in14_30"
" config15_31"
" temp16_32"
"(list temp17_33)))))))))))))"
" loop_8)"
" chars_0)"
"(wrap"
" val_0"
" in_0"
" config_0"
"(let-values(((accum-str20_36) accum-str_7)((config21_37) config_0))"
"(accum-string-get!6.1 0 accum-str20_36 config21_37))))))))"
"(define-values"
"(read-box)"
"(lambda(read-one_0 dispatch-c_0 in_0 config_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(check-parameter 1/read-accept-box config_0)"
"(void)"
"(let-values()"
"(let-values(((in1_9) in_0)"
"((config2_10) config_0)"
"                                       ((temp3_11) \"`~a&` forms not enabled\")"
"((dispatch-c4_12) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in1_9"
" config2_10"
" temp3_11"
"(list dispatch-c4_12)))))"
"(values))))"
"(let-values(((open-end-line_5 open-end-col_6 open-end-pos_7)(port-next-location in_0)))"
"(let-values(((e_8)(read-one_0 #f in_0(next-readtable config_0))))"
"(begin"
"(if(eof-object? e_8)"
"(let-values()"
"(let-values(((in5_14) in_0)"
"((config6_15) config_0)"
"((e7_16) e_8)"
"((open-end-pos8_17) open-end-pos_7)"
"                               ((temp9_18) \"expected an element for `~a&` box, found end-of-file\")"
"((dispatch-c10_19) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" e7_16"
" open-end-pos8_17"
" unsafe-undefined"
" in5_14"
" config6_15"
" temp9_18"
"(list dispatch-c10_19))))"
"(void))"
"(wrap(box e_8) in_0 config_0 #f))))))))"
"(define-values"
"(read-regexp)"
"(lambda(mode-c_0 accum-str_0 in_0 config_0)"
"(begin"
"(let-values(((c3_5)"
"(let-values(((in_8) in_0)((source_10)(read-config-source config_0)))"
"(read-char-or-special in_8 special1.1 source_10))))"
"(let-values(((no-wrap-config_6)(disable-wrapping config_0)))"
"(let-values(((rx_7)"
"(let-values(((tmp_11) c3_5))"
"                          (if (equal? tmp_11 '#\\\")"
"(let-values()"
"(let-values((()(begin(accum-string-abandon! accum-str_0 config_0)(values))))"
"(let-values(((str_12)"
"(let-values(((in1_13) in_0)((no-wrap-config2_14) no-wrap-config_6))"
"(read-string5.1 'string in1_13 no-wrap-config2_14))))"
"(catch-and-reraise-as-reader/proc"
" in_0"
" config_0"
"(lambda()((if(char=? mode-c_0 '#\\r) regexp pregexp) str_12))))))"
"(if(equal? tmp_11 '#\\#)"
"(let-values()"
"(let-values((()(begin(accum-string-add! accum-str_0 c3_5)(values))))"
"(let-values(((c4_15)"
"(let-values(((in_16) in_0)((source_18)(read-config-source config_0)))"
"(read-char-or-special in_16 special1.1 source_18))))"
"(let-values(((tmp_19) c4_15))"
"                                      (if (equal? tmp_19 '#\\\")"
"(let-values()"
"(let-values((()"
"(begin(accum-string-abandon! accum-str_0 config_0)(values))))"
"(let-values(((bstr_20)"
"(let-values(((in3_22) in_0)"
"((no-wrap-config4_23) no-wrap-config_6)"
"((temp5_24) '|byte string|))"
"(read-string5.1 temp5_24 in3_22 no-wrap-config4_23))))"
"(catch-and-reraise-as-reader/proc"
" in_0"
" config_0"
"(lambda()"
"((if(char=? mode-c_0 '#\\r) byte-regexp byte-pregexp) bstr_20))))))"
"(let-values()"
"(let-values(((in6_26) in_0)"
"((config7_27) config_0)"
"((c48_28) c4_15)"
"                                                       ((temp9_29) \"expected `\\\"` after `~a`\")"
"((temp10_30)"
"(let-values(((accum-str11_31) accum-str_0)"
"((config12_32) config_0))"
"(accum-string-get!6.1 0 accum-str11_31 config12_32))))"
"(reader-error12.1"
" unsafe-undefined"
" c48_28"
" #f"
" unsafe-undefined"
" in6_26"
" config7_27"
" temp9_29"
"(list temp10_30)))))))))"
"(let-values()"
"(let-values(((in13_34) in_0)"
"((config14_35) config_0)"
"((c315_36) c3_5)"
"                                             ((temp16_37) \"expected `\\\"` or `#` after `~a`\")"
"((temp17_38)"
"(let-values(((accum-str18_39) accum-str_0)((config19_40) config_0))"
"(accum-string-get!6.1 0 accum-str18_39 config19_40))))"
"(reader-error12.1"
" unsafe-undefined"
" c315_36"
" #f"
" unsafe-undefined"
" in13_34"
" config14_35"
" temp16_37"
"(list temp17_38)))))))))"
"(wrap rx_7 in_0 config_0 #f)))))))"
"(define-values"
"(read-extension-reader)"
"(lambda(read-one_0 read-recur_0 dispatch-c_0 in_0 config_0)"
"(begin"
"(let-values(((extend-str_11)"
"(read-extension-prefix(cons dispatch-c_0 '(#\\r #\\e)) '(#\\a #\\d #\\e #\\r) in_0 config_0)))"
"(let-values((()"
"(begin"
"(if(check-parameter 1/read-accept-reader config_0)"
"(void)"
"(let-values()"
"(let-values(((in52_13) in_0)"
"((config53_14) config_0)"
"                                         ((temp54_15) \"`~a` not enabled\")"
"((extend-str55_16) extend-str_11))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in52_13"
" config53_14"
" temp54_15"
"(list extend-str55_16)))))"
"(values))))"
"(let-values(((mod-path-wrapped_12)(read-one_0 #f in_0(next-readtable config_0))))"
"(begin"
"(if(eof-object? mod-path-wrapped_12)"
"(let-values()"
"(let-values(((in56_18) in_0)"
"((config57_19) config_0)"
"((mod-path-wrapped58_20) mod-path-wrapped_12)"
"                               ((temp59_21) \"expected a datum after `~a`, found end-of-file\")"
"((extend-str60_22) extend-str_11))"
"(reader-error12.1"
" unsafe-undefined"
" mod-path-wrapped58_20"
" #f"
" unsafe-undefined"
" in56_18"
" config57_19"
" temp59_21"
"(list extend-str60_22))))"
"(void))"
"(let-values(((temp47_24)((read-config-coerce config_0) #f mod-path-wrapped_12 #f))"
"((read-recur48_25) read-recur_0)"
"((in49_26) in_0)"
"((config50_27) config_0)"
"((mod-path-wrapped51_28) mod-path-wrapped_12))"
"(read-extension44.1"
" #f"
" mod-path-wrapped51_28"
" #f"
" '|#reader|"
" temp47_24"
" read-recur48_25"
" in49_26"
" config50_27)))))))))"
"(define-values"
"(read-extension-lang7.1)"
"(lambda(get-info?1_0 read-recur3_0 dispatch-c4_0 in5_0 config6_0)"
"(begin"
" 'read-extension-lang7"
"(let-values(((read-recur_34) read-recur3_0))"
"(let-values(((dispatch-c_35) dispatch-c4_0))"
"(let-values(((in_36) in5_0))"
"(let-values(((config_37) config6_0))"
"(let-values(((get-info?_38) get-info?1_0))"
"(let-values()"
"(let-values(((extend-str_39)"
"(read-extension-prefix(cons dispatch-c_35 '(#\\l)) '(#\\a #\\n #\\g) in_36 config_37)))"
"(let-values(((c_40)"
"(let-values(((in_41) in_36)((source_43)(read-config-source config_37)))"
"(read-char-or-special in_41 special1.1 source_43))))"
"(begin"
"(if(char=? c_40 '#\\space)"
"(void)"
"(let-values()"
"(let-values(((in67_44) in_36)"
"((config68_45) config_37)"
"                                         ((temp69_46) \"expected a single space after `~a`\")"
"((extend-str70_47) extend-str_39))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in67_44"
" config68_45"
" temp69_46"
"(list extend-str70_47)))))"
"(let-values(((extend-str61_49) extend-str_39)"
"((read-recur62_50) read-recur_34)"
"((in63_51) in_36)"
"((config64_52) config_37)"
"((temp65_53) '|#lang|)"
"((get-info?66_54) get-info?_38))"
"(read-lang29.1"
" get-info?66_54"
" #f"
" temp65_53"
" extend-str61_49"
" read-recur62_50"
" in63_51"
" config64_52))))))))))))))"
"(define-values"
"(read-extension-#!16.1)"
"(lambda(get-info?10_0 read-recur12_0 dispatch-c13_0 in14_0 config15_0)"
"(begin"
" 'read-extension-#!16"
"(let-values(((read-recur_83) read-recur12_0))"
"(let-values(((dispatch-c_84) dispatch-c13_0))"
"(let-values(((in_85) in14_0))"
"(let-values(((config_86) config15_0))"
"(let-values(((get-info?_87) get-info?10_0))"
"(let-values()"
"(let-values(((c_88)"
"(let-values(((in_89) in_85)((source_91)(read-config-source config_86)))"
"(read-char-or-special in_89 special1.1 source_91))))"
"(begin"
"(if(char-lang-nonsep? c_88)"
"(void)"
"(let-values()"
"(let-values(((in78_92) in_85)"
"((config79_93) config_86)"
"((temp80_94)"
"(if(char? c_88)(string dispatch-c_84 '#\\! c_88)(string dispatch-c_84 '#\\!))))"
"(bad-syntax-error20.1 '#\\x in78_92 config79_93 temp80_94))))"
"(let-values(((temp71_96)(string dispatch-c_84 '#\\!))"
"((read-recur72_97) read-recur_83)"
"((in73_98) in_85)"
"((config74_99) config_86)"
"((c75_100) c_88)"
"((temp76_101) '|#!|)"
"((get-info?77_102) get-info?_87))"
"(read-lang29.1"
" get-info?77_102"
" c75_100"
" temp76_101"
" temp71_96"
" read-recur72_97"
" in73_98"
" config74_99)))))))))))))"
"(define-values"
"(read-lang29.1)"
"(lambda(get-info?20_0 init-c19_0 who21_0 extend-str25_0 read-recur26_0 in27_0 config28_0)"
"(begin"
" 'read-lang29"
"(let-values(((extend-str_143) extend-str25_0))"
"(let-values(((read-recur_144) read-recur26_0))"
"(let-values(((in_145) in27_0))"
"(let-values(((config_146) config28_0))"
"(let-values(((init-c_147) init-c19_0))"
"(let-values(((get-info?_148) get-info?20_0))"
"(let-values(((who_149) who21_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(check-parameter 1/read-accept-reader config_146)"
"(check-parameter 1/read-accept-lang config_146)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in88_157) in_145)"
"((config89_158) config_146)"
"                                                       ((temp90_159) \"`~a` not enabled\")"
"((extend-str91_160) extend-str_143))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in88_157"
" config89_158"
" temp90_159"
"(list extend-str91_160)))))"
"(values))))"
"(let-values(((line_150 col_151 pos_152)(port-next-location in_145)))"
"(let-values(((accum-str_153)(accum-string-init! config_146)))"
"(let-values((()"
"(begin"
"(if init-c_147"
"(let-values()(accum-string-add! accum-str_153 init-c_147))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_161)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_162)"
"(let-values(((in_163) in_145)"
"((skip-count_165) 0)"
"((source_166)"
"(read-config-source"
" config_146)))"
"(let-values(((c_167)"
"(peek-char-or-special"
" in_163"
" skip-count_165"
" 'special"
" source_166)))"
"(if(eq? c_167 'special)"
"(special1.1 'special)"
" c_167)))))"
"(if(eof-object? c_162)"
"(let-values()(void))"
"(if(not(char? c_162))"
"(let-values()"
"(begin"
"(consume-char/special"
" in_145"
" config_146"
" c_162)"
"(let-values(((in92_169) in_145)"
"((config93_170) config_146)"
"((c94_171) c_162)"
"((temp95_172)"
"                                                                                            \"found non-character while reading `#~a`\")"
"((extend-str96_173)"
" extend-str_143))"
"(reader-error12.1"
" unsafe-undefined"
" c94_171"
" #f"
" unsafe-undefined"
" in92_169"
" config93_170"
" temp95_172"
"(list extend-str96_173)))))"
"(if(char-whitespace? c_162)"
"(let-values()(void))"
"(if(let-values(((or-part_174)"
"(char-lang-nonsep?"
" c_162)))"
"(if or-part_174"
" or-part_174"
"(char=? '#\\/ c_162)))"
"(let-values()"
"(begin"
"(consume-char in_145 c_162)"
"(accum-string-add!"
" accum-str_153"
" c_162)"
"(loop_161)))"
"(let-values()"
"(begin"
"(consume-char in_145 c_162)"
"(let-values(((in97_175) in_145)"
"((config98_176)"
" config_146)"
"((temp99_177)"
"(string-append"
"                                                                                                 \"expected only alphanumeric, `-`, `+`, `_`, or `/`\""
"                                                                                                 \" characters for `~a`, found `~a`\"))"
"((extend-str100_178)"
" extend-str_143)"
"((c101_179) c_162))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in97_175"
" config98_176"
" temp99_177"
"(list"
" extend-str100_178"
" c101_179))))))))))))))"
" loop_161))"
"(values))))"
"(let-values(((lang-str_154)"
"(let-values(((accum-str102_180) accum-str_153)"
"((config103_181) config_146))"
"(accum-string-get!6.1 0 accum-str102_180 config103_181))))"
"(let-values((()"
"(begin"
"                                                  (if (equal? lang-str_154 \"\")"
"(let-values()"
"(let-values(((in104_182) in_145)"
"((config105_183) config_146)"
"((temp106_184)"
"                                                                    \"expected a non-empty sequence of alphanumeric, `-`, `+`, `_`, or `/` after `~a`\")"
"((extend-str107_185) extend-str_143))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in104_182"
" config105_183"
" temp106_184"
"(list extend-str107_185))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(char=? '#\\/(string-ref lang-str_154 0))"
"(let-values()"
"(let-values(((in108_186) in_145)"
"((config109_187) config_146)"
"((temp110_188)"
"                                                                      \"expected a name that does not start `/` after `~a`\")"
"((extend-str111_189) extend-str_143))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in108_186"
" config109_187"
" temp110_188"
"(list extend-str111_189))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(char=?"
" '#\\/"
"(string-ref"
" lang-str_154"
"(sub1(string-length lang-str_154))))"
"(let-values()"
"(let-values(((in112_190) in_145)"
"((config113_191) config_146)"
"((temp114_192)"
"                                                                        \"expected a name that does not end `/` after `~a`\")"
"((extend-str115_193) extend-str_143))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in112_190"
" config113_191"
" temp114_192"
"(list extend-str115_193))))"
"(void))"
"(values))))"
"(let-values(((submod-path_155)"
"(list* 'submod(string->symbol lang-str_154) '(reader))))"
"(let-values(((reader-path_156)"
"                                                        (string->symbol (string-append lang-str_154 \"/lang/reader\"))))"
"(let-values(((submod-path81_195) submod-path_155)"
"((reader-path82_196) reader-path_156)"
"((read-recur83_197) read-recur_144)"
"((in84_198) in_145)"
"((temp85_199)(reading-at config_146 line_150 col_151 pos_152))"
"((get-info?86_200) get-info?_148)"
"((who87_201) who_149))"
"(read-extension44.1"
" get-info?86_200"
" unsafe-undefined"
" submod-path81_195"
" who87_201"
" reader-path82_196"
" read-recur83_197"
" in84_198"
" temp85_199))))))))))))))))))))))))"
"(define-values"
"(char-lang-nonsep?)"
"(lambda(c_0)"
"(begin"
"(if(<(char->integer c_0) 128)"
"(let-values(((or-part_226)(char-alphabetic? c_0)))"
"(if or-part_226"
" or-part_226"
"(let-values(((or-part_227)(char-numeric? c_0)))"
"(if or-part_227"
" or-part_227"
"(let-values(((or-part_228)(char=? '#\\- c_0)))"
"(if or-part_228"
" or-part_228"
"(let-values(((or-part_229)(char=? '#\\+ c_0)))"
"(if or-part_229 or-part_229(char=? '#\\_ c_0)))))))))"
" #f))))"
"(define-values"
"(read-extension-prefix)"
"(lambda(already_0 wanted_0 in_0 config_0)"
"(begin"
"(let-values(((accum-str_234)(accum-string-init! config_0)))"
"(begin"
"(let-values(((lst_235) already_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_235)))"
"((letrec-values(((for-loop_236)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((c_238)(unsafe-car lst_0))((rest_239)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(accum-string-add! accum-str_234 c_238))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_236 rest_239)(values))))"
"(values))))))"
" for-loop_236)"
" lst_235)))"
"(void)"
"((letrec-values(((loop_240)"
"(lambda(wanted_1)"
"(begin"
" 'loop"
"(if(null? wanted_1)"
"(void)"
"(let-values()"
"(let-values(((c_242)"
"(let-values(((in_243) in_0)"
"((source_245)(read-config-source config_0)))"
"(read-char-or-special in_243 special1.1 source_245))))"
"(begin"
"(if(char? c_242)"
"(let-values()(accum-string-add! accum-str_234 c_242))"
"(void))"
"(if(eqv? c_242(car wanted_1))"
"(void)"
"(let-values()"
"(let-values(((in118_247) in_0)"
"((config119_248) config_0)"
"((temp120_249)"
"(let-values(((accum-str122_251) accum-str_234)"
"((config123_252) config_0))"
"(accum-string-get!6.1 0 accum-str122_251 config123_252)))"
"((c121_250) c_242))"
"(bad-syntax-error20.1 c121_250 in118_247 config119_248 temp120_249))))"
"(loop_240(cdr wanted_1))))))))))"
" loop_240)"
" wanted_0)"
"(let-values(((accum-str116_253) accum-str_234)((config117_254) config_0))"
"(accum-string-get!6.1 0 accum-str116_253 config117_254)))))))"
"(define-values"
"(read-extension44.1)"
"(lambda(get-info?34_0"
" mod-path-wrapped33_0"
" try-first-mod-path32_0"
" who35_0"
" mod-path-datum40_0"
" read-recur41_0"
" in42_0"
" config43_0)"
"(begin"
" 'read-extension44"
"(let-values(((try-first-mod-path_263) try-first-mod-path32_0))"
"(let-values(((mod-path-datum_264) mod-path-datum40_0))"
"(let-values(((read-recur_265) read-recur41_0))"
"(let-values(((in_266) in42_0))"
"(let-values(((config_267) config43_0))"
"(let-values(((mod-path-wrapped_268)"
"(if(eq? mod-path-wrapped33_0 unsafe-undefined)"
"((read-config-coerce config_267)"
" #t"
" mod-path-datum_264"
"(let-values(((in124_269) in_266)((config125_270) config_267))"
"(port+config->srcloc49.1 #f in124_269 config125_270)))"
" mod-path-wrapped33_0)))"
"(let-values(((get-info?_271) get-info?34_0))"
"(let-values(((who_272) who35_0))"
"(let-values()"
"(let-values((()(begin(force-parameters! config_267)(values))))"
"(let-values(((guard_273)(1/current-reader-guard)))"
"(let-values(((mod-path_274)"
"(let-values(((or-part_279)"
"(if try-first-mod-path_263"
"(let-values(((mod-path_280)"
"(guard_273 try-first-mod-path_263)))"
"(if((read-config-module-declared? config_267)"
" try-first-mod-path_263)"
" mod-path_280"
" #f))"
" #f)))"
"(if or-part_279 or-part_279(guard_273 mod-path-datum_264)))))"
"(let-values(((for-syntax?_275)(read-config-for-syntax? config_267)))"
"(let-values(((dynamic-require_276)(read-config-dynamic-require config_267)))"
"(let-values(((no-value_277)(gensym)))"
"(let-values(((extension_278)"
"(if get-info?_271"
"(let-values()"
"(dynamic-require_276"
" mod-path_274"
" 'get-info"
"(lambda() no-value_277)))"
"(let-values()"
"(dynamic-require_276"
" mod-path_274"
"(if for-syntax?_275 'read-syntax 'read))))))"
"(if(eq? extension_278 no-value_277)"
"(let-values() #f)"
"(let-values()"
"(let-values(((result-v_281)"
"(if(if for-syntax?_275(not get-info?_271) #f)"
"(let-values()"
"(if(procedure-arity-includes? extension_278 6)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_267)"
"(let-values()"
"(extension_278"
"(read-config-source config_267)"
" in_266"
" mod-path-wrapped_268"
"(read-config-line config_267)"
"(read-config-col config_267)"
"(read-config-pos config_267)))))"
"(if(procedure-arity-includes? extension_278 2)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-read-config"
" config_267)"
"(let-values()"
"(extension_278"
"(read-config-source config_267)"
" in_266))))"
"(let-values()"
"(raise-argument-error"
" who_272"
"                                                                   \"(or/c (procedure-arity-includes?/c 2) (procedure-arity-includes?/c 6))\""
" extension_278)))))"
"(let-values()"
"(if(procedure-arity-includes? extension_278 5)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_267)"
"(let-values()"
"(extension_278"
" in_266"
" mod-path-wrapped_268"
"(read-config-line config_267)"
"(read-config-col config_267)"
"(read-config-pos config_267)))))"
"(if get-info?_271"
"(let-values()"
"(raise-argument-error"
" who_272"
"                                                                   \"(procedure-arity-includes?/c 5)\""
" extension_278))"
"(if(procedure-arity-includes? extension_278 1)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-read-config"
" config_267)"
"(let-values()(extension_278 in_266))))"
"(let-values()"
"(raise-argument-error"
" who_272"
"                                                                     \"(or/c (procedure-arity-includes?/c 1) (procedure-arity-includes?/c 5))\""
" extension_278)))))))))"
"(if get-info?_271"
"(let-values()"
"(begin"
"(if(if(procedure? result-v_281)"
"(procedure-arity-includes? result-v_281 2)"
" #f)"
"(void)"
"(let-values()"
"(raise-result-error"
" 'read-language"
"                                                       \"(procedure-arity-includes?/c 2)\""
" result-v_281)))"
" result-v_281))"
"(if(1/special-comment? result-v_281)"
"(let-values()(read-recur_265 #f in_266 config_267))"
"(let-values()"
"(coerce result-v_281 in_266 config_267))))))))))))))))))))))))))"
"(define-values"
"(read-language/get-info)"
"(lambda(read-one_0 in_0 config_0 fail-k_0)"
"(begin"
"(let-values(((c_5)(read-char/skip-whitespace-and-comments #f read-one_0 in_0 config_0)))"
"(let-values(((line_6 col_7 pos_8)(port-next-location* in_0 c_5)))"
"(let-values(((l-config_9)"
"(override-parameter 1/read-accept-reader(reading-at config_0 line_6 col_7 pos_8) #t)))"
"(if(not(eqv? c_5 '#\\#))"
"              (let-values () (if fail-k_0 (fail-k_0) (lang-error in_0 l-config_9 \"\" c_5)))"
"(let-values()"
"(let-values(((c2_10)"
"(let-values(((in_11) in_0)((source_13)(read-config-source l-config_9)))"
"(read-char-or-special in_11 special1.1 source_13))))"
"(if(eqv? c2_10 '#\\l)"
"(let-values()"
"(let-values(((read-one1_15) read-one_0)"
"((c2_16) c_5)"
"((in3_17) in_0)"
"((l-config4_18) l-config_9)"
"((temp5_19) #t))"
"(read-extension-lang7.1 temp5_19 read-one1_15 c2_16 in3_17 l-config4_18)))"
"(if(eqv? c2_10 '#\\!)"
"(let-values()"
"(let-values(((read-one6_21) read-one_0)"
"((c7_22) c_5)"
"((in8_23) in_0)"
"((l-config9_24) l-config_9)"
"((temp10_25) #t))"
"(read-extension-#!16.1 temp10_25 read-one6_21 c7_22 in8_23 l-config9_24)))"
"(let-values()"
"(if fail-k_0(fail-k_0)(lang-error in_0 l-config_9(string c_5) c2_10))))))))))))))"
"(define-values"
"(lang-error)"
"(lambda(in_0 config_0 prefix_0 c_0)"
"(begin"
"(let-values(((add-prefix_30)"
"(lambda(s_0)"
"                      (begin 'add-prefix (if (string=? prefix_0 \"\") (format \"`~a` followed by ~a\" prefix_0 s_0) s_0)))))"
"(let-values(((in11_33) in_0)"
"((config12_34) config_0)"
"((c13_35) c_0)"
"((temp14_36) 'read-language)"
"((temp15_37)"
"(string-append"
"                       \"expected (after whitespace and comments) `#lang ` or `#!` followed\""
"                       \" immediately by a language name, found ~a\"))"
"((temp16_38)"
"(if(eof-object? c_0)"
"                        (let-values () (add-prefix_30 \"end-of-file\"))"
"(if(not(char? c_0))"
"                          (let-values () (add-prefix_30 \"non-character\"))"
"                          (let-values () (format \"`~a~a`\" prefix_0 c_0))))))"
"(reader-error12.1 unsafe-undefined c13_35 #f temp14_36 in11_33 config12_34 temp15_37(list temp16_38)))))))"
"(define-values"
"(read30.1)"
"(lambda(coerce12_0"
" coerce-key13_0"
" dynamic-require10_0"
" for-syntax?8_0"
" init-c2_0"
" keep-comment?14_0"
" local-graph?6_0"
" module-declared?11_0"
" next-readtable3_0"
" read-compiled9_0"
" readtable4_0"
" recursive?5_0"
" source7_0"
" wrap1_0"
" in29_0)"
"(begin"
" 'read30"
"(let-values(((in_16) in29_0))"
"(let-values(((wrap_17) wrap1_0))"
"(let-values(((init-c_18) init-c2_0))"
"(let-values(((next-readtable_19)"
"(if(eq? next-readtable3_0 unsafe-undefined)(1/current-readtable) next-readtable3_0)))"
"(let-values(((readtable_20)(if(eq? readtable4_0 unsafe-undefined) next-readtable_19 readtable4_0)))"
"(let-values(((recursive?_21) recursive?5_0))"
"(let-values(((local-graph?_22) local-graph?6_0))"
"(let-values(((source_23) source7_0))"
"(let-values(((for-syntax?_24) for-syntax?8_0))"
"(let-values(((read-compiled_25) read-compiled9_0))"
"(let-values(((dynamic-require_26) dynamic-require10_0))"
"(let-values(((module-declared?_27) module-declared?11_0))"
"(let-values(((coerce_28) coerce12_0))"
"(let-values(((coerce-key_29) coerce-key13_0))"
"(let-values(((keep-comment?_30)"
"(if(eq? keep-comment?14_0 unsafe-undefined)"
" recursive?_21"
" keep-comment?14_0)))"
"(let-values()"
"(let-values(((config_31)"
"(let-values(((c1_33)(if recursive?_21(current-read-config) #f)))"
"(if c1_33"
"((lambda(config_0)"
"(let-values(((config52_36) config_0)"
"((for-syntax?53_37) for-syntax?_24)"
"((wrap54_38) wrap_17)"
"((readtable55_39) readtable_20)"
"((next-readtable56_40) next-readtable_19)"
"((local-graph?57_41) local-graph?_22)"
"((keep-comment?58_42) keep-comment?_30))"
"(read-config-update42.1"
" for-syntax?53_37"
" keep-comment?58_42"
" next-readtable56_40"
" readtable55_39"
" local-graph?57_41"
" wrap54_38"
" config52_36)))"
" c1_33)"
"(let-values()"
"(let-values(((readtable59_44) readtable_20)"
"((next-readtable60_45) next-readtable_19)"
"((source61_46) source_23)"
"((for-syntax?62_47) for-syntax?_24)"
"((wrap63_48) wrap_17)"
"((read-compiled64_49) read-compiled_25)"
"((dynamic-require65_50) dynamic-require_26)"
"((module-declared?66_51) module-declared?_27)"
"((coerce67_52) coerce_28)"
"((coerce-key68_53) coerce-key_29)"
"((keep-comment?69_54) keep-comment?_30))"
"(make-read-config26.1"
" coerce67_52"
" coerce-key68_53"
" dynamic-require65_50"
" for-syntax?62_47"
" keep-comment?69_54"
" module-declared?66_51"
" next-readtable60_45"
" read-compiled64_49"
" readtable59_44"
" source61_46"
" wrap63_48)))))))"
"(let-values(((v_32)(read-one init-c_18 in_16 config_31)))"
"(if(if(let-values(((or-part_55)(not recursive?_21)))"
"(if or-part_55 or-part_55 local-graph?_22))"
"(read-config-state-graph(read-config-st config_31))"
" #f)"
"(let-values()"
"(catch-and-reraise-as-reader/proc"
" #f"
" config_31"
"(lambda()(make-reader-graph v_32))))"
"(if(if recursive?_21"
"(if(not local-graph?_22)"
"(if(not for-syntax?_24)"
"(if(not(eof-object? v_32))(not(1/special-comment? v_32)) #f)"
" #f)"
" #f)"
" #f)"
"(let-values()(begin(get-graph-hash config_31) v_32))"
"(let-values() v_32))))))))))))))))))))))))"
"(define-values"
"(read-language49.1)"
"(lambda(coerce38_0"
" coerce-key39_0"
" dynamic-require36_0"
" for-syntax?33_0"
" module-declared?37_0"
" read-compiled35_0"
" wrap34_0"
" in47_0"
" fail-k48_0)"
"(begin"
" 'read-language49"
"(let-values(((in_157) in47_0))"
"(let-values(((fail-k_158) fail-k48_0))"
"(let-values(((for-syntax?_159) for-syntax?33_0))"
"(let-values(((wrap_160) wrap34_0))"
"(let-values(((read-compiled_161) read-compiled35_0))"
"(let-values(((dynamic-require_162) dynamic-require36_0))"
"(let-values(((module-declared?_163) module-declared?37_0))"
"(let-values(((coerce_164) coerce38_0))"
"(let-values(((coerce-key_165) coerce-key39_0))"
"(let-values()"
"(let-values(((config_166)"
"(let-values(((temp70_169) #f)"
"((temp71_170) #f)"
"((for-syntax?72_171) for-syntax?_159)"
"((wrap73_172) wrap_160)"
"((read-compiled74_173) read-compiled_161)"
"((dynamic-require75_174) dynamic-require_162)"
"((module-declared?76_175) module-declared?_163)"
"((coerce77_176) coerce_164)"
"((coerce-key78_177) coerce-key_165))"
"(make-read-config26.1"
" coerce77_176"
" coerce-key78_177"
" dynamic-require75_174"
" for-syntax?72_171"
" #f"
" module-declared?76_175"
" temp71_170"
" read-compiled74_173"
" temp70_169"
" #f"
" wrap73_172))))"
"(let-values(((l-config_167)(override-parameter 1/read-accept-reader config_166 #f)))"
"(read-language/get-info read-undotted in_157 config_166 fail-k_158))))))))))))))))"
"(define-values"
"(read-one)"
"(lambda(init-c_0 in_0 config_0)"
"(begin"
"(if(not(check-parameter 1/read-cdot config_0))"
"(let-values()(read-undotted init-c_0 in_0 config_0))"
"(if(check-parameter 1/read-cdot config_0)"
"(let-values()"
"(let-values(((line_234 col_235 pos_236)(port-next-location in_0)))"
"(let-values(((v_237)(read-undotted init-c_0 in_0 config_0)))"
"(if(1/special-comment? v_237)"
"(let-values() v_237)"
"(let-values()"
"((letrec-values(((loop_238)"
"(lambda(v_0)"
"(begin"
" 'loop"
"(let-values(((c_240)"
"(let-values(((in_242) in_0)"
"((skip-count_244) 0)"
"((source_245)(read-config-source config_0)))"
"(let-values(((c_246)"
"(peek-char-or-special"
" in_242"
" skip-count_244"
" 'special"
" source_245)))"
"(if(eq? c_246 'special)(special1.1 'special) c_246)))))"
"(let-values(((ec_241)(effective-char c_240 config_0)))"
"(if(not(char? ec_241))"
"(let-values() v_0)"
"(if(char-whitespace? ec_241)"
"(let-values()(begin(consume-char in_0 c_240)(loop_238 v_0)))"
"(if(char=? ec_241 '#\\.)"
"(let-values()"
"(let-values(((dot-line_247 dot-col_248 dot-pos_249)"
"(port-next-location in_0)))"
"(let-values((()(begin(consume-char in_0 c_240)(values))))"
"(let-values(((pos-config_250)"
"(reading-at"
" config_0"
" dot-line_247"
" dot-col_248"
" dot-pos_249)))"
"(let-values(((cdot_251)"
"(wrap '#%dot in_0 pos-config_250 '#\\.)))"
"(let-values(((post-v_252)"
"(read-undotted #f in_0 config_0)))"
"(begin"
"(if(eof-object? post-v_252)"
"(let-values()"
"(let-values(((in79_254) in_0)"
"((pos-config80_255) pos-config_250)"
"((eof81_256) eof)"
"((temp82_257)"
"                                                                                    \"expected a datum after cdot, found end-of-file\"))"
"(reader-error12.1"
" unsafe-undefined"
" eof81_256"
" #f"
" unsafe-undefined"
" in79_254"
" pos-config80_255"
" temp82_257"
"(list))))"
"(void))"
"(loop_238"
"(wrap"
"(list cdot_251 v_0 post-v_252)"
" in_0"
"(reading-at config_0 line_234 col_235 pos_236)"
" '#\\.)))))))))"
"(let-values() v_0))))))))))"
" loop_238)"
" v_237))))))"
"(void))))))"
"(define-values"
"(read-undotted)"
"(lambda(init-c_0 in_0 config_0)"
"(begin"
"(let-values(((c_261)(read-char/skip-whitespace-and-comments init-c_0 read-one in_0 config_0)))"
"(let-values(((line_262 col_263 pos_264)(port-next-location* in_0 c_261)))"
"(if(eof-object? c_261)"
"(let-values() eof)"
"(if(not(char? c_261))"
"(let-values()"
"(let-values(((v_265)(special-value c_261)))"
"(if(1/special-comment? v_265)"
"(let-values()(if(read-config-keep-comment? config_0) v_265(read-undotted #f in_0 config_0)))"
"(let-values()(coerce v_265 in_0(reading-at config_0 line_262 col_263 pos_264))))))"
"(let-values(((c2_266)(readtable-handler config_0 c_261)))"
"(if c2_266"
"((lambda(handler_0)"
"(let-values(((v_268)(readtable-apply handler_0 c_261 in_0 config_0 line_262 col_263 pos_264)))"
"(retry-special-comment v_268 in_0 config_0)))"
" c2_266)"
"(let-values()"
"(let-values(((ec_269)(effective-char c_261 config_0)))"
"(let-values((()"
"(begin"
"(if(not(char-closer? ec_269 config_0))"
"(let-values()(track-indentation! config_0 line_262 col_263))"
"(void))"
"(values))))"
"(let-values(((r-config_270)(reading-at(discard-comment config_0) line_262 col_263 pos_264)))"
"(let-values(((tmp_287) ec_269))"
"(let-values(((index_288)"
"(if(char? tmp_287)"
"(let-values(((codepoint_289)(char->integer tmp_287)))"
"(if(if(unsafe-fx>= codepoint_289 34)(unsafe-fx< codepoint_289 126) #f)"
"(if(unsafe-fx< codepoint_289 91)"
"(if(unsafe-fx< codepoint_289 40)"
"(let-values(((tbl_290) '#(11 1 0 0 0 2)))"
"(unsafe-vector*-ref tbl_290(unsafe-fx- codepoint_289 34)))"
"(if(unsafe-fx< codepoint_289 42)"
"(let-values(((tbl_291) '#(5 6)))"
"(unsafe-vector*-ref tbl_291(unsafe-fx- codepoint_289 40)))"
"(if(unsafe-fx< codepoint_289 44)"
" 0"
"(if(unsafe-fx< codepoint_289 45) 4 0))))"
"(let-values(((tbl_292)"
" '#(7"
" 0"
" 8"
" 0"
" 0"
" 3"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 9"
" 12"
" 10)))"
"(unsafe-vector*-ref tbl_292(unsafe-fx- codepoint_289 91))))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_288 6)"
"(if(unsafe-fx< index_288 2)"
"(if(unsafe-fx< index_288 1)"
"(let-values()"
"(let-values(((v_293)"
"(let-values(((c83_295) c_261)"
"((in84_296) in_0)"
"((r-config85_297) r-config_270)"
"((temp86_298)"
"(if(let-values(((or-part_299)(eq? c_261 ec_269)))"
"(if or-part_299"
" or-part_299"
"(if(<(char->integer ec_269) 128)"
"(char-numeric? ec_269)"
" #f)))"
" 'symbol-or-number"
" 'symbol/indirect)))"
"(read-symbol-or-number8.1"
" #f"
" temp86_298"
" c83_295"
" in84_296"
" r-config85_297))))"
"(retry-special-comment v_293 in_0 config_0)))"
"(let-values()(read-dispatch c_261 in_0 r-config_270 config_0)))"
"(if(unsafe-fx< index_288 3)"
"                                    (let-values () (read-quote read-one 'quote \"quoting \\\"'\\\"\" c_261 in_0 r-config_270))"
"(if(unsafe-fx< index_288 4)"
"(let-values()"
"(if(check-parameter 1/read-accept-quasiquote config_0)"
"(let-values()"
"(read-quote"
" read-one"
" 'quasiquote"
"                                             \"quasiquoting \\\"`\\\"\""
" c_261"
" in_0"
" r-config_270))"
"(let-values()"
"(let-values(((in87_300) in_0)"
"((r-config88_301) r-config_270)"
"                                                         ((temp89_302) \"illegal use of `~a`\")"
"((c90_303) c_261))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in87_300"
" r-config88_301"
" temp89_302"
"(list c90_303))))))"
"(if(unsafe-fx< index_288 5)"
"(let-values()"
"(if(check-parameter 1/read-accept-quasiquote config_0)"
"(let-values()"
"(let-values(((c2_304)"
"(let-values(((in_305) in_0)"
"((skip-count_307) 0)"
"((source_308)(read-config-source config_0)))"
"(let-values(((c_309)"
"(peek-char-or-special"
" in_305"
" skip-count_307"
" 'special"
" source_308)))"
"(if(eq? c_309 'special)"
"(special1.1 'special)"
" c_309)))))"
"(if(eqv? c2_304 '#\\@)"
"(begin"
"(consume-char in_0 c2_304)"
"(read-quote"
" read-one"
" 'unquote-splicing"
"                                                     \"unquoting `,@`\""
" c_261"
" in_0"
" r-config_270))"
"(read-quote"
" read-one"
" 'unquote"
"                                                   \"unquoting `,`\""
" c_261"
" in_0"
" r-config_270))))"
"(let-values()"
"(let-values(((in91_310) in_0)"
"((r-config92_311) r-config_270)"
"                                                           ((temp93_312) \"illegal use of `~a`\")"
"((c94_313) c_261))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in91_310"
" r-config92_311"
" temp93_312"
"(list c94_313))))))"
"(let-values()"
"(wrap"
"(let-values(((read-one95_315) read-one)"
"((ec96_316) ec_269)"
"((temp97_317) '#\\()"
"((temp98_318) '#\\))"
"((in99_319) in_0)"
"((r-config100_320) r-config_270)"
"((temp101_321) #t))"
"(read-unwrapped-sequence17.1"
" 'all"
" unsafe-undefined"
" unsafe-undefined"
" temp101_321"
" unsafe-undefined"
" read-one95_315"
" ec96_316"
" temp97_317"
" temp98_318"
" in99_319"
" r-config100_320))"
" in_0"
" r-config_270"
" ec_269))))))"
"(if(unsafe-fx< index_288 9)"
"(if(unsafe-fx< index_288 7)"
"(let-values()"
"(let-values(((in102_322) in_0)"
"((r-config103_323) r-config_270)"
"                                                   ((temp104_324) \"~a\")"
"((temp105_325)"
"(indentation-unexpected-closer-message ec_269 c_261 r-config_270)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in102_322"
" r-config103_323"
" temp104_324"
"(list temp105_325))))"
"(if(unsafe-fx< index_288 8)"
"(let-values()"
"(if(let-values(((or-part_326)"
"(check-parameter 1/read-square-bracket-as-paren config_0)))"
"(if or-part_326"
" or-part_326"
"(check-parameter 1/read-square-bracket-with-tag config_0)))"
"(let-values()"
"(wrap"
"(let-values(((read-one106_328) read-one)"
"((ec107_329) ec_269)"
"((temp108_330) '#\\[)"
"((temp109_331) '#\\])"
"((in110_332) in_0)"
"((r-config111_333) r-config_270)"
"((temp112_334) #t))"
"(read-unwrapped-sequence17.1"
" 'all"
" unsafe-undefined"
" unsafe-undefined"
" temp112_334"
" unsafe-undefined"
" read-one106_328"
" ec107_329"
" temp108_330"
" temp109_331"
" in110_332"
" r-config111_333))"
" in_0"
" r-config_270"
" ec_269))"
"(let-values()"
"(let-values(((in113_335) in_0)"
"((r-config114_336) r-config_270)"
"                                                         ((temp115_337) \"illegal use of `~a`\")"
"((c116_338) c_261))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in113_335"
" r-config114_336"
" temp115_337"
"(list c116_338))))))"
"(let-values()"
"(if(let-values(((or-part_339)"
"(check-parameter 1/read-square-bracket-as-paren config_0)))"
"(if or-part_339"
" or-part_339"
"(check-parameter 1/read-square-bracket-with-tag config_0)))"
"(let-values()"
"(let-values(((in117_340) in_0)"
"((r-config118_341) r-config_270)"
"                                                         ((temp119_342) \"~a\")"
"((temp120_343)"
"(indentation-unexpected-closer-message"
" ec_269"
" c_261"
" r-config_270)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in117_340"
" r-config118_341"
" temp119_342"
"(list temp120_343))))"
"(let-values()"
"(let-values(((in121_344) in_0)"
"((r-config122_345) r-config_270)"
"                                                         ((temp123_346) \"illegal use of `~a`\")"
"((c124_347) c_261))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in121_344"
" r-config122_345"
" temp123_346"
"(list c124_347))))))))"
"(if(unsafe-fx< index_288 10)"
"(let-values()"
"(if(let-values(((or-part_348)"
"(check-parameter 1/read-curly-brace-as-paren config_0)))"
"(if or-part_348"
" or-part_348"
"(check-parameter 1/read-curly-brace-with-tag config_0)))"
"(let-values()"
"(wrap"
"(let-values(((read-one125_350) read-one)"
"((ec126_351) ec_269)"
"((temp127_352) '#\\{)"
"((temp128_353) '#\\})"
"((in129_354) in_0)"
"((r-config130_355) r-config_270)"
"((temp131_356) #t))"
"(read-unwrapped-sequence17.1"
" 'all"
" unsafe-undefined"
" unsafe-undefined"
" temp131_356"
" unsafe-undefined"
" read-one125_350"
" ec126_351"
" temp127_352"
" temp128_353"
" in129_354"
" r-config130_355))"
" in_0"
" r-config_270"
" ec_269))"
"(let-values()"
"(let-values(((in132_357) in_0)"
"((r-config133_358) r-config_270)"
"                                                       ((temp134_359) \"illegal use of `~a`\")"
"((c135_360) c_261))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in132_357"
" r-config133_358"
" temp134_359"
"(list c135_360))))))"
"(if(unsafe-fx< index_288 11)"
"(let-values()"
"(if(let-values(((or-part_361)"
"(check-parameter 1/read-curly-brace-as-paren config_0)))"
"(if or-part_361"
" or-part_361"
"(check-parameter 1/read-curly-brace-with-tag config_0)))"
"(let-values()"
"(let-values(((in136_362) in_0)"
"((r-config137_363) r-config_270)"
"                                                         ((temp138_364) \"~a\")"
"((temp139_365)"
"(indentation-unexpected-closer-message"
" ec_269"
" c_261"
" r-config_270)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in136_362"
" r-config137_363"
" temp138_364"
"(list temp139_365))))"
"(let-values()"
"(let-values(((in140_366) in_0)"
"((r-config141_367) r-config_270)"
"                                                         ((temp142_368) \"illegal use of `~a`\")"
"((c143_369) c_261))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in140_366"
" r-config141_367"
" temp142_368"
"(list c143_369))))))"
"(if(unsafe-fx< index_288 12)"
"(let-values()"
"(let-values(((in144_370) in_0)((r-config145_371) r-config_270))"
"(read-string5.1 'string in144_370 r-config145_371)))"
"(let-values()"
"(let-values(((c146_373) c_261)"
"((in147_374) in_0)"
"((r-config148_375) r-config_270)"
"((temp149_376) 'symbol))"
"(read-symbol-or-number8.1"
" #f"
" temp149_376"
" c146_373"
" in147_374"
" r-config148_375)))))))))))))))))))))))"
"(define-values"
"(read-dispatch)"
"(lambda(dispatch-c_0 in_0 config_0 orig-config_0)"
"(begin"
"(let-values(((c_381)"
"(let-values(((in_382) in_0)((source_384)(read-config-source config_0)))"
"(read-char-or-special in_382 special1.1 source_384))))"
"(if(eof-object? c_381)"
"(let-values()"
"(let-values(((in150_386) in_0)"
"((config151_387) config_0)"
"((c152_388) c_381)"
"                         ((temp153_389) \"bad syntax `~a`\")"
"((dispatch-c154_390) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" c152_388"
" #f"
" unsafe-undefined"
" in150_386"
" config151_387"
" temp153_389"
"(list dispatch-c154_390))))"
"(if(not(char? c_381))"
"(let-values()"
"(let-values(((in155_392) in_0)"
"((config156_393) config_0)"
"((c157_394) c_381)"
"                           ((temp158_395) \"bad syntax `~a`\")"
"((dispatch-c159_396) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" c157_394"
" #f"
" unsafe-undefined"
" in155_392"
" config156_393"
" temp158_395"
"(list dispatch-c159_396))))"
"(let-values(((c3_397)(readtable-dispatch-handler orig-config_0 c_381)))"
"(if c3_397"
"((lambda(handler_0)"
"(let-values(((line_399)(read-config-line config_0)))"
"(let-values(((col_400)(read-config-col config_0)))"
"(let-values(((pos_401)(read-config-pos config_0)))"
"(let-values(((v_402)"
"(readtable-apply handler_0 c_381 in_0 config_0 line_399 col_400 pos_401)))"
"(retry-special-comment v_402 in_0 orig-config_0))))))"
" c3_397)"
"(let-values()"
"(let-values()"
"(let-values(((tmp_422) c_381))"
"(let-values(((index_423)"
"(if(char? tmp_422)"
"(let-values(((codepoint_424)(char->integer tmp_422)))"
"(if(if(unsafe-fx>= codepoint_424 33)(unsafe-fx< codepoint_424 127) #f)"
"(let-values(((tbl_425)"
" '#(34"
" 11"
" 0"
" 0"
" 13"
" 6"
" 7"
" 2"
" 0"
" 0"
" 0"
" 9"
" 0"
" 0"
" 0"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 14"
" 0"
" 12"
" 0"
" 0"
" 0"
" 0"
" 0"
" 22"
" 29"
" 25"
" 18"
" 16"
" 0"
" 30"
" 20"
" 0"
" 0"
" 0"
" 0"
" 0"
" 24"
" 0"
" 0"
" 0"
" 0"
" 15"
" 0"
" 0"
" 0"
" 28"
" 0"
" 0"
" 3"
" 10"
" 0"
" 0"
" 0"
" 8"
" 0"
" 26"
" 29"
" 21"
" 17"
" 16"
" 0"
" 30"
" 19"
" 0"
" 0"
" 33"
" 0"
" 0"
" 23"
" 32"
" 0"
" 31"
" 5"
" 15"
" 0"
" 0"
" 0"
" 27"
" 0"
" 0"
" 4"
" 0"
" 0"
" 35)))"
"(unsafe-vector*-ref tbl_425(unsafe-fx- codepoint_424 33)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_423 17)"
"(if(unsafe-fx< index_423 8)"
"(if(unsafe-fx< index_423 3)"
"(if(unsafe-fx< index_423 1)"
"(let-values()"
"(let-values(((in160_426) in_0)"
"((config161_427) config_0)"
"                                               ((temp162_428) \"bad syntax `~a~a`\")"
"((dispatch-c163_429) dispatch-c_0)"
"((c164_430) c_381))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in160_426"
" config161_427"
" temp162_428"
"(list dispatch-c163_429 c164_430))))"
"(if(unsafe-fx< index_423 2)"
"(let-values()(read-vector-or-graph read-one dispatch-c_0 c_381 in_0 config_0))"
"(let-values()"
"(let-values(((read-one165_431) read-one)"
"((temp166_432) '#\\()"
"((temp167_433) '#\\()"
"((temp168_434) '#\\))"
"((in169_435) in_0)"
"((config170_436) config_0))"
"(read-vector11.1"
" #f"
" 'any"
" read-one165_431"
" temp166_432"
" temp167_433"
" temp168_434"
" in169_435"
" config170_436)))))"
"(if(unsafe-fx< index_423 5)"
"(if(unsafe-fx< index_423 4)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_0)"
"(let-values()"
"(let-values(((read-one171_437) read-one)"
"((temp172_438) '#\\[)"
"((temp173_439) '#\\[)"
"((temp174_440) '#\\])"
"((in175_441) in_0)"
"((config176_442) config_0))"
"(read-vector11.1"
" #f"
" 'any"
" read-one171_437"
" temp172_438"
" temp173_439"
" temp174_440"
" in175_441"
" config176_442)))"
"(let-values()"
"(let-values(((in177_443) in_0)"
"((config178_444) config_0)"
"                                                     ((temp179_445) (format \"~a~a\" dispatch-c_0 c_381)))"
"(bad-syntax-error20.1 '#\\x in177_443 config178_444 temp179_445)))))"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_0)"
"(let-values()"
"(let-values(((read-one180_446) read-one)"
"((temp181_447) '#\\{)"
"((temp182_448) '#\\{)"
"((temp183_449) '#\\})"
"((in184_450) in_0)"
"((config185_451) config_0))"
"(read-vector11.1"
" #f"
" 'any"
" read-one180_446"
" temp181_447"
" temp182_448"
" temp183_449"
" in184_450"
" config185_451)))"
"(let-values()"
"(let-values(((in186_452) in_0)"
"((config187_453) config_0)"
"                                                     ((temp188_454) (format \"~a~a\" dispatch-c_0 c_381)))"
"(bad-syntax-error20.1 '#\\x in186_452 config187_453 temp188_454))))))"
"(if(unsafe-fx< index_423 6)"
"(let-values()(read-struct read-one dispatch-c_0 in_0 config_0))"
"(if(unsafe-fx< index_423 7)"
"(let-values()(read-box read-one dispatch-c_0 in_0 config_0))"
"                                    (let-values () (read-quote read-one 'syntax \"quoting #'\" c_381 in_0 config_0))))))"
"(if(unsafe-fx< index_423 12)"
"(if(unsafe-fx< index_423 9)"
"                                (let-values () (read-quote read-one 'quasisyntax \"quasiquoting #`\" c_381 in_0 config_0))"
"(if(unsafe-fx< index_423 10)"
"(let-values()"
"(let-values(((c2_455)"
"(let-values(((in_456) in_0)"
"((skip-count_458) 0)"
"((source_459)(read-config-source config_0)))"
"(let-values(((c_460)"
"(peek-char-or-special"
" in_456"
" skip-count_458"
" 'special"
" source_459)))"
"(if(eq? c_460 'special)(special1.1 'special) c_460)))))"
"(if(eqv? c2_455 '#\\@)"
"(begin"
"(consume-char in_0 c2_455)"
"                                          (read-quote read-one 'unsyntax-splicing \"unquoting #,@\" c_381 in_0 config_0))"
"                                        (read-quote read-one 'unsyntax \"unquoting #,\" c_381 in_0 config_0))))"
"(if(unsafe-fx< index_423 11)"
"(let-values()(read-character in_0 config_0))"
"(let-values()"
"(let-values(((in189_462) in_0)"
"((config190_463) config_0)"
"((temp191_464) '|byte string|))"
"(read-string5.1 temp191_464 in189_462 config190_463))))))"
"(if(unsafe-fx< index_423 14)"
"(if(unsafe-fx< index_423 13)"
"(let-values()"
"(let-values(((c2_465)"
"(let-values(((in_466) in_0)"
"((skip-count_468) 0)"
"((source_469)(read-config-source config_0)))"
"(let-values(((c_470)"
"(peek-char-or-special"
" in_466"
" skip-count_468"
" 'special"
" source_469)))"
"(if(eq? c_470 'special)(special1.1 'special) c_470)))))"
"(if(eqv? '#\\< c2_465)"
"(let-values()"
"(begin(consume-char in_0 '#\\<)(read-here-string in_0 config_0)))"
"(let-values()"
"(let-values(((in192_472) in_0)"
"((config193_473) config_0)"
"((c2194_474) c2_465)"
"                                                       ((temp195_475) \"bad syntax `~a<`\")"
"((dispatch-c196_476) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" c2194_474"
" #f"
" unsafe-undefined"
" in192_472"
" config193_473"
" temp195_475"
"(list dispatch-c196_476)))))))"
"(let-values()"
"(let-values(((c197_478) c_381)"
"((in198_479) in_0)"
"((config199_480) config_0)"
"((dispatch-c200_481) dispatch-c_0)"
"((temp201_482) 'symbol))"
"(read-symbol-or-number8.1"
" dispatch-c200_481"
" temp201_482"
" c197_478"
" in198_479"
" config199_480))))"
"(if(unsafe-fx< index_423 15)"
"(let-values()"
"(let-values(((temp202_484) #f)"
"((in203_485) in_0)"
"((config204_486) config_0)"
"((temp205_487) 'keyword))"
"(read-symbol-or-number8.1 #f temp205_487 temp202_484 in203_485 config204_486)))"
"(if(unsafe-fx< index_423 16)"
"(let-values()"
"(let-values(((c2_488)"
"(let-values(((in_489) in_0)"
"((skip-count_491) 0)"
"((source_492)(read-config-source config_0)))"
"(let-values(((c_493)"
"(peek-char-or-special"
" in_489"
" skip-count_491"
" 'special"
" source_492)))"
"(if(eq? c_493 'special)(special1.1 'special) c_493)))))"
"(if(char-delimiter? c2_488 config_0)"
"(let-values()(wrap #t in_0 config_0 c_381))"
"(let-values()"
"(read-delimited-constant"
" c_381"
"(char=? c_381 '#\\t)"
" '(#\\r #\\u #\\e)"
" #t"
" in_0"
" config_0)))))"
"(let-values()"
"(let-values(((c2_494)"
"(let-values(((in_495) in_0)"
"((skip-count_497) 0)"
"((source_498)(read-config-source config_0)))"
"(let-values(((c_499)"
"(peek-char-or-special"
" in_495"
" skip-count_497"
" 'special"
" source_498)))"
"(if(eq? c_499 'special)(special1.1 'special) c_499)))))"
"(if(char-delimiter? c2_494 config_0)"
"(let-values()(wrap #f in_0 config_0 c_381))"
"(if(let-values(((or-part_500)(char=? c2_494 '#\\x)))"
"(if or-part_500 or-part_500(char=? c2_494 '#\\l)))"
"(let-values()"
"(read-fixnum-or-flonum-vector"
" read-one"
" dispatch-c_0"
" c_381"
" c2_494"
" in_0"
" config_0))"
"(let-values()"
"(read-delimited-constant"
" c_381"
"(char=? c_381 '#\\f)"
" '(#\\a #\\l #\\s #\\e)"
" #f"
" in_0"
" config_0)))))))))))"
"(if(unsafe-fx< index_423 26)"
"(if(unsafe-fx< index_423 21)"
"(if(unsafe-fx< index_423 18)"
"(let-values()"
"(let-values(((temp206_502) #f)"
"((in207_503) in_0)"
"((config208_504) config_0)"
"                                               ((temp209_505) \"#e\"))"
"(read-symbol-or-number8.1 #f temp209_505 temp206_502 in207_503 config208_504)))"
"(if(unsafe-fx< index_423 19)"
"(let-values()"
"(let-values(((temp210_507) #f)"
"((in211_508) in_0)"
"((config212_509) config_0)"
"                                                 ((temp213_510) \"#E\"))"
"(read-symbol-or-number8.1 #f temp213_510 temp210_507 in211_508 config212_509)))"
"(if(unsafe-fx< index_423 20)"
"(let-values()"
"(let-values(((temp214_512) #f)"
"((in215_513) in_0)"
"((config216_514) config_0)"
"                                                   ((temp217_515) \"#i\"))"
"(read-symbol-or-number8.1 #f temp217_515 temp214_512 in215_513 config216_514)))"
"(let-values()"
"(let-values(((temp218_517) #f)"
"((in219_518) in_0)"
"((config220_519) config_0)"
"                                                   ((temp221_520) \"#I\"))"
"(read-symbol-or-number8.1"
" #f"
" temp221_520"
" temp218_517"
" in219_518"
" config220_519))))))"
"(if(unsafe-fx< index_423 23)"
"(if(unsafe-fx< index_423 22)"
"(let-values()"
"(let-values(((temp222_522) #f)"
"((in223_523) in_0)"
"((config224_524) config_0)"
"                                                 ((temp225_525) \"#d\"))"
"(read-symbol-or-number8.1 #f temp225_525 temp222_522 in223_523 config224_524)))"
"(let-values()"
"(let-values(((temp226_527) #f)"
"((in227_528) in_0)"
"((config228_529) config_0)"
"                                                 ((temp229_530) \"#B\"))"
"(read-symbol-or-number8.1 #f temp229_530 temp226_527 in227_528 config228_529))))"
"(if(unsafe-fx< index_423 24)"
"(let-values()"
"(let-values(((temp230_532) #f)"
"((in231_533) in_0)"
"((config232_534) config_0)"
"                                                 ((temp233_535) \"#o\"))"
"(read-symbol-or-number8.1 #f temp233_535 temp230_532 in231_533 config232_534)))"
"(if(unsafe-fx< index_423 25)"
"(let-values()"
"(let-values(((temp234_537) #f)"
"((in235_538) in_0)"
"((config236_539) config_0)"
"                                                   ((temp237_540) \"#O\"))"
"(read-symbol-or-number8.1 #f temp237_540 temp234_537 in235_538 config236_539)))"
"(let-values()"
"(let-values(((temp238_542) #f)"
"((in239_543) in_0)"
"((config240_544) config_0)"
"                                                   ((temp241_545) \"#D\"))"
"(read-symbol-or-number8.1"
" #f"
" temp241_545"
" temp238_542"
" in239_543"
" config240_544)))))))"
"(if(unsafe-fx< index_423 30)"
"(if(unsafe-fx< index_423 27)"
"(let-values()"
"(let-values(((temp242_547) #f)"
"((in243_548) in_0)"
"((config244_549) config_0)"
"                                               ((temp245_550) \"#b\"))"
"(read-symbol-or-number8.1 #f temp245_550 temp242_547 in243_548 config244_549)))"
"(if(unsafe-fx< index_423 28)"
"(let-values()"
"(let-values(((temp246_552) #f)"
"((in247_553) in_0)"
"((config248_554) config_0)"
"                                                 ((temp249_555) \"#x\"))"
"(read-symbol-or-number8.1 #f temp249_555 temp246_552 in247_553 config248_554)))"
"(if(unsafe-fx< index_423 29)"
"(let-values()"
"(let-values(((temp250_557) #f)"
"((in251_558) in_0)"
"((config252_559) config_0)"
"                                                   ((temp253_560) \"#X\"))"
"(read-symbol-or-number8.1 #f temp253_560 temp250_557 in251_558 config252_559)))"
"(let-values()"
"(let-values(((c2_561)"
"(let-values(((in_562) in_0)"
"((source_564)(read-config-source config_0)))"
"(read-char-or-special in_562 special1.1 source_564))))"
"(let-values(((tmp_565) c2_561))"
"(if(if(equal? tmp_565 '#\\s) #t(equal? tmp_565 '#\\S))"
"(let-values()"
"(read-one #f in_0(override-parameter read-case-sensitive config_0 #t)))"
"(if(if(equal? tmp_565 '#\\i) #t(equal? tmp_565 '#\\I))"
"(let-values()"
"(read-one #f in_0(override-parameter read-case-sensitive config_0 #f)))"
"(let-values()"
"(let-values(((in254_567) in_0)"
"((config255_568) config_0)"
"((c2256_569) c2_561)"
"((temp257_570)"
"                                                              \"expected `s', `S`, `i`, or `I` after `~a~a`\")"
"((dispatch-c258_571) dispatch-c_0)"
"((c259_572) c_381))"
"(reader-error12.1"
" unsafe-undefined"
" c2256_569"
" #f"
" unsafe-undefined"
" in254_567"
" config255_568"
" temp257_570"
"(list dispatch-c258_571 c259_572))))))))))))"
"(if(unsafe-fx< index_423 32)"
"(if(unsafe-fx< index_423 31)"
"(let-values()(read-hash read-one dispatch-c_0 c_381 in_0 config_0))"
"(let-values()"
"(let-values(((accum-str_573)(accum-string-init! config_0)))"
"(let-values((()(begin(accum-string-add! accum-str_573 dispatch-c_0)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_573 c_381)(values))))"
"(let-values(((c2_574)"
"(let-values(((in_575) in_0)"
"((source_577)(read-config-source config_0)))"
"(read-char-or-special in_575 special1.1 source_577))))"
"(begin"
"(if(char? c2_574)"
"(let-values()(accum-string-add! accum-str_573 c2_574))"
"(void))"
"(let-values(((tmp_578) c2_574))"
"(if(equal? tmp_578 '#\\x)"
"(let-values()(read-regexp c_381 accum-str_573 in_0 config_0))"
"(if(equal? tmp_578 '#\\e)"
"(let-values()"
"(read-extension-reader"
" read-one"
" read-undotted"
" dispatch-c_0"
" in_0"
" config_0))"
"(let-values()"
"(let-values(((in260_580) in_0)"
"((config261_581) config_0)"
"((c2262_582) c2_574)"
"((temp263_583)"
"(let-values(((accum-str264_584) accum-str_573)"
"((config265_585) config_0))"
"(accum-string-get!6.1"
" 0"
" accum-str264_584"
" config265_585))))"
"(bad-syntax-error20.1"
" c2262_582"
" in260_580"
" config261_581"
" temp263_583)))))))))))))"
"(if(unsafe-fx< index_423 33)"
"(let-values()"
"(let-values(((accum-str_586)(accum-string-init! config_0)))"
"(let-values((()(begin(accum-string-add! accum-str_586 dispatch-c_0)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_586 c_381)(values))))"
"(let-values(((c2_587)"
"(let-values(((in_588) in_0)"
"((source_590)(read-config-source config_0)))"
"(read-char-or-special in_588 special1.1 source_590))))"
"(begin"
"(if(char? c2_587)"
"(let-values()(accum-string-add! accum-str_586 c2_587))"
"(void))"
"(let-values(((tmp_591) c2_587))"
"(if(equal? tmp_591 '#\\x)"
"(let-values()(read-regexp c_381 accum-str_586 in_0 config_0))"
"(let-values()"
"(let-values(((in266_593) in_0)"
"((config267_594) config_0)"
"((c2268_595) c2_587)"
"((temp269_596)"
"(let-values(((accum-str270_597) accum-str_586)"
"((config271_598) config_0))"
"(accum-string-get!6.1"
" 0"
" accum-str270_597"
" config271_598))))"
"(bad-syntax-error20.1"
" c2268_595"
" in266_593"
" config267_594"
" temp269_596)))))))))))"
"(if(unsafe-fx< index_423 34)"
"(let-values()"
"(let-values(((read-undotted272_599) read-undotted)"
"((dispatch-c273_600) dispatch-c_0)"
"((in274_601) in_0)"
"((config275_602) config_0))"
"(read-extension-lang7.1"
" #f"
" read-undotted272_599"
" dispatch-c273_600"
" in274_601"
" config275_602)))"
"(if(unsafe-fx< index_423 35)"
"(let-values()"
"(let-values(((read-undotted276_603) read-undotted)"
"((dispatch-c277_604) dispatch-c_0)"
"((in278_605) in_0)"
"((config279_606) config_0))"
"(read-extension-#!16.1"
" #f"
" read-undotted276_603"
" dispatch-c277_604"
" in278_605"
" config279_606)))"
"(let-values()"
"(if(check-parameter 1/read-accept-compiled config_0)"
"(let-values()"
"(wrap((read-config-read-compiled config_0) in_0) in_0 config_0 c_381))"
"(let-values()"
"(let-values(((in280_607) in_0)"
"((config281_608) config_0)"
"                                                         ((temp282_609) \"`~a~~` compiled expressions not enabled\")"
"((dispatch-c283_610) dispatch-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in280_607"
" config281_608"
" temp282_609"
"(list dispatch-c283_610)))))))))))))))))))))))))"
"(define-values"
"(retry-special-comment)"
"(lambda(v_0 in_0 config_0)"
"(begin"
"(if(1/special-comment? v_0)"
"(let-values()(if(read-config-keep-comment? config_0) v_0(read-undotted #f in_0 config_0)))"
"(let-values() v_0)))))"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?3_6)"
"(lambda(mod2_0 load?1_0)"
"(begin"
" 'module-declared?3"
"(let-values(((mod_9) mod2_0))"
"(let-values(((load?_10) load?1_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_9)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_9)))"
"(values))))"
"(let-values(((ns_12)(1/current-namespace)))"
"(let-values(((name_13)"
"(let-values(((mod31_15) mod_9)((load?32_16) load?_10))"
"(reference->resolved-module-path27.1 load?32_16 mod31_15))))"
"(if(namespace->module ns_12 name_13) #t #f)))))))))))))"
"(case-lambda"
"((mod_0)(begin 'module-declared?(module-declared?3_6 mod_0 #f)))"
"((mod_0 load?1_0)(module-declared?3_6 mod_0 load?1_0)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_0)"
"(begin"
" 'module-predefined?"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_0)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_0)))"
"(values))))"
"(let-values(((ns_22)(1/current-namespace)))"
"(let-values(((name_23)"
"(let-values(((mod34_26) mod_0)((temp35_27) #f))"
"(reference->resolved-module-path27.1 temp35_27 mod34_26))))"
"(let-values(((m_24)(namespace->module ns_22 name_23)))"
"(if m_24(module-is-predefined? m_24) #f))))))))))"
"(define-values"
"(module->)"
"(let-values(((module->9_28)"
"(lambda(extract6_0 who7_0 mod8_0 load?5_0)"
"(begin"
" 'module->9"
"(let-values(((extract_33) extract6_0))"
"(let-values(((who_34) who7_0))"
"(let-values(((mod_35) mod8_0))"
"(let-values(((load?_36) load?5_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_35)"
"(void)"
"(let-values()"
"(raise-argument-error who_34 module-reference-str mod_35)))"
"(values))))"
"(let-values(((m_37)"
"(namespace->module/complain"
" who_34"
"(1/current-namespace)"
"(let-values(((mod36_39) mod_35)((load?37_40) load?_36))"
"(reference->resolved-module-path27.1 load?37_40 mod36_39)))))"
"(extract_33 m_37))))))))))))"
"(case-lambda"
"((extract_0 who_0 mod_0)(begin(module->9_28 extract_0 who_0 mod_0 #f)))"
"((extract_0 who_0 mod_0 load?5_0)(module->9_28 extract_0 who_0 mod_0 load?5_0)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info13_48)"
"(lambda(mod12_0 load?11_0)"
"(begin"
" 'module->language-info13"
"(let-values(((mod_51) mod12_0))"
"(let-values(((load?_52) load?11_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(module-> module-language-info 'module->language-info mod_51 load?_52))))))))))"
"(case-lambda"
"((mod_0)(begin 'module->language-info(module->language-info13_48 mod_0 #f)))"
"((mod_0 load?11_0)(module->language-info13_48 mod_0 load?11_0)))))"
"(define-values"
"(1/module->imports)"
"(lambda(mod_0)"
"(begin 'module->imports(let-values()(let-values()(module-> module-requires 'module->imports mod_0))))))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_0)"
"(begin"
" 'module->exports"
"(let-values(((provides_60 self_61)"
"(module->(lambda(m_0)(values(module-provides m_0)(module-self m_0))) 'module->exports mod_0)))"
"(provides->api-provides provides_60 self_61)))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_0)"
"(begin"
" 'module->indirect-exports"
"(module->"
"(lambda(m_0)(variables->api-nonprovides(module-provides m_0)((module-get-all-variables m_0))))"
" 'module->indirect-exports"
" mod_0))))"
"(define-values"
"(1/module-provide-protected?)"
"(lambda(mod_0 sym_0)"
"(begin"
" 'module-provide-protected?"
"(module->"
"(lambda(m_0)"
"(let-values(((b/p_68)(hash-ref(module-provides m_0) sym_0 #f)))"
"(let-values(((or-part_69)(not b/p_68)))(if or-part_69 or-part_69(provided-as-protected? b/p_68)))))"
" 'module-provide-protected?"
" mod_0))))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace17_70)"
"(lambda(mod16_0 ns15_0)"
"(begin"
" 'module->namespace17"
"(let-values(((mod_73) mod16_0))"
"(let-values(((ns_74)(if(eq? ns15_0 unsafe-undefined)(1/current-namespace) ns15_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_73)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module->namespace"
" module-reference-str"
" mod_73)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_74)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'module->namespace \"namespace?\" ns_74)))"
"(values))))"
"(let-values(((name_76)"
"(let-values(((mod44_80) mod_73)((temp45_81) #t))"
"(reference->resolved-module-path27.1 temp45_81 mod44_80))))"
"(let-values(((phase_77)(namespace-phase ns_74)))"
"(let-values(((m-ns_78)"
"(let-values(((ns46_82) ns_74)"
"((name47_83) name_76)"
"((phase48_84) phase_77))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" ns46_82"
" name47_83"
" phase48_84))))"
"(begin"
"(if m-ns_78"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_74 name_76)"
"(raise-arguments-error"
" 'module->namespace"
"                                                 \"module not instantiated in the current namespace\""
"                                                 \"name\""
" name_76))))"
"(if(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector m-ns_78))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                               \"current code inspector cannot access namespace of module\""
"                                               \"module name\""
" name_76)))"
"(if(namespace-get-root-expand-ctx m-ns_78)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_78"
"(let-values(((temp49_86)(namespace-mpi m-ns_78)))"
"(make-root-expand-context13.1"
" #f"
" null"
" unsafe-undefined"
" unsafe-undefined"
" temp49_86)))))"
"(let-values(((ns41_87) ns_74)"
"((temp42_88)(namespace-mpi m-ns_78))"
"((phase43_89) phase_77))"
"(namespace-module-make-available!112.1"
" unsafe-undefined"
" ns41_87"
" temp42_88"
" phase43_89))"
" m-ns_78)))))))))))))))"
"(case-lambda"
"((mod_0)(begin 'module->namespace(module->namespace17_70 mod_0 unsafe-undefined)))"
"((mod_0 ns15_0)(module->namespace17_70 mod_0 ns15_0)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module22_93)"
"(lambda(insp20_0 mod21_0 ns19_0)"
"(begin"
" 'namespace-unprotect-module22"
"(let-values(((insp_97) insp20_0))"
"(let-values(((mod_98) mod21_0))"
"(let-values(((ns_99)(if(eq? ns19_0 unsafe-undefined)(1/current-namespace) ns19_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_97)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                     \"inspector?\""
" insp_97)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_98)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                       \"module-path?\""
" mod_98)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_99)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                         \"namespace?\""
" ns_99)))"
"(values))))"
"(let-values(((name_101)"
"(let-values(((mod51_105) mod_98)((temp52_106) #f))"
"(reference->resolved-module-path27.1 temp52_106 mod51_105))))"
"(let-values(((phase_102)(namespace-phase ns_99)))"
"(let-values(((m-ns_103)"
"(let-values(((ns53_107) ns_99)"
"((name54_108) name_101)"
"((phase55_109) phase_102))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" ns53_107"
" name54_108"
" phase55_109))))"
"(begin"
"(if m-ns_103"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                                   \"module not instantiated\""
"                                                   \"module name\""
" name_101)))"
"(if(inspector-superior? insp_97(namespace-inspector m-ns_103))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_103"
"(make-inspector(current-code-inspector))))"
"(void)))))))))))))))))))"
"(case-lambda"
"((insp_0 mod_0)"
"(begin 'namespace-unprotect-module(namespace-unprotect-module22_93 insp_0 mod_0 unsafe-undefined)))"
"((insp_0 mod_0 ns19_0)(namespace-unprotect-module22_93 insp_0 mod_0 ns19_0)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_0 ns_0 name_0)"
"(begin"
"(let-values(((or-part_118)(namespace->module ns_0 name_0)))"
"(if or-part_118"
" or-part_118"
"          (raise-arguments-error who_0 \"unknown module in the current namespace\" \"name\" name_0))))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_0)"
"(begin"
"(let-values(((or-part_120)(1/module-path? mod_0)))"
"(if or-part_120"
" or-part_120"
"(let-values(((or-part_121)(1/module-path-index? mod_0)))"
"(if or-part_121 or-part_121(1/resolved-module-path? mod_0))))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(reference->resolved-module-path27.1)"
"(lambda(load?24_0 mod26_0)"
"(begin"
" 'reference->resolved-module-path27"
"(let-values(((mod_128) mod26_0))"
"(let-values(((load?_129) load?24_0))"
"(let-values()"
"(if(1/resolved-module-path? mod_128)"
"(let-values() mod_128)"
"(let-values()"
"(let-values(((mpi_130)"
"(if(1/module-path-index? mod_128) mod_128(1/module-path-index-join mod_128 #f))))"
"(1/module-path-index-resolve mpi_130 load?_129))))))))))"
"(define-values"
"(read-syntax$1)"
"(lambda(src_0 in_0)"
"(begin"
" 'read-syntax"
"(if(default-read-handler? in_0)"
"(let-values()"
"(begin"
"(maybe-flush-stdout in_0)"
"(let-values(((in22_9) in_0)((temp23_10) #t)((src24_11) src_0))"
"(read*14.1 temp23_10 #f #f unsafe-undefined #f src24_11 in22_9))))"
"(let-values()(values((port-read-handler in_0) in_0 src_0)))))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_0 in_0 start_0 readtable_0 graph?_0)"
"(begin"
" 'read-syntax/recursive"
"(let-values(((in25_18) in_0)"
"((temp26_19) #t)"
"((temp27_20) #t)"
"((src28_21) src_0)"
"((start29_22) start_0)"
"((readtable30_23) readtable_0)"
"((temp31_24)(not graph?_0)))"
"(read*14.1 temp26_19 start29_22 temp31_24 readtable30_23 temp27_20 src28_21 in25_18)))))"
"(define-values"
"(read$1)"
"(lambda(in_0)"
"(begin"
" 'read"
"(if(default-read-handler? in_0)"
"(let-values()"
"(begin"
"(maybe-flush-stdout in_0)"
"(let-values(((in32_27) in_0)((temp33_28) #f))"
"(read*14.1 temp33_28 #f #f unsafe-undefined #f #f in32_27))))"
"(let-values()(values((port-read-handler in_0) in_0)))))))"
"(define-values"
"(read/recursive$1)"
"(lambda(in_0 start_0 readtable_0 graph?_0)"
"(begin"
" 'read/recursive"
"(let-values(((in34_34) in_0)"
"((temp35_35) #f)"
"((temp36_36) #t)"
"((start37_37) start_0)"
"((readtable38_38) readtable_0)"
"((temp39_39)(not graph?_0)))"
"(read*14.1 temp35_35 start37_37 temp39_39 readtable38_38 temp36_36 #f in34_34)))))"
"(define-values"
"(read*14.1)"
"(lambda(for-syntax?1_0 init-c4_0 local-graph?6_0 readtable5_0 recursive?2_0 source3_0 in13_0)"
"(begin"
" 'read*14"
"(let-values(((in_51) in13_0))"
"(let-values(((for-syntax?_52) for-syntax?1_0))"
"(let-values(((recursive?_53) recursive?2_0))"
"(let-values(((source_54) source3_0))"
"(let-values(((init-c_55) init-c4_0))"
"(let-values(((readtable_56)"
"(if(eq? readtable5_0 unsafe-undefined)(1/current-readtable) readtable5_0)))"
"(let-values(((local-graph?_57) local-graph?6_0))"
"(let-values()"
"(let-values()"
"(let-values(((in40_59) in_51)"
"((for-syntax?41_60) for-syntax?_52)"
"((recursive?42_61) recursive?_53)"
"((source43_62) source_54)"
"((temp44_63)(if for-syntax?_52 read-to-syntax #f))"
"((init-c45_64) init-c_55)"
"((readtable46_65) readtable_56)"
"((local-graph?47_66) local-graph?_57)"
"((read-compiled-linklet48_67) 1/read-compiled-linklet)"
"((dynamic-require-reader49_68) dynamic-require-reader)"
"((read-module-declared?50_69) read-module-declared?)"
"((read-coerce51_70) read-coerce)"
"((read-coerce-key52_71) read-coerce-key))"
"(read30.1"
" read-coerce51_70"
" read-coerce-key52_71"
" dynamic-require-reader49_68"
" for-syntax?41_60"
" init-c45_64"
" unsafe-undefined"
" local-graph?47_66"
" read-module-declared?50_69"
" unsafe-undefined"
" read-compiled-linklet48_67"
" readtable46_65"
" recursive?42_61"
" source43_62"
" temp44_63"
" in40_59))))))))))))))"
"(define-values"
"(read-language$1)"
"(lambda(in_0 fail-thunk_0)"
"(begin"
" 'read-language"
"(let-values(((in53_104) in_0)"
"((fail-thunk54_105) fail-thunk_0)"
"((temp55_106) #t)"
"((read-to-syntax56_107) read-to-syntax)"
"((read-compiled-linklet57_108) 1/read-compiled-linklet)"
"((dynamic-require-reader58_109) dynamic-require-reader)"
"((read-module-declared?59_110) read-module-declared?)"
"((read-coerce60_111) read-coerce)"
"((read-coerce-key61_112) read-coerce-key))"
"(read-language49.1"
" read-coerce60_111"
" read-coerce-key61_112"
" dynamic-require-reader58_109"
" temp55_106"
" read-module-declared?59_110"
" read-compiled-linklet57_108"
" read-to-syntax56_107"
" in53_104"
" fail-thunk54_105)))))"
"(define-values"
"(read-to-syntax)"
"(lambda(s-exp_0 srcloc_0 rep_0)"
"(begin"
"(let-values(((the-struct_116) empty-syntax))"
"(if(syntax?$1 the-struct_116)"
"(let-values(((content62_117)(datum-intern-literal s-exp_0))"
"((srcloc63_118) srcloc_0)"
"((props64_119)"
"(let-values(((tmp_120) rep_0))"
"(if(equal? tmp_120 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_120 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content62_117"
"(syntax-scopes the-struct_116)"
"(syntax-shifted-multi-scopes the-struct_116)"
"(syntax-scope-propagations+tamper the-struct_116)"
"(syntax-mpi-shifts the-struct_116)"
" srcloc63_118"
" props64_119"
"(syntax-inspector the-struct_116)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_116))))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(define-values(read-module-declared?)(lambda(mod-path_0)(begin(1/module-declared? mod-path_0 #t))))"
"(define-values"
"(read-coerce)"
"(lambda(for-syntax?_0 v_0 srcloc_0)"
"(begin"
"(if(not for-syntax?_0)"
"(let-values()(if(syntax?$1 v_0)(let-values()(syntax->datum$1 v_0))(let-values() v_0)))"
"(if(syntax?$1 v_0)"
"(let-values() v_0)"
"(if(list? v_0)"
"(let-values()"
"(read-to-syntax"
"(reverse$1"
"(let-values(((lst_125) v_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_125)))"
"((letrec-values(((for-loop_126)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_129)(unsafe-car lst_0))((rest_130)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_131)"
"(let-values(((fold-var_132) fold-var_0))"
"(let-values(((fold-var_133)"
"(let-values()"
"(cons"
"(let-values()"
"(read-coerce #t e_129 srcloc_0))"
" fold-var_132))))"
"(values fold-var_133)))))"
"(if(not #f)(for-loop_126 fold-var_131 rest_130) fold-var_131)))"
" fold-var_0)))))"
" for-loop_126)"
" null"
" lst_125))))"
" srcloc_0"
" #f))"
"(if(pair? v_0)"
"(let-values()"
"(read-to-syntax"
"(cons(read-coerce #t(car v_0) srcloc_0)(read-coerce #t(cdr v_0) srcloc_0))"
" srcloc_0"
" #f))"
"(let-values()(read-to-syntax v_0 srcloc_0 #f)))))))))"
"(define-values"
"(read-coerce-key)"
"(lambda(for-syntax?_0 k_0)"
"(begin(if for-syntax?_0(let-values()(datum-intern-literal k_0))(let-values() k_0)))))"
"(define-values(default-read-handler) #f)"
"(define-values"
"(default-read-handler?)"
"(lambda(in_0)"
"(begin"
"(if(not default-read-handler)"
"(let-values()(begin(set! default-read-handler(port-read-handler in_0)) #t))"
"(let-values()(eq? default-read-handler(port-read-handler in_0)))))))"
"(define-values(orig-input-port)(current-input-port))"
"(define-values(orig-output-port)(current-output-port))"
"(define-values(orig-error-port)(current-error-port))"
"(define-values"
"(maybe-flush-stdout)"
"(lambda(in_0)"
"(begin"
"(if(eq? in_0 orig-input-port)"
"(let-values()(begin(flush-output orig-output-port)(flush-output orig-error-port)))"
"(void)))))"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader20_138)"
"(lambda(mod-path18_0 sym19_0 fail-thunk17_0)"
"(begin"
" 'dynamic-require-reader20"
"(let-values(((mod-path_142) mod-path18_0))"
"(let-values(((sym_143) sym19_0))"
"(let-values(((fail-thunk_144)"
"(if(eq? fail-thunk17_0 unsafe-undefined)"
" default-dynamic-require-fail-thunk"
" fail-thunk17_0)))"
"(let-values()"
"(let-values(((root-ns_145)(namespace-root-namespace(1/current-namespace))))"
"(if root-ns_145"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_145)"
"(let-values()(1/dynamic-require mod-path_142 sym_143 fail-thunk_144)))"
"(1/dynamic-require mod-path_142 sym_143 fail-thunk_144)))))))))))"
"(case-lambda"
"((mod-path_0 sym_0)(begin(dynamic-require-reader20_138 mod-path_0 sym_0 unsafe-undefined)))"
"((mod-path_0 sym_0 fail-thunk17_0)(dynamic-require-reader20_138 mod-path_0 sym_0 fail-thunk17_0)))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax3_1)"
"(lambda(src1_0 in2_0)"
"(begin"
" 'read-syntax3"
"(let-values(((src_4)(if(eq? src1_0 unsafe-undefined)(object-name(current-input-port)) src1_0)))"
"(let-values(((in_5)(if(eq? in2_0 unsafe-undefined)(current-input-port) in2_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_5)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_5)))"
"(read-syntax$1 src_4 in_5)))))))))))"
"(case-lambda"
"(()(begin 'read-syntax(read-syntax3_1 unsafe-undefined unsafe-undefined)))"
"((src_0 in2_0)(read-syntax3_1 src_0 in2_0))"
"((src1_0)(read-syntax3_1 src1_0 unsafe-undefined)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive10_10)"
"(lambda(src5_0 in6_0 start7_0 readtable8_0 graph?9_0)"
"(begin"
" 'read-syntax/recursive10"
"(let-values(((src_16)"
"(if(eq? src5_0 unsafe-undefined)(object-name(current-input-port)) src5_0)))"
"(let-values(((in_17)(if(eq? in6_0 unsafe-undefined)(current-input-port) in6_0)))"
"(let-values(((start_18) start7_0))"
"(let-values(((readtable_19)"
"(if(eq? readtable8_0 unsafe-undefined)(1/current-readtable) readtable8_0)))"
"(let-values(((graph?_20) graph?9_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_17)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'read-syntax/recursive \"input-port?\" in_17)))"
"(if((lambda(x_0)"
"(let-values(((or-part_23)(not x_0)))"
"(if or-part_23 or-part_23(char? x_0))))"
" start_18)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_18)))"
"(if((lambda(x_0)"
"(let-values(((or-part_25)(not x_0)))"
"(if or-part_25 or-part_25(1/readtable? x_0))))"
" readtable_19)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'read-syntax/recursive"
"                                           \"(or/c readtable? #f)\""
" readtable_19)))"
"(read-syntax/recursive$1"
" src_16"
" in_17"
" start_18"
" readtable_19"
" graph?_20))))))))))))))"
"(case-lambda"
"(()"
"(begin"
" 'read-syntax/recursive"
"(read-syntax/recursive10_10 unsafe-undefined unsafe-undefined #f unsafe-undefined #t)))"
"((src_0 in_0 start_0 readtable_0 graph?9_0)(read-syntax/recursive10_10 src_0 in_0 start_0 readtable_0 graph?9_0))"
"((src_0 in_0 start_0 readtable8_0)(read-syntax/recursive10_10 src_0 in_0 start_0 readtable8_0 #t))"
"((src_0 in_0 start7_0)(read-syntax/recursive10_10 src_0 in_0 start7_0 unsafe-undefined #t))"
"((src_0 in6_0)(read-syntax/recursive10_10 src_0 in6_0 #f unsafe-undefined #t))"
"((src5_0)(read-syntax/recursive10_10 src5_0 unsafe-undefined #f unsafe-undefined #t)))))"
"(define-values"
"(1/read)"
"(let-values(((read13_41)"
"(lambda(in12_0)"
"(begin"
" 'read13"
"(let-values(((in_43)(if(eq? in12_0 unsafe-undefined)(current-input-port) in12_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_43)"
"(void)"
"                                (let-values () (raise-argument-error 'read \"input-port?\" in_43)))"
"(read$1 in_43))))))))))"
"(case-lambda(()(begin 'read(read13_41 unsafe-undefined)))((in12_0)(read13_41 in12_0)))))"
"(define-values"
"(1/read/recursive)"
"(let-values(((read/recursive19_46)"
"(lambda(in15_0 start16_0 readtable17_0 graph?18_0)"
"(begin"
" 'read/recursive19"
"(let-values(((in_51)(if(eq? in15_0 unsafe-undefined)(current-input-port) in15_0)))"
"(let-values(((start_52) start16_0))"
"(let-values(((readtable_53)"
"(if(eq? readtable17_0 unsafe-undefined)(1/current-readtable) readtable17_0)))"
"(let-values(((graph?_54) graph?18_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_51)"
"(void)"
"                                      (let-values () (raise-argument-error 'read/recursive \"input-port?\" in_51)))"
"(if((lambda(x_0)"
"(let-values(((or-part_57)(not x_0)))"
"(if or-part_57 or-part_57(char? x_0))))"
" start_52)"
"(void)"
"                                      (let-values () (raise-argument-error 'read/recursive \"(or/c char? #f)\" start_52)))"
"(if((lambda(x_0)"
"(let-values(((or-part_59)(not x_0)))"
"(if or-part_59 or-part_59(1/readtable? x_0))))"
" readtable_53)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'read/recursive \"(or/c readtable? #f)\" readtable_53)))"
"(read/recursive$1 in_51 start_52 readtable_53 graph?_54)))))))))))))"
"(case-lambda"
"(()(begin 'read/recursive(read/recursive19_46 unsafe-undefined #f unsafe-undefined #t)))"
"((in_0 start_0 readtable_0 graph?18_0)(read/recursive19_46 in_0 start_0 readtable_0 graph?18_0))"
"((in_0 start_0 readtable17_0)(read/recursive19_46 in_0 start_0 readtable17_0 #t))"
"((in_0 start16_0)(read/recursive19_46 in_0 start16_0 unsafe-undefined #t))"
"((in15_0)(read/recursive19_46 in15_0 #f unsafe-undefined #t)))))"
"(define-values"
"(1/read-language)"
"(let-values(((read-language23_70)"
"(lambda(in21_0 fail-thunk22_0)"
"(begin"
" 'read-language23"
"(let-values(((in_73)(if(eq? in21_0 unsafe-undefined)(current-input-port) in21_0)))"
"(let-values(((fail-thunk_74)"
"(if(eq? fail-thunk22_0 unsafe-undefined) read-language-fail-thunk fail-thunk22_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_73)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-language \"input-port?\" in_73)))"
"(if((lambda(p_0)(if(procedure? p_0)(procedure-arity-includes? p_0 0) #f))"
" fail-thunk_74)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'read-language"
"                                     \"(procedure-arity-includes/c 0)\""
" fail-thunk_74)))"
"(read-language$1"
" in_73"
"(if(eq? fail-thunk_74 read-language-fail-thunk) #f fail-thunk_74))))))))))))"
"(case-lambda"
"(()(begin 'read-language(read-language23_70 unsafe-undefined unsafe-undefined)))"
"((in_0 fail-thunk22_0)(read-language23_70 in_0 fail-thunk22_0))"
"((in21_0)(read-language23_70 in21_0 unsafe-undefined)))))"
" (define-values (read-language-fail-thunk) (lambda () (begin (error \"fail\"))))"
"(define-values"
"(declare-primitive-module!)"
"(lambda(name_0 inst_0 in-ns_0 protected_0 cross-phase-persistent?_0)"
"(begin"
"(let-values(((mpi_6)(1/module-path-index-join(list 'quote name_0) #f)))"
"(let-values(((in-ns1_7) in-ns_0)"
"((temp2_8)"
"(let-values(((temp4_11)(1/current-module-declare-source))"
"((cross-phase-persistent?5_12) cross-phase-persistent?_0)"
"((temp6_13)(zero?(hash-count protected_0)))"
"((mpi7_14) mpi_6)"
"((temp8_15)"
"(hasheqv"
" 0"
"(let-values(((lst_17)(1/instance-variable-names inst_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(table_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((sym_21)(unsafe-car lst_0))"
"((rest_22)(unsafe-cdr lst_0)))"
"(let-values(((table_23)"
"(let-values(((table_24) table_0))"
"(let-values(((table_25)"
"(let-values()"
"(let-values(((key_26"
" val_27)"
"(let-values()"
"(let-values(((binding_28)"
"(let-values(((mpi10_29)"
" mpi_6)"
"((temp11_30)"
" 0)"
"((sym12_31)"
" sym_21))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" mpi10_29"
" temp11_30"
" sym12_31))))"
"(values"
" sym_21"
"(if(hash-ref"
" protected_0"
" sym_21"
" #f)"
"(provided1.1"
" binding_28"
" #t"
" #f)"
" binding_28))))))"
"(hash-set"
" table_24"
" key_26"
" val_27)))))"
"(values table_25)))))"
"(if(not #f)"
"(for-loop_18 table_23 rest_22)"
" table_23)))"
" table_0)))))"
" for-loop_18)"
" '#hash()"
" lst_17)))))"
"((temp9_16)"
"(lambda(data-box_0"
" ns_0"
" phase-shift_0"
" phase-level_0"
" self_0"
" bulk-binding-registry_0"
" insp_0)"
"(if(= 0 phase-level_0)"
"(let-values()"
"(begin"
"(let-values(((lst_39)(1/instance-variable-names inst_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_39)))"
"((letrec-values(((for-loop_40)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((sym_42)(unsafe-car lst_0))"
"((rest_43)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((val_44)"
"(1/instance-variable-value"
" inst_0"
" sym_42)))"
"(namespace-set-variable!"
" ns_0"
" 0"
" sym_42"
" val_44)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_40 rest_43)"
"(values))))"
"(values))))))"
" for-loop_40)"
" lst_39)))"
"(void)))"
"(void)))))"
"(make-module39.1"
" cross-phase-persistent?5_12"
" unsafe-undefined"
" unsafe-undefined"
" temp9_16"
" #f"
" 0"
" 0"
" temp6_13"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" #f"
" temp8_15"
" null"
" mpi7_14"
" temp4_11"
" null"
" #f)))"
"((temp3_9)(substitute-module-declare-name name_0)))"
"(declare-module!58.1 #t in-ns1_7 temp2_8 temp3_9))))))"
"(define-values"
"(1/prop:exn:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_0 info_0)"
"(begin"
"(if(if(procedure? v_0)(procedure-arity-includes? v_0 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:exn:missing-module \"(procedure-arity-includes/c 1)\" v_0)))"
" v_0))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" 1/make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_5 make-_6 ?_7 -ref_8 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:exn:missing-module(lambda(e_0)(1/exn:fail:filesystem:missing-module-path e_0))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))))"
"(values struct:_5 make-_6 ?_7(make-struct-field-accessor -ref_8 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" 1/make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_26 make-_27 ?_28 -ref_29 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons 1/prop:exn:missing-module(lambda(e_0)(1/exn:fail:syntax:missing-module-path e_0))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))))"
"(values struct:_26 make-_27 ?_28(make-struct-field-accessor -ref_29 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_0)"
"(begin"
"(if(let-values(((or-part_48)(not v_0)))"
"(if or-part_48"
" or-part_48"
"(let-values(((or-part_49)(1/module-path? v_0)))"
"(if or-part_49 or-part_49(if(syntax?$1 v_0)(1/module-path?(syntax->datum$1 v_0)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_0)))"
" v_0))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_0 filename_0 pre_0 rel_0 post_0 errstr_0)"
"(begin"
"(let-values(((path_56)(1/current-module-path-for-load)))"
"(if path_56"
"(let-values()"
"(begin"
"(if(syntax?$1 path_56)"
"(let-values()"
"(raise"
"(1/make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                      \"~a: cannot open module file\\n\""
"                      \"  module path: ~a\\n\""
"                      \"  path: ~a~a~a~a\\n\""
"                      \"  system error: ~a\")"
"(if(syntax-srcloc path_56)(srcloc->string(syntax-srcloc path_56)) name_0)"
"(syntax->datum$1 path_56)"
" filename_0"
" pre_0"
" rel_0"
" post_0"
" errstr_0)"
"(current-continuation-marks)"
"(list path_56)"
"(syntax->datum$1 path_56))))"
"(void))"
"(raise"
"(1/make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                  \"~a: cannot open module file\\n\""
"                  \"  module path: ~a\\n\""
"                  \"  path: ~a~a~a~a\\n\""
"                  \"  system error: ~a\")"
" name_0"
" path_56"
" filename_0"
" pre_0"
" rel_0"
" post_0"
" errstr_0)"
"(current-continuation-marks)"
" path_56))))"
"(void))))))"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_1)"
"(lambda(s3_0 context4_0 stop-ids5_0 intdefs1_0 extend-stops?2_0)"
"(begin"
" 'local-expand6"
"(let-values(((s_7) s3_0))"
"(let-values(((context_8) context4_0))"
"(let-values(((stop-ids_9) stop-ids5_0))"
"(let-values(((intdefs_10) intdefs1_0))"
"(let-values(((extend-stops?_11) extend-stops?2_0))"
"(let-values()"
"(let-values(((temp59_13) 'local-expand)"
"((s60_14) s_7)"
"((context61_15) context_8)"
"((stop-ids62_16) stop-ids_9)"
"((intdefs63_17) intdefs_10)"
"((extend-stops?64_18) extend-stops?_11))"
"(do-local-expand56.1"
" #f"
" #f"
" extend-stops?64_18"
" #t"
" unsafe-undefined"
" #f"
" #f"
" #f"
" temp59_13"
" s60_14"
" context61_15"
" stop-ids62_16"
" intdefs63_17))))))))))))"
"(case-lambda"
"((s_0 context_0 stop-ids_0)(begin 'local-expand(local-expand6_1 s_0 context_0 stop-ids_0 '() #t)))"
"((s_0 context_0 stop-ids_0 intdefs_0 extend-stops?2_0)"
"(local-expand6_1 s_0 context_0 stop-ids_0 intdefs_0 extend-stops?2_0))"
"((s_0 context_0 stop-ids_0 intdefs1_0)(local-expand6_1 s_0 context_0 stop-ids_0 intdefs1_0 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts14_31)"
"(lambda(s11_0 context12_0 stop-ids13_0 intdefs8_0 lift-key9_0 extend-stops?10_0)"
"(begin"
" 'local-expand/capture-lifts14"
"(let-values(((s_38) s11_0))"
"(let-values(((context_39) context12_0))"
"(let-values(((stop-ids_40) stop-ids13_0))"
"(let-values(((intdefs_41) intdefs8_0))"
"(let-values(((lift-key_42)"
"(if(eq? lift-key9_0 unsafe-undefined)(generate-lift-key) lift-key9_0)))"
"(let-values(((extend-stops?_43) extend-stops?10_0))"
"(let-values()"
"(let-values(((temp65_45) 'local-expand)"
"((s66_46) s_38)"
"((context67_47) context_39)"
"((stop-ids68_48) stop-ids_40)"
"((intdefs69_49) intdefs_41)"
"((temp70_50) #t)"
"((extend-stops?71_51) extend-stops?_43)"
"((lift-key72_52) lift-key_42))"
"(do-local-expand56.1"
" #f"
" temp70_50"
" extend-stops?71_51"
" #t"
" lift-key72_52"
" #f"
" #f"
" #f"
" temp65_45"
" s66_46"
" context67_47"
" stop-ids68_48"
" intdefs69_49)))))))))))))"
"(case-lambda"
"((s_0 context_0 stop-ids_0)"
"(begin"
" 'local-expand/capture-lifts"
"(local-expand/capture-lifts14_31 s_0 context_0 stop-ids_0 '() unsafe-undefined #t)))"
"((s_0 context_0 stop-ids_0 intdefs_0 lift-key_0 extend-stops?10_0)"
"(local-expand/capture-lifts14_31 s_0 context_0 stop-ids_0 intdefs_0 lift-key_0 extend-stops?10_0))"
"((s_0 context_0 stop-ids_0 intdefs_0 lift-key9_0)"
"(local-expand/capture-lifts14_31 s_0 context_0 stop-ids_0 intdefs_0 lift-key9_0 #t))"
"((s_0 context_0 stop-ids_0 intdefs8_0)"
"(local-expand/capture-lifts14_31 s_0 context_0 stop-ids_0 intdefs8_0 unsafe-undefined #t)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand21_71)"
"(lambda(s18_0 context19_0 stop-ids20_0 intdefs16_0 extend-stops?17_0)"
"(begin"
" 'local-transformer-expand21"
"(let-values(((s_77) s18_0))"
"(let-values(((context_78) context19_0))"
"(let-values(((stop-ids_79) stop-ids20_0))"
"(let-values(((intdefs_80) intdefs16_0))"
"(let-values(((extend-stops?_81) extend-stops?17_0))"
"(let-values()"
"(let-values(((temp73_83) 'local-expand)"
"((s74_84) s_77)"
"((context75_85) context_78)"
"((stop-ids76_86) stop-ids_79)"
"((intdefs77_87) intdefs_80)"
"((temp78_88) #t)"
"((extend-stops?79_89) extend-stops?_81))"
"(do-local-expand56.1"
" temp78_88"
" #f"
" extend-stops?79_89"
" #t"
" unsafe-undefined"
" #f"
" #f"
" #f"
" temp73_83"
" s74_84"
" context75_85"
" stop-ids76_86"
" intdefs77_87))))))))))))"
"(case-lambda"
"((s_0 context_0 stop-ids_0)"
"(begin 'local-transformer-expand(local-transformer-expand21_71 s_0 context_0 stop-ids_0 '() #t)))"
"((s_0 context_0 stop-ids_0 intdefs_0 extend-stops?17_0)"
"(local-transformer-expand21_71 s_0 context_0 stop-ids_0 intdefs_0 extend-stops?17_0))"
"((s_0 context_0 stop-ids_0 intdefs16_0)(local-transformer-expand21_71 s_0 context_0 stop-ids_0 intdefs16_0 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts29_102)"
"(lambda(s26_0 context27_0 stop-ids28_0 intdefs23_0 lift-key24_0 extend-stops?25_0)"
"(begin"
" 'local-transformer-expand/capture-lifts29"
"(let-values(((s_109) s26_0))"
"(let-values(((context_110) context27_0))"
"(let-values(((stop-ids_111) stop-ids28_0))"
"(let-values(((intdefs_112) intdefs23_0))"
"(let-values(((lift-key_113)"
"(if(eq? lift-key24_0 unsafe-undefined)(generate-lift-key) lift-key24_0)))"
"(let-values(((extend-stops?_114) extend-stops?25_0))"
"(let-values()"
"(let-values(((temp80_116) 'local-expand)"
"((s81_117) s_109)"
"((context82_118) context_110)"
"((stop-ids83_119) stop-ids_111)"
"((intdefs84_120) intdefs_112)"
"((temp85_121) #t)"
"((temp86_122) #t)"
"((extend-stops?87_123) extend-stops?_114)"
"((lift-key88_124) lift-key_113))"
"(do-local-expand56.1"
" temp85_121"
" temp86_122"
" extend-stops?87_123"
" #t"
" lift-key88_124"
" #f"
" #f"
" #f"
" temp80_116"
" s81_117"
" context82_118"
" stop-ids83_119"
" intdefs84_120)))))))))))))"
"(case-lambda"
"((s_0 context_0 stop-ids_0)"
"(begin"
" 'local-transformer-expand/capture-lifts"
"(local-transformer-expand/capture-lifts29_102 s_0 context_0 stop-ids_0 '() unsafe-undefined #t)))"
"((s_0 context_0 stop-ids_0 intdefs_0 lift-key_0 extend-stops?25_0)"
"(local-transformer-expand/capture-lifts29_102 s_0 context_0 stop-ids_0 intdefs_0 lift-key_0 extend-stops?25_0))"
"((s_0 context_0 stop-ids_0 intdefs_0 lift-key24_0)"
"(local-transformer-expand/capture-lifts29_102 s_0 context_0 stop-ids_0 intdefs_0 lift-key24_0 #t))"
"((s_0 context_0 stop-ids_0 intdefs23_0)"
"(local-transformer-expand/capture-lifts29_102 s_0 context_0 stop-ids_0 intdefs23_0 unsafe-undefined #t)))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(let-values(((syntax-local-expand-expression33_143)"
"(lambda(s32_0 opaque-only?31_0)"
"(begin"
" 'syntax-local-expand-expression33"
"(let-values(((s_146) s32_0))"
"(let-values(((opaque-only?_147) opaque-only?31_0))"
"(let-values()"
"(let-values(((exp-s_148)"
"(let-values(((temp89_152) 'syntax-local-expand-expression)"
"((s90_153) s_146)"
"((temp91_154) 'expression)"
"((null92_155) null)"
"((temp93_156) #f)"
"((opaque-only?94_157) opaque-only?_147)"
"((temp95_158) #t)"
"((temp96_159) #t)"
"((temp97_160) #f))"
"(do-local-expand56.1"
" #f"
" #f"
" #t"
" temp97_160"
" unsafe-undefined"
" temp95_158"
" opaque-only?94_157"
" temp96_159"
" temp89_152"
" s90_153"
" temp91_154"
" null92_155"
" temp93_156))))"
"(let-values(((ctx_149)(let-values()(get-current-expand-context16.1 #f 'unexpected))))"
"(let-values(((ae_150)"
"(flip-introduction-scopes"
"(datum->syntax$1"
" #f"
"(already-expanded1.1"
"(if(parsed? exp-s_148)"
" exp-s_148"
"(flip-introduction-scopes exp-s_148 ctx_149))"
"(expand-context-binding-layer ctx_149)))"
" ctx_149)))"
"(begin"
"(let-values(((obs_161)(expand-context-observer ctx_149)))"
"(if obs_161"
"(let-values()(let-values()(call-expand-observe obs_161 'opaque-expr ae_150)))"
"(void)))"
"(let-values(((obs_162)(expand-context-observer ctx_149)))"
"(if obs_162"
"(let-values()"
"(let-values()(call-expand-observe obs_162 'exit-local exp-s_148)))"
"(void)))"
"(values(if(not opaque-only?_147) exp-s_148 #f) ae_150))))))))))))"
"(case-lambda"
"((s_0)(begin 'syntax-local-expand-expression(syntax-local-expand-expression33_143 s_0 #f)))"
"((s_0 opaque-only?31_0)(syntax-local-expand-expression33_143 s_0 opaque-only?31_0)))))"
"(define-values"
"(do-local-expand56.1)"
"(lambda(as-transformer?36_0"
" capture-lifts?35_0"
" extend-stops?37_0"
" keep-#%expression?39_0"
" lift-key40_0"
" skip-log-exit?42_0"
" to-parsed-ok?38_0"
" track-to-be-defined?41_0"
" who52_0"
" s-or-s-exp53_0"
" context54_0"
" stop-ids55_0"
" intdefs51_0)"
"(begin"
" 'do-local-expand56"
"(let-values(((who_179) who52_0))"
"(let-values(((s-or-s-exp_180) s-or-s-exp53_0))"
"(let-values(((context_181) context54_0))"
"(let-values(((stop-ids_182) stop-ids55_0))"
"(let-values(((intdefs_183) intdefs51_0))"
"(let-values(((capture-lifts?_184) capture-lifts?35_0))"
"(let-values(((as-transformer?_185) as-transformer?36_0))"
"(let-values(((extend-stops?_186) extend-stops?37_0))"
"(let-values(((to-parsed-ok?_187) to-parsed-ok?38_0))"
"(let-values(((keep-#%expression?_188) keep-#%expression?39_0))"
"(let-values(((lift-key_189)"
"(if(eq? lift-key40_0 unsafe-undefined)"
"(if(let-values(((or-part_190) capture-lifts?_184))"
"(if or-part_190 or-part_190 as-transformer?_185))"
"(generate-lift-key)"
" #f)"
" lift-key40_0)))"
"(let-values(((track-to-be-defined?_191) track-to-be-defined?41_0))"
"(let-values(((skip-log-exit?_192) skip-log-exit?42_0))"
"(let-values()"
"(let-values()"
"(let-values(((s_193)(datum->syntax$1 #f s-or-s-exp_180)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_200)(list? context_181)))"
"(if or-part_200"
" or-part_200"
"(memq"
" context_181"
"(if as-transformer?_185"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_179"
"(if as-transformer?_185"
"                                                             \"(or/c 'expression 'top-level list?)\""
"                                                             \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_181)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_201)(not stop-ids_182)))"
"(if or-part_201"
" or-part_201"
"(if(list? stop-ids_182)"
"(andmap2 identifier? stop-ids_182)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_179"
"                                                             \"(or/c (listof identifier?) #f)\""
" stop-ids_182)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(intdefs-or-false? intdefs_183)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_179"
" intdefs-or-false?-string"
" intdefs_183)))"
"(values))))"
"(let-values(((ctx_194)"
"(let-values(((who98_202) who_179))"
"(get-current-expand-context16.1 #f who98_202))))"
"(let-values(((phase_195)"
"(if as-transformer?_185"
"(add1(expand-context-phase ctx_194))"
"(expand-context-phase ctx_194))))"
"(let-values(((local-ctx_196)"
"(let-values(((ctx99_204) ctx_194)"
"((context100_205) context_181)"
"((phase101_206) phase_195)"
"((intdefs102_207) intdefs_183)"
"((stop-ids103_208) stop-ids_182)"
"((extend-stops?104_209) extend-stops?_186)"
"((to-parsed-ok?105_210) to-parsed-ok?_187)"
"((temp106_211)"
"(let-values(((or-part_213)"
" keep-#%expression?_188))"
"(if or-part_213"
" or-part_213"
"(if(expand-context-in-local-expand?"
" ctx_194)"
"(expand-context-keep-#%expression?"
" ctx_194)"
" #f))))"
"((track-to-be-defined?107_212)"
" track-to-be-defined?_191))"
"(make-local-expand-context44.1"
" context100_205"
" extend-stops?104_209"
" intdefs102_207"
" temp106_211"
" phase101_206"
" stop-ids103_208"
" to-parsed-ok?105_210"
" track-to-be-defined?107_212"
" ctx99_204))))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
"(expand-context-namespace ctx_194)"
" phase_195)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_214)"
"(expand-context-observer"
" local-ctx_196)))"
"(if obs_214"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_214"
" 'enter-local"
" s_193)))"
"(void)))"
"(values))))"
"(let-values(((input-s_197)"
"(let-values(((temp108_215)"
"(flip-introduction-scopes"
" s_193"
" ctx_194))"
"((intdefs109_216) intdefs_183))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" #f"
" temp108_215"
" intdefs109_216))))"
"(let-values((()"
"(begin"
"(if as-transformer?_185"
"(let-values()"
"(let-values(((obs_217)"
"(expand-context-observer"
" local-ctx_196)))"
"(if obs_217"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_217"
" 'phase-up)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_218)"
"(expand-context-observer"
" local-ctx_196)))"
"(if obs_218"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_218"
" 'local-pre"
" input-s_197)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if stop-ids_182"
"(let-values()"
"(let-values(((obs_219)"
"(expand-context-observer"
" local-ctx_196)))"
"(if obs_219"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_219"
" 'start)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((output-s_198)"
"(if(if as-transformer?_185"
" capture-lifts?_184"
" #f)"
"(let-values()"
"(let-values(((input-s110_221)"
" input-s_197)"
"((local-ctx111_222)"
" local-ctx_196)"
"((context112_223)"
" context_181)"
"((temp113_224) #f)"
"((temp114_225) #t)"
"((lift-key115_226)"
" lift-key_189)"
"((temp116_227) #t)"
"((temp117_228) #t))"
"(expand-transformer92.1"
" temp116_227"
" temp114_225"
" context112_223"
" temp113_224"
" temp117_228"
" lift-key115_226"
" input-s110_221"
" local-ctx111_222)))"
"(if as-transformer?_185"
"(let-values()"
"(let-values(((input-s118_230)"
" input-s_197)"
"((local-ctx119_231)"
" local-ctx_196)"
"((context120_232)"
" context_181)"
"((temp121_233) #f)"
"((temp122_234)"
"(eq?"
" 'top-level"
" context_181))"
"((lift-key123_235)"
" lift-key_189)"
"((temp124_236) #t))"
"(expand-transformer92.1"
" #f"
" temp122_234"
" context120_232"
" temp121_233"
" temp124_236"
" lift-key123_235"
" input-s118_230"
" local-ctx119_231)))"
"(if capture-lifts?_184"
"(let-values()"
"(let-values(((input-s125_238)"
" input-s_197)"
"((local-ctx126_239)"
" local-ctx_196)"
"((temp127_240) #t)"
"((lift-key128_241)"
" lift-key_189)"
"((temp129_242) #t))"
"(expand/capture-lifts75.1"
" temp129_242"
" temp127_240"
" #f"
" lift-key128_241"
" input-s125_238"
" local-ctx126_239)))"
"(let-values()"
"(let-values(((input-s130_243)"
" input-s_197)"
"((local-ctx131_244)"
" local-ctx_196))"
"(expand9.1"
" #f"
" #f"
" #f"
" input-s130_243"
" local-ctx131_244))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_245)"
"(expand-context-observer"
" local-ctx_196)))"
"(if obs_245"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_245"
" 'local-post"
" output-s_198)))"
"(void)))"
"(values))))"
"(let-values(((result-s_199)"
"(if(parsed? output-s_198)"
" output-s_198"
"(flip-introduction-scopes"
" output-s_198"
" ctx_194))))"
"(begin"
"(if skip-log-exit?_192"
"(void)"
"(let-values()"
"(let-values(((obs_246)"
"(expand-context-observer"
" local-ctx_196)))"
"(if obs_246"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_246"
" 'exit-local"
" result-s_199)))"
"(void)))))"
" result-s_199)))))))))))))))))))))))))))))))))))"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_0)"
"(begin"
" 'syntax-tainted?"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_0)))"
"(syntax-tainted?$1 s_0)))))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm4_3)"
"(lambda(s3_0 maybe-insp1_0 use-mode?2_0)"
"(begin"
" 'syntax-arm4"
"(let-values(((s_7) s3_0))"
"(let-values(((maybe-insp_8) maybe-insp1_0))"
"(let-values(((use-mode?_9) use-mode?2_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_7)"
"(void)"
"                                                  (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_7)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_8)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_8)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-arm"
"                                                       \"(or/c inspector? #f)\""
" maybe-insp_8)))"
"(values))))"
"(let-values(((insp_11)(inspector-for-taint maybe-insp_8)))"
"(if use-mode?_9"
"(let-values()"
"(taint-dispatch"
" s_7"
"(lambda(s_0)(syntax-arm$1 s_0 insp_11))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_7 insp_11))))))))))))))))"
"(case-lambda"
"((s_0)(begin 'syntax-arm(syntax-arm4_3 s_0 #f #f)))"
"((s_0 maybe-insp_0 use-mode?2_0)(syntax-arm4_3 s_0 maybe-insp_0 use-mode?2_0))"
"((s_0 maybe-insp1_0)(syntax-arm4_3 s_0 maybe-insp1_0 #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_0 maybe-insp_0)"
"(begin"
" 'syntax-disarm"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_0)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_24)(not maybe-insp_0)))"
"(if or-part_24 or-part_24(inspector? maybe-insp_0)))"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_0)))"
"(values))))"
"(let-values(((insp_23)(inspector-for-taint maybe-insp_0)))(syntax-disarm$1 s_0 insp_23)))))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm9_25)"
"(lambda(s7_0 from-s8_0 use-mode?6_0)"
"(begin"
" 'syntax-rearm9"
"(let-values(((s_29) s7_0))"
"(let-values(((from-s_30) from-s8_0))"
"(let-values(((use-mode?_31) use-mode?6_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_29)"
"(void)"
"                                    (let-values () (raise-argument-error 'syntax-rearm \"syntax?\" s_29)))"
"(if(syntax?$1 from-s_30)"
"(void)"
"                                    (let-values () (raise-argument-error 'syntax-rearm \"syntax?\" from-s_30)))"
"(if use-mode?_31"
"(let-values()"
"(taint-dispatch"
" s_29"
"(lambda(s_0)(syntax-rearm$1 s_0 from-s_30))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_29 from-s_30))))))))))))))"
"(case-lambda"
"((s_0 from-s_0)(begin 'syntax-rearm(syntax-rearm9_25 s_0 from-s_0 #f)))"
"((s_0 from-s_0 use-mode?6_0)(syntax-rearm9_25 s_0 from-s_0 use-mode?6_0)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_0)"
"(begin"
" 'syntax-taint"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_0)))"
"(syntax-taint$1 s_0)))))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_0)"
"(begin"
"(let-values(((or-part_42) maybe-insp_0))"
"(if or-part_42"
" or-part_42"
"(let-values(((or-part_43)(current-module-code-inspector)))"
"(if or-part_43 or-part_43(current-code-inspector))))))))"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->empty-namespace"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"              (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_0)))"
"(let-values(((temp2_3)(1/variable-reference->namespace vr_0)))"
"(new-namespace8.1 #t unsafe-undefined temp2_3))))))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->namespace"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_0)))"
"(values))))"
"(let-values(((ns_6)(variable-reference->namespace* vr_0)))"
"(let-values(((mpi_7)(namespace-mpi ns_6)))"
"(begin"
"(if(non-self-module-path-index? mpi_7)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_6)"
"(let-values()"
"(let-values(((ns4_8) ns_6)((mpi5_9) mpi_7)((temp6_10)(namespace-0-phase ns_6)))"
"(namespace-module-make-available!112.1 unsafe-undefined ns4_8 mpi5_9 temp6_10)))))"
"(void))"
" ns_6)))))))))"
"(define-values"
"(variable-reference->namespace*)"
"(lambda(vr_0)"
"(begin"
"(let-values(((inst_12)(1/variable-reference->instance vr_0)))"
"(if(symbol? inst_12)"
"(let-values()"
"(1/module->namespace(list 'quote inst_12)(1/instance-data(1/variable-reference->instance vr_0 #t))))"
"(if(not inst_12)"
"(let-values()(1/instance-data(1/variable-reference->instance vr_0 #t)))"
"(let-values()(1/instance-data inst_12))))))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->module-path-index"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_0)))"
"(values))))"
"(let-values(((mpi_15)(namespace-mpi(variable-reference->namespace* vr_0))))"
"(if(top-level-module-path-index? mpi_15) #f mpi_15))))))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->resolved-module-path"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'variable-reference->resolved-module-path"
"                               \"variable-reference?\""
" vr_0)))"
"(values))))"
"(let-values(((mpi_18)(1/variable-reference->module-path-index vr_0)))"
"(if mpi_18(1/module-path-index-resolve mpi_18) #f))))))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->module-source"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_0)))"
"(values))))"
"(let-values(((ns_21)(variable-reference->namespace* vr_0)))(namespace-source-name ns_21))))))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->phase"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"              (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_0)))"
"(namespace-phase(variable-reference->namespace* vr_0))))))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->module-base-phase"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"              (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_0)))"
"(namespace-0-phase(variable-reference->namespace* vr_0))))))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->module-declaration-inspector"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"(let-values()"
"                (raise-argument-error 'variable-reference->module-declaration-inspector \"variable-reference?\" vr_0)))"
"(if(1/variable-reference->instance vr_0)"
"(let-values()"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"                 \"variable reference does not refer to an anonymous module variable\""
"                 \"variable reference\""
" vr_0))"
"(void))"
"(let-values(((or-part_28)(namespace-declaration-inspector(variable-reference->namespace* vr_0))))"
"(if or-part_28"
" or-part_28"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"                 \"given variable reference is not from a module\")))))))))"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-remove"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'struct:exn:fail:syntax"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'struct:exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:exn:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'struct:exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'struct:exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-interned-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-make-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector"
" 'read-syntax"
" 'read-syntax/recursive))"
"(void"
"(begin"
"(add-core-primitive! 'syntax? syntax?$1)"
"(add-core-primitive! 'syntax-e 1/syntax-e)"
"(add-core-primitive! 'syntax->datum 1/syntax->datum)"
"(add-core-primitive! 'datum->syntax 1/datum->syntax)"
"(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)"
"(add-core-primitive! 'free-identifier=? 1/free-identifier=?)"
"(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?)"
"(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?)"
"(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)"
"(add-core-primitive! 'identifier-binding 1/identifier-binding)"
"(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding)"
"(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding)"
"(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)"
"(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol)"
"(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context)"
"(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)"
"(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)"
"(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)"
"(add-core-primitive! 'syntax-source-module 1/syntax-source-module)"
"(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module)"
"(add-core-primitive! 'syntax-source 1/syntax-source)"
"(add-core-primitive! 'syntax-line 1/syntax-line)"
"(add-core-primitive! 'syntax-column 1/syntax-column)"
"(add-core-primitive! 'syntax-position 1/syntax-position)"
"(add-core-primitive! 'syntax-span 1/syntax-span)"
"(add-core-primitive! 'syntax->list 1/syntax->list)"
"(add-core-primitive! 'syntax-property syntax-property$1)"
"(add-core-primitive! 'syntax-property-remove 1/syntax-property-remove)"
"(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?)"
"(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys)"
"(add-core-primitive! 'syntax-original? 1/syntax-original?)"
"(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)"
"(add-core-primitive! 'syntax-arm 1/syntax-arm)"
"(add-core-primitive! 'syntax-disarm 1/syntax-disarm)"
"(add-core-primitive! 'syntax-rearm 1/syntax-rearm)"
"(add-core-primitive! 'syntax-taint 1/syntax-taint)"
"(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)"
"(add-core-primitive! 'struct:exn:fail:syntax 1/struct:exn:fail:syntax)"
"(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax$1)"
"(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax$1)"
"(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)"
"(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)"
"(add-core-primitive! 'struct:exn:fail:syntax:unbound 1/struct:exn:fail:syntax:unbound)"
"(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1)"
"(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1)"
"(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)"
"(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load)"
"(add-core-primitive! 'prop:exn:missing-module 1/prop:exn:missing-module)"
"(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)"
"(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor)"
"(add-core-primitive! 'struct:exn:fail:filesystem:missing-module 1/struct:exn:fail:filesystem:missing-module)"
"(add-core-primitive! 'exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module)"
"(add-core-primitive! 'make-exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module)"
"(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?)"
"(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path)"
"(add-core-primitive! 'struct:exn:fail:syntax:missing-module 1/struct:exn:fail:syntax:missing-module)"
"(add-core-primitive! 'exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module)"
"(add-core-primitive! 'make-exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module)"
"(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?)"
"(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path)"
"(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)"
"(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?)"
"(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?)"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?)"
"(add-core-primitive! 'syntax-local-context 1/syntax-local-context)"
"(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)"
"(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding)"
"(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)"
"(add-core-primitive! 'syntax-local-name 1/syntax-local-name)"
"(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)"
"(add-core-primitive! 'make-interned-syntax-introducer 1/make-interned-syntax-introducer)"
"(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer)"
"(add-core-primitive! 'syntax-local-make-delta-introducer 1/syntax-local-make-delta-introducer)"
"(add-core-primitive! 'syntax-local-value 1/syntax-local-value)"
"(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate)"
"(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression)"
"(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression)"
"(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context)"
"(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)"
"(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require)"
"(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide)"
"(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration)"
"(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers)"
"(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers)"
"(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports)"
"(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)"
"(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower)"
"(add-core-primitive! 'local-expand 1/local-expand)"
"(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts)"
"(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)"
"(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts)"
"(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression)"
"(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?)"
"(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context)"
"(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes)"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers)"
"(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce)"
"(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal)"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context)"
"(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)"
"(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)"
"(add-core-primitive! 'set!-transformer? 1/set!-transformer?)"
"(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure)"
"(add-core-primitive! 'rename-transformer? 1/rename-transformer?)"
"(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)"
"(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)"
"(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target)"
"(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context)"
"(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?)"
"(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)"
"(add-core-primitive! 'module-path? 1/module-path?)"
"(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)"
"(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path)"
"(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name)"
"(add-core-primitive! 'module-path-index? 1/module-path-index?)"
"(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve)"
"(add-core-primitive! 'module-path-index-join 1/module-path-index-join)"
"(add-core-primitive! 'module-path-index-split 1/module-path-index-split)"
"(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule)"
"(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver)"
"(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name)"
"(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source)"
"(add-core-primitive! 'current-namespace 1/current-namespace)"
"(add-core-primitive! 'namespace-module-registry namespace-module-registry$1)"
"(add-core-primitive! 'namespace? 1/namespace?)"
"(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace)"
"(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace)"
"(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path)"
"(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index)"
"(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source)"
"(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase)"
"(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase)"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector)"
"(add-core-primitive! 'read-syntax 1/read-syntax)"
"(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)))"
"(define-values"
"(declare-kernel-module!8.1)"
"(lambda(eval1_0 main-ids2_0 read-ids3_0 ns7_0)"
"(begin"
" 'declare-kernel-module!8"
"(let-values(((ns_29) ns7_0))"
"(let-values()"
"(let-values(((main-ids_31) main-ids2_0))"
"(let-values(((read-ids_32) read-ids3_0))"
"(let-values()"
"(begin"
"(let-values(((temp53_34) '#%kernel)"
"((temp54_35) '#%runtime)"
"((temp55_36)(set-union primitive-ids(set-union main-ids_31 read-ids_32)))"
"((temp56_37)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?"
" 'variable-reference-from-unsafe?"
" 1/variable-reference-from-unsafe?))"
"((ns57_38) ns_29))"
"(copy-runtime-module!26.1 unsafe-undefined temp56_37 ns57_38 #t #f temp55_36 temp54_35 temp53_34))"
"(let-values(((temp58_40) '#%kernel)"
"((temp59_41) '(#%core #%runtime #%main #%read))"
"((ns60_42) ns_29))"
"(declare-reexporting-module!50.1 ns60_42 #t temp58_40 temp59_41)))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lambda(alts14_0 extras15_0 namespace12_0 primitive?16_0 protected?17_0 skip13_0 to11_0 name25_0)"
"(begin"
" 'copy-runtime-module!26"
"(let-values(((name_73) name25_0))"
"(let-values(((to-name_74)(if(eq? to11_0 unsafe-undefined) name_73 to11_0)))"
"(let-values(((ns_75) namespace12_0))"
"(let-values(((skip-syms_76)(if(eq? skip13_0 unsafe-undefined)(seteq) skip13_0)))"
"(let-values(((alts_77)(if(eq? alts14_0 unsafe-undefined) '#hasheq() alts14_0)))"
"(let-values(((extras_78)(if(eq? extras15_0 unsafe-undefined) '#hasheq() extras15_0)))"
"(let-values(((primitive?_79) primitive?16_0))"
"(let-values(((protected?_80) protected?17_0))"
"(let-values()"
"(let-values(((prims_81)(1/primitive-table name_73)))"
"(let-values((()"
"(begin"
"(let-values(((ht_84) prims_81))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_84)))"
"((letrec-values(((for-loop_85)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_87)"
"(hash-iterate-key ht_84 i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_87))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_85(hash-iterate-next ht_84 i_0))"
"(values))))"
"(values))))))"
" for-loop_85)"
"(hash-iterate-first ht_84))))"
"(values))))"
"(let-values()"
"(let-values(((ht_82)"
"(let-values(((ht_88) prims_81))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_88)))"
"((letrec-values(((for-loop_89)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_92 val_93)"
"(hash-iterate-key+value"
" ht_88"
" i_0)))"
"(let-values(((table_94)"
"(let-values(((table_95)"
" table_0))"
"(if(set-member?"
" skip-syms_76"
" sym_92)"
" table_95"
"(let-values(((table_96)"
" table_95))"
"(let-values(((table_97)"
"(let-values()"
"(let-values(((key_98"
" val_99)"
"(let-values()"
"(values"
" sym_92"
"(let-values(((or-part_100)"
"(hash-ref"
" alts_77"
" sym_92"
" #f)))"
"(if or-part_100"
" or-part_100"
" val_93))))))"
"(hash-set"
" table_96"
" key_98"
" val_99)))))"
"(values table_97)))))))"
"(if(not #f)"
"(for-loop_89"
" table_94"
"(hash-iterate-next ht_88 i_0))"
" table_94)))"
" table_0)))))"
" for-loop_89)"
" '#hasheq()"
"(hash-iterate-first ht_88))))))"
"(let-values(((ht+extras_83)"
"(let-values(((ht_101) extras_78))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_101)))"
"((letrec-values(((for-loop_102)"
"(lambda(ht_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_105 v_106)"
"(hash-iterate-key+value"
" ht_101"
" i_0)))"
"(let-values(((ht_107)"
"(let-values(((ht_108) ht_0))"
"(let-values(((ht_109)"
"(let-values()"
"(hash-set"
" ht_108"
" k_105"
" v_106))))"
"(values ht_109)))))"
"(if(not #f)"
"(for-loop_102"
" ht_107"
"(hash-iterate-next ht_101 i_0))"
" ht_107)))"
" ht_0)))))"
" for-loop_102)"
" ht_82"
"(hash-iterate-first ht_101))))))"
"(let-values(((to-name61_111) to-name_74)"
"((ht+extras62_112) ht+extras_83)"
"((ns63_113) ns_75)"
"((primitive?64_114) primitive?_79)"
"((protected?65_115) protected?_80))"
"(declare-hash-based-module!41.1"
" ns63_113"
" primitive?64_114"
" null"
" protected?65_115"
" #f"
" to-name61_111"
" ht+extras62_112)))))))))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lambda(namespace29_0 primitive?30_0 protected32_0 protected?31_0 register-builtin?33_0 name39_0 ht40_0)"
"(begin"
" 'declare-hash-based-module!41"
"(let-values(((name_162) name39_0))"
"(let-values(((ht_163) ht40_0))"
"(let-values(((ns_164) namespace29_0))"
"(let-values(((primitive?_165) primitive?30_0))"
"(let-values(((protected?_166) protected?31_0))"
"(let-values(((protected-syms_167) protected32_0))"
"(let-values(((register-builtin?_168) register-builtin?33_0))"
"(let-values()"
"(let-values(((mpi_169)(1/module-path-index-join(list 'quote name_162) #f)))"
"(let-values(((ns66_170) ns_164)"
"((temp67_171)"
"(let-values(((temp69_174) #t)"
"((primitive?70_175) primitive?_165)"
"((temp71_176) #t)"
"((temp72_177)(not protected?_166))"
"((mpi73_178) mpi_169)"
"((temp74_179)"
"(hasheqv"
" 0"
"(let-values(((ht_181) ht_163))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_181)))"
"((letrec-values(((for-loop_182)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_185)"
"(hash-iterate-key"
" ht_181"
" i_0)))"
"(let-values(((table_186)"
"(let-values(((table_187)"
" table_0))"
"(let-values(((table_188)"
"(let-values()"
"(let-values(((key_189"
" val_190)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_168"
"(let-values()"
"(register-built-in-symbol!"
" sym_185))"
"(void))"
"(values))))"
"(let-values(((binding_191)"
"(let-values(((mpi76_192)"
" mpi_169)"
"((temp77_193)"
" 0)"
"((sym78_194)"
" sym_185))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" mpi76_192"
" temp77_193"
" sym78_194))))"
"(values"
" sym_185"
"(if(let-values(((or-part_195)"
" protected?_166))"
"(if or-part_195"
" or-part_195"
"(member"
" sym_185"
" protected-syms_167)))"
"(provided1.1"
" binding_191"
" #t"
" #f)"
" binding_191)))))))"
"(hash-set"
" table_187"
" key_189"
" val_190)))))"
"(values"
" table_188)))))"
"(if(not #f)"
"(for-loop_182"
" table_186"
"(hash-iterate-next ht_181 i_0))"
" table_186)))"
" table_0)))))"
" for-loop_182)"
" '#hash()"
"(hash-iterate-first ht_181))))))"
"((temp75_180)"
"(lambda(data-box_0"
" ns_0"
" phase-shift_0"
" phase-level_0"
" self_0"
" bulk-binding-registry_0"
" insp_0)"
"(if(= 0 phase-level_0)"
"(let-values()"
"(begin"
"(let-values(((ht_203) ht_163))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_203)))"
"((letrec-values(((for-loop_204)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_206 val_207)"
"(hash-iterate-key+value"
" ht_203"
" i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_0"
" 0"
" sym_206"
" val_207"
" #t))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_204"
"(hash-iterate-next"
" ht_203"
" i_0))"
"(values))))"
"(values))))))"
" for-loop_204)"
"(hash-iterate-first ht_203))))"
"(void)))"
"(void)))))"
"(make-module39.1"
" temp69_174"
" unsafe-undefined"
" unsafe-undefined"
" temp75_180"
" #f"
" 0"
" 0"
" temp72_177"
" unsafe-undefined"
" temp71_176"
" unsafe-undefined"
" primitive?70_175"
" temp74_179"
" null"
" mpi73_178"
" #f"
" null"
" #f)))"
"((temp68_172)(1/module-path-index-resolve mpi_169)))"
"(declare-module!58.1 #t ns66_170 temp67_171 temp68_172))))))))))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lambda(namespace45_0 reexport?44_0 name48_0 require-names49_0)"
"(begin"
" 'declare-reexporting-module!50"
"(let-values(((name_245) name48_0))"
"(let-values(((require-names_246) require-names49_0))"
"(let-values(((reexport?_247) reexport?44_0))"
"(let-values(((ns_248) namespace45_0))"
"(let-values()"
"(let-values(((mpi_249)(1/module-path-index-join(list 'quote name_245) #f)))"
"(let-values(((require-mpis_250)"
"(reverse$1"
"(let-values(((lst_251) require-names_246))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_251)))"
"((letrec-values(((for-loop_252)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((require-name_255)(unsafe-car lst_0))"
"((rest_256)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_257)"
"(let-values(((fold-var_258) fold-var_0))"
"(let-values(((fold-var_259)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_255)"
" #f))"
" fold-var_258))))"
"(values fold-var_259)))))"
"(if(not #f)"
"(for-loop_252 fold-var_257 rest_256)"
" fold-var_257)))"
" fold-var_0)))))"
" for-loop_252)"
" null"
" lst_251))))))"
"(let-values(((ns79_260) ns_248)"
"((temp80_261)"
"(let-values(((temp82_264) #t)"
"((temp83_265) #t)"
"((mpi84_266) mpi_249)"
"((temp85_267)(list(cons 0 require-mpis_250)))"
"((temp86_268)"
"(if reexport?_247"
"(hasheqv"
" 0"
"(let-values(((lst_270) require-mpis_250))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_270)))"
"((letrec-values(((for-loop_271)"
"(lambda(table_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((require-mpi_274)"
"(unsafe-car lst_0))"
"((rest_275)"
"(unsafe-cdr lst_0)))"
"(let-values(((table_276)"
"(let-values(((m_277)"
"(namespace->module"
" ns_248"
"(1/module-path-index-resolve"
" require-mpi_274))))"
"(begin"
" #t"
"((letrec-values(((for-loop_278)"
"(lambda(table_1)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_280)"
"(let-values(((ht_281)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_277)"
"(module-self"
" m_277)"
" require-mpi_274)"
" 0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_281)))"
"((letrec-values(((for-loop_282)"
"(lambda(table_2"
" i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((sym_285"
" binding_286)"
"(hash-iterate-key+value"
" ht_281"
" i_0)))"
"(let-values(((table_287)"
"(let-values(((table_288)"
" table_2))"
"(let-values(((table_289)"
"(let-values()"
"(let-values(((key_290"
" val_291)"
"(let-values()"
"(values"
" sym_285"
" binding_286))))"
"(hash-set"
" table_288"
" key_290"
" val_291)))))"
"(values"
" table_289)))))"
"(if(not"
" #f)"
"(for-loop_282"
" table_287"
"(hash-iterate-next"
" ht_281"
" i_0))"
" table_287)))"
" table_2)))))"
" for-loop_282)"
" table_1"
"(hash-iterate-first"
" ht_281))))))"
" table_280))))))"
" for-loop_278)"
" table_0)))))"
"(if(not #f)"
"(for-loop_271 table_276 rest_275)"
" table_276)))"
" table_0)))))"
" for-loop_271)"
" '#hash()"
" lst_270))))"
" '#hasheqv()))"
"((void87_269) void))"
"(make-module39.1"
" temp82_264"
" unsafe-undefined"
" unsafe-undefined"
" void87_269"
" #f"
" 0"
" 0"
" #f"
" unsafe-undefined"
" temp83_265"
" unsafe-undefined"
" #f"
" temp86_268"
" temp85_267"
" mpi84_266"
" #f"
" null"
" #f)))"
"((temp81_262)(1/module-path-index-resolve mpi_249)))"
"(declare-module!58.1 #t ns79_260 temp80_261 temp81_262))))))))))))"
"(define-values"
"(read-primitives)"
"(hasheq"
" 'read"
" 1/read"
" 'read/recursive"
" 1/read/recursive"
" 'read-language"
" 1/read-language"
" 'string->number"
" 1/string->number"
" 'current-reader-guard"
" 1/current-reader-guard"
" 'read-square-bracket-as-paren"
" 1/read-square-bracket-as-paren"
" 'read-curly-brace-as-paren"
" 1/read-curly-brace-as-paren"
" 'read-square-bracket-with-tag"
" 1/read-square-bracket-with-tag"
" 'read-curly-brace-with-tag"
" 1/read-curly-brace-with-tag"
" 'read-cdot"
" 1/read-cdot"
" 'read-accept-graph"
" 1/read-accept-graph"
" 'read-accept-compiled"
" 1/read-accept-compiled"
" 'read-accept-box"
" 1/read-accept-box"
" 'read-decimal-as-inexact"
" 1/read-decimal-as-inexact"
" 'read-accept-dot"
" 1/read-accept-dot"
" 'read-accept-infix-dot"
" 1/read-accept-infix-dot"
" 'read-accept-quasiquote"
" 1/read-accept-quasiquote"
" 'read-accept-reader"
" 1/read-accept-reader"
" 'read-accept-lang"
" 1/read-accept-lang"
" 'current-readtable"
" 1/current-readtable"
" 'readtable?"
" 1/readtable?"
" 'make-readtable"
" 1/make-readtable"
" 'readtable-mapping"
" 1/readtable-mapping"
" 'special-comment?"
" 1/special-comment?"
" 'make-special-comment"
" 1/make-special-comment"
" 'special-comment-value"
" 1/special-comment-value))"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'load"
" 1/load"
" 'load-extension"
" 1/load-extension"
" 'load/use-compiled"
" 1/load/use-compiled"
" 'current-eval"
" 1/current-eval"
" 'current-compile"
" 1/current-compile"
" 'current-load"
" 1/current-load"
" 'current-load/use-compiled"
" 1/current-load/use-compiled"
" 'collection-path"
" 1/collection-path"
" 'collection-file-path"
" 1/collection-file-path"
" 'find-library-collection-paths"
" 1/find-library-collection-paths"
" 'find-library-collection-links"
" 1/find-library-collection-links"
" 'current-library-collection-paths"
" 1/current-library-collection-paths"
" 'current-library-collection-links"
" 1/current-library-collection-links"
" 'use-compiled-file-paths"
" 1/use-compiled-file-paths"
" 'current-compiled-file-roots"
" 1/current-compiled-file-roots"
" 'use-compiled-file-check"
" 1/use-compiled-file-check"
" 'use-collection-link-paths"
" 1/use-collection-link-paths"
" 'use-user-specific-search-paths"
" 1/use-user-specific-search-paths"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'compiled-expression-recompile"
" 1/compiled-expression-recompile"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module-provide-protected?"
" 1/module-provide-protected?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" 1/collection-path"
" 'collection-file-path"
" 1/collection-file-path"
" 'find-library-collection-paths"
" 1/find-library-collection-paths"
" 'find-library-collection-links"
" 1/find-library-collection-links"
" 'load/use-compiled"
" 1/load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_0)(TH-place-channel-ref x_0 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_0)(TH-place-channel-ref x_0 0))(lambda(x_0)(TH-place-channel-ref x_0 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'primitive-in-category?"
" 1/primitive-in-category?"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'read-compiled-linklet"
" 1/read-compiled-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?"
" 'variable-reference-from-unsafe?"
" 1/variable-reference-from-unsafe?))"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_0)"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t"
" 1/read-accept-compiled"
" #t"
" read-case-sensitive"
" #t"
" 1/read-square-bracket-as-paren"
" #t"
" 1/read-curly-brace-as-paren"
" #t"
" 1/read-square-bracket-with-tag"
" #f"
" 1/read-curly-brace-with-tag"
" #f"
" 1/read-accept-box"
" #t"
" read-accept-bar-quote"
" #t"
" 1/read-accept-graph"
" #t"
" 1/read-decimal-as-inexact"
" #t"
" 1/read-cdot"
" #f"
" 1/read-accept-dot"
" #t"
" 1/read-accept-infix-dot"
" #t"
" 1/read-accept-quasiquote"
" #t"
" 1/current-readtable"
" #f)"
"(let-values()(thunk_0))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_0 filename_0)"
"(begin"
"(if(let-values(((or-part_7)(eof-object? exp_0)))(if or-part_7 or-part_7(eof-object?(1/syntax-e exp_0))))"
"(let-values()"
"(if filename_0"
"(error"
" 'load-handler"
"             (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_0)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_0))"
"(let-values() exp_0)"
"(if(if(syntax?$1 exp_0)"
"(if(pair?(1/syntax-e exp_0))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_0))))"
"(let-values(((r_8)(cdr(1/syntax-e exp_0))))"
"(let-values(((r_9)(if(syntax?$1 r_8)(1/syntax-e r_8) r_8)))"
"(if(pair? r_9)(identifier?(car r_9)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_0(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_0))) exp_0 exp_0))"
"(let-values()"
"(if filename_0"
"(error"
" 'default-load-handler"
"                 (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_0)"
" #f))))))))"
"(define-values"
"(default-load-handler)"
"(lambda(path_0 expected-mod_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(path-string? path_0)"
"(void)"
"                        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(not expected-mod_0)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(symbol? expected-mod_0)))"
"(if or-part_5"
" or-part_5"
"(if(pair? expected-mod_0)"
"(if(list? expected-mod_0)"
"(if(let-values(((or-part_6)(not(car expected-mod_0))))"
"(if or-part_6 or-part_6(symbol?(car expected-mod_0))))"
"(andmap2 symbol?(cdr expected-mod_0))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"                             \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_0)))"
"(values))))"
"(let-values(((maybe-count-lines!_3)"
"(lambda(i_0)"
"(begin"
" 'maybe-count-lines!"
"                            (if (regexp-match? '#rx\"[.]zo$\" path_0) (void) (let-values () (port-count-lines! i_0)))))))"
"(if expected-mod_0"
"(let-values()"
"((call-with-input-module-file"
" path_0"
"(lambda(i_0)"
"(begin"
"(maybe-count-lines!_3 i_0)"
"(with-module-reading-parameterization+delay-source"
" path_0"
"(lambda()"
"(let-values(((c1_9)(linklet-directory-start i_0)))"
"(if c1_9"
"((lambda(pos_0)"
"(let-values(((b-pos_11)(search-directory i_0 pos_0(encode-symbols expected-mod_0))))"
"(if b-pos_11"
"(let-values()"
"(begin"
"(file-position i_0 b-pos_11)"
"(let-values(((or-part_12)(cached-bundle i_0)))"
"(if or-part_12"
" or-part_12"
"(let-values(((v_13)(1/read i_0)))"
"(if(1/compiled-module-expression? v_13)"
"(lambda()((1/current-eval) v_13))"
"(error"
" 'default-load-handler"
"(string-append"
"                                                  \"expected a compiled module\\n\""
"                                                  \"  in: ~e\\n\""
"                                                  \"  found: ~e\")"
"(object-name i_0)"
" v_13)))))))"
"(if(pair? expected-mod_0)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                         (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_0)))))))"
" c1_9)"
"(if(if(pair? expected-mod_0)(not(car expected-mod_0)) #f)"
"(let-values() void)"
"(let-values(((c2_14)(cached-bundle i_0)))"
"(if c2_14"
"((lambda(thunk_0) thunk_0) c2_14)"
"(let-values()"
"(let-values(((s_16)(1/read-syntax(object-name i_0) i_0)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_16)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                             \"expected a `module' declaration;\\n\""
"                                                             \" found end-of-file\\n\""
"                                                             \"  in: ~e\")"
"(object-name i_0)))"
"(void))"
"(values))))"
"(let-values(((m-s_17)(check-module-form s_16 path_0)))"
"(let-values(((s2_18)(1/read-syntax(object-name i_0) i_0)))"
"(begin"
"(if(eof-object? s2_18)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                     \"expected a `module' declaration;\\n\""
"                                                     \" found an extra form\\n\""
"                                                     \"  in: ~e\\n\""
"                                                     \"  found: ~.s\")"
"(object-name i_0)"
" s2_18)))"
"(lambda()((1/current-eval) m-s_17))))))))))))))))))))"
"(let-values()"
"(let-values(((add-top-interaction_19)"
"(lambda(s_0)"
"(begin"
" 'add-top-interaction"
"(1/namespace-syntax-introduce"
"(1/datum->syntax #f(cons '#%top-interaction s_0) s_0))))))"
"(let-values(((path1_21) path_0)"
"((temp2_22)"
"(lambda(i_0)"
"(begin"
" 'temp2"
"(begin"
"(maybe-count-lines!_3 i_0)"
"((letrec-values(((loop_24)"
"(lambda(vals_0)"
"(begin"
" 'loop"
"(let-values(((s_26)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/read-accept-compiled"
" #t"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t)"
"(let-values()"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_0))"
"(let-values()"
"(1/read-syntax"
"(object-name i_0)"
" i_0)))"
"(1/read-syntax"
"(object-name i_0)"
" i_0))))))"
"(if(eof-object? s_26)"
"(apply values vals_0)"
"(loop_24"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()"
"((1/current-eval)(add-top-interaction_19 s_26)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_0"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_0))))))))))"
" loop_24)"
"(list(void))))))))"
"(call-with-input-file*61.1 'binary path1_21 temp2_22)))))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_0 tag_0)"
"(begin"
"(let-values(((version-length_30)(string-length(version))))"
"(if(equal?(peek-byte i_0)(char->integer '#\\#))"
"(if(equal?(peek-byte i_0 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_0 2) version-length_30)"
"(if(equal?(peek-bytes version-length_30 3 i_0)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_0(+ 3 version-length_30))(char->integer tag_0))(+ version-length_30 4) #f)"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_0)"
"(begin(let-values(((pos_32)(linklet-bundle-or-directory-start i_0 '#\\D)))(if pos_32(+ pos_32 4) #f)))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_0)"
"(begin"
"(let-values(((pos_34)(linklet-bundle-or-directory-start i_0 '#\\B)))"
"(let-values(((hash-code_35)(if pos_34(peek-bytes 20 pos_34 i_0) #f)))"
"(if(bytes? hash-code_35)"
"(if(= 20(bytes-length hash-code_35))"
"(if(let-values(((vec_36 len_37)"
"(let-values(((vec_38) hash-code_35))"
"(begin(check-bytes vec_38)(values vec_38(unsafe-bytes-length vec_38))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_39)"
"(lambda(result_0 pos_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_0 len_37)"
"(let-values(((c_42)(unsafe-bytes-ref vec_36 pos_0)))"
"(let-values(((result_43)"
"(let-values()"
"(let-values(((result_45)"
"(let-values()"
"(let-values()(not(eq? c_42 0))))))"
"(values result_45)))))"
"(if(if(not((lambda x_0 result_43) c_42))(not #f) #f)"
"(for-loop_39 result_43(unsafe-fx+ 1 pos_0))"
" result_43)))"
" result_0)))))"
" for-loop_39)"
" #f"
" 0)))"
" hash-code_35"
" #f)"
" #f)"
" #f))))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_0)"
"(begin"
"(let-values(((c3_48)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_0)))))"
"(if c3_48"
"((lambda(declare-module_0)(lambda()(declare-module_0(1/current-namespace)))) c3_48)"
"(let-values() #f))))))"
"(define-values"
"(read-number)"
"(lambda(i_0)"
"(begin"
"(let-values(((read-byte/not-eof_51)"
"(lambda(i_1)"
"(begin"
" 'read-byte/not-eof"
"(let-values(((v_53)(read-byte i_1)))(if(eof-object? v_53) 0 v_53))))))"
"(bitwise-ior"
"(read-byte/not-eof_51 i_0)"
"(arithmetic-shift(read-byte/not-eof_51 i_0) 8)"
"(arithmetic-shift(read-byte/not-eof_51 i_0) 16)"
"(arithmetic-shift(read-byte/not-eof_51 i_0) 24))))))"
"(define-values"
"(search-directory)"
"(lambda(i_0 pos_0 bstr_0)"
"(begin"
"(if(zero? pos_0)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_0 pos_0)(values))))"
"(let-values(((name-len_57)(read-number i_0)))"
"(let-values(((v_58)(read-bytes name-len_57 i_0)))"
"(begin"
"(if(if(bytes? v_58)(=(bytes-length v_58) name-len_57) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                        \"failure getting submodule path\\n\""
"                        \"  in: ~e\\n\""
"                        \"  at position: ~a\\n\""
"                        \"  expected bytes: ~a\\n\""
"                        \"  read bytes: ~e\")"
"(object-name i_0)"
" pos_0"
" name-len_57"
" v_58)))"
"(if(bytes=? bstr_0 v_58)"
"(let-values()(read-number i_0))"
"(if(bytes<? bstr_0 v_58)"
"(let-values()"
"(begin(read-number i_0)(read-number i_0)(search-directory i_0(read-number i_0) bstr_0)))"
"(let-values()"
"(begin"
"(read-number i_0)"
"(read-number i_0)"
"(read-number i_0)"
"(search-directory i_0(read-number i_0) bstr_0))))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_0)"
"(begin"
"(if(symbol? expected-mod_0)"
"        (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(reverse$1"
"(let-values(((lst_60)(cdr expected-mod_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_60)))"
"((letrec-values(((for-loop_61)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s_64)(unsafe-car lst_0))((rest_65)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_66)"
"(let-values(((fold-var_67) fold-var_0))"
"(let-values(((fold-var_68)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((bstr_69)"
"(string->bytes/utf-8"
"(symbol->string s_64))))"
"(let-values(((len_70)"
"(bytes-length bstr_69)))"
"(if(< len_70 255)"
"(let-values()"
"(bytes-append"
"(bytes len_70)"
" bstr_69))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes"
" len_70"
" 4"
" #f"
" #f)"
" bstr_69))))))"
" fold-var_67))))"
"(values fold-var_68)))))"
"(if(not #f)(for-loop_61 fold-var_66 rest_65) fold-var_66)))"
" fold-var_0)))))"
" for-loop_61)"
" null"
" lst_60))))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_0 thunk_0)"
"(begin"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_0))"
"(let-values()(with-module-reading-parameterization thunk_0)))"
"(with-module-reading-parameterization thunk_0)))))"
"(define-values"
"(call-with-input-module-file)"
"(lambda(path_0 proc_0)"
"(begin"
"(let-values(((i_75) #f))"
"(dynamic-wind"
"(lambda()"
"(set! i_75"
"(let-values(((path3_77) path_0)((temp4_78) #t))(open-input-file6.1 temp4_78 'binary path3_77))))"
"(lambda()(proc_0 i_75))"
"(lambda()(close-input-port i_75)))))))"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_1)"
"(lambda(s_0)"
"(begin"
" 'resolve"
"(if(complete-path? s_0)"
" s_0"
"(let-values(((d_3)(current-load-relative-directory)))"
"(if d_3(path->complete-path s_0 d_3) s_0)))))))"
"(let-values(((date-of-1_4)"
"(lambda(a_0)"
"(begin"
" 'date-of-1"
"(let-values(((v_6)(file-or-directory-modify-seconds a_0 #f(lambda() #f))))"
"(if v_6(cons a_0 v_6) #f))))))"
"(let-values(((date-of_7)"
"(lambda(a_0 modes_0 roots_0)"
"(begin"
" 'date-of"
"(ormap2"
"(lambda(root-dir_0)"
"(ormap2"
"(lambda(compiled-dir_0)"
"(let-values(((a_13)(a_0 root-dir_0 compiled-dir_0)))(date-of-1_4 a_13)))"
" modes_0))"
" roots_0)))))"
"(let-values(((date>=?_14)"
"(lambda(modes_0 roots_0 a_0 bm_0)"
"(begin"
" 'date>=?"
"(if a_0"
"(let-values(((am_19)(date-of_7 a_0 modes_0 roots_0)))"
"(let-values(((or-part_20)(if(not bm_0) am_19 #f)))"
"(if or-part_20"
" or-part_20"
"(if am_19(if bm_0(if(>=(cdr am_19)(cdr bm_0)) am_19 #f) #f) #f))))"
" #f)))))"
"(let-values(((with-dir*_21)"
"(lambda(base_0 t_0)"
"(begin"
" 'with-dir*"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_0) base_0(current-directory)))"
"(let-values()(t_0)))))))"
"(lambda(path_0 expect-module_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(path-string? path_0)"
"(void)"
"                                  (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_29)(not expect-module_0)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_30)(symbol? expect-module_0)))"
"(if or-part_30"
" or-part_30"
"(if(list? expect-module_0)"
"(if(>(length expect-module_0) 1)"
"(if(let-values(((or-part_31)(symbol?(car expect-module_0))))"
"(if or-part_31 or-part_31(not(car expect-module_0))))"
"(andmap2 symbol?(cdr expect-module_0))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                       \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_0)))"
"(values))))"
"(let-values(((name_26)(if expect-module_0(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_27)"
"(if name_26"
"(registry-table-ref(namespace-module-registry$1(1/current-namespace)))"
" #f)))"
"(let-values(((use-path/src_28)(if ns-hts_27(hash-ref(cdr ns-hts_27) name_26 #f) #f)))"
"(if use-path/src_28"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_28))"
"(let-values()"
"(with-dir*_21"
"(caddr use-path/src_28)"
"(lambda()((1/current-load)(car use-path/src_28) expect-module_0)))))"
"(let-values(((orig-path_32)(resolve_1 path_0)))"
"(let-values(((base_33 orig-file_34 dir?_35)(split-path path_0)))"
"(let-values(((file_36 alt-file_37)"
"(if expect-module_0"
"(let-values(((b_38)(path->bytes orig-file_34)))"
"(let-values(((len_39)(bytes-length b_38)))"
"(if(if(>= len_39 4)"
"                                                          (bytes=? #\".rkt\" (subbytes b_38 (- len_39 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_34"
"(bytes->path"
"                                                          (bytes-append (subbytes b_38 0 (- len_39 4)) #\".ss\"))))"
"(let-values()(values orig-file_34 #f)))))"
"(values orig-file_34 #f))))"
"(let-values(((path_40)"
"(if(eq? file_36 orig-file_34)"
" orig-path_32"
"(build-path base_33 file_36))))"
"(let-values(((alt-path_41)"
"(if alt-file_37"
"(if(eq? alt-file_37 orig-file_34)"
" orig-path_32"
"(build-path base_33 alt-file_37))"
" #f)))"
"(let-values(((base_42)(if(eq? base_33 'relative) 'same base_33)))"
"(let-values(((modes_43)(1/use-compiled-file-paths)))"
"(let-values(((roots_44)(1/current-compiled-file-roots)))"
"(let-values(((reroot_45)"
"(lambda(p_0 d_0)"
"(begin"
" 'reroot"
"(if(eq? d_0 'same)"
"(let-values() p_0)"
"(if(relative-path? d_0)"
"(let-values()(build-path p_0 d_0))"
"(let-values()(reroot-path p_0 d_0))))))))"
"(let-values(((main-path-d_48)(date-of-1_4 path_40)))"
"(let-values(((alt-path-d_49)"
"(if alt-path_41"
"(if(not main-path-d_48)(date-of-1_4 alt-path_41) #f)"
" #f)))"
"(let-values(((path-d_50)"
"(let-values(((or-part_51) main-path-d_48))"
"(if or-part_51 or-part_51 alt-path-d_49))))"
"(let-values(((get-so_52)"
"(lambda(file_0 rep-sfx?_0)"
"(begin"
" 'get-so"
"(lambda(root-dir_0 compiled-dir_0)"
"(build-path"
"(reroot_45 base_42 root-dir_0)"
" compiled-dir_0"
"                                                                         \"native\""
"(system-library-subpath)"
"(if rep-sfx?_0"
"(path-add-extension file_0 dll-suffix)"
" file_0)))))))"
"(let-values(((zo_57)"
"(lambda(root-dir_0 compiled-dir_0)"
"(begin"
" 'zo"
"(build-path"
"(reroot_45 base_42 root-dir_0)"
" compiled-dir_0"
"                                                                         (path-add-extension file_36 #\".zo\"))))))"
"(let-values(((alt-zo_60)"
"(lambda(root-dir_0 compiled-dir_0)"
"(begin"
" 'alt-zo"
"(build-path"
"(reroot_45 base_42 root-dir_0)"
" compiled-dir_0"
"                                                                           (path-add-extension alt-file_37 #\".zo\"))))))"
"(let-values(((so_63)(get-so_52 file_36 #t)))"
"(let-values(((alt-so_64)(get-so_52 alt-file_37 #t)))"
"(let-values(((try-main?_65)"
"(let-values(((or-part_66) main-path-d_48))"
"(if or-part_66"
" or-part_66"
"(not alt-path-d_49)))))"
"(let-values(((try-alt?_67)"
"(if alt-file_37"
"(let-values(((or-part_68)"
" alt-path-d_49))"
"(if or-part_68"
" or-part_68"
"(not main-path-d_48)))"
" #f)))"
"(let-values(((with-dir_69)"
"(lambda(t_0)"
"(begin"
" 'with-dir"
"(with-dir*_21 base_42 t_0)))))"
"(let-values(((c1_71)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" so_63"
" path-d_50)"
" #f)))"
"(if c1_71"
"((lambda(so-d_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_0)"
" expect-module_0))))))"
" c1_71)"
"(let-values(((c2_73)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-so_64"
" alt-path-d_49)"
" #f)))"
"(if c2_73"
"((lambda(so-d_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((current-load-extension)"
"(car so-d_0)"
" expect-module_0))))))"
" c2_73)"
"(let-values(((c3_75)"
"(if try-main?_65"
"(date>=?_14"
" modes_43"
" roots_44"
" zo_57"
" path-d_50)"
" #f)))"
"(if c3_75"
"((lambda(zo-d_0)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_0)"
" #f"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((1/current-load)"
"(car zo-d_0)"
" expect-module_0)))))))"
" c3_75)"
"(let-values(((c4_77)"
"(if try-alt?_67"
"(date>=?_14"
" modes_43"
" roots_44"
" alt-zo_60"
" path-d_50)"
" #f)))"
"(if c4_77"
"((lambda(zo-d_0)"
"(begin"
"(register-zo-path"
" name_26"
" ns-hts_27"
"(car zo-d_0)"
" alt-path_41"
" base_42)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_41)"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((1/current-load)"
"(car zo-d_0)"
" expect-module_0)))))))"
" c4_77)"
"(if(let-values(((or-part_79)"
"(not"
"(pair?"
" expect-module_0))))"
"(if or-part_79"
" or-part_79"
"(car expect-module_0)))"
"(let-values()"
"(let-values(((p_80)"
"(if try-main?_65"
" path_40"
" alt-path_41)))"
"(if(if(pair?"
" expect-module_0)"
"(not"
"(file-exists? p_80))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_0"
"(if(not try-main?_65)"
" p_80"
" #f)"
" #f))"
"(let-values()"
"(with-dir_69"
"(lambda()"
"((1/current-load)"
" p_80"
" expect-module_0)))))))))"
"(void))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_0 ns-hts_0 path_0 src-path_0 base_0)"
"(begin(if ns-hts_0(let-values()(hash-set!(cdr ns-hts_0) name_0(list path_0 src-path_0 base_0)))(void)))))"
"(define-values(default-reader-guard)(lambda(path_0)(begin path_0)))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values"
"(registry-table-ref)"
"(lambda(reg_0)"
"(begin(let-values(((e_88)(hash-ref -module-hash-table-table reg_0 #f)))(if e_88(ephemeron-value e_88) #f)))))"
"(define-values"
"(registry-table-set!)"
"(lambda(reg_0 v_0)(begin(hash-set! -module-hash-table-table reg_0(make-ephemeron reg_0 v_0)))))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_0)"
"(begin"
"(let-values(((i_92)(modulo(abs(equal-hash-code p_0)) CACHE-N)))"
"(let-values(((w_93)(vector-ref -path-cache i_92)))"
"(let-values(((l_94)(if w_93(weak-box-value w_93) #f)))"
"(if l_94(let-values(((a_95)(1/assoc p_0 l_94)))(if a_95(cdr a_95) #f)) #f)))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_0 v_0)"
"(begin"
"(let-values(((i_98)(modulo(abs(equal-hash-code p_0)) CACHE-N)))"
"(let-values(((w_99)(vector-ref -path-cache i_98)))"
"(let-values(((l_100)(if w_99(weak-box-value w_99) #f)))"
"(vector-set!"
" -path-cache"
" i_98"
"(make-weak-box"
"(cons(cons p_0 v_0)(let-values(((or-part_101) l_100))(if or-part_101 or-part_101 null)))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_0 coll-mode?_0)"
"(begin"
"(let-values(((l_104)"
"((letrec-values(((loop_105)"
"(lambda(s_1)"
"(begin"
" 'loop"
"(let-values(((len_107)(string-length s_1)))"
"((letrec-values(((iloop_108)"
"(lambda(i_0)"
"(begin"
" 'iloop"
"(if(= i_0 len_107)"
"(let-values()(list s_1))"
"(if(char=? '#\\/(string-ref s_1 i_0))"
"(let-values()"
"(cons"
"(substring s_1 0 i_0)"
"(loop_105(substring s_1(add1 i_0)))))"
"(let-values()(iloop_108(add1 i_0)))))))))"
" iloop_108)"
" 0))))))"
" loop_105)"
" s_0)))"
"(if coll-mode?_0"
" l_104"
"((letrec-values(((loop_110)"
"(lambda(l_0)"
"(begin"
" 'loop"
"(if(null?(cdr l_0))"
"(values null(car l_0))"
"(let-values(((c_112 f_113)(loop_110(cdr l_0))))"
"(values(cons(car l_0) c_112) f_113)))))))"
" loop_110)"
" l_104))))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_0)"
"(begin"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_0)"
"(1/syntax-line stx_0)"
"(1/syntax-column stx_0)"
"(1/syntax-position stx_0)"
"(1/syntax-span stx_0))))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_115) #f))"
"(let-values(((prep-planet-resolver!_116)"
"(lambda()"
"(begin"
" 'prep-planet-resolver!"
"(if planet-resolver_115"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_115"
"                               (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver)))))))))"
"(letrec-values(((standard-module-name-resolver_117)"
"(case-lambda"
"((s_0 from-namespace_0)"
"(begin"
" 'standard-module-name-resolver"
"(begin"
"(if(1/resolved-module-path? s_0)"
"(void)"
"(let-values()"
"                                   (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_0)))"
"(if(let-values(((or-part_120)(not from-namespace_0)))"
"(if or-part_120 or-part_120(1/namespace? from-namespace_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                    \"(or/c #f namespace?)\""
" from-namespace_0)))"
"(if planet-resolver_115(let-values()(planet-resolver_115 s_0))(void))"
"(let-values(((hts_121)"
"(let-values(((or-part_122)"
"(registry-table-ref"
"(namespace-module-registry$1(1/current-namespace)))))"
"(if or-part_122"
" or-part_122"
"(let-values(((hts_123)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(registry-table-set!"
"(namespace-module-registry$1(1/current-namespace))"
" hts_123)"
" hts_123))))))"
"(begin"
"(hash-set!(car hts_121) s_0 'declared)"
"(if from-namespace_0"
"(let-values()"
"(let-values(((root-name_124)"
"(if(pair?(1/resolved-module-path-name s_0))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_0)))"
" s_0))"
"((from-hts_125)"
"(registry-table-ref"
"(namespace-module-registry$1 from-namespace_0))))"
"(if from-hts_125"
"(let-values()"
"(let-values(((use-path/src_126)"
"(hash-ref(cdr from-hts_125) root-name_124 #f)))"
"(if use-path/src_126"
"(let-values()"
"(hash-set!(cdr hts_121) root-name_124 use-path/src_126))"
"(void))))"
"(void))))"
"(void)))))))"
"((s_0 relto_0 stx_0)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_117 s_0 relto_0 stx_0 #t)))"
"((s_0 relto_0 stx_0 load?_0)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_0)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_0)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_0)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_0))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_135)(not relto_0)))"
"(if or-part_135 or-part_135(1/resolved-module-path? relto_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_136)(not stx_0)))"
"(if or-part_136 or-part_136(syntax?$1 stx_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_0)))"
"(values))))"
"(let-values(((flatten-sub-path_134)"
"(lambda(base_0 orig-l_0)"
"(begin"
" 'flatten-sub-path"
"((letrec-values(((loop_139)"
"(lambda(a_0 l_0)"
"(begin"
" 'loop"
"(if(null? l_0)"
"(let-values()"
"(if(null? a_0)"
" base_0"
"(cons base_0(reverse$1 a_0))))"
"                                                                           (if (equal? (car l_0) \"..\")"
"(let-values()"
"(if(null? a_0)"
"(error"
" 'standard-module-name-resolver"
"                                                                                  \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                                   (if (equal? base_0 \".\")"
" base_0"
"(if(path? base_0)"
" base_0"
"(list"
"(if(symbol? base_0)"
" 'quote"
" 'file)"
" base_0)))"
" orig-l_0))"
"(loop_139(cdr a_0)(cdr l_0))))"
"(let-values()"
"(loop_139"
"(cons(car l_0) a_0)"
"(cdr l_0)))))))))"
" loop_139)"
" null"
" orig-l_0)))))"
"(if(if(pair? s_0)(eq?(car s_0) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_0)))"
"(if(if(pair? s_0)"
"(if(eq?(car s_0) 'submod)"
"(if(pair?(cadr s_0))(eq?(caadr s_0) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path(flatten-sub-path_134(cadadr s_0)(cddr s_0))))"
"(if(if(pair? s_0)"
"(if(eq?(car s_0) 'submod)"
"                                               (if (let-values (((or-part_142) (equal? (cadr s_0) \".\")))"
"                                                     (if or-part_142 or-part_142 (equal? (cadr s_0) \"..\")))"
"(if relto_0"
"(let-values(((p_143)(1/resolved-module-path-name relto_0)))"
"(let-values(((or-part_144)(symbol? p_143)))"
"(if or-part_144"
" or-part_144"
"(if(pair? p_143)(symbol?(car p_143)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_145)(1/resolved-module-path-name relto_0)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_134"
"(if(pair? rp_145)(car rp_145) rp_145)"
"(let-values(((r_146)"
"                                                             (if (equal? (cadr s_0) \"..\") (cdr s_0) (cddr s_0))))"
"(if(pair? rp_145)(append(cdr rp_145) r_146) r_146))))))"
"(if(if(pair? s_0)(eq?(car s_0) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_116)"
"(planet-resolver_115 s_0 relto_0 stx_0 load?_0 #f orig-paramz)))"
"(if(if(pair? s_0)"
"(if(eq?(car s_0) 'submod)"
"(if(pair?(cadr s_0))(eq?(caadr s_0) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_116)"
"(planet-resolver_115"
"(cadr s_0)"
" relto_0"
" stx_0"
" load?_0"
"(cddr s_0)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_147)"
"(lambda()"
"(begin"
" 'get-dir"
"(let-values(((or-part_154)"
"(if relto_0"
"(if(eq? relto_0 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_155)"
"(1/resolved-module-path-name"
" relto_0)))"
"(let-values(((p_156)"
"(if(pair? p_155)"
"(car p_155)"
" p_155)))"
"(if(path? p_156)"
"(let-values(((base_157"
" n_158"
" d?_159)"
"(split-path"
" p_156)))"
"(begin"
"(set! -prev-relto relto_0)"
"(set! -prev-relto-dir"
" base_157)"
" base_157))"
" #f))))"
" #f)))"
"(if or-part_154"
" or-part_154"
"(let-values(((or-part_160)"
"(current-load-relative-directory)))"
"(if or-part_160"
" or-part_160"
"(current-directory))))))))"
"((get-reg_148)"
"(lambda()"
"(begin"
" 'get-reg"
"(namespace-module-registry$1(1/current-namespace)))))"
"((show-collection-err_149)"
"(lambda(msg_0)"
"(begin"
" 'show-collection-err"
"(let-values(((msg_162)"
"(string-append"
"(let-values(((or-part_163)"
"(if stx_0"
"(if(error-print-source-location)"
"(format-source-location"
" stx_0)"
" #f)"
" #f)))"
"(if or-part_163"
" or-part_163"
"                                                                                    \"standard-module-name-resolver\"))"
"                                                                                \": \""
"(regexp-replace"
"                                                                                 '#rx\"\\n\""
" msg_0"
"(format"
"                                                                                  \"\\n  for module path: ~s\\n\""
" s_0)))))"
"(raise"
"(if stx_0"
"(1/make-exn:fail:syntax:missing-module"
" msg_162"
"(current-continuation-marks)"
"(list stx_0)"
" s_0)"
"(1/make-exn:fail:filesystem:missing-module"
" msg_162"
"(current-continuation-marks)"
" s_0)))))))"
"((ss->rkt_150)"
"(lambda(s_1)"
"(begin"
" 'ss->rkt"
"(let-values(((len_165)(string-length s_1)))"
"(if(if(>= len_165 3)"
"(if(equal?"
" '#\\."
"(string-ref s_1(- len_165 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_1(- len_165 2)))"
"(equal?"
" '#\\s"
"(string-ref s_1(- len_165 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_1 0(- len_165 3))"
"                                                                      \".rkt\")"
" s_1)))))"
"((path-ss->rkt_151)"
"(lambda(p_0)"
"(begin"
" 'path-ss->rkt"
"(let-values(((base_167 name_168 dir?_169)"
"(split-path p_0)))"
"(if(regexp-match"
"                                                                        '#rx\"[.]ss$\""
"(path->bytes name_168))"
"                                                                     (path-replace-extension p_0 #\".rkt\")"
" p_0)))))"
"((s_152)"
"(if(if(pair? s_0)(eq? 'submod(car s_0)) #f)"
"(let-values(((v_170)(cadr s_0)))"
"                                                                 (if (let-values (((or-part_171) (equal? v_170 \".\")))"
"                                                                       (if or-part_171 or-part_171 (equal? v_170 \"..\")))"
"(if relto_0"
"(let-values(((p_172)"
"(1/resolved-module-path-name"
" relto_0)))"
"(if(pair? p_172)(car p_172) p_172))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_0))"
" v_170))"
" s_0))"
"((subm-path_153)"
"(if(if(pair? s_0)(eq? 'submod(car s_0)) #f)"
"(let-values(((p_173)"
"(if(if(let-values(((or-part_174)"
"(equal?"
"(cadr s_0)"
"                                                                                                    \".\")))"
"(if or-part_174"
" or-part_174"
"                                                                                         (equal? (cadr s_0) \"..\")))"
" relto_0"
" #f)"
"(let-values(((p_175)"
"(1/resolved-module-path-name"
" relto_0))"
"((r_176)"
"(if(equal?"
"(cadr s_0)"
"                                                                                                  \"..\")"
"(cdr s_0)"
"(cddr s_0))))"
"(if(pair? p_175)"
"(flatten-sub-path_134"
"(car p_175)"
"(append(cdr p_175) r_176))"
"(flatten-sub-path_134 p_175 r_176)))"
"(flatten-sub-path_134"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_0) \"..\")"
"(cdr s_0)"
"(cddr s_0))))))"
"(if(pair? p_173)(cdr p_173) #f))"
" #f)))"
"(let-values(((s-parsed_177)"
"(if(symbol? s_152)"
"(let-values()"
"(let-values(((or-part_178)"
"(path-cache-get"
"(cons s_152(get-reg_148)))))"
"(if or-part_178"
" or-part_178"
"(let-values(((cols_179 file_180)"
"(split-relative-string"
"(symbol->string s_152)"
" #f)))"
"(let-values(((f-file_181)"
"(if(null? cols_179)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_180"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_149"
"(if(null? cols_179)"
" file_180"
"(car cols_179))"
"(if(null? cols_179) null(cdr cols_179))"
" f-file_181"
" #t))))))"
"(if(string? s_152)"
"(let-values()"
"(let-values(((dir_182)(get-dir_147)))"
"(let-values(((or-part_183)"
"(path-cache-get"
"(cons s_152 dir_182))))"
"(if or-part_183"
" or-part_183"
"(let-values(((cols_184 file_185)"
"(split-relative-string"
" s_152"
" #f)))"
"(if(null? cols_184)"
"(build-path"
" dir_182"
"(ss->rkt_150 file_185))"
"(apply"
" build-path"
" dir_182"
"(append"
"(map2"
"(lambda(s_1)"
"                                                                                    (if (string=? s_1 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_1 \"..\")"
"(let-values() 'up)"
"(let-values() s_1))))"
" cols_184)"
"(list(ss->rkt_150 file_185))))))))))"
"(if(path? s_152)"
"(let-values()"
"(path-ss->rkt_151"
"(simplify-path"
"(if(complete-path? s_152)"
" s_152"
"(path->complete-path s_152(get-dir_147))))))"
"(if(eq?(car s_152) 'lib)"
"(let-values()"
"(let-values(((or-part_187)"
"(path-cache-get"
"(cons s_152(get-reg_148)))))"
"(if or-part_187"
" or-part_187"
"(let-values(((cols_188 file_189)"
"(split-relative-string"
"(cadr s_152)"
" #f)))"
"(let-values(((old-style?_190)"
"(if(null?(cddr s_152))"
"(if(null? cols_188)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_189)"
" #f)"
" #t)))"
"(let-values(((f-file_191)"
"(if old-style?_190"
"(ss->rkt_150 file_189)"
"(if(null? cols_188)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_189)"
"(ss->rkt_150"
" file_189)"
"(string-append"
" file_189"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_192)"
"(if old-style?_190"
"(append"
"(if(null?"
"(cddr s_152))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_0)"
"(split-relative-string"
" p_0"
" #t))"
"(cddr s_152))))"
" cols_188)"
"(if(null? cols_188)"
"(list file_189)"
" cols_188))))"
"(find-col-file"
" show-collection-err_149"
"(car cols_192)"
"(cdr cols_192)"
" f-file_191"
" #t))))))))"
"(if(eq?(car s_152) 'file)"
"(let-values()"
"(path-ss->rkt_151"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_152))"
"(get-dir_147)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_194)(path? s-parsed_177)))"
"(if or-part_194 or-part_194(vector? s-parsed_177)))"
"(void)"
"(let-values()"
"(if stx_0"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_177 (car s-parsed_177) \"\"))"
" stx_0)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_152))))"
"(let-values(((filename_195)"
"(if(vector? s-parsed_177)"
"(vector-ref s-parsed_177 0)"
"(simplify-path(cleanse-path s-parsed_177) #f))))"
"(let-values(((normal-filename_196)"
"(if(vector? s-parsed_177)"
"(vector-ref s-parsed_177 1)"
"(normal-case-path filename_195))))"
"(let-values(((base_197 name_198 dir?_199)"
"(if(vector? s-parsed_177)"
"(values"
" 'ignored"
"(vector-ref s-parsed_177 2)"
" 'ignored)"
"(split-path filename_195))))"
"(let-values(((no-sfx_200)"
"(if(vector? s-parsed_177)"
"(vector-ref s-parsed_177 3)"
"                                                                           (path-replace-extension name_198 #\"\"))))"
"(let-values(((root-modname_201)"
"(if(vector? s-parsed_177)"
"(vector-ref s-parsed_177 4)"
"(1/make-resolved-module-path"
" filename_195))))"
"(let-values(((hts_202)"
"(let-values(((or-part_203)"
"(registry-table-ref"
"(get-reg_148))))"
"(if or-part_203"
" or-part_203"
"(let-values(((hts_204)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(registry-table-set!"
"(get-reg_148)"
" hts_204)"
" hts_204))))))"
"(let-values(((modname_205)"
"(if subm-path_153"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_201)"
" subm-path_153))"
" root-modname_201)))"
"(begin"
"(if load?_0"
"(let-values()"
"(let-values(((got_206)"
"(hash-ref"
"(car hts_202)"
" modname_205"
" #f)))"
"(if got_206"
"(void)"
"(let-values()"
"(let-values(((loading_207)"
"(let-values(((tag_209)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_209)))"
"((nsr_208)(get-reg_148)))"
"(begin"
"(for-each2"
"(lambda(s_1)"
"(if(if(equal?"
"(cdr s_1)"
" normal-filename_196)"
"(eq?(car s_1) nsr_208)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_195"
"(apply"
" string-append"
"((letrec-values(((loop_211)"
"(lambda(l_0)"
"(begin"
" 'loop"
"(if(null?"
" l_0)"
" '()"
"(list*"
"                                                                                                                     \"\\n   \""
"(path->string"
"(cdar"
" l_0))"
"(loop_211"
"(cdr"
" l_0))))))))"
" loop_211)"
"(reverse$1 loading_207)))))"
"(void)))"
" loading_207)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_0)(f_0))"
"(lambda(f_0)"
"(call-with-continuation-prompt"
" f_0"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons"
" nsr_208"
" normal-filename_196)"
" loading_207)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_201"
" 1/current-module-path-for-load"
"((if stx_0"
"(lambda(p_0)"
"(1/datum->syntax"
" #f"
" p_0"
" stx_0))"
" values)"
"(if(symbol? s_152)"
"(let-values() s_152)"
"(if(if(pair? s_152)"
"(eq?(car s_152) 'lib)"
" #f)"
"(let-values() s_152)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_201)"
"(let-values(((src_216)"
"(1/resolved-module-path-name"
" root-modname_201)))"
"(if(symbol?"
" src_216)"
"(list"
" 'quote"
" src_216)"
" src_216))"
" root-modname_201))))))"
"(let-values()"
"((1/current-load/use-compiled)"
" filename_195"
"(let-values(((sym_217)"
"(string->symbol"
"(path->string"
" no-sfx_200))))"
"(if subm-path_153"
"(if(hash-ref"
"(car hts_202)"
" root-modname_201"
" #f)"
"(cons #f subm-path_153)"
"(cons"
" sym_217"
" subm-path_153))"
" sym_217))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_177))"
"(if load?_0"
"(let-values(((or-part_218)"
"(string? s_152)))"
"(if or-part_218"
" or-part_218"
"(let-values(((or-part_219)"
"(symbol? s_152)))"
"(if or-part_219"
" or-part_219"
"(if(pair? s_152)"
"(eq?(car s_152) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_152)"
"(cons s_152(get-dir_147))"
"(cons s_152(get-reg_148)))"
"(vector"
" filename_195"
" normal-filename_196"
" name_198"
" no-sfx_200"
" root-modname_201)))"
"(void))"
" modname_205)))))))))))))))))))))))))"
" standard-module-name-resolver_117)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_0)"
"(begin"
"(1/eval"
" s_0"
"(1/current-namespace)"
"(let-values(((c_221)(1/current-compile)))"
"(lambda(e_0 ns_0)"
"(if(eq? ns_0(1/current-namespace))"
"(c_221 e_0 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_0)"
"(let-values()(c_221 e_0 #t))))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_0 immediate-eval?_0)(begin(1/compile s_0(1/current-namespace)(not immediate-eval?_0)))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_0 in_0)"
"(begin"
"(begin"
"(if(input-port? in_0)"
"(void)"
"          (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_0)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_0 in_0)))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(1/current-load/use-compiled default-load/use-compiled)"
"(1/current-reader-guard default-reader-guard)"
"(1/current-eval default-eval-handler)"
"(1/current-compile default-compile-handler)"
"(1/current-load default-load-handler)"
"(current-read-interaction default-read-interaction)))))"
"(define-values"
"(seal)"
"(lambda()(begin(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key))))))"
"(define-values(get-original-parameterization)(lambda()(begin orig-paramz)))"
"(define-values"
"(boot-primitives)"
"(hash 'boot boot 'seal seal 'get-original-parameterization get-original-parameterization))"
"(define-values"
"(prepare-next-phase-namespace)"
"(lambda(ctx_0)"
"(begin"
"(let-values(((phase_2)(add1(expand-context-phase ctx_0))))"
"(let-values(((ns_3)(namespace->namespace-at-phase(expand-context-namespace ctx_0) phase_2)))"
"(namespace-visit-available-modules! ns_3 phase_2))))))"
"(define-values"
"(expand-body7.1)"
"(lambda(source1_0 stratified?2_0 bodys5_0 ctx6_0)"
"(begin"
" 'expand-body7"
"(let-values(((bodys_26) bodys5_0))"
"(let-values(((ctx_27) ctx6_0))"
"(let-values(((s_28) source1_0))"
"(let-values(((stratified?_29) stratified?2_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_38)(expand-context-observer ctx_27)))"
"(if obs_38"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_38 'enter-block(datum->syntax$1 #f bodys_26))))"
"(void)))"
"(values))))"
"(let-values(((inside-sc_30)(new-scope 'intdef)))"
"(let-values(((init-bodys_31)"
"(reverse$1"
"(let-values(((lst_39) bodys_26))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_39)))"
"((letrec-values(((for-loop_40)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((body_43)(unsafe-car lst_0))"
"((rest_44)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_45)"
"(let-values(((fold-var_46) fold-var_0))"
"(let-values(((fold-var_47)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_43"
" inside-sc_30))"
" fold-var_46))))"
"(values fold-var_47)))))"
"(if(not #f)"
"(for-loop_40 fold-var_45 rest_44)"
" fold-var_45)))"
" fold-var_0)))))"
" for-loop_40)"
" null"
" lst_39))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_48)(expand-context-observer ctx_27)))"
"(if obs_48"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_48"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_31)"
"(datum->syntax$1 #f bodys_26))))"
"(void)))"
"(values))))"
"(let-values(((phase_32)(expand-context-phase ctx_27)))"
"(let-values(((frame-id_33)(make-reference-record)))"
"(let-values(((def-ctx-scopes_34)(box null)))"
"(let-values(((body-ctx_35)"
"(let-values(((v_49) ctx_27))"
"(let-values(((the-struct_50) v_49))"
"(if(expand-context/outer? the-struct_50)"
"(let-values(((context51_51)(list(make-liberal-define-context)))"
"((name52_52) #f)"
"((only-immediate?53_53) #t)"
"((def-ctx-scopes54_54) def-ctx-scopes_34)"
"((post-expansion55_55)"
"(lambda(s_0)"
"(begin"
" 'post-expansion55"
"(add-scope s_0 inside-sc_30))))"
"((scopes56_56)"
"(cons inside-sc_30(expand-context-scopes ctx_27)))"
"((use-site-scopes57_57)(box null))"
"((frame-id58_58) frame-id_33)"
"((reference-records59_59)"
"(cons"
" frame-id_33"
"(expand-context-reference-records ctx_27)))"
"((inner60_60)(root-expand-context/outer-inner v_49)))"
"(expand-context/outer1.1"
" inner60_60"
" post-expansion55_55"
" use-site-scopes57_57"
" frame-id58_58"
" context51_51"
"(expand-context/outer-env the-struct_50)"
" scopes56_56"
" def-ctx-scopes54_54"
"(expand-context/outer-binding-layer the-struct_50)"
" reference-records59_59"
" only-immediate?53_53"
"(expand-context/outer-need-eventually-defined the-struct_50)"
"(expand-context/outer-current-introduction-scopes the-struct_50)"
"(expand-context/outer-current-use-scopes the-struct_50)"
" name52_52))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context/outer?\""
" the-struct_50))))))"
"(let-values(((maybe-increment-binding-layer_36)"
"(lambda(ids_0 body-ctx_0)"
"(begin"
" 'maybe-increment-binding-layer"
"(if(eq?"
"(expand-context-binding-layer body-ctx_0)"
"(expand-context-binding-layer ctx_27))"
"(increment-binding-layer ids_0 body-ctx_0 inside-sc_30)"
"(expand-context-binding-layer body-ctx_0))))))"
"(let-values(((name_37)(expand-context-name ctx_27)))"
"((letrec-values(((loop_64)"
"(lambda(body-ctx_0"
" bodys_0"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_0"
" stx-clauses_0"
" dups_0)"
"(begin"
" 'loop"
"(if(null? bodys_0)"
"(let-values()"
"(let-values(((body-ctx61_76) body-ctx_0)"
"((frame-id62_77) frame-id_33)"
"((def-ctx-scopes63_78) def-ctx-scopes_34)"
"((temp64_79)(reverse$1 val-idss_0))"
"((temp65_80)(reverse$1 val-keyss_0))"
"((temp66_81)(reverse$1 val-rhss_0))"
"((temp67_82)(reverse$1 track-stxs_0))"
"((temp68_83)(reverse$1 stx-clauses_0))"
"((temp69_84)(reverse$1 done-bodys_0))"
"((s70_85) s_28)"
"((stratified?71_86) stratified?_29)"
"((name72_87) name_37)"
"((temp73_88)(reverse$1 trans-idss_0)))"
"(finish-expanding-body27.1"
" temp73_88"
" name72_87"
" s70_85"
" stratified?71_86"
" body-ctx61_76"
" frame-id62_77"
" def-ctx-scopes63_78"
" temp64_79"
" temp65_80"
" temp66_81"
" temp67_82"
" temp68_83"
" temp69_84)))"
"(let-values()"
"(let-values(((rest-bodys_89)(cdr bodys_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_92)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_92"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_92"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_90)"
"(let-values(((temp74_93)(car bodys_0))"
"((temp75_94)"
"(if(if name_37"
"(null?"
"(cdr bodys_0))"
" #f)"
"(let-values(((v_95)"
" body-ctx_0))"
"(let-values(((the-struct_96)"
" v_95))"
"(if(expand-context/outer?"
" the-struct_96)"
"(let-values(((name76_97)"
" name_37)"
"((inner77_98)"
"(root-expand-context/outer-inner"
" v_95)))"
"(expand-context/outer1.1"
" inner77_98"
"(root-expand-context/outer-post-expansion"
" the-struct_96)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_96)"
"(root-expand-context/outer-frame-id"
" the-struct_96)"
"(expand-context/outer-context"
" the-struct_96)"
"(expand-context/outer-env"
" the-struct_96)"
"(expand-context/outer-scopes"
" the-struct_96)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_96)"
"(expand-context/outer-binding-layer"
" the-struct_96)"
"(expand-context/outer-reference-records"
" the-struct_96)"
"(expand-context/outer-only-immediate?"
" the-struct_96)"
"(expand-context/outer-need-eventually-defined"
" the-struct_96)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_96)"
"(expand-context/outer-current-use-scopes"
" the-struct_96)"
" name76_97))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"expand-context/outer?\""
" the-struct_96))))"
" body-ctx_0)))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp74_93"
" temp75_94))))"
"(let-values(((disarmed-exp-body_91)"
"(syntax-disarm$1 exp-body_90)))"
"(let-values(((tmp_99)"
"(core-form-sym"
" disarmed-exp-body_91"
" phase_32)))"
"(if(equal? tmp_99 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_118)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_118"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_118"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_100"
" begin78_101"
" e79_102)"
"(let-values(((s_119)"
" disarmed-exp-body_91))"
"(let-values(((orig-s_120)"
" s_119))"
"(let-values(((begin78_121"
" e79_122)"
"(let-values(((s_123)"
"(if(syntax?$1"
" s_119)"
"(syntax-e$1"
" s_119)"
" s_119)))"
"(if(pair?"
" s_123)"
"(let-values(((begin80_124)"
"(let-values(((s_126)"
"(car"
" s_123)))"
" s_126))"
"((e81_125)"
"(let-values(((s_127)"
"(cdr"
" s_123)))"
"(let-values(((s_128)"
"(if(syntax?$1"
" s_127)"
"(syntax-e$1"
" s_127)"
" s_127)))"
"(let-values(((flat-s_129)"
"(to-syntax-list.1"
" s_128)))"
"(if(not"
" flat-s_129)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_120))"
"(let-values()"
" flat-s_129)))))))"
"(values"
" begin80_124"
" e81_125))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_120)))))"
"(values"
" #t"
" begin78_121"
" e79_122))))))"
"(let-values(((track_116)"
"(lambda(e_0)"
"(begin"
" 'track"
"(syntax-track-origin$1"
" e_0"
" exp-body_90)))))"
"(let-values(((splice-bodys_117)"
"(append"
"(map2"
" track_116"
" e79_102)"
" rest-bodys_89)))"
"(begin"
"(let-values(((obs_131)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_131"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_131"
" 'splice"
" splice-bodys_117)))"
"(void)))"
"(loop_64"
" body-ctx_0"
" splice-bodys_117"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_0"
" stx-clauses_0"
" dups_0)))))))"
"(if(equal? tmp_99 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_157)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_157"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_157"
" 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_132"
" define-values82_133"
" id83_134"
" rhs84_135)"
"(let-values(((s_158)"
" disarmed-exp-body_91))"
"(let-values(((orig-s_159)"
" s_158))"
"(let-values(((define-values82_160"
" id83_161"
" rhs84_162)"
"(let-values(((s_163)"
"(if(syntax?$1"
" s_158)"
"(syntax-e$1"
" s_158)"
" s_158)))"
"(if(pair?"
" s_163)"
"(let-values(((define-values85_164)"
"(let-values(((s_167)"
"(car"
" s_163)))"
" s_167))"
"((id86_165"
" rhs87_166)"
"(let-values(((s_168)"
"(cdr"
" s_163)))"
"(let-values(((s_169)"
"(if(syntax?$1"
" s_168)"
"(syntax-e$1"
" s_168)"
" s_168)))"
"(if(pair?"
" s_169)"
"(let-values(((id88_170)"
"(let-values(((s_172)"
"(car"
" s_169)))"
"(let-values(((s_173)"
"(if(syntax?$1"
" s_172)"
"(syntax-e$1"
" s_172)"
" s_172)))"
"(let-values(((flat-s_174)"
"(to-syntax-list.1"
" s_173)))"
"(if(not"
" flat-s_174)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_159))"
"(let-values()"
"(let-values(((id_175)"
"(let-values(((lst_176)"
" flat-s_174))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_176)))"
"((letrec-values(((for-loop_177)"
"(lambda(id_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_180)"
"(unsafe-car"
" lst_0))"
"((rest_181)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id_182)"
"(let-values(((id_183)"
" id_0))"
"(let-values(((id_184)"
"(let-values()"
"(let-values(((id91_185)"
"(let-values()"
"(if(let-values(((or-part_186)"
"(if(syntax?$1"
" s_180)"
"(symbol?"
"(syntax-e$1"
" s_180))"
" #f)))"
"(if or-part_186"
" or-part_186"
"(symbol?"
" s_180)))"
" s_180"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_159"
" s_180)))))"
"(cons"
" id91_185"
" id_183)))))"
"(values"
" id_184)))))"
"(if(not"
" #f)"
"(for-loop_177"
" id_182"
" rest_181)"
" id_182)))"
" id_0)))))"
" for-loop_177)"
" null"
" lst_176)))))"
"(reverse$1"
" id_175))))))))"
"((rhs89_171)"
"(let-values(((s_187)"
"(cdr"
" s_169)))"
"(let-values(((s_188)"
"(if(syntax?$1"
" s_187)"
"(syntax-e$1"
" s_187)"
" s_187)))"
"(if(pair?"
" s_188)"
"(let-values(((rhs90_189)"
"(let-values(((s_190)"
"(car"
" s_188)))"
" s_190))"
"(()"
"(let-values(((s_191)"
"(cdr"
" s_188)))"
"(let-values(((s_192)"
"(if(syntax?$1"
" s_191)"
"(syntax-e$1"
" s_191)"
" s_191)))"
"(if(null?"
" s_192)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_159))))))"
"(values"
" rhs90_189))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_159))))))"
"(values"
" id88_170"
" rhs89_171))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_159))))))"
"(values"
" define-values85_164"
" id86_165"
" rhs87_166))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_159)))))"
"(values"
" #t"
" define-values82_160"
" id83_161"
" rhs84_162))))))"
"(let-values(((ids_152)"
"(remove-use-site-scopes"
" id83_134"
" body-ctx_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_193)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_193"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_193"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_152"
" rhs84_135)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_153)"
"(let-values(((ids92_194)"
" ids_152)"
"((phase93_195)"
" phase_32)"
"((exp-body94_196)"
" exp-body_90)"
"((dups95_197)"
" dups_0))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" ids92_194"
" phase93_195"
" exp-body94_196"
" dups95_197))))"
"(let-values(((counter_154)"
"(root-expand-context-counter"
" ctx_27)))"
"(let-values(((keys_155)"
"(reverse$1"
"(let-values(((lst_198)"
" ids_152))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_198)))"
"((letrec-values(((for-loop_199)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((id_202)"
"(unsafe-car"
" lst_0))"
"((rest_203)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_204)"
"(let-values(((fold-var_205)"
" fold-var_0))"
"(let-values(((fold-var_206)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id96_208)"
" id_202)"
"((phase97_209)"
" phase_32)"
"((counter98_210)"
" counter_154)"
"((frame-id99_211)"
" frame-id_33)"
"((exp-body100_212)"
" exp-body_90))"
"(add-local-binding!37.1"
" frame-id99_211"
" exp-body100_212"
" id96_208"
" phase97_209"
" counter98_210)))"
" fold-var_205))))"
"(values"
" fold-var_206)))))"
"(if(not"
" #f)"
"(for-loop_199"
" fold-var_204"
" rest_203)"
" fold-var_204)))"
" fold-var_0)))))"
" for-loop_199)"
" null"
" lst_198))))))"
"(let-values(((extended-env_156)"
"(let-values(((lst_213)"
" keys_155)"
"((lst_214)"
" ids_152))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_213)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_214)))"
"((letrec-values(((for-loop_215)"
"(lambda(env_0"
" lst_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
"(pair?"
" lst_1)"
" #f)"
"(let-values(((key_219)"
"(unsafe-car"
" lst_0))"
"((rest_220)"
"(unsafe-cdr"
" lst_0))"
"((id_221)"
"(unsafe-car"
" lst_1))"
"((rest_222)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((env_223)"
"(let-values(((env_224)"
" env_0))"
"(let-values(((env_225)"
"(let-values()"
"(env-extend"
" env_224"
" key_219"
"(local-variable1.1"
" id_221)))))"
"(values"
" env_225)))))"
"(if(not"
" #f)"
"(for-loop_215"
" env_223"
" rest_220"
" rest_222)"
" env_223)))"
" env_0)))))"
" for-loop_215)"
"(expand-context-env"
" body-ctx_0)"
" lst_213"
" lst_214)))))"
"(loop_64"
"(let-values(((v_226)"
" body-ctx_0))"
"(let-values(((the-struct_227)"
" v_226))"
"(if(expand-context/outer?"
" the-struct_227)"
"(let-values(((env101_228)"
" extended-env_156)"
"((binding-layer102_229)"
"(maybe-increment-binding-layer_36"
" ids_152"
" body-ctx_0))"
"((inner103_230)"
"(root-expand-context/outer-inner"
" v_226)))"
"(expand-context/outer1.1"
" inner103_230"
"(root-expand-context/outer-post-expansion"
" the-struct_227)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_227)"
"(root-expand-context/outer-frame-id"
" the-struct_227)"
"(expand-context/outer-context"
" the-struct_227)"
" env101_228"
"(expand-context/outer-scopes"
" the-struct_227)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_227)"
" binding-layer102_229"
"(expand-context/outer-reference-records"
" the-struct_227)"
"(expand-context/outer-only-immediate?"
" the-struct_227)"
"(expand-context/outer-need-eventually-defined"
" the-struct_227)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_227)"
"(expand-context/outer-current-use-scopes"
" the-struct_227)"
"(expand-context/outer-name"
" the-struct_227)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                      \"expand-context/outer?\""
" the-struct_227))))"
" rest-bodys_89"
" null"
"(cons"
" ids_152"
"(append"
"(reverse$1"
"(let-values(((lst_231)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_231)))"
"((letrec-values(((for-loop_232)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((done-body_235)"
"(unsafe-car"
" lst_0))"
"((rest_236)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_237)"
"(let-values(((fold-var_238)"
" fold-var_0))"
"(let-values(((fold-var_239)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_238))))"
"(values"
" fold-var_239)))))"
"(if(not"
" #f)"
"(for-loop_232"
" fold-var_237"
" rest_236)"
" fold-var_237)))"
" fold-var_0)))))"
" for-loop_232)"
" null"
" lst_231))))"
" val-idss_0))"
"(cons"
" keys_155"
"(append"
"(reverse$1"
"(let-values(((lst_240)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_240)))"
"((letrec-values(((for-loop_241)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((done-body_244)"
"(unsafe-car"
" lst_0))"
"((rest_245)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_246)"
"(let-values(((fold-var_247)"
" fold-var_0))"
"(let-values(((fold-var_248)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_247))))"
"(values"
" fold-var_248)))))"
"(if(not"
" #f)"
"(for-loop_241"
" fold-var_246"
" rest_245)"
" fold-var_246)))"
" fold-var_0)))))"
" for-loop_241)"
" null"
" lst_240))))"
" val-keyss_0))"
"(cons"
" rhs84_135"
"(append"
"(reverse$1"
"(let-values(((lst_249)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_249)))"
"((letrec-values(((for-loop_250)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((done-body_253)"
"(unsafe-car"
" lst_0))"
"((rest_254)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_255)"
"(let-values(((fold-var_256)"
" fold-var_0))"
"(let-values(((fold-var_257)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_253"
" s_28"
" phase_32))"
" fold-var_256))))"
"(values"
" fold-var_257)))))"
"(if(not"
" #f)"
"(for-loop_250"
" fold-var_255"
" rest_254)"
" fold-var_255)))"
" fold-var_0)))))"
" for-loop_250)"
" null"
" lst_249))))"
" val-rhss_0))"
"(cons"
" exp-body_90"
"(append"
"(reverse$1"
"(let-values(((lst_258)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_258)))"
"((letrec-values(((for-loop_259)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((done-body_262)"
"(unsafe-car"
" lst_0))"
"((rest_263)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_264)"
"(let-values(((fold-var_265)"
" fold-var_0))"
"(let-values(((fold-var_266)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_265))))"
"(values"
" fold-var_266)))))"
"(if(not"
" #f)"
"(for-loop_259"
" fold-var_264"
" rest_263)"
" fold-var_264)))"
" fold-var_0)))))"
" for-loop_259)"
" null"
" lst_258))))"
" track-stxs_0))"
" trans-idss_0"
" stx-clauses_0"
" new-dups_153))))))))))"
"(if(equal? tmp_99 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_293)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_293"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_293"
" 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_267"
" define-syntaxes104_268"
" id105_269"
" rhs106_270)"
"(let-values(((s_294)"
" disarmed-exp-body_91))"
"(let-values(((orig-s_295)"
" s_294))"
"(let-values(((define-syntaxes104_296"
" id105_297"
" rhs106_298)"
"(let-values(((s_299)"
"(if(syntax?$1"
" s_294)"
"(syntax-e$1"
" s_294)"
" s_294)))"
"(if(pair?"
" s_299)"
"(let-values(((define-syntaxes107_300)"
"(let-values(((s_303)"
"(car"
" s_299)))"
" s_303))"
"((id108_301"
" rhs109_302)"
"(let-values(((s_304)"
"(cdr"
" s_299)))"
"(let-values(((s_305)"
"(if(syntax?$1"
" s_304)"
"(syntax-e$1"
" s_304)"
" s_304)))"
"(if(pair?"
" s_305)"
"(let-values(((id110_306)"
"(let-values(((s_308)"
"(car"
" s_305)))"
"(let-values(((s_309)"
"(if(syntax?$1"
" s_308)"
"(syntax-e$1"
" s_308)"
" s_308)))"
"(let-values(((flat-s_310)"
"(to-syntax-list.1"
" s_309)))"
"(if(not"
" flat-s_310)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_295))"
"(let-values()"
"(let-values(((id_311)"
"(let-values(((lst_312)"
" flat-s_310))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_312)))"
"((letrec-values(((for-loop_313)"
"(lambda(id_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_316)"
"(unsafe-car"
" lst_0))"
"((rest_317)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id_318)"
"(let-values(((id_319)"
" id_0))"
"(let-values(((id_320)"
"(let-values()"
"(let-values(((id113_321)"
"(let-values()"
"(if(let-values(((or-part_322)"
"(if(syntax?$1"
" s_316)"
"(symbol?"
"(syntax-e$1"
" s_316))"
" #f)))"
"(if or-part_322"
" or-part_322"
"(symbol?"
" s_316)))"
" s_316"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_295"
" s_316)))))"
"(cons"
" id113_321"
" id_319)))))"
"(values"
" id_320)))))"
"(if(not"
" #f)"
"(for-loop_313"
" id_318"
" rest_317)"
" id_318)))"
" id_0)))))"
" for-loop_313)"
" null"
" lst_312)))))"
"(reverse$1"
" id_311))))))))"
"((rhs111_307)"
"(let-values(((s_323)"
"(cdr"
" s_305)))"
"(let-values(((s_324)"
"(if(syntax?$1"
" s_323)"
"(syntax-e$1"
" s_323)"
" s_323)))"
"(if(pair?"
" s_324)"
"(let-values(((rhs112_325)"
"(let-values(((s_326)"
"(car"
" s_324)))"
" s_326))"
"(()"
"(let-values(((s_327)"
"(cdr"
" s_324)))"
"(let-values(((s_328)"
"(if(syntax?$1"
" s_327)"
"(syntax-e$1"
" s_327)"
" s_327)))"
"(if(null?"
" s_328)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_295))))))"
"(values"
" rhs112_325))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_295))))))"
"(values"
" id110_306"
" rhs111_307))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_295))))))"
"(values"
" define-syntaxes107_300"
" id108_301"
" rhs109_302))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_295)))))"
"(values"
" #t"
" define-syntaxes104_296"
" id105_297"
" rhs106_298))))))"
"(let-values(((ids_287)"
"(remove-use-site-scopes"
" id105_269"
" body-ctx_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_329)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_329"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_329"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_287"
" rhs106_270)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_288)"
"(let-values(((ids114_330)"
" ids_287)"
"((phase115_331)"
" phase_32)"
"((exp-body116_332)"
" exp-body_90)"
"((dups117_333)"
" dups_0))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" ids114_330"
" phase115_331"
" exp-body116_332"
" dups117_333))))"
"(let-values(((counter_289)"
"(root-expand-context-counter"
" ctx_27)))"
"(let-values(((keys_290)"
"(reverse$1"
"(let-values(((lst_334)"
" ids_287))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_334)))"
"((letrec-values(((for-loop_335)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((id_338)"
"(unsafe-car"
" lst_0))"
"((rest_339)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_340)"
"(let-values(((fold-var_341)"
" fold-var_0))"
"(let-values(((fold-var_342)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id118_344)"
" id_338)"
"((phase119_345)"
" phase_32)"
"((counter120_346)"
" counter_289)"
"((frame-id121_347)"
" frame-id_33)"
"((exp-body122_348)"
" exp-body_90))"
"(add-local-binding!37.1"
" frame-id121_347"
" exp-body122_348"
" id118_344"
" phase119_345"
" counter120_346)))"
" fold-var_341))))"
"(values"
" fold-var_342)))))"
"(if(not"
" #f)"
"(for-loop_335"
" fold-var_340"
" rest_339)"
" fold-var_340)))"
" fold-var_0)))))"
" for-loop_335)"
" null"
" lst_334))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_349)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_349"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_349"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(prepare-next-phase-namespace"
" ctx_27)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_350)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_350"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_350"
" 'enter-bind)))"
"(void)))"
"(values))))"
"(let-values(((vals_291)"
"(eval-for-syntaxes-binding"
" 'define-syntaxes"
" rhs106_270"
" ids_287"
" body-ctx_0)))"
"(let-values(((extended-env_292)"
"(let-values(((lst_351)"
" keys_290)"
"((lst_352)"
" vals_291)"
"((lst_353)"
" ids_287))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_351)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_352)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_353)))"
"((letrec-values(((for-loop_354)"
"(lambda(env_0"
" lst_0"
" lst_1"
" lst_2)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
"(if(pair?"
" lst_1)"
"(pair?"
" lst_2)"
" #f)"
" #f)"
"(let-values(((key_359)"
"(unsafe-car"
" lst_0))"
"((rest_360)"
"(unsafe-cdr"
" lst_0))"
"((val_361)"
"(unsafe-car"
" lst_1))"
"((rest_362)"
"(unsafe-cdr"
" lst_1))"
"((id_363)"
"(unsafe-car"
" lst_2))"
"((rest_364)"
"(unsafe-cdr"
" lst_2)))"
"(let-values(((env_365)"
"(let-values(((env_366)"
" env_0))"
"(let-values(((env_367)"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_361"
" id_363"
" phase_32"
" body-ctx_0)"
"(env-extend"
" env_366"
" key_359"
" val_361)))))"
"(values"
" env_367)))))"
"(if(not"
" #f)"
"(for-loop_354"
" env_365"
" rest_360"
" rest_362"
" rest_364)"
" env_365)))"
" env_0)))))"
" for-loop_354)"
"(expand-context-env"
" body-ctx_0)"
" lst_351"
" lst_352"
" lst_353)))))"
"(begin"
"(let-values(((obs_368)"
"(expand-context-observer"
" body-ctx_0)))"
"(if obs_368"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_368"
" 'exit-bind)))"
"(void)))"
"(loop_64"
"(let-values(((v_369)"
" body-ctx_0))"
"(let-values(((the-struct_370)"
" v_369))"
"(if(expand-context/outer?"
" the-struct_370)"
"(let-values(((env123_371)"
" extended-env_292)"
"((binding-layer124_372)"
"(maybe-increment-binding-layer_36"
" ids_287"
" body-ctx_0))"
"((inner125_373)"
"(root-expand-context/outer-inner"
" v_369)))"
"(expand-context/outer1.1"
" inner125_373"
"(root-expand-context/outer-post-expansion"
" the-struct_370)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_370)"
"(root-expand-context/outer-frame-id"
" the-struct_370)"
"(expand-context/outer-context"
" the-struct_370)"
" env123_371"
"(expand-context/outer-scopes"
" the-struct_370)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_370)"
" binding-layer124_372"
"(expand-context/outer-reference-records"
" the-struct_370)"
"(expand-context/outer-only-immediate?"
" the-struct_370)"
"(expand-context/outer-need-eventually-defined"
" the-struct_370)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_370)"
"(expand-context/outer-current-use-scopes"
" the-struct_370)"
"(expand-context/outer-name"
" the-struct_370)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                  \"expand-context/outer?\""
" the-struct_370))))"
" rest-bodys_89"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
"(cons"
" ids_287"
" trans-idss_0)"
"(cons"
"(datum->syntax$1"
" #f"
"(list"
" ids_287"
" rhs106_270)"
" exp-body_90)"
" stx-clauses_0)"
" new-dups_288)))))))))))))))"
"(let-values()"
"(if stratified?_29"
"(let-values()"
"(begin"
"(if(null? done-bodys_0)"
"(void)"
"(let-values()"
"(error"
"                                                                                           \"internal error: accumulated expressions not empty\")))"
"(loop_64"
" body-ctx_0"
" null"
"(if(if(null? val-idss_0)"
"(null? trans-idss_0)"
" #f)"
"(reverse$1"
"(cons"
" exp-body_90"
" rest-bodys_89))"
"(list"
"(datum->syntax$1"
" #f"
"(cons"
"(core-id"
" '#%stratified-body"
" phase_32)"
"(cons"
" exp-body_90"
" rest-bodys_89)))))"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_0"
" stx-clauses_0"
" dups_0)))"
"(let-values()"
"(loop_64"
" body-ctx_0"
" rest-bodys_89"
"(cons exp-body_90 done-bodys_0)"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_0"
" stx-clauses_0"
" dups_0))))))))))))))))))"
" loop_64)"
" body-ctx_35"
" init-bodys_31"
" null"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table))))))))))))))))))))"
"(define-values"
"(finish-expanding-body27.1)"
"(lambda(disappeared-transformer-bindings13_0"
" name12_0"
" source10_0"
" stratified?11_0"
" body-ctx18_0"
" frame-id19_0"
" def-ctx-scopes20_0"
" val-idss21_0"
" val-keyss22_0"
" val-rhss23_0"
" track-stxs24_0"
" stx-clauses25_0"
" done-bodys26_0)"
"(begin"
" 'finish-expanding-body27"
"(let-values(((body-ctx_422) body-ctx18_0))"
"(let-values(((frame-id_423) frame-id19_0))"
"(let-values(((def-ctx-scopes_424) def-ctx-scopes20_0))"
"(let-values(((val-idss_425) val-idss21_0))"
"(let-values(((val-keyss_426) val-keyss22_0))"
"(let-values(((val-rhss_427) val-rhss23_0))"
"(let-values(((track-stxs_428) track-stxs24_0))"
"(let-values(((stx-clauses_429) stx-clauses25_0))"
"(let-values(((done-bodys_430) done-bodys26_0))"
"(let-values(((s_431) source10_0))"
"(let-values(((stratified?_432) stratified?11_0))"
"(let-values(((name_433) name12_0))"
"(let-values(((disappeared-transformer-bindings_434)"
" disappeared-transformer-bindings13_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_430)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                       \"no expression after a sequence of internal definitions\""
" s_431))"
"(void))"
"(values))))"
"(let-values(((finish-ctx_435)"
"(let-values(((v_437)"
"(accumulate-def-ctx-scopes"
" body-ctx_422"
" def-ctx-scopes_424)))"
"(let-values(((the-struct_438) v_437))"
"(if(expand-context/outer? the-struct_438)"
"(let-values(((context126_439) 'expression)"
"((use-site-scopes127_440)(box null))"
"((scopes128_441)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes"
" body-ctx_422))"
"(expand-context-scopes body-ctx_422)))"
"((only-immediate?129_442) #f)"
"((def-ctx-scopes130_443) #f)"
"((post-expansion131_444) #f)"
"((inner132_445)"
"(root-expand-context/outer-inner v_437)))"
"(expand-context/outer1.1"
" inner132_445"
" post-expansion131_444"
" use-site-scopes127_440"
"(root-expand-context/outer-frame-id the-struct_438)"
" context126_439"
"(expand-context/outer-env the-struct_438)"
" scopes128_441"
" def-ctx-scopes130_443"
"(expand-context/outer-binding-layer the-struct_438)"
"(expand-context/outer-reference-records the-struct_438)"
" only-immediate?129_442"
"(expand-context/outer-need-eventually-defined the-struct_438)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_438)"
"(expand-context/outer-current-use-scopes the-struct_438)"
"(expand-context/outer-name the-struct_438)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"expand-context/outer?\""
" the-struct_438))))))"
"(let-values(((finish-bodys_436)"
"(lambda()"
"(begin"
" 'finish-bodys"
"(let-values(((block->list?_446)(null? val-idss_425)))"
"(let-values((()"
"(begin"
"(if block->list?_446"
"(void)"
"(let-values()"
"(let-values(((obs_449)"
"(expand-context-observer"
" body-ctx_422)))"
"(if obs_449"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_449"
" 'next-group)))"
"(void)))))"
"(values))))"
"(let-values(((last-i_447)(sub1(length done-bodys_430))))"
"(let-values((()"
"(begin"
"(let-values(((obs_450)"
"(expand-context-observer"
" body-ctx_422)))"
"(if obs_450"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_450"
" 'enter-list"
"(datum->syntax$1"
" #f"
" done-bodys_430))))"
"(void)))"
"(values))))"
"(let-values(((exp-bodys_448)"
"(reverse$1"
"(let-values(((lst_451) done-bodys_430)"
"((start_452) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_451)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-naturals start_452)))"
"((letrec-values(((for-loop_453)"
"(lambda(fold-var_0"
" lst_0"
" pos_0)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
" #t"
" #f)"
"(let-values(((done-body_457)"
"(unsafe-car"
" lst_0))"
"((rest_458)"
"(unsafe-cdr"
" lst_0))"
"((i_459)"
" pos_0))"
"(let-values(((fold-var_460)"
"(let-values(((fold-var_461)"
" fold-var_0))"
"(let-values(((fold-var_462)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_463)"
"(expand-context-observer"
" body-ctx_422)))"
"(if obs_463"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_463"
" 'next)))"
"(void)))"
"(let-values(((done-body133_464)"
" done-body_457)"
"((temp134_465)"
"(if(if name_433"
"(="
" i_459"
" last-i_447)"
" #f)"
"(let-values(((v_466)"
" finish-ctx_435))"
"(let-values(((the-struct_467)"
" v_466))"
"(if(expand-context/outer?"
" the-struct_467)"
"(let-values(((name135_468)"
" name_433)"
"((inner136_469)"
"(root-expand-context/outer-inner"
" v_466)))"
"(expand-context/outer1.1"
" inner136_469"
"(root-expand-context/outer-post-expansion"
" the-struct_467)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_467)"
"(root-expand-context/outer-frame-id"
" the-struct_467)"
"(expand-context/outer-context"
" the-struct_467)"
"(expand-context/outer-env"
" the-struct_467)"
"(expand-context/outer-scopes"
" the-struct_467)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_467)"
"(expand-context/outer-binding-layer"
" the-struct_467)"
"(expand-context/outer-reference-records"
" the-struct_467)"
"(expand-context/outer-only-immediate?"
" the-struct_467)"
"(expand-context/outer-need-eventually-defined"
" the-struct_467)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_467)"
"(expand-context/outer-current-use-scopes"
" the-struct_467)"
" name135_468))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                         \"expand-context/outer?\""
" the-struct_467))))"
" finish-ctx_435)))"
"(expand9.1"
" #f"
" #f"
" #f"
" done-body133_464"
" temp134_465))))"
" fold-var_461))))"
"(values"
" fold-var_462)))))"
"(if(not"
" #f)"
"(for-loop_453"
" fold-var_460"
" rest_458"
"(+"
" pos_0"
" 1))"
" fold-var_460)))"
" fold-var_0)))))"
" for-loop_453)"
" null"
" lst_451"
" start_452))))))"
"(begin"
"(let-values(((obs_470)"
"(expand-context-observer"
" body-ctx_422)))"
"(if obs_470"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_470"
" 'exit-list"
"(datum->syntax$1 #f exp-bodys_448))))"
"(void)))"
"(reference-record-clear! frame-id_423)"
" exp-bodys_448))))))))))"
"(if(if(null? val-idss_425)(null? disappeared-transformer-bindings_434) #f)"
"(let-values()"
"(begin"
"(let-values(((obs_471)(expand-context-observer finish-ctx_435)))"
"(if obs_471"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_471"
" 'block->list"
"(datum->syntax$1 s_431 done-bodys_430))))"
"(void)))"
"(finish-bodys_436)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_473)"
"(expand-context-observer finish-ctx_435)))"
"(if obs_473"
"(let-values()"
"(log-letrec-values$1"
" obs_473"
" finish-ctx_435"
" s_431"
" val-idss_425"
" val-rhss_427"
" track-stxs_428"
" stx-clauses_429"
" done-bodys_430))"
"(void)))"
"(values))))"
"(let-values(((exp-s_472)"
"(let-values(((val-idss137_475) val-idss_425)"
"((val-keyss138_476) val-keyss_426)"
"((val-rhss139_477) val-rhss_427)"
"((track-stxs140_478) track-stxs_428)"
"((temp141_479)(not stratified?_432))"
"((frame-id142_480) frame-id_423)"
"((finish-ctx143_481) finish-ctx_435)"
"((s144_482) s_431)"
"((temp145_483)(pair? stx-clauses_429))"
"((finish-bodys146_484) finish-bodys_436)"
"((temp147_485) #f))"
"(expand-and-split-bindings-by-reference48.1"
" finish-ctx143_481"
" frame-id142_480"
" finish-bodys146_484"
" temp145_483"
" s144_482"
" temp141_479"
" temp147_485"
" val-idss137_475"
" val-keyss138_476"
" val-rhss139_477"
" track-stxs140_478))))"
"(begin"
"(let-values(((obs_486)(expand-context-observer body-ctx_422)))"
"(if obs_486"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_486 'exit-prim exp-s_472)"
"(call-expand-observe obs_486 'return exp-s_472))))"
"(void)))"
"(if(expand-context-to-parsed? body-ctx_422)"
"(list exp-s_472)"
"(list"
"(attach-disappeared-transformer-bindings"
" exp-s_472"
" disappeared-transformer-bindings_434))))))))))))))))))))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference48.1)"
"(lambda(ctx32_0"
" frame-id31_0"
" get-body35_0"
" had-stxes?34_0"
" source33_0"
" split?30_0"
" track?36_0"
" idss44_0"
" keyss45_0"
" rhss46_0"
" track-stxs47_0)"
"(begin"
" 'expand-and-split-bindings-by-reference48"
"(let-values(((idss_546) idss44_0))"
"(let-values(((keyss_547) keyss45_0))"
"(let-values(((rhss_548) rhss46_0))"
"(let-values(((track-stxs_549) track-stxs47_0))"
"(let-values(((split?_550) split?30_0))"
"(let-values(((frame-id_551) frame-id31_0))"
"(let-values(((ctx_552) ctx32_0))"
"(let-values(((s_553) source33_0))"
"(let-values(((had-stxes?_554) had-stxes?34_0))"
"(let-values(((get-body_555) get-body35_0))"
"(let-values(((track?_556) track?36_0))"
"(let-values()"
"(let-values(((phase_557)(expand-context-phase ctx_552)))"
"((letrec-values(((loop_558)"
"(lambda(idss_0"
" keyss_0"
" rhss_0"
" track-stxs_0"
" accum-idss_0"
" accum-keyss_0"
" accum-rhss_0"
" accum-track-stxs_0"
" track?_0"
" get-list?_0"
" can-log?_0)"
"(begin"
" 'loop"
"(if(null? idss_0)"
"(let-values()"
"(if(if(null? accum-idss_0) get-list?_0 #f)"
"(let-values()(get-body_555))"
"(let-values()"
"(let-values(((exp-body_570)(get-body_555)))"
"(let-values(((result-s_571)"
"(if(expand-context-to-parsed? ctx_552)"
"(if(null? accum-idss_0)"
"(parsed-let-values17.1"
"(keep-properties-only s_553)"
" null"
" null"
" exp-body_570)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_553)"
"(reverse$1 accum-idss_0)"
"(reverse$1"
"(map2"
" list"
" accum-keyss_0"
" accum-rhss_0))"
" exp-body_570))"
"(let-values(((track?148_573) track?_0)"
"((s149_574) s_553)"
"((temp150_575)"
"(list*"
"(if(null? accum-idss_0)"
"(core-id"
" 'let-values"
" phase_557)"
"(core-id"
" 'letrec-values"
" phase_557))"
"(build-clauses"
" accum-idss_0"
" accum-rhss_0"
" accum-track-stxs_0)"
" exp-body_570)))"
"(rebuild5.1"
" track?148_573"
" s149_574"
" temp150_575)))))"
"(begin"
"(let-values(((obs_576)"
"(expand-context-observer ctx_552)))"
"(if obs_576"
"(let-values()"
"(if(if can-log?_0"
"(log-tag? had-stxes?_554 ctx_552)"
" #f)"
"(let-values()"
"(call-expand-observe"
" obs_576"
" 'tag"
" result-s_571))"
"(void)))"
"(void)))"
"(if get-list?_0"
"(list result-s_571)"
" result-s_571)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_582)"
"(expand-context-observer"
" ctx_552)))"
"(if obs_582"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_582 'next)))"
"(void)))"
"(values))))"
"(let-values(((ids_577)(car idss_0)))"
"(let-values(((expanded-rhs_578)"
"(let-values(((temp151_583)(car rhss_0))"
"((temp152_584)"
"(as-named-context"
" ctx_552"
" ids_577)))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp151_583"
" temp152_584))))"
"(let-values(((track-stx_579)(car track-stxs_0)))"
"(let-values(((local-or-forward-references?_580)"
"(reference-record-forward-references?"
" frame-id_551)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_551"
"(car keyss_0))"
"(values))))"
"(let-values(((forward-references?_581)"
"(reference-record-forward-references?"
" frame-id_551)))"
"(if(if(not local-or-forward-references?_580)"
" split?_550"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? accum-idss_0)"
"(void)"
"(let-values()"
"(error"
"                                                                                                 \"internal error: accumulated ids not empty\")))"
"(values))))"
"(let-values(((exp-rest_585)"
"(loop_558"
"(cdr idss_0)"
"(cdr keyss_0)"
"(cdr rhss_0)"
"(cdr track-stxs_0)"
" null"
" null"
" null"
" null"
" #f"
" #t"
" #f)))"
"(let-values(((result-s_586)"
"(if(expand-context-to-parsed?"
" ctx_552)"
"(parsed-let-values17.1"
"(keep-properties-only"
" s_553)"
"(list ids_577)"
"(list"
"(list"
"(car keyss_0)"
" expanded-rhs_578))"
" exp-rest_585)"
"(let-values(((track?153_588)"
" track?_0)"
"((s154_589)"
" s_553)"
"((temp155_590)"
"(list*"
"(core-id"
" 'let-values"
" phase_557)"
"(list"
"(build-clause"
" ids_577"
" expanded-rhs_578"
" track-stx_579))"
" exp-rest_585)))"
"(rebuild5.1"
" track?153_588"
" s154_589"
" temp155_590)))))"
"(begin"
"(let-values(((obs_591)"
"(expand-context-observer"
" ctx_552)))"
"(if obs_591"
"(let-values()"
"(if(if can-log?_0"
"(log-tag?"
" had-stxes?_554"
" ctx_552)"
" #f)"
"(let-values()"
"(call-expand-observe"
" obs_591"
" 'tag"
" result-s_586))"
"(void)))"
"(void)))"
"(if get-list?_0"
"(list result-s_586)"
" result-s_586))))))"
"(if(if(not forward-references?_581)"
"(let-values(((or-part_592) split?_550))"
"(if or-part_592"
" or-part_592"
"(null?(cdr idss_0))))"
" #f)"
"(let-values()"
"(let-values(((exp-rest_593)"
"(loop_558"
"(cdr idss_0)"
"(cdr keyss_0)"
"(cdr rhss_0)"
"(cdr track-stxs_0)"
" null"
" null"
" null"
" null"
" #f"
" #t"
" #f)))"
"(let-values(((result-s_594)"
"(if(expand-context-to-parsed?"
" ctx_552)"
"(parsed-letrec-values18.1"
"(keep-properties-only"
" s_553)"
"(reverse$1"
"(cons"
" ids_577"
" accum-idss_0))"
"(reverse$1"
"(cons"
"(list"
"(car keyss_0)"
" expanded-rhs_578)"
"(map2"
" list"
" accum-keyss_0"
" accum-rhss_0)))"
" exp-rest_593)"
"(let-values(((track?156_596)"
" track?_0)"
"((s157_597)"
" s_553)"
"((temp158_598)"
"(list*"
"(core-id"
" 'letrec-values"
" phase_557)"
"(build-clauses"
"(cons"
" ids_577"
" accum-idss_0)"
"(cons"
" expanded-rhs_578"
" accum-rhss_0)"
"(cons"
" track-stx_579"
" accum-track-stxs_0))"
" exp-rest_593)))"
"(rebuild5.1"
" track?156_596"
" s157_597"
" temp158_598)))))"
"(begin"
"(let-values(((obs_599)"
"(expand-context-observer"
" ctx_552)))"
"(if obs_599"
"(let-values()"
"(if(if can-log?_0"
"(log-tag?"
" had-stxes?_554"
" ctx_552)"
" #f)"
"(let-values()"
"(call-expand-observe"
" obs_599"
" 'tag"
" result-s_594))"
"(void)))"
"(void)))"
"(if get-list?_0"
"(list result-s_594)"
" result-s_594)))))"
"(let-values()"
"(loop_558"
"(cdr idss_0)"
"(cdr keyss_0)"
"(cdr rhss_0)"
"(cdr track-stxs_0)"
"(cons ids_577 accum-idss_0)"
"(cons(car keyss_0) accum-keyss_0)"
"(cons expanded-rhs_578 accum-rhss_0)"
"(cons track-stx_579 accum-track-stxs_0)"
" track?_0"
" get-list?_0"
" can-log?_0)))))))))))))))))"
" loop_558)"
" idss_546"
" keyss_547"
" rhss_548"
" track-stxs_549"
" null"
" null"
" null"
" null"
" track?_556"
" #f"
" #t)))))))))))))))))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_0 accum-rhss_0 accum-track-stxs_0)"
"(begin(map2 build-clause(reverse$1 accum-idss_0)(reverse$1 accum-rhss_0)(reverse$1 accum-track-stxs_0)))))"
"(define-values"
"(build-clause)"
"(lambda(ids_0 rhs_0 track-stx_0)"
"(begin"
"(let-values(((clause_646)(datum->syntax$1 #f(list ids_0 rhs_0))))"
"(if track-stx_0(syntax-track-origin$1 clause_646 track-stx_0) clause_646)))))"
"(define-values"
"(no-binds)"
"(lambda(expr_0 s_0 phase_0)"
"(begin"
"(let-values(((s-runtime-stx_650)(syntax-shift-phase-level$1 runtime-stx phase_0)))"
"(datum->syntax$1"
"(core-id '#%app phase_0)"
"(list(core-id 'begin phase_0) expr_0(list(datum->syntax$1 s-runtime-stx_650 'values)))"
" s_0)))))"
"(define-values"
"(log-tag?)"
"(lambda(had-stxes?_0 ctx_0)(begin(if had-stxes?_0(not(expand-context-only-immediate? ctx_0)) #f))))"
"(define-values"
"(log-letrec-values$1)"
"(lambda(obs_0 ctx_0 s_0 val-idss_0 val-rhss_0 track-stxs_0 stx-clauses_0 done-bodys_0)"
"(begin"
" 'log-letrec-values"
"(let-values(((phase_661)(expand-context-phase ctx_0)))"
"(let-values(((clauses_662)"
"(reverse$1"
"(let-values(((lst_666) val-idss_0)((lst_667) val-rhss_0)((lst_668) track-stxs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_666)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_667)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_668)))"
"((letrec-values(((for-loop_669)"
"(lambda(fold-var_0 lst_0 lst_1 lst_2)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(if(pair? lst_1)(pair? lst_2) #f) #f)"
"(let-values(((val-ids_674)(unsafe-car lst_0))"
"((rest_675)(unsafe-cdr lst_0))"
"((val-rhs_676)(unsafe-car lst_1))"
"((rest_677)(unsafe-cdr lst_1))"
"((track-stx_678)(unsafe-car lst_2))"
"((rest_679)(unsafe-cdr lst_2)))"
"(let-values(((fold-var_680)"
"(let-values(((fold-var_681) fold-var_0))"
"(let-values(((fold-var_682)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list val-ids_674 val-rhs_676)"
" track-stx_678))"
" fold-var_681))))"
"(values fold-var_682)))))"
"(if(not #f)"
"(for-loop_669 fold-var_680 rest_675 rest_677 rest_679)"
" fold-var_680)))"
" fold-var_0)))))"
" for-loop_669)"
" null"
" lst_666"
" lst_667"
" lst_668))))))"
"(let-values(((had-stxes?_663)(not(null? stx-clauses_0))))"
"(let-values(((lv-id_664)(core-id(if had-stxes?_663 'letrec-syntaxes+values 'letrec-values) phase_661)))"
"(let-values(((lv-s_665)"
"(datum->syntax$1"
" #f"
"(if had-stxes?_663"
"(list* lv-id_664 stx-clauses_0 clauses_662 done-bodys_0)"
"(list* lv-id_664 clauses_662 done-bodys_0))"
" s_0)))"
"(begin"
"(call-expand-observe obs_0 'block->letrec(list lv-s_665))"
"(call-expand-observe obs_0 'visit lv-s_665)"
"(call-expand-observe obs_0 'resolve lv-id_664)"
"(call-expand-observe obs_0 'enter-prim lv-s_665)"
"(if had-stxes?_663"
"(let-values()"
"(begin"
"(call-expand-observe obs_0 'prim-letrec-syntaxes+values)"
"(call-expand-observe"
" obs_0"
" 'letrec-syntaxes-renames"
" stx-clauses_0"
" clauses_662"
"(datum->syntax$1 #f done-bodys_0 s_0))"
"(call-expand-observe obs_0 'prepare-env)"
"(call-expand-observe obs_0 'next-group)"
"(if(null? val-idss_0)"
"(void)"
"(let-values()"
"(begin"
"(call-expand-observe obs_0 'prim-letrec-values)"
"(call-expand-observe"
" obs_0"
" 'let-renames"
" clauses_662"
"(datum->syntax$1 #f done-bodys_0 s_0)))))))"
"(let-values()"
"(begin"
"(call-expand-observe obs_0 'prim-letrec-values)"
"(call-expand-observe"
" obs_0"
" 'let-renames"
" clauses_662"
"(datum->syntax$1 #f done-bodys_0 s_0))))))))))))))"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_0 disarmed-s_0 formals_0 bodys_0 ctx_0 log-renames-tag_0)"
"(begin"
"(let-values(((sc_17)(new-scope 'local)))"
"(let-values(((phase_18)(expand-context-phase ctx_0)))"
"(let-values(((ids_19)(parse-and-flatten-formals formals_0 sc_17 disarmed-s_0)))"
"(let-values((()"
"(begin"
"(let-values(((ids33_28) ids_19)"
"((phase34_29) phase_18)"
"((s35_30) s_0)"
"                                         ((temp36_31) \"argument name\"))"
"(check-no-duplicate-ids7.1 temp36_31 ids33_28 phase34_29 s35_30 unsafe-undefined))"
"(values))))"
"(let-values(((counter_20)(root-expand-context-counter ctx_0)))"
"(let-values(((keys_21)"
"(reverse$1"
"(let-values(((lst_32) ids_19))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_32)))"
"((letrec-values(((for-loop_33)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_36)(unsafe-car lst_0))"
"((rest_37)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_38)"
"(let-values(((fold-var_39) fold-var_0))"
"(let-values(((fold-var_40)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id37_42)"
" id_36)"
"((phase38_43)"
" phase_18)"
"((counter39_44)"
" counter_20)"
"((s40_45)"
" s_0))"
"(add-local-binding!37.1"
" #f"
" s40_45"
" id37_42"
" phase38_43"
" counter39_44)))"
" fold-var_39))))"
"(values fold-var_40)))))"
"(if(not #f)"
"(for-loop_33 fold-var_38 rest_37)"
" fold-var_38)))"
" fold-var_0)))))"
" for-loop_33)"
" null"
" lst_32))))))"
"(let-values(((body-env_22)"
"(let-values(((lst_46) keys_21)((lst_47) ids_19))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_46)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_47)))"
"((letrec-values(((for-loop_48)"
"(lambda(env_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((key_52)(unsafe-car lst_0))"
"((rest_53)(unsafe-cdr lst_0))"
"((id_54)(unsafe-car lst_1))"
"((rest_55)(unsafe-cdr lst_1)))"
"(let-values(((env_56)"
"(let-values(((env_57) env_0))"
"(let-values(((env_58)"
"(let-values()"
"(env-extend"
" env_57"
" key_52"
"(local-variable1.1"
" id_54)))))"
"(values env_58)))))"
"(if(not #f)"
"(for-loop_48 env_56 rest_53 rest_55)"
" env_56)))"
" env_0)))))"
" for-loop_48)"
"(expand-context-env ctx_0)"
" lst_46"
" lst_47)))))"
"(let-values(((sc-formals_23)(add-scope formals_0 sc_17)))"
"(let-values(((sc-bodys_24)"
"(reverse$1"
"(let-values(((lst_59) bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_59)))"
"((letrec-values(((for-loop_60)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((body_63)(unsafe-car lst_0))"
"((rest_64)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_65)"
"(let-values(((fold-var_66)"
" fold-var_0))"
"(let-values(((fold-var_67)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_63"
" sc_17))"
" fold-var_66))))"
"(values fold-var_67)))))"
"(if(not #f)"
"(for-loop_60 fold-var_65 rest_64)"
" fold-var_65)))"
" fold-var_0)))))"
" for-loop_60)"
" null"
" lst_59))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_68)(expand-context-observer ctx_0)))"
"(if obs_68"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_68"
" log-renames-tag_0"
" sc-formals_23"
"(datum->syntax$1 #f sc-bodys_24))))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_25)"
"(let-values(((v_69) ctx_0))"
"(let-values(((the-struct_70) v_69))"
"(if(expand-context/outer? the-struct_70)"
"(let-values(((env41_71) body-env_22)"
"((scopes42_72)(cons sc_17(expand-context-scopes ctx_0)))"
"((binding-layer43_73)"
"(increment-binding-layer ids_19 ctx_0 sc_17))"
"((frame-id44_74) #f)"
"((inner45_75)(root-expand-context/outer-inner v_69)))"
"(expand-context/outer1.1"
" inner45_75"
"(root-expand-context/outer-post-expansion the-struct_70)"
"(root-expand-context/outer-use-site-scopes the-struct_70)"
" frame-id44_74"
"(expand-context/outer-context the-struct_70)"
" env41_71"
" scopes42_72"
"(expand-context/outer-def-ctx-scopes the-struct_70)"
" binding-layer43_73"
"(expand-context/outer-reference-records the-struct_70)"
"(expand-context/outer-only-immediate? the-struct_70)"
"(expand-context/outer-need-eventually-defined the-struct_70)"
"(expand-context/outer-current-introduction-scopes the-struct_70)"
"(expand-context/outer-current-use-scopes the-struct_70)"
"(expand-context/outer-name the-struct_70)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"expand-context/outer?\""
" the-struct_70))))))"
"(let-values(((exp-body_26)"
"(let-values(((sc-bodys46_77) sc-bodys_24)"
"((body-ctx47_78) body-ctx_25)"
"((temp48_79)"
"(let-values(((ctx49_81) ctx_0)((s50_82) s_0)((temp51_83) #t))"
"(keep-as-needed119.1 #f temp51_83 #f ctx49_81 s50_82))))"
"(expand-body7.1 temp48_79 #f sc-bodys46_77 body-ctx47_78))))"
"(values"
"(if(expand-context-to-parsed? ctx_0)"
"(unflatten-like-formals keys_21 formals_0)"
" sc-formals_23)"
" exp-body_26))))))))))))))))"
"(void"
"(add-core-form!*"
" 'lambda"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_110)(expand-context-observer ctx_0)))"
"(if obs_110(let-values()(let-values()(call-expand-observe obs_110 'prim-lambda)))(void)))"
"(values))))"
"(let-values(((disarmed-s_86)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_87 lambda52_88 formals53_89 body54_90)"
"(let-values(((s_111) disarmed-s_86))"
"(let-values(((orig-s_112) s_111))"
"(let-values(((lambda52_113 formals53_114 body54_115)"
"(let-values(((s_116)(if(syntax?$1 s_111)(syntax-e$1 s_111) s_111)))"
"(if(pair? s_116)"
"(let-values(((lambda55_117)(let-values(((s_120)(car s_116))) s_120))"
"((formals56_118 body57_119)"
"(let-values(((s_121)(cdr s_116)))"
"(let-values(((s_122)"
"(if(syntax?$1 s_121)"
"(syntax-e$1 s_121)"
" s_121)))"
"(if(pair? s_122)"
"(let-values(((formals58_123)"
"(let-values(((s_125)(car s_122)))"
" s_125))"
"((body59_124)"
"(let-values(((s_126)(cdr s_122)))"
"(let-values(((s_127)"
"(if(syntax?$1 s_126)"
"(syntax-e$1 s_126)"
" s_126)))"
"(let-values(((flat-s_128)"
"(to-syntax-list.1"
" s_127)))"
"(if(not flat-s_128)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_112))"
"(if(null? flat-s_128)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_112))"
"(let-values()"
" flat-s_128))))))))"
"(values formals58_123 body59_124))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_112))))))"
"(values lambda55_117 formals56_118 body57_119))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_112)))))"
"(values #t lambda52_113 formals53_114 body54_115))))))"
"(let-values(((rebuild-s_107)"
"(let-values(((ctx60_130) ctx_0)((s61_131) s_0)((temp62_132) #t))"
"(keep-as-needed119.1 #f #f temp62_132 ctx60_130 s61_131))))"
"(let-values(((formals_108 body_109)"
"(lambda-clause-expander s_0 disarmed-s_86 formals53_89 body54_90 ctx_0 'lambda-renames)))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-lambda5.1 rebuild-s_107 formals_108 body_109)"
"(let-values(((rebuild-s63_133) rebuild-s_107)((temp64_134)(list* lambda52_88 formals_108 body_109)))"
"(rebuild5.1 #t rebuild-s63_133 temp64_134)))))))))))"
"(void"
"(add-core-form!*"
" 'λ"
"(lambda(s_0)"
"(let-values(((ok?_136 lam-id65_137 formals66_138 _67_139)"
"(let-values(((s_159) s_0))"
"(let-values(((orig-s_160) s_159))"
"(let-values(((lam-id65_161 formals66_162 _67_163)"
"(let-values(((s_164)(if(syntax?$1 s_159)(syntax-e$1 s_159) s_159)))"
"(if(pair? s_164)"
"(let-values(((lam-id68_165)(let-values(((s_168)(car s_164))) s_168))"
"((formals69_166 _70_167)"
"(let-values(((s_169)(cdr s_164)))"
"(let-values(((s_170)"
"(if(syntax?$1 s_169)(syntax-e$1 s_169) s_169)))"
"(if(pair? s_170)"
"(let-values(((formals71_171)"
"(let-values(((s_173)(car s_170))) s_173))"
"((_72_172)"
"(let-values(((s_174)(cdr s_170)))"
"(let-values(((s_175)"
"(if(syntax?$1 s_174)"
"(syntax-e$1 s_174)"
" s_174)))"
"(let-values(((flat-s_176)"
"(to-syntax-list.1 s_175)))"
"(if(not flat-s_176)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_160))"
"(if(null? flat-s_176)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_160))"
"(let-values() flat-s_176))))))))"
"(values formals71_171 _72_172))"
"                                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_160))))))"
"(values lam-id68_165 formals69_166 _70_167))"
"                                         (raise-syntax-error$1 #f \"bad syntax\" orig-s_160)))))"
"(values #t lam-id65_161 formals66_162 _67_163))))))"
"(let-values(((ids_156)(parse-and-flatten-formals formals66_138 #f s_0)))"
"(let-values(((ctx_157)"
"(let-values(((temp77_178) #t))(get-current-expand-context16.1 temp77_178 'unexpected))))"
"(let-values(((phase_158)(if ctx_157(expand-context-phase ctx_157) 0)))"
"(begin"
"(let-values(((ids73_180) ids_156)"
"((phase74_181) phase_158)"
"((s75_182) s_0)"
"                            ((temp76_183) \"argument name\"))"
"(check-no-duplicate-ids7.1 temp76_183 ids73_180 phase74_181 s75_182 unsafe-undefined))"
"(datum->syntax$1"
" s_0"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_158) 'lambda lam-id65_137 lam-id65_137)"
"(cdr(syntax-e$1 s_0)))"
" s_0"
" s_0)))))))))"
"(void"
"(add-core-form!*"
" 'case-lambda"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_225)(expand-context-observer ctx_0)))"
"(if obs_225"
"(let-values()(let-values()(call-expand-observe obs_225 'prim-case-lambda)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_186)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_187 case-lambda78_188 formals79_189 body80_190)"
"(let-values(((s_226) disarmed-s_186))"
"(let-values(((orig-s_227) s_226))"
"(let-values(((case-lambda78_228 formals79_229 body80_230)"
"(let-values(((s_231)(if(syntax?$1 s_226)(syntax-e$1 s_226) s_226)))"
"(if(pair? s_231)"
"(let-values(((case-lambda81_232)"
"(let-values(((s_235)(car s_231))) s_235))"
"((formals82_233 body83_234)"
"(let-values(((s_236)(cdr s_231)))"
"(let-values(((s_237)"
"(if(syntax?$1 s_236)"
"(syntax-e$1 s_236)"
" s_236)))"
"(let-values(((flat-s_238)(to-syntax-list.1 s_237)))"
"(if(not flat-s_238)"
"(let-values()"
"                                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_227))"
"(let-values()"
"(let-values(((formals_239 body_240)"
"(let-values(((lst_241) flat-s_238))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_241)))"
"((letrec-values(((for-loop_242)"
"(lambda(formals_0"
" body_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_246)"
"(unsafe-car"
" lst_0))"
"((rest_247)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((formals_248"
" body_249)"
"(let-values(((formals_250)"
" formals_0)"
"((body_251)"
" body_0))"
"(let-values(((formals_252"
" body_253)"
"(let-values()"
"(let-values(((formals90_254"
" body91_255)"
"(let-values()"
"(let-values(((s_256)"
"(if(syntax?$1"
" s_246)"
"(syntax-e$1"
" s_246)"
" s_246)))"
"(if(pair?"
" s_256)"
"(let-values(((formals84_257)"
"(let-values(((s_259)"
"(car"
" s_256)))"
" s_259))"
"((body85_258)"
"(let-values(((s_260)"
"(cdr"
" s_256)))"
"(let-values(((s_261)"
"(if(syntax?$1"
" s_260)"
"(syntax-e$1"
" s_260)"
" s_260)))"
"(let-values(((flat-s_262)"
"(to-syntax-list.1"
" s_261)))"
"(if(not"
" flat-s_262)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_227))"
"(if(null?"
" flat-s_262)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_227))"
"(let-values()"
" flat-s_262))))))))"
"(values"
" formals84_257"
" body85_258))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_227))))))"
"(values"
"(cons"
" formals90_254"
" formals_250)"
"(cons"
" body91_255"
" body_251))))))"
"(values"
" formals_252"
" body_253)))))"
"(if(not"
" #f)"
"(for-loop_242"
" formals_248"
" body_249"
" rest_247)"
"(values"
" formals_248"
" body_249))))"
"(values"
" formals_0"
" body_0))))))"
" for-loop_242)"
" null"
" null"
" lst_241)))))"
"(values"
"(reverse$1 formals_239)"
"(reverse$1 body_240))))))))))"
"(values case-lambda81_232 formals82_233 body83_234))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_227)))))"
"(values #t case-lambda78_228 formals79_229 body80_230))))))"
"(let-values(((ok?_207 case-lambda86_208 clause87_209)"
"(let-values(((s_263) disarmed-s_186))"
"(let-values(((orig-s_264) s_263))"
"(let-values(((case-lambda86_265 clause87_266)"
"(let-values(((s_267)(if(syntax?$1 s_263)(syntax-e$1 s_263) s_263)))"
"(if(pair? s_267)"
"(let-values(((case-lambda88_268)"
"(let-values(((s_270)(car s_267))) s_270))"
"((clause89_269)"
"(let-values(((s_271)(cdr s_267)))"
"(let-values(((s_272)"
"(if(syntax?$1 s_271)"
"(syntax-e$1 s_271)"
" s_271)))"
"(let-values(((flat-s_273)(to-syntax-list.1 s_272)))"
"(if(not flat-s_273)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_264))"
"(let-values() flat-s_273)))))))"
"(values case-lambda88_268 clause89_269))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_264)))))"
"(values #t case-lambda86_265 clause87_266))))))"
"(let-values(((rebuild-s_223)"
"(let-values(((ctx92_275) ctx_0)((s93_276) s_0)((temp94_277) #t))"
"(keep-as-needed119.1 #f #f temp94_277 ctx92_275 s93_276))))"
"(let-values(((clauses_224)"
"(reverse$1"
"(let-values(((lst_278) formals79_189)((lst_279) body80_190)((lst_280) clause87_209))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_278)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_279)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_280)))"
"((letrec-values(((for-loop_281)"
"(lambda(fold-var_0 lst_0 lst_1 lst_2)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(if(pair? lst_1)(pair? lst_2) #f) #f)"
"(let-values(((formals_286)(unsafe-car lst_0))"
"((rest_287)(unsafe-cdr lst_0))"
"((body_288)(unsafe-car lst_1))"
"((rest_289)(unsafe-cdr lst_1))"
"((clause_290)(unsafe-car lst_2))"
"((rest_291)(unsafe-cdr lst_2)))"
"(let-values(((fold-var_292)"
"(let-values(((fold-var_293) fold-var_0))"
"(let-values(((fold-var_294)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_298)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_298"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_298"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((rebuild-clause_295)"
"(let-values(((ctx95_299)"
" ctx_0)"
"((clause96_300)"
" clause_290))"
"(keep-as-needed119.1"
" #f"
" #f"
" #f"
" ctx95_299"
" clause96_300))))"
"(let-values(((exp-formals_296"
" exp-body_297)"
"(lambda-clause-expander"
" s_0"
" disarmed-s_186"
" formals_286"
" body_288"
" ctx_0"
" 'lambda-renames)))"
"(if(expand-context-to-parsed?"
" ctx_0)"
"(list"
" exp-formals_296"
" exp-body_297)"
"(let-values(((rebuild-clause97_301)"
" rebuild-clause_295)"
"((temp98_302)"
"(list*"
" exp-formals_296"
" exp-body_297)))"
"(rebuild5.1"
" #t"
" rebuild-clause97_301"
" temp98_302)))))))"
" fold-var_293))))"
"(values fold-var_294)))))"
"(if(not #f)"
"(for-loop_281 fold-var_292 rest_287 rest_289 rest_291)"
" fold-var_292)))"
" fold-var_0)))))"
" for-loop_281)"
" null"
" lst_278"
" lst_279"
" lst_280))))))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-case-lambda6.1 rebuild-s_223 clauses_224)"
"(let-values(((rebuild-s99_303) rebuild-s_223)((temp100_304)(list* case-lambda78_188 clauses_224)))"
"(rebuild5.1 #t rebuild-s99_303 temp100_304))))))))))))"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_0 sc_0 s_0)"
"(begin"
"((letrec-values(((loop_308)"
"(lambda(formals_0)"
"(begin"
" 'loop"
"(if(identifier? formals_0)"
"(let-values()(list(add-scope formals_0 sc_0)))"
"(if(syntax?$1 formals_0)"
"(let-values()"
"(let-values(((p_310)(syntax-e$1 formals_0)))"
"(if(pair? p_310)"
"(let-values()(loop_308 p_310))"
"(if(null? p_310)"
"(let-values() null)"
"                                        (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_0 p_310))))))"
"(if(pair? formals_0)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_0))"
"(void)"
"(let-values()"
"                                          (raise-syntax-error$1 #f \"not an identifier\" s_0 (car formals_0))))"
"(cons"
"(if sc_0(add-scope(car formals_0) sc_0)(car formals_0))"
"(loop_308(cdr formals_0)))))"
"(if(null? formals_0)"
"(let-values() null)"
"(let-values()"
"                                      (raise-syntax-error$1 \"bad argument sequence\" s_0 all-formals_0))))))))))"
" loop_308)"
" all-formals_0))))"
"(define-values"
"(unflatten-like-formals)"
"(lambda(keys_0 formals_0)"
"(begin"
"((letrec-values(((loop_313)"
"(lambda(keys_1 formals_1)"
"(begin"
" 'loop"
"(if(null? formals_1)"
"(let-values() null)"
"(if(pair? formals_1)"
"(let-values()(cons(car keys_1)(loop_313(cdr keys_1)(cdr formals_1))))"
"(if(syntax?$1 formals_1)"
"(let-values()(loop_313 keys_1(syntax-e$1 formals_1)))"
"(let-values()(car keys_1)))))))))"
" loop_313)"
" keys_0"
" formals_0))))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_0 rec?3_0 renames-log-tag5_0 split-by-reference?4_0 syntaxes?2_0)"
"(begin"
" 'make-let-values-form11"
"(let-values(((log-tag_323) log-tag1_0))"
"(let-values(((syntaxes?_324) syntaxes?2_0))"
"(let-values(((rec?_325) rec?3_0))"
"(let-values(((split-by-reference?_326) split-by-reference?4_0))"
"(let-values(((renames-log-tag_327) renames-log-tag5_0))"
"(let-values()"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_409)(expand-context-observer ctx_0)))"
"(if obs_409"
"(let-values()(let-values()(call-expand-observe obs_409 log-tag_323)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_330)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_331"
" letrec-syntaxes+values101_332"
" id:trans102_333"
" trans-rhs103_334"
" id:val104_335"
" val-rhs105_336"
" body106_337)"
"(let-values(((s_410) disarmed-s_330))"
"(if(if syntaxes?_324 #t #f)"
"(let-values(((orig-s_411) s_410))"
"(let-values(((letrec-syntaxes+values101_412"
" id:trans102_413"
" trans-rhs103_414"
" id:val104_415"
" val-rhs105_416"
" body106_417)"
"(let-values(((s_418)"
"(if(syntax?$1 s_410)"
"(syntax-e$1 s_410)"
" s_410)))"
"(if(pair? s_418)"
"(let-values(((letrec-syntaxes+values107_419)"
"(let-values(((s_425)(car s_418))) s_425))"
"((id:trans108_420"
" trans-rhs109_421"
" id:val110_422"
" val-rhs111_423"
" body112_424)"
"(let-values(((s_426)(cdr s_418)))"
"(let-values(((s_427)"
"(if(syntax?$1 s_426)"
"(syntax-e$1 s_426)"
" s_426)))"
"(if(pair? s_427)"
"(let-values(((id:trans113_428"
" trans-rhs114_429)"
"(let-values(((s_433)"
"(car"
" s_427)))"
"(let-values(((s_434)"
"(if(syntax?$1"
" s_433)"
"(syntax-e$1"
" s_433)"
" s_433)))"
"(let-values(((flat-s_435)"
"(to-syntax-list.1"
" s_434)))"
"(if(not"
" flat-s_435)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_411))"
"(let-values()"
"(let-values(((id:trans_436"
" trans-rhs_437)"
"(let-values(((lst_438)"
" flat-s_435))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_438)))"
"((letrec-values(((for-loop_439)"
"(lambda(id:trans_0"
" trans-rhs_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_443)"
"(unsafe-car"
" lst_0))"
"((rest_444)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id:trans_445"
" trans-rhs_446)"
"(let-values(((id:trans_447)"
" id:trans_0)"
"((trans-rhs_448)"
" trans-rhs_0))"
"(let-values(((id:trans_449"
" trans-rhs_450)"
"(let-values()"
"(let-values(((id:trans144_451"
" trans-rhs145_452)"
"(let-values()"
"(let-values(((s_453)"
"(if(syntax?$1"
" s_443)"
"(syntax-e$1"
" s_443)"
" s_443)))"
"(if(pair?"
" s_453)"
"(let-values(((id:trans118_454)"
"(let-values(((s_456)"
"(car"
" s_453)))"
"(let-values(((s_457)"
"(if(syntax?$1"
" s_456)"
"(syntax-e$1"
" s_456)"
" s_456)))"
"(let-values(((flat-s_458)"
"(to-syntax-list.1"
" s_457)))"
"(if(not"
" flat-s_458)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_411))"
"(let-values()"
"(let-values(((id:trans_459)"
"(let-values(((lst_460)"
" flat-s_458))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_460)))"
"((letrec-values(((for-loop_461)"
"(lambda(id:trans_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_464)"
"(unsafe-car"
" lst_1))"
"((rest_465)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id:trans_466)"
"(let-values(((id:trans_467)"
" id:trans_1))"
"(let-values(((id:trans_468)"
"(let-values()"
"(let-values(((id:trans146_469)"
"(let-values()"
"(if(let-values(((or-part_470)"
"(if(syntax?$1"
" s_464)"
"(symbol?"
"(syntax-e$1"
" s_464))"
" #f)))"
"(if or-part_470"
" or-part_470"
"(symbol?"
" s_464)))"
" s_464"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_411"
" s_464)))))"
"(cons"
" id:trans146_469"
" id:trans_467)))))"
"(values"
" id:trans_468)))))"
"(if(not"
" #f)"
"(for-loop_461"
" id:trans_466"
" rest_465)"
" id:trans_466)))"
" id:trans_1)))))"
" for-loop_461)"
" null"
" lst_460)))))"
"(reverse$1"
" id:trans_459))))))))"
"((trans-rhs119_455)"
"(let-values(((s_471)"
"(cdr"
" s_453)))"
"(let-values(((s_472)"
"(if(syntax?$1"
" s_471)"
"(syntax-e$1"
" s_471)"
" s_471)))"
"(if(pair?"
" s_472)"
"(let-values(((trans-rhs120_473)"
"(let-values(((s_474)"
"(car"
" s_472)))"
" s_474))"
"(()"
"(let-values(((s_475)"
"(cdr"
" s_472)))"
"(let-values(((s_476)"
"(if(syntax?$1"
" s_475)"
"(syntax-e$1"
" s_475)"
" s_475)))"
"(if(null?"
" s_476)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_411))))))"
"(values"
" trans-rhs120_473))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_411))))))"
"(values"
" id:trans118_454"
" trans-rhs119_455))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_411))))))"
"(values"
"(cons"
" id:trans144_451"
" id:trans_447)"
"(cons"
" trans-rhs145_452"
" trans-rhs_448))))))"
"(values"
" id:trans_449"
" trans-rhs_450)))))"
"(if(not"
" #f)"
"(for-loop_439"
" id:trans_445"
" trans-rhs_446"
" rest_444)"
"(values"
" id:trans_445"
" trans-rhs_446))))"
"(values"
" id:trans_0"
" trans-rhs_0))))))"
" for-loop_439)"
" null"
" null"
" lst_438)))))"
"(values"
"(reverse$1"
" id:trans_436)"
"(reverse$1"
" trans-rhs_437)))))))))"
"((id:val115_430"
" val-rhs116_431"
" body117_432)"
"(let-values(((s_477)"
"(cdr"
" s_427)))"
"(let-values(((s_478)"
"(if(syntax?$1"
" s_477)"
"(syntax-e$1"
" s_477)"
" s_477)))"
"(if(pair? s_478)"
"(let-values(((id:val121_479"
" val-rhs122_480)"
"(let-values(((s_482)"
"(car"
" s_478)))"
"(let-values(((s_483)"
"(if(syntax?$1"
" s_482)"
"(syntax-e$1"
" s_482)"
" s_482)))"
"(let-values(((flat-s_484)"
"(to-syntax-list.1"
" s_483)))"
"(if(not"
" flat-s_484)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_411))"
"(let-values()"
"(let-values(((id:val_485"
" val-rhs_486)"
"(let-values(((lst_487)"
" flat-s_484))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_487)))"
"((letrec-values(((for-loop_488)"
"(lambda(id:val_0"
" val-rhs_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_492)"
"(unsafe-car"
" lst_0))"
"((rest_493)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id:val_494"
" val-rhs_495)"
"(let-values(((id:val_496)"
" id:val_0)"
"((val-rhs_497)"
" val-rhs_0))"
"(let-values(((id:val_498"
" val-rhs_499)"
"(let-values()"
"(let-values(((id:val147_500"
" val-rhs148_501)"
"(let-values()"
"(let-values(((s_502)"
"(if(syntax?$1"
" s_492)"
"(syntax-e$1"
" s_492)"
" s_492)))"
"(if(pair?"
" s_502)"
"(let-values(((id:val124_503)"
"(let-values(((s_505)"
"(car"
" s_502)))"
"(let-values(((s_506)"
"(if(syntax?$1"
" s_505)"
"(syntax-e$1"
" s_505)"
" s_505)))"
"(let-values(((flat-s_507)"
"(to-syntax-list.1"
" s_506)))"
"(if(not"
" flat-s_507)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_411))"
"(let-values()"
"(let-values(((id:val_508)"
"(let-values(((lst_509)"
" flat-s_507))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_509)))"
"((letrec-values(((for-loop_510)"
"(lambda(id:val_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_513)"
"(unsafe-car"
" lst_1))"
"((rest_514)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id:val_515)"
"(let-values(((id:val_516)"
" id:val_1))"
"(let-values(((id:val_517)"
"(let-values()"
"(let-values(((id:val149_518)"
"(let-values()"
"(if(let-values(((or-part_519)"
"(if(syntax?$1"
" s_513)"
"(symbol?"
"(syntax-e$1"
" s_513))"
" #f)))"
"(if or-part_519"
" or-part_519"
"(symbol?"
" s_513)))"
" s_513"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_411"
" s_513)))))"
"(cons"
" id:val149_518"
" id:val_516)))))"
"(values"
" id:val_517)))))"
"(if(not"
" #f)"
"(for-loop_510"
" id:val_515"
" rest_514)"
" id:val_515)))"
" id:val_1)))))"
" for-loop_510)"
" null"
" lst_509)))))"
"(reverse$1"
" id:val_508))))))))"
"((val-rhs125_504)"
"(let-values(((s_520)"
"(cdr"
" s_502)))"
"(let-values(((s_521)"
"(if(syntax?$1"
" s_520)"
"(syntax-e$1"
" s_520)"
" s_520)))"
"(if(pair?"
" s_521)"
"(let-values(((val-rhs126_522)"
"(let-values(((s_523)"
"(car"
" s_521)))"
" s_523))"
"(()"
"(let-values(((s_524)"
"(cdr"
" s_521)))"
"(let-values(((s_525)"
"(if(syntax?$1"
" s_524)"
"(syntax-e$1"
" s_524)"
" s_524)))"
"(if(null?"
" s_525)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_411))))))"
"(values"
" val-rhs126_522))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_411))))))"
"(values"
" id:val124_503"
" val-rhs125_504))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_411))))))"
"(values"
"(cons"
" id:val147_500"
" id:val_496)"
"(cons"
" val-rhs148_501"
" val-rhs_497))))))"
"(values"
" id:val_498"
" val-rhs_499)))))"
"(if(not"
" #f)"
"(for-loop_488"
" id:val_494"
" val-rhs_495"
" rest_493)"
"(values"
" id:val_494"
" val-rhs_495))))"
"(values"
" id:val_0"
" val-rhs_0))))))"
" for-loop_488)"
" null"
" null"
" lst_487)))))"
"(values"
"(reverse$1"
" id:val_485)"
"(reverse$1"
" val-rhs_486)))))))))"
"((body123_481)"
"(let-values(((s_526)"
"(cdr"
" s_478)))"
"(let-values(((s_527)"
"(if(syntax?$1"
" s_526)"
"(syntax-e$1"
" s_526)"
" s_526)))"
"(let-values(((flat-s_528)"
"(to-syntax-list.1"
" s_527)))"
"(if(not"
" flat-s_528)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_411))"
"(if(null?"
" flat-s_528)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_411))"
"(let-values()"
" flat-s_528))))))))"
"(values"
" id:val121_479"
" val-rhs122_480"
" body123_481))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_411))))))"
"(values"
" id:trans113_428"
" trans-rhs114_429"
" id:val115_430"
" val-rhs116_431"
" body117_432))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_411))))))"
"(values"
" letrec-syntaxes+values107_419"
" id:trans108_420"
" trans-rhs109_421"
" id:val110_422"
" val-rhs111_423"
" body112_424))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_411)))))"
"(values"
" #t"
" letrec-syntaxes+values101_412"
" id:trans102_413"
" trans-rhs103_414"
" id:val104_415"
" val-rhs105_416"
" body106_417)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_363 let-values127_364 id:val128_365 val-rhs129_366 body130_367)"
"(let-values(((s_529) disarmed-s_330))"
"(if(if(not syntaxes?_324) #t #f)"
"(let-values(((orig-s_530) s_529))"
"(let-values(((let-values127_531 id:val128_532 val-rhs129_533 body130_534)"
"(let-values(((s_535)"
"(if(syntax?$1 s_529)"
"(syntax-e$1 s_529)"
" s_529)))"
"(if(pair? s_535)"
"(let-values(((let-values131_536)"
"(let-values(((s_540)(car s_535)))"
" s_540))"
"((id:val132_537 val-rhs133_538 body134_539)"
"(let-values(((s_541)(cdr s_535)))"
"(let-values(((s_542)"
"(if(syntax?$1 s_541)"
"(syntax-e$1 s_541)"
" s_541)))"
"(if(pair? s_542)"
"(let-values(((id:val135_543"
" val-rhs136_544)"
"(let-values(((s_546)"
"(car"
" s_542)))"
"(let-values(((s_547)"
"(if(syntax?$1"
" s_546)"
"(syntax-e$1"
" s_546)"
" s_546)))"
"(let-values(((flat-s_548)"
"(to-syntax-list.1"
" s_547)))"
"(if(not"
" flat-s_548)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_530))"
"(let-values()"
"(let-values(((id:val_549"
" val-rhs_550)"
"(let-values(((lst_551)"
" flat-s_548))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_551)))"
"((letrec-values(((for-loop_552)"
"(lambda(id:val_0"
" val-rhs_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_556)"
"(unsafe-car"
" lst_0))"
"((rest_557)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id:val_558"
" val-rhs_559)"
"(let-values(((id:val_560)"
" id:val_0)"
"((val-rhs_561)"
" val-rhs_0))"
"(let-values(((id:val_562"
" val-rhs_563)"
"(let-values()"
"(let-values(((id:val150_564"
" val-rhs151_565)"
"(let-values()"
"(let-values(((s_566)"
"(if(syntax?$1"
" s_556)"
"(syntax-e$1"
" s_556)"
" s_556)))"
"(if(pair?"
" s_566)"
"(let-values(((id:val138_567)"
"(let-values(((s_569)"
"(car"
" s_566)))"
"(let-values(((s_570)"
"(if(syntax?$1"
" s_569)"
"(syntax-e$1"
" s_569)"
" s_569)))"
"(let-values(((flat-s_571)"
"(to-syntax-list.1"
" s_570)))"
"(if(not"
" flat-s_571)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_530))"
"(let-values()"
"(let-values(((id:val_572)"
"(let-values(((lst_573)"
" flat-s_571))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_573)))"
"((letrec-values(((for-loop_574)"
"(lambda(id:val_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_577)"
"(unsafe-car"
" lst_1))"
"((rest_578)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id:val_579)"
"(let-values(((id:val_580)"
" id:val_1))"
"(let-values(((id:val_581)"
"(let-values()"
"(let-values(((id:val152_582)"
"(let-values()"
"(if(let-values(((or-part_583)"
"(if(syntax?$1"
" s_577)"
"(symbol?"
"(syntax-e$1"
" s_577))"
" #f)))"
"(if or-part_583"
" or-part_583"
"(symbol?"
" s_577)))"
" s_577"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_530"
" s_577)))))"
"(cons"
" id:val152_582"
" id:val_580)))))"
"(values"
" id:val_581)))))"
"(if(not"
" #f)"
"(for-loop_574"
" id:val_579"
" rest_578)"
" id:val_579)))"
" id:val_1)))))"
" for-loop_574)"
" null"
" lst_573)))))"
"(reverse$1"
" id:val_572))))))))"
"((val-rhs139_568)"
"(let-values(((s_584)"
"(cdr"
" s_566)))"
"(let-values(((s_585)"
"(if(syntax?$1"
" s_584)"
"(syntax-e$1"
" s_584)"
" s_584)))"
"(if(pair?"
" s_585)"
"(let-values(((val-rhs140_586)"
"(let-values(((s_587)"
"(car"
" s_585)))"
" s_587))"
"(()"
"(let-values(((s_588)"
"(cdr"
" s_585)))"
"(let-values(((s_589)"
"(if(syntax?$1"
" s_588)"
"(syntax-e$1"
" s_588)"
" s_588)))"
"(if(null?"
" s_589)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_530))))))"
"(values"
" val-rhs140_586))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_530))))))"
"(values"
" id:val138_567"
" val-rhs139_568))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_530))))))"
"(values"
"(cons"
" id:val150_564"
" id:val_560)"
"(cons"
" val-rhs151_565"
" val-rhs_561))))))"
"(values"
" id:val_562"
" val-rhs_563)))))"
"(if(not"
" #f)"
"(for-loop_552"
" id:val_558"
" val-rhs_559"
" rest_557)"
"(values"
" id:val_558"
" val-rhs_559))))"
"(values"
" id:val_0"
" val-rhs_0))))))"
" for-loop_552)"
" null"
" null"
" lst_551)))))"
"(values"
"(reverse$1"
" id:val_549)"
"(reverse$1"
" val-rhs_550)))))))))"
"((body137_545)"
"(let-values(((s_590)"
"(cdr"
" s_542)))"
"(let-values(((s_591)"
"(if(syntax?$1"
" s_590)"
"(syntax-e$1"
" s_590)"
" s_590)))"
"(let-values(((flat-s_592)"
"(to-syntax-list.1"
" s_591)))"
"(if(not"
" flat-s_592)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_530))"
"(if(null?"
" flat-s_592)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_530))"
"(let-values()"
" flat-s_592))))))))"
"(values"
" id:val135_543"
" val-rhs136_544"
" body137_545))"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_530))))))"
"(values"
" let-values131_536"
" id:val132_537"
" val-rhs133_538"
" body134_539))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_530)))))"
"(values #t let-values127_531 id:val128_532 val-rhs129_533 body130_534)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_387)(new-scope 'local)))"
"(let-values(((phase_388)(expand-context-phase ctx_0)))"
"(let-values(((frame-id_389)(if syntaxes?_324(make-reference-record) #f)))"
"(let-values(((trans-idss_390)"
"(reverse$1"
"(let-values(((lst_593)(if syntaxes?_324 id:trans102_333 null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_593)))"
"((letrec-values(((for-loop_594)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((ids_597)(unsafe-car lst_0))"
"((rest_598)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_599)"
"(let-values(((fold-var_600)"
" fold-var_0))"
"(let-values(((fold-var_601)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_602)"
" ids_597))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_602)))"
"((letrec-values(((for-loop_603)"
"(lambda(fold-var_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((id_606)"
"(unsafe-car"
" lst_1))"
"((rest_607)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_608)"
"(let-values(((fold-var_609)"
" fold-var_1))"
"(let-values(((fold-var_610)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_606"
" sc_387))"
" fold-var_609))))"
"(values"
" fold-var_610)))))"
"(if(not"
" #f)"
"(for-loop_603"
" fold-var_608"
" rest_607)"
" fold-var_608)))"
" fold-var_1)))))"
" for-loop_603)"
" null"
" lst_602)))))"
" fold-var_600))))"
"(values"
" fold-var_601)))))"
"(if(not #f)"
"(for-loop_594 fold-var_599 rest_598)"
" fold-var_599)))"
" fold-var_0)))))"
" for-loop_594)"
" null"
" lst_593))))))"
"(let-values(((val-idss_391)"
"(reverse$1"
"(let-values(((lst_611)"
"(if syntaxes?_324 id:val104_335 id:val128_365)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_611)))"
"((letrec-values(((for-loop_612)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((ids_615)"
"(unsafe-car lst_0))"
"((rest_616)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_617)"
"(let-values(((fold-var_618)"
" fold-var_0))"
"(let-values(((fold-var_619)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_620)"
" ids_615))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_620)))"
"((letrec-values(((for-loop_621)"
"(lambda(fold-var_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((id_624)"
"(unsafe-car"
" lst_1))"
"((rest_625)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_626)"
"(let-values(((fold-var_627)"
" fold-var_1))"
"(let-values(((fold-var_628)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_624"
" sc_387))"
" fold-var_627))))"
"(values"
" fold-var_628)))))"
"(if(not"
" #f)"
"(for-loop_621"
" fold-var_626"
" rest_625)"
" fold-var_626)))"
" fold-var_1)))))"
" for-loop_621)"
" null"
" lst_620)))))"
" fold-var_618))))"
"(values"
" fold-var_619)))))"
"(if(not #f)"
"(for-loop_612"
" fold-var_617"
" rest_616)"
" fold-var_617)))"
" fold-var_0)))))"
" for-loop_612)"
" null"
" lst_611))))))"
"(let-values(((val-rhss_392)"
"(if rec?_325"
"(reverse$1"
"(let-values(((lst_629)"
"(if syntaxes?_324 val-rhs105_336 val-rhs129_366)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_629)))"
"((letrec-values(((for-loop_630)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((rhs_633)"
"(unsafe-car lst_0))"
"((rest_634)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_635)"
"(let-values(((fold-var_636)"
" fold-var_0))"
"(let-values(((fold-var_637)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_633"
" sc_387))"
" fold-var_636))))"
"(values"
" fold-var_637)))))"
"(if(not #f)"
"(for-loop_630"
" fold-var_635"
" rest_634)"
" fold-var_635)))"
" fold-var_0)))))"
" for-loop_630)"
" null"
" lst_629))))"
"(if syntaxes?_324 val-rhs105_336 val-rhs129_366))))"
"(let-values(((val-clauses_393)"
"(if syntaxes?_324"
"(let-values()"
"(let-values(((ok?_638"
" _153_639"
" _154_640"
" clause155_641"
" _156_642)"
"(let-values(((s_662) disarmed-s_330))"
"(let-values(((orig-s_663) s_662))"
"(let-values(((_153_664"
" _154_665"
" clause155_666"
" _156_667)"
"(let-values(((s_668)"
"(if(syntax?$1"
" s_662)"
"(syntax-e$1"
" s_662)"
" s_662)))"
"(if(pair? s_668)"
"(let-values(((_157_669)"
"(let-values(((s_673)"
"(car"
" s_668)))"
" s_673))"
"((_158_670"
" clause159_671"
" _160_672)"
"(let-values(((s_674)"
"(cdr"
" s_668)))"
"(let-values(((s_675)"
"(if(syntax?$1"
" s_674)"
"(syntax-e$1"
" s_674)"
" s_674)))"
"(if(pair?"
" s_675)"
"(let-values(((_161_676)"
"(let-values(((s_679)"
"(car"
" s_675)))"
" s_679))"
"((clause162_677"
" _163_678)"
"(let-values(((s_680)"
"(cdr"
" s_675)))"
"(let-values(((s_681)"
"(if(syntax?$1"
" s_680)"
"(syntax-e$1"
" s_680)"
" s_680)))"
"(if(pair?"
" s_681)"
"(let-values(((clause164_682)"
"(let-values(((s_684)"
"(car"
" s_681)))"
"(let-values(((s_685)"
"(if(syntax?$1"
" s_684)"
"(syntax-e$1"
" s_684)"
" s_684)))"
"(let-values(((flat-s_686)"
"(to-syntax-list.1"
" s_685)))"
"(if(not"
" flat-s_686)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_663))"
"(let-values()"
" flat-s_686))))))"
"((_165_683)"
"(let-values(((s_687)"
"(cdr"
" s_681)))"
" s_687)))"
"(values"
" clause164_682"
" _165_683))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_663))))))"
"(values"
" _161_676"
" clause162_677"
" _163_678))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_663))))))"
"(values"
" _157_669"
" _158_670"
" clause159_671"
" _160_672))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_663)))))"
"(values"
" #t"
" _153_664"
" _154_665"
" clause155_666"
" _156_667))))))"
" clause155_641))"
"(let-values()"
"(let-values(((ok?_688 _166_689 clause167_690 _168_691)"
"(let-values(((s_708) disarmed-s_330))"
"(let-values(((orig-s_709) s_708))"
"(let-values(((_166_710"
" clause167_711"
" _168_712)"
"(let-values(((s_713)"
"(if(syntax?$1"
" s_708)"
"(syntax-e$1"
" s_708)"
" s_708)))"
"(if(pair? s_713)"
"(let-values(((_169_714)"
"(let-values(((s_717)"
"(car"
" s_713)))"
" s_717))"
"((clause170_715"
" _171_716)"
"(let-values(((s_718)"
"(cdr"
" s_713)))"
"(let-values(((s_719)"
"(if(syntax?$1"
" s_718)"
"(syntax-e$1"
" s_718)"
" s_718)))"
"(if(pair?"
" s_719)"
"(let-values(((clause172_720)"
"(let-values(((s_722)"
"(car"
" s_719)))"
"(let-values(((s_723)"
"(if(syntax?$1"
" s_722)"
"(syntax-e$1"
" s_722)"
" s_722)))"
"(let-values(((flat-s_724)"
"(to-syntax-list.1"
" s_723)))"
"(if(not"
" flat-s_724)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_709))"
"(let-values()"
" flat-s_724))))))"
"((_173_721)"
"(let-values(((s_725)"
"(cdr"
" s_719)))"
" s_725)))"
"(values"
" clause172_720"
" _173_721))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_709))))))"
"(values"
" _169_714"
" clause170_715"
" _171_716))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_709)))))"
"(values"
" #t"
" _166_710"
" clause167_711"
" _168_712))))))"
" clause167_690)))))"
"(let-values((()"
"(begin"
"(let-values(((temp141_726)"
"(list trans-idss_390 val-idss_391))"
"((phase142_727) phase_388)"
"((s143_728) s_0))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" temp141_726"
" phase142_727"
" s143_728"
" unsafe-undefined))"
"(values))))"
"(let-values(((counter_394)(root-expand-context-counter ctx_0)))"
"(let-values(((trans-keyss_395)"
"(reverse$1"
"(let-values(((lst_729) trans-idss_390))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_729)))"
"((letrec-values(((for-loop_730)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((ids_733)"
"(unsafe-car"
" lst_0))"
"((rest_734)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_735)"
"(let-values(((fold-var_736)"
" fold-var_0))"
"(let-values(((fold-var_737)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_738)"
" ids_733))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_738)))"
"((letrec-values(((for-loop_739)"
"(lambda(fold-var_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((id_742)"
"(unsafe-car"
" lst_1))"
"((rest_743)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_744)"
"(let-values(((fold-var_745)"
" fold-var_1))"
"(let-values(((fold-var_746)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id174_748)"
" id_742)"
"((phase175_749)"
" phase_388)"
"((counter176_750)"
" counter_394)"
"((frame-id177_751)"
" frame-id_389)"
"((s178_752)"
" s_0))"
"(add-local-binding!37.1"
" frame-id177_751"
" s178_752"
" id174_748"
" phase175_749"
" counter176_750)))"
" fold-var_745))))"
"(values"
" fold-var_746)))))"
"(if(not"
" #f)"
"(for-loop_739"
" fold-var_744"
" rest_743)"
" fold-var_744)))"
" fold-var_1)))))"
" for-loop_739)"
" null"
" lst_738)))))"
" fold-var_736))))"
"(values"
" fold-var_737)))))"
"(if(not #f)"
"(for-loop_730"
" fold-var_735"
" rest_734)"
" fold-var_735)))"
" fold-var_0)))))"
" for-loop_730)"
" null"
" lst_729))))))"
"(let-values(((val-keyss_396)"
"(reverse$1"
"(let-values(((lst_753) val-idss_391))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_753)))"
"((letrec-values(((for-loop_754)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((ids_757)"
"(unsafe-car"
" lst_0))"
"((rest_758)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_759)"
"(let-values(((fold-var_760)"
" fold-var_0))"
"(let-values(((fold-var_761)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_762)"
" ids_757))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_762)))"
"((letrec-values(((for-loop_763)"
"(lambda(fold-var_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((id_766)"
"(unsafe-car"
" lst_1))"
"((rest_767)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_768)"
"(let-values(((fold-var_769)"
" fold-var_1))"
"(let-values(((fold-var_770)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id179_772)"
" id_766)"
"((phase180_773)"
" phase_388)"
"((counter181_774)"
" counter_394)"
"((frame-id182_775)"
" frame-id_389)"
"((s183_776)"
" s_0))"
"(add-local-binding!37.1"
" frame-id182_775"
" s183_776"
" id179_772"
" phase180_773"
" counter181_774)))"
" fold-var_769))))"
"(values"
" fold-var_770)))))"
"(if(not"
" #f)"
"(for-loop_763"
" fold-var_768"
" rest_767)"
" fold-var_768)))"
" fold-var_1)))))"
" for-loop_763)"
" null"
" lst_762)))))"
" fold-var_760))))"
"(values"
" fold-var_761)))))"
"(if(not #f)"
"(for-loop_754"
" fold-var_759"
" rest_758)"
" fold-var_759)))"
" fold-var_0)))))"
" for-loop_754)"
" null"
" lst_753))))))"
"(let-values(((bodys_397)"
"(reverse$1"
"(let-values(((lst_777)"
"(if syntaxes?_324"
" body106_337"
" body130_367)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_777)))"
"((letrec-values(((for-loop_778)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((body_781)"
"(unsafe-car"
" lst_0))"
"((rest_782)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_783)"
"(let-values(((fold-var_784)"
" fold-var_0))"
"(let-values(((fold-var_785)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_781"
" sc_387))"
" fold-var_784))))"
"(values"
" fold-var_785)))))"
"(if(not #f)"
"(for-loop_778"
" fold-var_783"
" rest_782)"
" fold-var_783)))"
" fold-var_0)))))"
" for-loop_778)"
" null"
" lst_777))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_786)"
"(expand-context-observer ctx_0)))"
"(if obs_786"
"(let-values()"
"(log-let-renames"
" obs_786"
" renames-log-tag_327"
" val-idss_391"
" val-rhss_392"
" bodys_397"
" trans-idss_390"
"(if syntaxes?_324 trans-rhs103_334 #f)"
" sc_387))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_324"
"(let-values()"
"(begin"
"(let-values(((obs_787)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_787"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_787"
" 'prepare-env)))"
"(void)))"
"(prepare-next-phase-namespace ctx_0)))"
"(void))"
"(values))))"
"(let-values(((trans-valss_398)"
"(reverse$1"
"(let-values(((lst_788)"
"(if syntaxes?_324"
" trans-rhs103_334"
" '()))"
"((lst_789) trans-idss_390))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_788)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_789)))"
"((letrec-values(((for-loop_790)"
"(lambda(fold-var_0"
" lst_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)"
"(pair? lst_1)"
" #f)"
"(let-values(((rhs_794)"
"(unsafe-car"
" lst_0))"
"((rest_795)"
"(unsafe-cdr"
" lst_0))"
"((ids_796)"
"(unsafe-car"
" lst_1))"
"((rest_797)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_798)"
"(let-values(((fold-var_799)"
" fold-var_0))"
"(let-values(((fold-var_800)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_802)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_802"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_802"
" 'next)"
"(call-expand-observe"
" obs_802"
" 'enter-bind))))"
"(void)))"
"(values))))"
"(let-values(((trans-val_801)"
"(eval-for-syntaxes-binding"
" 'letrec-syntaxes+values"
"(add-scope"
" rhs_794"
" sc_387)"
" ids_796"
" ctx_0)))"
"(begin"
"(let-values(((obs_803)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_803"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_803"
" 'exit-bind)))"
"(void)))"
" trans-val_801))))"
" fold-var_799))))"
"(values"
" fold-var_800)))))"
"(if(not #f)"
"(for-loop_790"
" fold-var_798"
" rest_795"
" rest_797)"
" fold-var_798)))"
" fold-var_0)))))"
" for-loop_790)"
" null"
" lst_788"
" lst_789))))))"
"(let-values(((rec-val-env_399)"
"(let-values(((lst_804) val-keyss_396)"
"((lst_805) val-idss_391))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_804)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_805)))"
"((letrec-values(((for-loop_806)"
"(lambda(env_0"
" lst_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)"
"(pair? lst_1)"
" #f)"
"(let-values(((keys_810)"
"(unsafe-car"
" lst_0))"
"((rest_811)"
"(unsafe-cdr"
" lst_0))"
"((ids_812)"
"(unsafe-car"
" lst_1))"
"((rest_813)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((env_814)"
"(let-values(((env_815)"
" env_0))"
"(let-values(((lst_816)"
" keys_810)"
"((lst_817)"
" ids_812))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_816)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_817)))"
"((letrec-values(((for-loop_818)"
"(lambda(env_1"
" lst_2"
" lst_3)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_2)"
"(pair?"
" lst_3)"
" #f)"
"(let-values(((key_822)"
"(unsafe-car"
" lst_2))"
"((rest_823)"
"(unsafe-cdr"
" lst_2))"
"((id_824)"
"(unsafe-car"
" lst_3))"
"((rest_825)"
"(unsafe-cdr"
" lst_3)))"
"(let-values(((env_826)"
"(let-values(((env_827)"
" env_1))"
"(let-values(((env_828)"
"(let-values()"
"(env-extend"
" env_827"
" key_822"
"(local-variable1.1"
" id_824)))))"
"(values"
" env_828)))))"
"(if(not"
" #f)"
"(for-loop_818"
" env_826"
" rest_823"
" rest_825)"
" env_826)))"
" env_1)))))"
" for-loop_818)"
" env_815"
" lst_816"
" lst_817))))))"
"(if(not #f)"
"(for-loop_806"
" env_814"
" rest_811"
" rest_813)"
" env_814)))"
" env_0)))))"
" for-loop_806)"
"(expand-context-env ctx_0)"
" lst_804"
" lst_805)))))"
"(let-values(((rec-env_400)"
"(let-values(((lst_829) trans-keyss_395)"
"((lst_830) trans-valss_398)"
"((lst_831) trans-idss_390))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_829)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_830)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_831)))"
"((letrec-values(((for-loop_832)"
"(lambda(env_0"
" lst_0"
" lst_1"
" lst_2)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
"(if(pair?"
" lst_1)"
"(pair?"
" lst_2)"
" #f)"
" #f)"
"(let-values(((keys_837)"
"(unsafe-car"
" lst_0))"
"((rest_838)"
"(unsafe-cdr"
" lst_0))"
"((vals_839)"
"(unsafe-car"
" lst_1))"
"((rest_840)"
"(unsafe-cdr"
" lst_1))"
"((ids_841)"
"(unsafe-car"
" lst_2))"
"((rest_842)"
"(unsafe-cdr"
" lst_2)))"
"(let-values(((env_843)"
"(let-values(((env_844)"
" env_0))"
"(let-values(((env_845)"
"(let-values()"
"(let-values(((lst_846)"
" keys_837)"
"((lst_847)"
" vals_839)"
"((lst_848)"
" ids_841))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_846)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_847)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_848)))"
"((letrec-values(((for-loop_849)"
"(lambda(env_1"
" lst_3"
" lst_4"
" lst_5)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_3)"
"(if(pair?"
" lst_4)"
"(pair?"
" lst_5)"
" #f)"
" #f)"
"(let-values(((key_854)"
"(unsafe-car"
" lst_3))"
"((rest_855)"
"(unsafe-cdr"
" lst_3))"
"((val_856)"
"(unsafe-car"
" lst_4))"
"((rest_857)"
"(unsafe-cdr"
" lst_4))"
"((id_858)"
"(unsafe-car"
" lst_5))"
"((rest_859)"
"(unsafe-cdr"
" lst_5)))"
"(let-values(((env_860)"
"(let-values(((env_861)"
" env_1))"
"(let-values(((env_862)"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_856"
" id_858"
" phase_388"
" ctx_0)"
"(env-extend"
" env_861"
" key_854"
" val_856)))))"
"(values"
" env_862)))))"
"(if(not"
" #f)"
"(for-loop_849"
" env_860"
" rest_855"
" rest_857"
" rest_859)"
" env_860)))"
" env_1)))))"
" for-loop_849)"
" env_844"
" lst_846"
" lst_847"
" lst_848))))))"
"(values"
" env_845)))))"
"(if(not #f)"
"(for-loop_832"
" env_843"
" rest_838"
" rest_840"
" rest_842)"
" env_843)))"
" env_0)))))"
" for-loop_832)"
" rec-val-env_399"
" lst_829"
" lst_830"
" lst_831)))))"
"(let-values(((expr-ctx_401)"
"(as-expression-context ctx_0)))"
"(let-values(((orig-rrs_402)"
"(expand-context-reference-records"
" expr-ctx_401)))"
"(let-values(((rec-ctx_403)"
"(let-values(((v_863) expr-ctx_401))"
"(let-values(((the-struct_864) v_863))"
"(if(expand-context/outer?"
" the-struct_864)"
"(let-values(((env184_865)"
" rec-env_400)"
"((scopes185_866)"
"(cons"
" sc_387"
"(expand-context-scopes"
" ctx_0)))"
"((reference-records186_867)"
"(if split-by-reference?_326"
"(cons"
" frame-id_389"
" orig-rrs_402)"
" orig-rrs_402))"
"((binding-layer187_868)"
"(increment-binding-layer"
"(cons"
" trans-idss_390"
" val-idss_391)"
" ctx_0"
" sc_387))"
"((inner188_869)"
"(root-expand-context/outer-inner"
" v_863)))"
"(expand-context/outer1.1"
" inner188_869"
"(root-expand-context/outer-post-expansion"
" the-struct_864)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_864)"
"(root-expand-context/outer-frame-id"
" the-struct_864)"
"(expand-context/outer-context"
" the-struct_864)"
" env184_865"
" scopes185_866"
"(expand-context/outer-def-ctx-scopes"
" the-struct_864)"
" binding-layer187_868"
" reference-records186_867"
"(expand-context/outer-only-immediate?"
" the-struct_864)"
"(expand-context/outer-need-eventually-defined"
" the-struct_864)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_864)"
"(expand-context/outer-current-use-scopes"
" the-struct_864)"
"(expand-context/outer-name"
" the-struct_864)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                       \"expand-context/outer?\""
" the-struct_864))))))"
"(let-values(((letrec-values-id_404)"
"(if(not"
"(expand-context-to-parsed?"
" ctx_0))"
"(if syntaxes?_324"
"(core-id 'letrec-values phase_388)"
" let-values127_364)"
" #f)))"
"(let-values(((rebuild-s_405)"
"(let-values(((ctx189_871) ctx_0)"
"((s190_872) s_0)"
"((temp191_873) #t))"
"(keep-as-needed119.1"
" #f"
" temp191_873"
" #f"
" ctx189_871"
" s190_872))))"
"(let-values(((val-name-idss_406)"
"(if(expand-context-to-parsed?"
" ctx_0)"
"(reverse$1"
"(let-values(((lst_874)"
" val-idss_391))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_874)))"
"((letrec-values(((for-loop_875)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((val-ids_878)"
"(unsafe-car"
" lst_0))"
"((rest_879)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_880)"
"(let-values(((fold-var_881)"
" fold-var_0))"
"(let-values(((fold-var_882)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_883)"
" val-ids_878))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_883)))"
"((letrec-values(((for-loop_884)"
"(lambda(fold-var_1"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((val-id_887)"
"(unsafe-car"
" lst_1))"
"((rest_888)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((fold-var_889)"
"(let-values(((fold-var_890)"
" fold-var_1))"
"(let-values(((fold-var_891)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(syntax-e$1"
" val-id_887)"
" val-id_887"
" val-id_887))"
" fold-var_890))))"
"(values"
" fold-var_891)))))"
"(if(not"
" #f)"
"(for-loop_884"
" fold-var_889"
" rest_888)"
" fold-var_889)))"
" fold-var_1)))))"
" for-loop_884)"
" null"
" lst_883)))))"
" fold-var_881))))"
"(values"
" fold-var_882)))))"
"(if(not"
" #f)"
"(for-loop_875"
" fold-var_880"
" rest_879)"
" fold-var_880)))"
" fold-var_0)))))"
" for-loop_875)"
" null"
" lst_874))))"
" val-idss_391)))"
"(let-values((()"
"(begin"
"(if syntaxes?_324"
"(let-values()"
"(let-values(((obs_892)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_892"
"(let-values()"
"(log-letrec-values"
" obs_892"
" val-idss_391"
" val-rhss_392"
" bodys_397))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((get-body_407)"
"(lambda()"
"(begin"
" 'get-body"
"(let-values((()"
"(begin"
"(let-values(((obs_894)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_894"
"(let-values()"
"(if(not"
"(if syntaxes?_324"
"(null?"
" val-idss_391)"
" #f))"
"(let-values()"
"(call-expand-observe"
" obs_894"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_893)"
"(let-values(((v_895)"
" rec-ctx_403))"
"(let-values(((the-struct_896)"
" v_895))"
"(if(expand-context/outer?"
" the-struct_896)"
"(let-values(((reference-records195_897)"
" orig-rrs_402)"
"((inner196_898)"
"(root-expand-context/outer-inner"
" v_895)))"
"(expand-context/outer1.1"
" inner196_898"
"(root-expand-context/outer-post-expansion"
" the-struct_896)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_896)"
"(root-expand-context/outer-frame-id"
" the-struct_896)"
"(expand-context/outer-context"
" the-struct_896)"
"(expand-context/outer-env"
" the-struct_896)"
"(expand-context/outer-scopes"
" the-struct_896)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_896)"
"(expand-context/outer-binding-layer"
" the-struct_896)"
" reference-records195_897"
"(expand-context/outer-only-immediate?"
" the-struct_896)"
"(expand-context/outer-need-eventually-defined"
" the-struct_896)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_896)"
"(expand-context/outer-current-use-scopes"
" the-struct_896)"
"(expand-context/outer-name"
" the-struct_896)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                     \"expand-context/outer?\""
" the-struct_896))))))"
"(let-values(((bodys192_900)"
" bodys_397)"
"((temp193_901)"
"(let-values(((body-ctx197_904)"
" body-ctx_893)"
"((ctx198_905)"
" ctx_0))"
"(as-tail-context22.1"
" ctx198_905"
" body-ctx197_904)))"
"((rebuild-s194_902)"
" rebuild-s_405))"
"(expand-body7.1"
" rebuild-s194_902"
" #f"
" bodys192_900"
" temp193_901))))))))"
"(let-values(((result-s_408)"
"(if(not"
" split-by-reference?_326)"
"(let-values()"
"(let-values(((clauses_906)"
"(reverse$1"
"(let-values(((lst_908)"
" val-name-idss_406)"
"((lst_909)"
" val-keyss_396)"
"((lst_910)"
" val-rhss_392)"
"((lst_911)"
" val-clauses_393))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_908)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_909)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_910)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_911)))"
"((letrec-values(((for-loop_912)"
"(lambda(fold-var_0"
" lst_0"
" lst_1"
" lst_2"
" lst_3)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
"(if(pair?"
" lst_1)"
"(if(pair?"
" lst_2)"
"(pair?"
" lst_3)"
" #f)"
" #f)"
" #f)"
"(let-values(((ids_918)"
"(unsafe-car"
" lst_0))"
"((rest_919)"
"(unsafe-cdr"
" lst_0))"
"((keys_920)"
"(unsafe-car"
" lst_1))"
"((rest_921)"
"(unsafe-cdr"
" lst_1))"
"((rhs_922)"
"(unsafe-car"
" lst_2))"
"((rest_923)"
"(unsafe-cdr"
" lst_2))"
"((clause_924)"
"(unsafe-car"
" lst_3))"
"((rest_925)"
"(unsafe-cdr"
" lst_3)))"
"(let-values(((fold-var_926)"
"(let-values(((fold-var_927)"
" fold-var_0))"
"(let-values(((fold-var_928)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_930)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_930"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_930"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-rhs_929)"
"(let-values(((rhs199_931)"
" rhs_922)"
"((temp200_932)"
"(if rec?_325"
"(as-named-context"
" rec-ctx_403"
" ids_918)"
"(as-named-context"
" expr-ctx_401"
" ids_918))))"
"(expand9.1"
" #f"
" #f"
" #f"
" rhs199_931"
" temp200_932))))"
"(if(expand-context-to-parsed?"
" ctx_0)"
"(list"
" keys_920"
" exp-rhs_929)"
"(datum->syntax$1"
" #f"
"(list"
" ids_918"
" exp-rhs_929)"
" clause_924"
" clause_924)))))"
" fold-var_927))))"
"(values"
" fold-var_928)))))"
"(if(not"
" #f)"
"(for-loop_912"
" fold-var_926"
" rest_919"
" rest_921"
" rest_923"
" rest_925)"
" fold-var_926)))"
" fold-var_0)))))"
" for-loop_912)"
" null"
" lst_908"
" lst_909"
" lst_910"
" lst_911))))))"
"(let-values(((exp-body_907)"
"(get-body_407)))"
"(begin"
"(if frame-id_389"
"(let-values()"
"(reference-record-clear!"
" frame-id_389))"
"(void))"
"(if(expand-context-to-parsed?"
" ctx_0)"
"(if rec?_325"
"(parsed-letrec-values18.1"
" rebuild-s_405"
" val-name-idss_406"
" clauses_906"
" exp-body_907)"
"(parsed-let-values17.1"
" rebuild-s_405"
" val-name-idss_406"
" clauses_906"
" exp-body_907))"
"(let-values(((rebuild-s201_933)"
" rebuild-s_405)"
"((temp202_934)"
"(list*"
" letrec-values-id_404"
" clauses_906"
" exp-body_907)))"
"(rebuild5.1"
" #t"
" rebuild-s201_933"
" temp202_934)))))))"
"(let-values()"
"(let-values(((val-idss203_936)"
" val-idss_391)"
"((val-keyss204_937)"
" val-keyss_396)"
"((val-rhss205_938)"
" val-rhss_392)"
"((val-clauses206_939)"
" val-clauses_393)"
"((temp207_940)"
" #t)"
"((frame-id208_941)"
" frame-id_389)"
"((rec-ctx209_942)"
" rec-ctx_403)"
"((rebuild-s210_943)"
" rebuild-s_405)"
"((syntaxes?211_944)"
" syntaxes?_324)"
"((get-body212_945)"
" get-body_407)"
"((temp213_946)"
" #t))"
"(expand-and-split-bindings-by-reference48.1"
" rec-ctx209_942"
" frame-id208_941"
" get-body212_945"
" syntaxes?211_944"
" rebuild-s210_943"
" temp207_940"
" temp213_946"
" val-idss203_936"
" val-keyss204_937"
" val-rhss205_938"
" val-clauses206_939))))))"
"(if(expand-context-to-parsed? ctx_0)"
" result-s_408"
"(attach-disappeared-transformer-bindings"
" result-s_408"
" trans-idss_390))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(log-let-renames)"
"(lambda(obs_0 renames-log-tag_0 val-idss_0 val-rhss_0 bodys_0 trans-idss_0 trans-rhss_0 sc_0)"
"(begin"
"(let-values(((vals+body_978)"
"(cons"
"(reverse$1"
"(let-values(((lst_979) val-idss_0)((lst_980) val-rhss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_979)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_980)))"
"((letrec-values(((for-loop_981)"
"(lambda(fold-var_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((val-ids_985)(unsafe-car lst_0))"
"((rest_986)(unsafe-cdr lst_0))"
"((val-rhs_987)(unsafe-car lst_1))"
"((rest_988)(unsafe-cdr lst_1)))"
"(let-values(((fold-var_989)"
"(let-values(((fold-var_990) fold-var_0))"
"(let-values(((fold-var_991)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list val-ids_985 val-rhs_987)))"
" fold-var_990))))"
"(values fold-var_991)))))"
"(if(not #f)"
"(for-loop_981 fold-var_989 rest_986 rest_988)"
" fold-var_989)))"
" fold-var_0)))))"
" for-loop_981)"
" null"
" lst_979"
" lst_980))))"
"(datum->syntax$1 #f bodys_0))))"
"(call-expand-observe"
" obs_0"
" renames-log-tag_0"
"(if(not trans-rhss_0)"
" vals+body_978"
"(cons"
"(reverse$1"
"(let-values(((lst_992) trans-idss_0)((lst_993) trans-rhss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_992)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_993)))"
"((letrec-values(((for-loop_994)"
"(lambda(fold-var_0 lst_0 lst_1)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_0)(pair? lst_1) #f)"
"(let-values(((trans-ids_998)(unsafe-car lst_0))"
"((rest_999)(unsafe-cdr lst_0))"
"((trans-rhs_1000)(unsafe-car lst_1))"
"((rest_1001)(unsafe-cdr lst_1)))"
"(let-values(((fold-var_1002)"
"(let-values(((fold-var_1003) fold-var_0))"
"(let-values(((fold-var_1004)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
" trans-ids_998"
"(add-scope trans-rhs_1000 sc_0))))"
" fold-var_1003))))"
"(values fold-var_1004)))))"
"(if(not #f)"
"(for-loop_994 fold-var_1002 rest_999 rest_1001)"
" fold-var_1002)))"
" fold-var_0)))))"
" for-loop_994)"
" null"
" lst_992"
" lst_993))))"
" vals+body_978)))))))"
"(define-values"
"(log-letrec-values)"
"(lambda(obs_0 val-idss_0 val-rhss_0 bodys_0)"
"(begin"
"(begin"
"(call-expand-observe obs_0 'next-group)"
"(if(null? val-idss_0)"
"(void)"
"(let-values()"
"(begin"
"(call-expand-observe obs_0 'prim-letrec-values)"
"(log-let-renames obs_0 'let-renames val-idss_0 val-rhss_0 bodys_0 #f #f #f))))))))"
"(void"
"(add-core-form!*"
" 'let-values"
"(let-values(((temp214_1010) 'prim-let-values))(make-let-values-form11.1 temp214_1010 #f 'let-renames #f #f))))"
"(void"
"(add-core-form!*"
" 'letrec-values"
"(let-values(((temp215_1012) #t)((temp216_1013) 'prim-letrec-values))"
"(make-let-values-form11.1 temp216_1013 temp215_1012 'let-renames #f #f))))"
"(void"
"(add-core-form!*"
" 'letrec-syntaxes+values"
"(let-values(((temp217_1015) #t)"
"((temp218_1016) #t)"
"((temp219_1017) #t)"
"((temp220_1018) 'prim-letrec-syntaxes+values)"
"((temp221_1019) 'letrec-syntaxes-renames))"
"(make-let-values-form11.1 temp220_1018 temp218_1016 temp221_1019 temp219_1017 temp217_1015))))"
"(void"
"(add-core-form!*"
" '#%stratified-body"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1041)(expand-context-observer ctx_0)))"
"(if obs_1041"
"(let-values()(let-values()(call-expand-observe obs_1041 'prim-#%stratified)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1022)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1023 #%stratified-body222_1024 body223_1025)"
"(let-values(((s_1042) disarmed-s_1022))"
"(let-values(((orig-s_1043) s_1042))"
"(let-values(((#%stratified-body222_1044 body223_1045)"
"(let-values(((s_1046)(if(syntax?$1 s_1042)(syntax-e$1 s_1042) s_1042)))"
"(if(pair? s_1046)"
"(let-values(((#%stratified-body224_1047)"
"(let-values(((s_1049)(car s_1046))) s_1049))"
"((body225_1048)"
"(let-values(((s_1050)(cdr s_1046)))"
"(let-values(((s_1051)"
"(if(syntax?$1 s_1050)"
"(syntax-e$1 s_1050)"
" s_1050)))"
"(let-values(((flat-s_1052)(to-syntax-list.1 s_1051)))"
"(if(not flat-s_1052)"
"(let-values()"
"                                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1043))"
"(if(null? flat-s_1052)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1043))"
"(let-values() flat-s_1052))))))))"
"(values #%stratified-body224_1047 body225_1048))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_1043)))))"
"(values #t #%stratified-body222_1044 body223_1045))))))"
"(let-values(((rebuild-s_1039)"
"(let-values(((ctx226_1054) ctx_0)((s227_1055) s_0)((temp228_1056) #t))"
"(keep-as-needed119.1 #f temp228_1056 #f ctx226_1054 s227_1055))))"
"(let-values(((exp-body_1040)"
"(let-values(((temp229_1058) body223_1025)"
"((ctx230_1059) ctx_0)"
"((temp231_1060) #t)"
"((rebuild-s232_1061) rebuild-s_1039))"
"(expand-body7.1 rebuild-s232_1061 temp231_1060 temp229_1058 ctx230_1059))))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-begin12.1 rebuild-s_1039 exp-body_1040)"
"(let-values(((rebuild-s233_1062) rebuild-s_1039)"
"((temp234_1063)"
"(if(null?(cdr exp-body_1040))"
"(car exp-body_1040)"
"(list*(core-id 'begin(expand-context-phase ctx_0)) exp-body_1040))))"
"(rebuild5.1 #t rebuild-s233_1062 temp234_1063)))))))))))"
"(void"
"(add-core-form!*"
" '#%datum"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1085)(expand-context-observer ctx_0)))"
"(if obs_1085"
"(let-values()(let-values()(call-expand-observe obs_1085 'prim-#%datum)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1066)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1067 #%datum235_1068 datum236_1069)"
"(let-values(((s_1086) disarmed-s_1066))"
"(let-values(((orig-s_1087) s_1086))"
"(let-values(((#%datum235_1088 datum236_1089)"
"(let-values(((s_1090)(if(syntax?$1 s_1086)(syntax-e$1 s_1086) s_1086)))"
"(if(pair? s_1090)"
"(let-values(((#%datum237_1091)"
"(let-values(((s_1093)(car s_1090))) s_1093))"
"((datum238_1092)"
"(let-values(((s_1094)(cdr s_1090))) s_1094)))"
"(values #%datum237_1091 datum238_1092))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_1087)))))"
"(values #t #%datum235_1088 datum236_1089))))))"
"(let-values(((datum_1083) datum236_1069))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_1083)(keyword?(syntax-e$1 datum_1083)) #f)"
"(let-values()"
"                                 (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_1083))"
"(void))"
"(values))))"
"(let-values(((phase_1084)(expand-context-phase ctx_0)))"
"(if(if(expand-context-to-parsed? ctx_0)(free-id-set-empty?(expand-context-stops ctx_0)) #f)"
"(parsed-quote14.1(keep-properties-only~ s_0)(syntax->datum$1 datum_1083))"
"(let-values(((s239_1095) s_0)((temp240_1096)(list(core-id 'quote phase_1084) datum_1083)))"
"(rebuild5.1 #t s239_1095 temp240_1096))))))))))))"
"(void"
"(add-core-form!*"
" '#%app"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1117)(expand-context-observer ctx_0)))"
"(if obs_1117(let-values()(let-values()(call-expand-observe obs_1117 'prim-#%app)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1099)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1100 #%app241_1101 e242_1102)"
"(let-values(((s_1118) disarmed-s_1099))"
"(let-values(((orig-s_1119) s_1118))"
"(let-values(((#%app241_1120 e242_1121)"
"(let-values(((s_1122)(if(syntax?$1 s_1118)(syntax-e$1 s_1118) s_1118)))"
"(if(pair? s_1122)"
"(let-values(((#%app243_1123)"
"(let-values(((s_1125)(car s_1122))) s_1125))"
"((e244_1124)"
"(let-values(((s_1126)(cdr s_1122)))"
"(let-values(((s_1127)"
"(if(syntax?$1 s_1126)"
"(syntax-e$1 s_1126)"
" s_1126)))"
"(let-values(((flat-s_1128)(to-syntax-list.1 s_1127)))"
"(if(not flat-s_1128)"
"(let-values()"
"                                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_1119))"
"(let-values() flat-s_1128)))))))"
"(values #%app243_1123 e244_1124))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_1119)))))"
"(values #t #%app241_1120 e242_1121))))))"
"(let-values(((es_1116) e242_1102))"
"(if(null? es_1116)"
"(let-values()"
"(let-values(((phase_1129)(expand-context-phase ctx_0)))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-quote14.1(keep-properties-only~ s_0) null)"
"(let-values(((s245_1130) s_0)((temp246_1131)(list(core-id 'quote phase_1129) null)))"
"(rebuild5.1 #t s245_1130 temp246_1131)))))"
"(let-values()"
"(let-values(((keep-for-parsed?_1132)(eq?(system-type 'vm) 'chez-scheme)))"
"(let-values(((rebuild-s_1133)"
"(let-values(((ctx247_1141) ctx_0)"
"((s248_1142) s_0)"
"((keep-for-parsed?249_1143) keep-for-parsed?_1132))"
"(keep-as-needed119.1 #f #f keep-for-parsed?249_1143 ctx247_1141 s248_1142))))"
"(let-values(((prefixless_1134)(cdr(syntax-e$1 disarmed-s_1099))))"
"(let-values(((rebuild-prefixless_1135)"
"(if(syntax?$1 prefixless_1134)"
"(let-values(((ctx250_1145) ctx_0)"
"((prefixless251_1146) prefixless_1134)"
"((keep-for-parsed?252_1147) keep-for-parsed?_1132))"
"(keep-as-needed119.1"
" #f"
" #f"
" keep-for-parsed?252_1147"
" ctx250_1145"
" prefixless251_1146))"
" #f)))"
"(let-values(((expr-ctx_1136)(as-expression-context ctx_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_1148)(expand-context-observer expr-ctx_1136)))"
"(if obs_1148"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_1148"
" 'enter-list"
"(datum->syntax$1 #f es_1116 s_0))"
"(call-expand-observe obs_1148 'next))))"
"(void)))"
"(values))))"
"(let-values(((rest-es_1137)(cdr es_1116)))"
"(let-values(((exp-rator_1138)"
"(let-values(((temp253_1149)(car es_1116))"
"((expr-ctx254_1150) expr-ctx_1136))"
"(expand9.1 #f #f #f temp253_1149 expr-ctx254_1150))))"
"(let-values(((exp-es_1139)"
"(reverse$1"
"(let-values(((lst_1151) rest-es_1137))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_1151)))"
"((letrec-values(((for-loop_1152)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_1155)(unsafe-car lst_0))"
"((rest_1156)"
"(unsafe-cdr lst_0)))"
"(let-values(((fold-var_1157)"
"(let-values(((fold-var_1158)"
" fold-var_0))"
"(let-values(((fold-var_1159)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_1160)"
"(expand-context-observer"
" expr-ctx_1136)))"
"(if obs_1160"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1160"
" 'next)))"
"(void)))"
"(let-values(((e255_1161)"
" e_1155)"
"((expr-ctx256_1162)"
" expr-ctx_1136))"
"(expand9.1"
" #f"
" #f"
" #f"
" e255_1161"
" expr-ctx256_1162))))"
" fold-var_1158))))"
"(values"
" fold-var_1159)))))"
"(if(not #f)"
"(for-loop_1152"
" fold-var_1157"
" rest_1156)"
" fold-var_1157)))"
" fold-var_0)))))"
" for-loop_1152)"
" null"
" lst_1151))))))"
"(if(expand-context-to-parsed? ctx_0)"
"(let-values()"
"(parsed-app7.1"
"(let-values(((or-part_1163) rebuild-prefixless_1135))"
"(if or-part_1163 or-part_1163 rebuild-s_1133))"
" exp-rator_1138"
" exp-es_1139))"
"(let-values()"
"(let-values(((es_1164)"
"(let-values(((exp-es_1165)(cons exp-rator_1138 exp-es_1139)))"
"(if rebuild-prefixless_1135"
"(let-values(((rebuild-prefixless259_1166)"
" rebuild-prefixless_1135)"
"((exp-es260_1167) exp-es_1165))"
"(rebuild5.1 #t rebuild-prefixless259_1166 exp-es260_1167))"
" exp-es_1165))))"
"(begin"
"(let-values(((obs_1168)(expand-context-observer expr-ctx_1136)))"
"(if obs_1168"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1168"
" 'exit-list"
"(datum->syntax$1 #f es_1164 rebuild-s_1133))))"
"(void)))"
"(let-values(((rebuild-s257_1169) rebuild-s_1133)"
"((temp258_1170)(cons #%app241_1101 es_1164)))"
"(rebuild5.1 #t rebuild-s257_1169 temp258_1170))))))))))))))))))))))))"
"(void"
"(add-core-form!*"
" 'quote"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1189)(expand-context-observer ctx_0)))"
"(if obs_1189(let-values()(let-values()(call-expand-observe obs_1189 'prim-quote)))(void)))"
"(values))))"
"(let-values(((ok?_1173 quote261_1174 datum262_1175)"
"(let-values(((s_1190)(syntax-disarm$1 s_0)))"
"(let-values(((orig-s_1191) s_1190))"
"(let-values(((quote261_1192 datum262_1193)"
"(let-values(((s_1194)(if(syntax?$1 s_1190)(syntax-e$1 s_1190) s_1190)))"
"(if(pair? s_1194)"
"(let-values(((quote263_1195)(let-values(((s_1197)(car s_1194))) s_1197))"
"((datum264_1196)"
"(let-values(((s_1198)(cdr s_1194)))"
"(let-values(((s_1199)"
"(if(syntax?$1 s_1198)"
"(syntax-e$1 s_1198)"
" s_1198)))"
"(if(pair? s_1199)"
"(let-values(((datum265_1200)"
"(let-values(((s_1201)(car s_1199)))"
" s_1201))"
"(()"
"(let-values(((s_1202)(cdr s_1199)))"
"(let-values(((s_1203)"
"(if(syntax?$1 s_1202)"
"(syntax-e$1 s_1202)"
" s_1202)))"
"(if(null? s_1203)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                    \"bad syntax\""
" orig-s_1191))))))"
"(values datum265_1200))"
"                                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_1191))))))"
"(values quote263_1195 datum264_1196))"
"                                           (raise-syntax-error$1 #f \"bad syntax\" orig-s_1191)))))"
"(values #t quote261_1192 datum262_1193))))))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-quote14.1(keep-properties-only~ s_0)(syntax->datum$1 datum262_1175))"
" s_0))))))"
"(void"
"(add-core-form!*"
" 'quote-syntax"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1239)(expand-context-observer ctx_0)))"
"(if obs_1239"
"(let-values()(let-values()(call-expand-observe obs_1239 'prim-quote-syntax)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1206)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1207 quote-syntax266_1208 datum267_1209)"
"(let-values(((s_1240) disarmed-s_1206))"
"(if(let-values(((s_1241)(if(syntax?$1 s_1240)(syntax-e$1 s_1240) s_1240)))"
"(if(pair? s_1241)"
"(if(let-values(((s_1242)(car s_1241))) #t)"
"(let-values(((s_1243)(cdr s_1241)))"
"(let-values(((s_1244)(if(syntax?$1 s_1243)(syntax-e$1 s_1243) s_1243)))"
"(if(pair? s_1244)"
"(if(let-values(((s_1245)(car s_1244))) #t)"
"(let-values(((s_1246)(cdr s_1244)))"
"(let-values(((s_1247)(if(syntax?$1 s_1246)(syntax-e$1 s_1246) s_1246)))"
"(if(pair? s_1247)"
"(if(let-values(((s_1248)(car s_1247)))"
"(let-values(((s_1249)"
"(if(syntax?$1 s_1248)"
"(syntax-e$1 s_1248)"
" s_1248)))"
"(eq? '#:local s_1249)))"
"(let-values(((s_1250)(cdr s_1247)))"
"(let-values(((s_1251)"
"(if(syntax?$1 s_1250)(syntax-e$1 s_1250) s_1250)))"
"(null? s_1251)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((quote-syntax266_1253 datum267_1254)"
"(let-values(((s_1255)(if(syntax?$1 s_1240)(syntax-e$1 s_1240) s_1240)))"
"(let-values(((quote-syntax268_1256)"
"(let-values(((s_1258)(car s_1255))) s_1258))"
"((datum269_1257)"
"(let-values(((s_1259)(cdr s_1255)))"
"(let-values(((s_1260)"
"(if(syntax?$1 s_1259)"
"(syntax-e$1 s_1259)"
" s_1259)))"
"(let-values(((datum270_1261)"
"(let-values(((s_1262)(car s_1260)))"
" s_1262))"
"(()"
"(let-values(((s_1263)(cdr s_1260)))"
"(let-values(((s_1264)"
"(if(syntax?$1 s_1263)"
"(syntax-e$1 s_1263)"
" s_1263)))"
"(let-values((()"
"(let-values(((s_1265)"
"(car"
" s_1264)))"
"(let-values(((s_1266)"
"(if(syntax?$1"
" s_1265)"
"(syntax-e$1"
" s_1265)"
" s_1265)))"
"(values))))"
"(()"
"(let-values(((s_1267)"
"(cdr"
" s_1264)))"
"(let-values(((s_1268)"
"(if(syntax?$1"
" s_1267)"
"(syntax-e$1"
" s_1267)"
" s_1267)))"
"(values)))))"
"(values))))))"
"(values datum270_1261))))))"
"(values quote-syntax268_1256 datum269_1257)))))"
"(values #t quote-syntax266_1253 datum267_1254)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1223 quote-syntax271_1224 datum272_1225)"
"(let-values(((s_1269) disarmed-s_1206))"
"(if(if(not ok?_1207) #t #f)"
"(let-values(((orig-s_1270) s_1269))"
"(let-values(((quote-syntax271_1271 datum272_1272)"
"(let-values(((s_1273)(if(syntax?$1 s_1269)(syntax-e$1 s_1269) s_1269)))"
"(if(pair? s_1273)"
"(let-values(((quote-syntax273_1274)"
"(let-values(((s_1276)(car s_1273))) s_1276))"
"((datum274_1275)"
"(let-values(((s_1277)(cdr s_1273)))"
"(let-values(((s_1278)"
"(if(syntax?$1 s_1277)"
"(syntax-e$1 s_1277)"
" s_1277)))"
"(if(pair? s_1278)"
"(let-values(((datum275_1279)"
"(let-values(((s_1280)(car s_1278)))"
" s_1280))"
"(()"
"(let-values(((s_1281)(cdr s_1278)))"
"(let-values(((s_1282)"
"(if(syntax?$1"
" s_1281)"
"(syntax-e$1 s_1281)"
" s_1281)))"
"(if(null? s_1282)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1270))))))"
"(values datum275_1279))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1270))))))"
"(values quote-syntax273_1274 datum274_1275))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1270)))))"
"(values #t quote-syntax271_1271 datum272_1272)))"
"(values #f #f #f)))))"
"(if ok?_1207"
"(let-values()"
"(let-values((()"
"(begin(reference-records-all-used!(expand-context-reference-records ctx_0))(values))))"
"(let-values(((ok?_1283 _276_1284 _277_1285 kw278_1286)"
"(let-values(((s_1303) disarmed-s_1206))"
"(let-values(((orig-s_1304) s_1303))"
"(let-values(((_276_1305 _277_1306 kw278_1307)"
"(let-values(((s_1308)"
"(if(syntax?$1 s_1303)(syntax-e$1 s_1303) s_1303)))"
"(if(pair? s_1308)"
"(let-values(((_279_1309)"
"(let-values(((s_1312)(car s_1308))) s_1312))"
"((_280_1310 kw281_1311)"
"(let-values(((s_1313)(cdr s_1308)))"
"(let-values(((s_1314)"
"(if(syntax?$1 s_1313)"
"(syntax-e$1 s_1313)"
" s_1313)))"
"(if(pair? s_1314)"
"(let-values(((_282_1315)"
"(let-values(((s_1317)"
"(car s_1314)))"
" s_1317))"
"((kw283_1316)"
"(let-values(((s_1318)"
"(cdr s_1314)))"
"(let-values(((s_1319)"
"(if(syntax?$1"
" s_1318)"
"(syntax-e$1"
" s_1318)"
" s_1318)))"
"(if(pair? s_1319)"
"(let-values(((kw284_1320)"
"(let-values(((s_1321)"
"(car"
" s_1319)))"
" s_1321))"
"(()"
"(let-values(((s_1322)"
"(cdr"
" s_1319)))"
"(let-values(((s_1323)"
"(if(syntax?$1"
" s_1322)"
"(syntax-e$1"
" s_1322)"
" s_1322)))"
"(if(null?"
" s_1323)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_1304))))))"
"(values kw284_1320))"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_1304))))))"
"(values _282_1315 kw283_1316))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_1304))))))"
"(values _279_1309 _280_1310 kw281_1311))"
"                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_1304)))))"
"(values #t _276_1305 _277_1306 kw278_1307))))))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-quote-syntax15.1(keep-properties-only~ s_0) datum267_1209)"
"(let-values(((s285_1324) s_0)"
"((temp286_1325)(list quote-syntax266_1208 datum267_1209 kw278_1286)))"
"(rebuild5.1 #t s285_1324 temp286_1325))))))"
"(let-values()"
"(let-values(((use-site-scopes_1326)(root-expand-context-use-site-scopes ctx_0)))"
"(let-values(((datum-s_1327)"
"(remove-scopes"
"(remove-scopes datum272_1225(expand-context-scopes ctx_0))"
"(if use-site-scopes_1326(unbox use-site-scopes_1326) '()))))"
"(if(if(expand-context-to-parsed? ctx_0)(free-id-set-empty?(expand-context-stops ctx_0)) #f)"
"(parsed-quote-syntax15.1(keep-properties-only~ s_0) datum-s_1327)"
"(let-values(((s287_1328) s_0)((temp288_1329)(list quote-syntax271_1224 datum-s_1327)))"
"(rebuild5.1 #t s287_1328 temp288_1329))))))))))))))"
"(void"
"(add-core-form!*"
" 'if"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1383)(expand-context-observer ctx_0)))"
"(if obs_1383(let-values()(let-values()(call-expand-observe obs_1383 'prim-if)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1332)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1333 _289_1334 _290_1335 _291_1336)"
"(let-values(((s_1384) disarmed-s_1332))"
"(if(let-values(((s_1385)(if(syntax?$1 s_1384)(syntax-e$1 s_1384) s_1384)))"
"(if(pair? s_1385)"
"(if(let-values(((s_1386)(car s_1385))) #t)"
"(let-values(((s_1387)(cdr s_1385)))"
"(let-values(((s_1388)(if(syntax?$1 s_1387)(syntax-e$1 s_1387) s_1387)))"
"(if(pair? s_1388)"
"(if(let-values(((s_1389)(car s_1388))) #t)"
"(let-values(((s_1390)(cdr s_1388)))"
"(let-values(((s_1391)(if(syntax?$1 s_1390)(syntax-e$1 s_1390) s_1390)))"
"(if(pair? s_1391)"
"(if(let-values(((s_1392)(car s_1391))) #t)"
"(let-values(((s_1393)(cdr s_1391)))"
"(let-values(((s_1394)"
"(if(syntax?$1 s_1393)(syntax-e$1 s_1393) s_1393)))"
"(null? s_1394)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_289_1396 _290_1397 _291_1398)"
"(let-values(((s_1399)(if(syntax?$1 s_1384)(syntax-e$1 s_1384) s_1384)))"
"(let-values(((_292_1400)(let-values(((s_1403)(car s_1399))) s_1403))"
"((_293_1401 _294_1402)"
"(let-values(((s_1404)(cdr s_1399)))"
"(let-values(((s_1405)"
"(if(syntax?$1 s_1404)"
"(syntax-e$1 s_1404)"
" s_1404)))"
"(let-values(((_295_1406)"
"(let-values(((s_1408)(car s_1405)))"
" s_1408))"
"((_296_1407)"
"(let-values(((s_1409)(cdr s_1405)))"
"(let-values(((s_1410)"
"(if(syntax?$1 s_1409)"
"(syntax-e$1 s_1409)"
" s_1409)))"
"(let-values(((_297_1411)"
"(let-values(((s_1412)"
"(car"
" s_1410)))"
" s_1412))"
"(()"
"(let-values(((s_1413)"
"(cdr"
" s_1410)))"
"(let-values(((s_1414)"
"(if(syntax?$1"
" s_1413)"
"(syntax-e$1"
" s_1413)"
" s_1413)))"
"(values)))))"
"(values _297_1411))))))"
"(values _295_1406 _296_1407))))))"
"(values _292_1400 _293_1401 _294_1402)))))"
"(values #t _289_1396 _290_1397 _291_1398)))"
"(values #f #f #f #f)))))"
"(let-values((()"
"(begin"
"(if ok?_1333"
"                             (let-values () (raise-syntax-error$1 #f \"missing an \\\"else\\\" expression\" s_0))"
"(void))"
"(values))))"
"(let-values(((ok?_1353 if298_1354 tst299_1355 thn300_1356 els301_1357)"
"(let-values(((s_1415) disarmed-s_1332))"
"(let-values(((orig-s_1416) s_1415))"
"(let-values(((if298_1417 tst299_1418 thn300_1419 els301_1420)"
"(let-values(((s_1421)(if(syntax?$1 s_1415)(syntax-e$1 s_1415) s_1415)))"
"(if(pair? s_1421)"
"(let-values(((if302_1422)"
"(let-values(((s_1426)(car s_1421))) s_1426))"
"((tst303_1423 thn304_1424 els305_1425)"
"(let-values(((s_1427)(cdr s_1421)))"
"(let-values(((s_1428)"
"(if(syntax?$1 s_1427)"
"(syntax-e$1 s_1427)"
" s_1427)))"
"(if(pair? s_1428)"
"(let-values(((tst306_1429)"
"(let-values(((s_1432)(car s_1428)))"
" s_1432))"
"((thn307_1430 els308_1431)"
"(let-values(((s_1433)(cdr s_1428)))"
"(let-values(((s_1434)"
"(if(syntax?$1"
" s_1433)"
"(syntax-e$1 s_1433)"
" s_1433)))"
"(if(pair? s_1434)"
"(let-values(((thn309_1435)"
"(let-values(((s_1437)"
"(car"
" s_1434)))"
" s_1437))"
"((els310_1436)"
"(let-values(((s_1438)"
"(cdr"
" s_1434)))"
"(let-values(((s_1439)"
"(if(syntax?$1"
" s_1438)"
"(syntax-e$1"
" s_1438)"
" s_1438)))"
"(if(pair?"
" s_1439)"
"(let-values(((els311_1440)"
"(let-values(((s_1441)"
"(car"
" s_1439)))"
" s_1441))"
"(()"
"(let-values(((s_1442)"
"(cdr"
" s_1439)))"
"(let-values(((s_1443)"
"(if(syntax?$1"
" s_1442)"
"(syntax-e$1"
" s_1442)"
" s_1442)))"
"(if(null?"
" s_1443)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_1416))))))"
"(values"
" els311_1440))"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_1416))))))"
"(values"
" thn309_1435"
" els310_1436))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_1416))))))"
"(values tst306_1429 thn307_1430 els308_1431))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_1416))))))"
"(values if302_1422 tst303_1423 thn304_1424 els305_1425))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1416)))))"
"(values #t if298_1417 tst299_1418 thn300_1419 els301_1420))))))"
"(let-values(((expr-ctx_1377)(as-expression-context ctx_0)))"
"(let-values(((tail-ctx_1378)"
"(let-values(((expr-ctx312_1445) expr-ctx_1377)((ctx313_1446) ctx_0))"
"(as-tail-context22.1 ctx313_1446 expr-ctx312_1445))))"
"(let-values(((rebuild-s_1379)"
"(let-values(((ctx314_1447) ctx_0)((s315_1448) s_0))"
"(keep-as-needed119.1 #f #f #f ctx314_1447 s315_1448))))"
"(let-values(((exp-tst_1380)"
"(let-values(((temp316_1449) tst299_1355)((expr-ctx317_1450) expr-ctx_1377))"
"(expand9.1 #f #f #f temp316_1449 expr-ctx317_1450))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1451)(expand-context-observer ctx_0)))"
"(if obs_1451"
"(let-values()(let-values()(call-expand-observe obs_1451 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-thn_1381)"
"(let-values(((temp318_1452) thn300_1356)((tail-ctx319_1453) tail-ctx_1378))"
"(expand9.1 #f #f #f temp318_1452 tail-ctx319_1453))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1454)(expand-context-observer ctx_0)))"
"(if obs_1454"
"(let-values()(let-values()(call-expand-observe obs_1454 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-els_1382)"
"(let-values(((temp320_1455) els301_1357)((tail-ctx321_1456) tail-ctx_1378))"
"(expand9.1 #f #f #f temp320_1455 tail-ctx321_1456))))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-if8.1 rebuild-s_1379 exp-tst_1380 exp-thn_1381 exp-els_1382)"
"(let-values(((rebuild-s322_1457) rebuild-s_1379)"
"((temp323_1458)(list if298_1354 exp-tst_1380 exp-thn_1381 exp-els_1382)))"
"(rebuild5.1 #t rebuild-s322_1457 temp323_1458)))))))))))))))))))"
"(void"
"(add-core-form!*"
" 'with-continuation-mark"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1491)(expand-context-observer ctx_0)))"
"(if obs_1491"
"(let-values()(let-values()(call-expand-observe obs_1491 'prim-with-continuation-mark)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1461)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1462 with-continuation-mark324_1463 key325_1464 val326_1465 body327_1466)"
"(let-values(((s_1492) disarmed-s_1461))"
"(let-values(((orig-s_1493) s_1492))"
"(let-values(((with-continuation-mark324_1494 key325_1495 val326_1496 body327_1497)"
"(let-values(((s_1498)(if(syntax?$1 s_1492)(syntax-e$1 s_1492) s_1492)))"
"(if(pair? s_1498)"
"(let-values(((with-continuation-mark328_1499)"
"(let-values(((s_1503)(car s_1498))) s_1503))"
"((key329_1500 val330_1501 body331_1502)"
"(let-values(((s_1504)(cdr s_1498)))"
"(let-values(((s_1505)"
"(if(syntax?$1 s_1504)"
"(syntax-e$1 s_1504)"
" s_1504)))"
"(if(pair? s_1505)"
"(let-values(((key332_1506)"
"(let-values(((s_1509)(car s_1505)))"
" s_1509))"
"((val333_1507 body334_1508)"
"(let-values(((s_1510)(cdr s_1505)))"
"(let-values(((s_1511)"
"(if(syntax?$1 s_1510)"
"(syntax-e$1 s_1510)"
" s_1510)))"
"(if(pair? s_1511)"
"(let-values(((val335_1512)"
"(let-values(((s_1514)"
"(car"
" s_1511)))"
" s_1514))"
"((body336_1513)"
"(let-values(((s_1515)"
"(cdr"
" s_1511)))"
"(let-values(((s_1516)"
"(if(syntax?$1"
" s_1515)"
"(syntax-e$1"
" s_1515)"
" s_1515)))"
"(if(pair?"
" s_1516)"
"(let-values(((body337_1517)"
"(let-values(((s_1518)"
"(car"
" s_1516)))"
" s_1518))"
"(()"
"(let-values(((s_1519)"
"(cdr"
" s_1516)))"
"(let-values(((s_1520)"
"(if(syntax?$1"
" s_1519)"
"(syntax-e$1"
" s_1519)"
" s_1519)))"
"(if(null?"
" s_1520)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_1493))))))"
"(values"
" body337_1517))"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_1493))))))"
"(values"
" val335_1512"
" body336_1513))"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_1493))))))"
"(values key332_1506 val333_1507 body334_1508))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1493))))))"
"(values"
" with-continuation-mark328_1499"
" key329_1500"
" val330_1501"
" body331_1502))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_1493)))))"
"(values #t with-continuation-mark324_1494 key325_1495 val326_1496 body327_1497))))))"
"(let-values(((expr-ctx_1486)(as-expression-context ctx_0)))"
"(let-values(((rebuild-s_1487)"
"(let-values(((ctx338_1521) ctx_0)((s339_1522) s_0))"
"(keep-as-needed119.1 #f #f #f ctx338_1521 s339_1522))))"
"(let-values(((exp-key_1488)"
"(let-values(((temp340_1523) key325_1464)((expr-ctx341_1524) expr-ctx_1486))"
"(expand9.1 #f #f #f temp340_1523 expr-ctx341_1524))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1525)(expand-context-observer ctx_0)))"
"(if obs_1525"
"(let-values()(let-values()(call-expand-observe obs_1525 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-val_1489)"
"(let-values(((temp342_1526) val326_1465)((expr-ctx343_1527) expr-ctx_1486))"
"(expand9.1 #f #f #f temp342_1526 expr-ctx343_1527))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1528)(expand-context-observer ctx_0)))"
"(if obs_1528"
"(let-values()(let-values()(call-expand-observe obs_1528 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_1490)"
"(let-values(((temp344_1529) body327_1466)"
"((temp345_1530)"
"(let-values(((expr-ctx346_1532) expr-ctx_1486)"
"((ctx347_1533) ctx_0))"
"(as-tail-context22.1 ctx347_1533 expr-ctx346_1532))))"
"(expand9.1 #f #f #f temp344_1529 temp345_1530))))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-with-continuation-mark10.1 rebuild-s_1487 exp-key_1488 exp-val_1489 exp-body_1490)"
"(let-values(((rebuild-s348_1534) rebuild-s_1487)"
"((temp349_1535)"
"(list with-continuation-mark324_1463 exp-key_1488 exp-val_1489 exp-body_1490)))"
"(rebuild5.1 #t rebuild-s348_1534 temp349_1535))))))))))))))))"
"(define-values"
"(make-begin20.1)"
"(lambda(last-is-tail?15_0 list-start-index14_0 log-tag18_0 parsed-begin19_0)"
"(begin"
" 'make-begin20"
"(let-values(((log-tag_1546) log-tag18_0))"
"(let-values(((parsed-begin_1547) parsed-begin19_0))"
"(let-values(((list-start-index_1548) list-start-index14_0))"
"(let-values(((last-is-tail?_1549) last-is-tail?15_0))"
"(let-values()"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1572)(expand-context-observer ctx_0)))"
"(if obs_1572"
"(let-values()(let-values()(call-expand-observe obs_1572 log-tag_1546)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1552)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1553 begin350_1554 e351_1555)"
"(let-values(((s_1573) disarmed-s_1552))"
"(let-values(((orig-s_1574) s_1573))"
"(let-values(((begin350_1575 e351_1576)"
"(let-values(((s_1577)"
"(if(syntax?$1 s_1573)(syntax-e$1 s_1573) s_1573)))"
"(if(pair? s_1577)"
"(let-values(((begin352_1578)"
"(let-values(((s_1580)(car s_1577))) s_1580))"
"((e353_1579)"
"(let-values(((s_1581)(cdr s_1577)))"
"(let-values(((s_1582)"
"(if(syntax?$1 s_1581)"
"(syntax-e$1 s_1581)"
" s_1581)))"
"(let-values(((flat-s_1583)"
"(to-syntax-list.1 s_1582)))"
"(if(not flat-s_1583)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_1574))"
"(if(null? flat-s_1583)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_1574))"
"(let-values() flat-s_1583))))))))"
"(values begin352_1578 e353_1579))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_1574)))))"
"(values #t begin350_1575 e351_1576))))))"
"(let-values(((expr-ctx_1569)"
"(if last-is-tail?_1549"
"(as-begin-expression-context ctx_0)"
"(as-expression-context ctx_0))))"
"(let-values(((rebuild-s_1570)"
"(let-values(((ctx354_1584) ctx_0)((s355_1585) s_0))"
"(keep-as-needed119.1 #f #f #f ctx354_1584 s355_1585))))"
"(let-values(((exp-es_1571)"
"((letrec-values(((loop_1586)"
"(lambda(es_0 index_0)"
"(begin"
" 'loop"
"(begin"
"(if(zero? index_0)"
"(let-values()"
"(let-values(((obs_1589)"
"(expand-context-observer ctx_0)))"
"(if obs_1589"
"(let-values()"
"(begin"
"(if(zero? list-start-index_1548)"
"(void)"
"(let-values()"
"(call-expand-observe obs_1589 'next)))"
"(call-expand-observe"
" obs_1589"
" 'enter-list"
"(datum->syntax$1"
" #f"
" es_0"
" rebuild-s_1570))))"
"(void))))"
"(void))"
"(if(null? es_0)"
"(let-values() null)"
"(let-values()"
"(let-values(((rest-es_1590)(cdr es_0)))"
"(begin"
"(let-values(((obs_1591)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_1591"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1591 'next)))"
"(void)))"
"(cons"
"(let-values(((temp356_1592)(car es_0))"
"((temp357_1593)"
"(if(if last-is-tail?_1549"
"(null? rest-es_1590)"
" #f)"
"(let-values(((expr-ctx358_1595)"
" expr-ctx_1569)"
"((ctx359_1596)"
" ctx_0))"
"(as-tail-context22.1"
" ctx359_1596"
" expr-ctx358_1595))"
" expr-ctx_1569)))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp356_1592"
" temp357_1593))"
"(loop_1586"
" rest-es_1590"
"(sub1 index_0))))))))))))"
" loop_1586)"
" e351_1555"
" list-start-index_1548)))"
"(begin"
"(let-values(((obs_1597)(expand-context-observer ctx_0)))"
"(if obs_1597"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1597"
" 'exit-list"
"(datum->syntax$1"
" #f"
"(list-tail exp-es_1571 list-start-index_1548)"
" rebuild-s_1570))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-begin_1547 rebuild-s_1570 exp-es_1571)"
"(let-values(((rebuild-s360_1598) rebuild-s_1570)"
"((temp361_1599)(cons begin350_1554 exp-es_1571)))"
"(rebuild5.1 #t rebuild-s360_1598 temp361_1599)))))))))))))))))))"
"(void"
"(add-core-form!*"
" 'begin"
"(let-values(((nonempty-begin_1616)"
"(let-values(((temp362_1618) 'prim-begin)"
"((parsed-begin363_1619) parsed-begin12.1)"
"((temp364_1620) 0)"
"((temp365_1621) #t))"
"(make-begin20.1 temp365_1621 temp364_1620 temp362_1618 parsed-begin363_1619))))"
"(lambda(s_0 ctx_0)"
"(let-values(((context_1624)(expand-context-context ctx_0)))"
"(if(let-values(((or-part_1625)(eq? context_1624 'top-level)))"
"(if or-part_1625 or-part_1625(eq? context_1624 'module)))"
"(let-values()"
"(let-values(((disarmed-s_1626)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1627 begin366_1628)"
"(let-values(((s_1639) disarmed-s_1626))"
"(if(let-values(((s_1640)(if(syntax?$1 s_1639)(syntax-e$1 s_1639) s_1639)))"
"(if(pair? s_1640)"
"(if(let-values(((s_1641)(car s_1640))) #t)"
"(let-values(((s_1642)(cdr s_1640)))"
"(let-values(((s_1643)(if(syntax?$1 s_1642)(syntax-e$1 s_1642) s_1642)))"
"(null? s_1643)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((begin366_1645)"
"(let-values(((s_1646)"
"(if(syntax?$1 s_1639)(syntax-e$1 s_1639) s_1639)))"
"(let-values(((begin367_1647)"
"(let-values(((s_1648)(car s_1646))) s_1648))"
"(()"
"(let-values(((s_1649)(cdr s_1646)))"
"(let-values(((s_1650)"
"(if(syntax?$1 s_1649)"
"(syntax-e$1 s_1649)"
" s_1649)))"
"(values)))))"
"(values begin367_1647)))))"
"(values #t begin366_1645)))"
"(values #f #f)))))"
"(if ok?_1627 s_0(nonempty-begin_1616 s_0 ctx_0)))))"
"(let-values()(nonempty-begin_1616 s_0 ctx_0))))))))"
"(void"
"(add-core-form!*"
" 'begin0"
"(let-values(((temp368_1652) 'prim-begin0)"
"((parsed-begin0369_1653) parsed-begin013.1)"
"((temp370_1654) 1)"
"((temp371_1655) #f))"
"(make-begin20.1 temp371_1655 temp370_1654 temp368_1652 parsed-begin0369_1653))))"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_0 ctx_0)"
"(begin"
"(if(if(expand-context-need-eventually-defined ctx_0)(>=(expand-context-phase ctx_0) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_0)"
"(expand-context-phase ctx_0)"
"(lambda(l_0)(cons id_0 l_0))"
" null)"
" #t))"
"(let-values() #f)))))"
"(void"
"(add-core-form!*"
" '#%top"
"(let-values(((core375_1659)"
"(lambda(s373_0 ctx374_0 implicit-omitted?372_0)"
"(begin"
" 'core375"
"(let-values(((s_1663) s373_0))"
"(let-values(((ctx_1664) ctx374_0))"
"(let-values(((implicit-omitted?_1665) implicit-omitted?372_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1669)(expand-context-observer ctx_1664)))"
"(if obs_1669"
"(let-values()"
"(let-values()(call-expand-observe obs_1669 'prim-#%top)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1666)(syntax-disarm$1 s_1663)))"
"(let-values(((id_1667)"
"(if implicit-omitted?_1665"
"(let-values() s_1663)"
"(let-values()"
"(let-values(((ok?_1670 #%top377_1671 id378_1672)"
"(let-values(((s_1686) disarmed-s_1666))"
"(let-values(((orig-s_1687) s_1686))"
"(let-values(((#%top377_1688 id378_1689)"
"(let-values(((s_1690)"
"(if(syntax?$1 s_1686)"
"(syntax-e$1 s_1686)"
" s_1686)))"
"(if(pair? s_1690)"
"(let-values(((#%top379_1691)"
"(let-values(((s_1693)"
"(car"
" s_1690)))"
" s_1693))"
"((id380_1692)"
"(let-values(((s_1694)"
"(cdr"
" s_1690)))"
"(if(let-values(((or-part_1695)"
"(if(syntax?$1"
" s_1694)"
"(symbol?"
"(syntax-e$1"
" s_1694))"
" #f)))"
"(if or-part_1695"
" or-part_1695"
"(symbol?"
" s_1694)))"
" s_1694"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"not an identifier\""
" orig-s_1687"
" s_1694)))))"
"(values"
" #%top379_1691"
" id380_1692))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_1687)))))"
"(values #t #%top377_1688 id378_1689))))))"
" id378_1672)))))"
"(let-values(((b_1668)"
"(let-values(((id381_1697) id_1667)"
"((temp382_1698)(expand-context-phase ctx_1664))"
"((temp383_1699) 'ambiguous))"
"(resolve+shift28.1"
" temp383_1699"
" #f"
" null"
" unsafe-undefined"
" #f"
" id381_1697"
" temp382_1698))))"
"(if(eq? b_1668 'ambiguous)"
"(let-values()(raise-ambiguous-error id_1667 ctx_1664))"
"(if(if b_1668"
"(if(module-binding? b_1668)"
"(eq?"
"(module-binding-module b_1668)"
"(root-expand-context-self-mpi ctx_1664))"
" #f)"
" #f)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1664)"
"(parsed-id2.1 id_1667 b_1668 #f)"
"(if(top-level-module-path-index?(module-binding-module b_1668))"
"(let-values() s_1663)"
"(let-values() id_1667))))"
"(if(register-eventual-variable!? id_1667 ctx_1664)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1664)"
"(parsed-id2.1 id_1667 b_1668 #f)"
" id_1667))"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_1664))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_1667"
" #f"
" null"
"(syntax-debug-info-string id_1667 ctx_1664)))"
"(let-values()"
"(let-values(((tl-id_1700)"
"(add-scope"
" id_1667"
"(root-expand-context-top-level-bind-scope ctx_1664))))"
"(let-values(((tl-b_1701)"
"(let-values(((tl-id384_1702) tl-id_1700)"
"((temp385_1703)"
"(expand-context-phase ctx_1664)))"
"(resolve40.1"
" #f"
" #f"
" null"
" #f"
" tl-id384_1702"
" temp385_1703))))"
"(if tl-b_1701"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1664)"
"(parsed-top-id4.1 tl-id_1700 tl-b_1701 #f)"
"(if implicit-omitted?_1665"
"(let-values() id_1667)"
"(let-values()"
"(let-values(((ok?_1704 #%top386_1705 id387_1706)"
"(let-values(((s_1720) disarmed-s_1666))"
"(let-values(((orig-s_1721) s_1720))"
"(let-values(((#%top386_1722"
" id387_1723)"
"(let-values(((s_1724)"
"(if(syntax?$1"
" s_1720)"
"(syntax-e$1"
" s_1720)"
" s_1720)))"
"(if(pair? s_1724)"
"(let-values(((#%top388_1725)"
"(let-values(((s_1727)"
"(car"
" s_1724)))"
" s_1727))"
"((id389_1726)"
"(let-values(((s_1728)"
"(cdr"
" s_1724)))"
"(if(let-values(((or-part_1729)"
"(if(syntax?$1"
" s_1728)"
"(symbol?"
"(syntax-e$1"
" s_1728))"
" #f)))"
"(if or-part_1729"
" or-part_1729"
"(symbol?"
" s_1728)))"
" s_1728"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"not an identifier\""
" orig-s_1721"
" s_1728)))))"
"(values"
" #%top388_1725"
" id389_1726))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_1721)))))"
"(values"
" #t"
" #%top386_1722"
" id387_1723))))))"
"(let-values(((s390_1730) s_1663)"
"((temp391_1731)"
"(cons #%top386_1705 id_1667)))"
"(rebuild5.1 #t s390_1730 temp391_1731)))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_1664)"
"(parsed-top-id4.1 id_1667 b_1668 #f)"
" s_1663)))))))))))))))))))))))"
"(case-lambda"
"((s_0 ctx_0)(core375_1659 s_0 ctx_0 #f))"
"((s_0 ctx_0 implicit-omitted?372_0)(core375_1659 s_0 ctx_0 implicit-omitted?372_0))))))"
"(void"
"(add-core-form!*"
" 'set!"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1761)(expand-context-observer ctx_0)))"
"(if obs_1761(let-values()(let-values()(call-expand-observe obs_1761 'prim-set!)))(void)))"
"(values))))"
"(let-values(((disarmed-s_1739)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1740 set!392_1741 id393_1742 rhs394_1743)"
"(let-values(((s_1762) disarmed-s_1739))"
"(let-values(((orig-s_1763) s_1762))"
"(let-values(((set!392_1764 id393_1765 rhs394_1766)"
"(let-values(((s_1767)(if(syntax?$1 s_1762)(syntax-e$1 s_1762) s_1762)))"
"(if(pair? s_1767)"
"(let-values(((set!395_1768)(let-values(((s_1771)(car s_1767))) s_1771))"
"((id396_1769 rhs397_1770)"
"(let-values(((s_1772)(cdr s_1767)))"
"(let-values(((s_1773)"
"(if(syntax?$1 s_1772)"
"(syntax-e$1 s_1772)"
" s_1772)))"
"(if(pair? s_1773)"
"(let-values(((id398_1774)"
"(let-values(((s_1776)(car s_1773)))"
"(if(let-values(((or-part_1777)"
"(if(syntax?$1"
" s_1776)"
"(symbol?"
"(syntax-e$1"
" s_1776))"
" #f)))"
"(if or-part_1777"
" or-part_1777"
"(symbol? s_1776)))"
" s_1776"
"(raise-syntax-error$1"
" #f"
"                                                                                    \"not an identifier\""
" orig-s_1763"
" s_1776))))"
"((rhs399_1775)"
"(let-values(((s_1778)(cdr s_1773)))"
"(let-values(((s_1779)"
"(if(syntax?$1 s_1778)"
"(syntax-e$1 s_1778)"
" s_1778)))"
"(if(pair? s_1779)"
"(let-values(((rhs400_1780)"
"(let-values(((s_1781)"
"(car"
" s_1779)))"
" s_1781))"
"(()"
"(let-values(((s_1782)"
"(cdr"
" s_1779)))"
"(let-values(((s_1783)"
"(if(syntax?$1"
" s_1782)"
"(syntax-e$1"
" s_1782)"
" s_1782)))"
"(if(null?"
" s_1783)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_1763))))))"
"(values rhs400_1780))"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_1763))))))"
"(values id398_1774 rhs399_1775))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_1763))))))"
"(values set!395_1768 id396_1769 rhs397_1770))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_1763)))))"
"(values #t set!392_1764 id393_1765 rhs394_1766))))))"
"(let-values(((orig-id_1760) id393_1742))"
"((letrec-values(((rename-loop_1784)"
"(lambda(id_0 from-rename?_0)"
"(begin"
" 'rename-loop"
"(let-values(((binding_1787)"
"(let-values(((id401_1793) id_0)"
"((temp402_1794)(expand-context-phase ctx_0))"
"((temp403_1795) 'ambiguous)"
"((temp404_1796) #t))"
"(resolve+shift28.1"
" temp403_1795"
" #f"
" null"
" temp404_1796"
" #f"
" id401_1793"
" temp402_1794))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1787 'ambiguous)"
"(let-values()(raise-ambiguous-error id_0 ctx_0))"
"(void))"
"(values))))"
"(let-values(((t_1788 primitive?_1789 insp_1790 protected?_1791)"
"(if binding_1787"
"(let-values(((binding405_1797) binding_1787)"
"((ctx406_1798) ctx_0)"
"((s407_1799) s_0))"
"(lookup62.1 #f #f binding405_1797 ctx406_1798 s407_1799))"
"(values #f #f #f #f))))"
"(begin"
"(let-values(((obs_1800)(expand-context-observer ctx_0)))"
"(if obs_1800"
"(let-values()"
"(let-values()(call-expand-observe obs_1800 'resolve id_0)))"
"(void)))"
"(if(let-values(((or-part_1801)(variable? t_1788)))"
"(if or-part_1801"
" or-part_1801"
"(if(not binding_1787)"
"(let-values(((or-part_1802)"
"(register-eventual-variable!? id_0 ctx_0)))"
"(if or-part_1802"
" or-part_1802"
"(expand-context-allow-unbound? ctx_0)))"
" #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(module-binding? binding_1787)"
"(not"
"(eq?"
"(module-binding-module binding_1787)"
"(root-expand-context-self-mpi ctx_0)))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                    \"cannot mutate module-required identifier\""
" s_0"
" id_0))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1805)"
"(expand-context-observer ctx_0)))"
"(if obs_1805"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1805 'next)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(register-variable-referenced-if-local! binding_1787)"
"(values))))"
"(let-values(((rebuild-s_1803)"
"(let-values(((ctx408_1806) ctx_0)((s409_1807) s_0))"
"(keep-as-needed119.1"
" #f"
" #f"
" #f"
" ctx408_1806"
" s409_1807))))"
"(let-values(((exp-rhs_1804)"
"(let-values(((temp410_1808) rhs394_1743)"
"((temp411_1809)"
"(as-expression-context ctx_0)))"
"(expand9.1 #f #f #f temp410_1808 temp411_1809))))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-set!9.1"
" rebuild-s_1803"
"(parsed-id2.1 id_0 binding_1787 #f)"
" exp-rhs_1804)"
"(let-values(((rebuild-s412_1810) rebuild-s_1803)"
"((temp413_1811)"
"(list"
" set!392_1741"
"(let-values(((id414_1813) id_0)"
"((t415_1814) t_1788)"
"((temp416_1815)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops ctx_0)"
"(expand-context-phase ctx_0))))"
"(substitute-variable6.1"
" temp416_1815"
" id414_1813"
" t415_1814))"
" exp-rhs_1804)))"
"(rebuild5.1 #t rebuild-s412_1810 temp413_1811)))))))))"
"(if(not binding_1787)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_0"
" id_0"
" null"
"(syntax-debug-info-string id_0 ctx_0)))"
"(if(1/set!-transformer? t_1788)"
"(let-values()"
"(if(not-in-this-expand-context? t_1788 ctx_0)"
"(let-values()"
"(let-values(((temp417_1816)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_0"
" disarmed-s_1739"
" set!392_1741"
" rhs394_1743"
" id_0"
" from-rename?_0"
" ctx_0)"
" t_1788"
" ctx_0))"
"((ctx418_1817) ctx_0))"
"(expand9.1 #f #f #f temp417_1816 ctx418_1817)))"
"(let-values()"
"(let-values(((exp-s_1818 re-ctx_1819)"
"(let-values(((t419_1821) t_1788)"
"((insp420_1822) insp_1790)"
"((s421_1823) s_0)"
"((orig-id422_1824) orig-id_1760)"
"((ctx423_1825) ctx_0)"
"((binding424_1826) binding_1787)"
"((orig-id425_1827) orig-id_1760))"
"(apply-transformer52.1"
" orig-id425_1827"
" t419_1821"
" insp420_1822"
" s421_1823"
" orig-id422_1824"
" ctx423_1825"
" binding424_1826))))"
"(if(expand-context-just-once? ctx_0)"
"(let-values() exp-s_1818)"
"(let-values()"
"(let-values(((exp-s426_1828) exp-s_1818)"
"((re-ctx427_1829) re-ctx_1819))"
"(expand9.1 #f #f #f exp-s426_1828 re-ctx427_1829))))))))"
"(if(1/rename-transformer? t_1788)"
"(let-values()"
"(if(not-in-this-expand-context? t_1788 ctx_0)"
"(let-values()"
"(let-values(((temp428_1830)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_0"
" disarmed-s_1739"
" set!392_1741"
" rhs394_1743"
" id_0"
" from-rename?_0"
" ctx_0"
" t_1788)"
" t_1788"
" ctx_0))"
"((ctx429_1831) ctx_0))"
"(expand9.1 #f #f #f temp428_1830 ctx429_1831)))"
"(let-values()"
"(rename-loop_1784"
"(syntax-track-origin$1"
"(rename-transformer-target-in-context t_1788 ctx_0)"
" id_0"
" id_0)"
" #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_0"
" id_0))))))))))))))"
" rename-loop_1784)"
" orig-id_1760"
" #f))))))))"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename31_1832)"
"(lambda(s24_0 disarmed-s25_0 set!-id26_0 id27_0 rhs-s28_0 from-rename?29_0 ctx30_0 t23_0)"
"(begin"
" 'substitute-set!-rename31"
"(let-values(((s_1841) s24_0))"
"(let-values(((disarmed-s_1842) disarmed-s25_0))"
"(let-values(((set!-id_1843) set!-id26_0))"
"(let-values(((id_1844) id27_0))"
"(let-values(((rhs-s_1845) rhs-s28_0))"
"(let-values(((from-rename?_1846) from-rename?29_0))"
"(let-values(((ctx_1847) ctx30_0))"
"(let-values(((t_1848) t23_0))"
"(let-values()"
"(if(let-values(((or-part_1849) t_1848))"
"(if or-part_1849 or-part_1849 from-rename?_1846))"
"(let-values()"
"(let-values(((new-id_1850)"
"(if t_1848"
"(rename-transformer-target-in-context t_1848 ctx_1847)"
" id_1844)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_1842"
"(list set!-id_1843 new-id_1850 rhs-s_1845)"
" disarmed-s_1842"
" disarmed-s_1842)"
" s_1841)))"
"(let-values() s_1841)))))))))))))))"
"(case-lambda"
"((s_0 disarmed-s_0 set!-id_0 id_0 rhs-s_0 from-rename?_0 ctx_0)"
"(begin(substitute-set!-rename31_1832 s_0 disarmed-s_0 set!-id_0 id_0 rhs-s_0 from-rename?_0 ctx_0 #f)))"
"((s_0 disarmed-s_0 set!-id_0 id_0 rhs-s_0 from-rename?_0 ctx_0 t23_0)"
"(substitute-set!-rename31_1832 s_0 disarmed-s_0 set!-id_0 id_0 rhs-s_0 from-rename?_0 ctx_0 t23_0)))))"
"(void"
"(add-core-form!*"
" '#%variable-reference"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_1917)(expand-context-observer ctx_0)))"
"(if obs_1917"
"(let-values()(let-values()(call-expand-observe obs_1917 'prim-#%variable-reference)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_1868)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_1869 #%variable-reference430_1870 id431_1871)"
"(let-values(((s_1918) disarmed-s_1868))"
"(if(let-values(((s_1919)(if(syntax?$1 s_1918)(syntax-e$1 s_1918) s_1918)))"
"(if(pair? s_1919)"
"(if(let-values(((s_1920)(car s_1919))) #t)"
"(let-values(((s_1921)(cdr s_1919)))"
"(let-values(((s_1922)(if(syntax?$1 s_1921)(syntax-e$1 s_1921) s_1921)))"
"(if(pair? s_1922)"
"(if(let-values(((s_1923)(car s_1922)))"
"(let-values(((or-part_1924)"
"(if(syntax?$1 s_1923)(symbol?(syntax-e$1 s_1923)) #f)))"
"(if or-part_1924 or-part_1924(symbol? s_1923))))"
"(let-values(((s_1925)(cdr s_1922)))"
"(let-values(((s_1926)(if(syntax?$1 s_1925)(syntax-e$1 s_1925) s_1925)))"
"(null? s_1926)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((#%variable-reference430_1928 id431_1929)"
"(let-values(((s_1930)(if(syntax?$1 s_1918)(syntax-e$1 s_1918) s_1918)))"
"(let-values(((#%variable-reference432_1931)"
"(let-values(((s_1933)(car s_1930))) s_1933))"
"((id433_1932)"
"(let-values(((s_1934)(cdr s_1930)))"
"(let-values(((s_1935)"
"(if(syntax?$1 s_1934)"
"(syntax-e$1 s_1934)"
" s_1934)))"
"(let-values(((id434_1936)"
"(let-values(((s_1937)(car s_1935)))"
" s_1937))"
"(()"
"(let-values(((s_1938)(cdr s_1935)))"
"(let-values(((s_1939)"
"(if(syntax?$1 s_1938)"
"(syntax-e$1 s_1938)"
" s_1938)))"
"(values)))))"
"(values id434_1936))))))"
"(values #%variable-reference432_1931 id433_1932)))))"
"(values #t #%variable-reference430_1928 id431_1929)))"
"(values #f #f #f)))))"
"(let-values(((ok?_1885 #%variable-reference435_1886 #%top436_1887 id437_1888)"
"(let-values(((s_1940) disarmed-s_1868))"
"(if(if(not ok?_1869)"
"(let-values(((s_1941)(if(syntax?$1 s_1940)(syntax-e$1 s_1940) s_1940)))"
"(if(pair? s_1941)"
"(if(let-values(((s_1942)(car s_1941))) #t)"
"(let-values(((s_1943)(cdr s_1941)))"
"(let-values(((s_1944)(if(syntax?$1 s_1943)(syntax-e$1 s_1943) s_1943)))"
"(if(pair? s_1944)"
"(if(let-values(((s_1945)(car s_1944)))"
"(let-values(((s_1946)"
"(if(syntax?$1 s_1945)(syntax-e$1 s_1945) s_1945)))"
"(if(pair? s_1946)"
"(if(let-values(((s_1947)(car s_1946))) #t)"
"(let-values(((s_1948)(cdr s_1946)))"
"(let-values(((or-part_1949)"
"(if(syntax?$1 s_1948)"
"(symbol?(syntax-e$1 s_1948))"
" #f)))"
"(if or-part_1949 or-part_1949(symbol? s_1948))))"
" #f)"
" #f)))"
"(let-values(((s_1950)(cdr s_1944)))"
"(let-values(((s_1951)"
"(if(syntax?$1 s_1950)(syntax-e$1 s_1950) s_1950)))"
"(null? s_1951)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values()"
"(let-values(((#%variable-reference435_1953 #%top436_1954 id437_1955)"
"(let-values(((s_1956)(if(syntax?$1 s_1940)(syntax-e$1 s_1940) s_1940)))"
"(let-values(((#%variable-reference438_1957)"
"(let-values(((s_1960)(car s_1956))) s_1960))"
"((#%top439_1958 id440_1959)"
"(let-values(((s_1961)(cdr s_1956)))"
"(let-values(((s_1962)"
"(if(syntax?$1 s_1961)"
"(syntax-e$1 s_1961)"
" s_1961)))"
"(let-values(((#%top441_1963 id442_1964)"
"(let-values(((s_1965)(car s_1962)))"
"(let-values(((s_1966)"
"(if(syntax?$1 s_1965)"
"(syntax-e$1 s_1965)"
" s_1965)))"
"(let-values(((#%top443_1967)"
"(let-values(((s_1969)"
"(car"
" s_1966)))"
" s_1969))"
"((id444_1968)"
"(let-values(((s_1970)"
"(cdr"
" s_1966)))"
" s_1970)))"
"(values"
" #%top443_1967"
" id444_1968)))))"
"(()"
"(let-values(((s_1971)(cdr s_1962)))"
"(let-values(((s_1972)"
"(if(syntax?$1 s_1971)"
"(syntax-e$1 s_1971)"
" s_1971)))"
"(values)))))"
"(values #%top441_1963 id442_1964))))))"
"(values #%variable-reference438_1957 #%top439_1958 id440_1959)))))"
"(values #t #%variable-reference435_1953 #%top436_1954 id437_1955)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_1905 #%variable-reference445_1906)"
"(let-values(((s_1973) disarmed-s_1868))"
"(if(if(not"
"(let-values(((or-part_1974) ok?_1869))(if or-part_1974 or-part_1974 ok?_1885)))"
" #t"
" #f)"
"(let-values(((orig-s_1975) s_1973))"
"(let-values(((#%variable-reference445_1976)"
"(let-values(((s_1977)"
"(if(syntax?$1 s_1973)(syntax-e$1 s_1973) s_1973)))"
"(if(pair? s_1977)"
"(let-values(((#%variable-reference446_1978)"
"(let-values(((s_1979)(car s_1977))) s_1979))"
"(()"
"(let-values(((s_1980)(cdr s_1977)))"
"(let-values(((s_1981)"
"(if(syntax?$1 s_1980)"
"(syntax-e$1 s_1980)"
" s_1980)))"
"(if(null? s_1981)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_1975))))))"
"(values #%variable-reference446_1978))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_1975)))))"
"(values #t #%variable-reference445_1976)))"
"(values #f #f)))))"
"(if(let-values(((or-part_1982) ok?_1869))(if or-part_1982 or-part_1982 ok?_1885))"
"(let-values()"
"(let-values(((var-id_1983)(if ok?_1869 id431_1871 id437_1888)))"
"(let-values(((binding_1984)"
"(let-values(((var-id447_1990) var-id_1983)"
"((temp448_1991)(expand-context-phase ctx_0))"
"((temp449_1992) 'ambiguous))"
"(resolve+shift28.1"
" temp449_1992"
" #f"
" null"
" unsafe-undefined"
" #f"
" var-id447_1990"
" temp448_1991))))"
"(let-values((()"
"(begin"
"(if(eq? binding_1984 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_1983 ctx_0))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_1993) binding_1984))"
"(if or-part_1993 or-part_1993(expand-context-allow-unbound? ctx_0)))"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                              \"unbound identifier\""
" s_0"
" var-id_1983"
" null"
"(syntax-debug-info-string var-id_1983 ctx_0))))"
"(values))))"
"(let-values(((t_1985 primitive?_1986 insp-of-t_1987 protected?_1988)"
"(if binding_1984"
"(let-values(((binding450_1995) binding_1984)"
"((ctx451_1996) ctx_0)"
"((var-id452_1997) var-id_1983)"
"((s453_1998) s_0)"
"((temp454_1999)(expand-context-in-local-expand? ctx_0)))"
"(lookup62.1"
" s453_1998"
" temp454_1999"
" binding450_1995"
" ctx451_1996"
" var-id452_1997))"
"(values #f #f #f #f))))"
"(begin"
"(if(if t_1985(not(variable? t_1985)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 #f \"identifier does not refer to a variable\" var-id_1983 s_0))"
"(void))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-#%variable-reference11.1"
"(keep-properties-only~ s_0)"
"(if ok?_1885"
"(let-values()(parsed-top-id4.1 var-id_1983 binding_1984 #f))"
"(if primitive?_1986"
"(let-values()(parsed-primitive-id3.1 var-id_1983 binding_1984 #f))"
"(let-values()(parsed-id2.1 var-id_1983 binding_1984 #f)))))"
" s_0))))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-#%variable-reference11.1(keep-properties-only~ s_0) #f)"
" s_0)))))))))))"
"(void"
"(add-core-form!*"
" '#%expression"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_2021)(expand-context-observer ctx_0)))"
"(if obs_2021"
"(let-values()(let-values()(call-expand-observe obs_2021 'prim-#%expression)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_2002)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_2003 #%expression455_2004 e456_2005)"
"(let-values(((s_2022) disarmed-s_2002))"
"(let-values(((orig-s_2023) s_2022))"
"(let-values(((#%expression455_2024 e456_2025)"
"(let-values(((s_2026)(if(syntax?$1 s_2022)(syntax-e$1 s_2022) s_2022)))"
"(if(pair? s_2026)"
"(let-values(((#%expression457_2027)"
"(let-values(((s_2029)(car s_2026))) s_2029))"
"((e458_2028)"
"(let-values(((s_2030)(cdr s_2026)))"
"(let-values(((s_2031)"
"(if(syntax?$1 s_2030)"
"(syntax-e$1 s_2030)"
" s_2030)))"
"(if(pair? s_2031)"
"(let-values(((e459_2032)"
"(let-values(((s_2033)(car s_2031)))"
" s_2033))"
"(()"
"(let-values(((s_2034)(cdr s_2031)))"
"(let-values(((s_2035)"
"(if(syntax?$1 s_2034)"
"(syntax-e$1 s_2034)"
" s_2034)))"
"(if(null? s_2035)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_2023))))))"
"(values e459_2032))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_2023))))))"
"(values #%expression457_2027 e458_2028))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_2023)))))"
"(values #t #%expression455_2024 e456_2025))))))"
"(let-values(((rebuild-s_2019)"
"(let-values(((ctx460_2037) ctx_0)((s461_2038) s_0)((temp462_2039) #t))"
"(keep-as-needed119.1 temp462_2039 #f #f ctx460_2037 s461_2038))))"
"(let-values(((exp-e_2020)"
"(let-values(((temp463_2040) e456_2005)"
"((temp464_2041)"
"(let-values(((temp465_2043)(as-expression-context ctx_0))"
"((ctx466_2044) ctx_0))"
"(as-tail-context22.1 ctx466_2044 temp465_2043))))"
"(expand9.1 #f #f #f temp463_2040 temp464_2041))))"
"(if(expand-context-to-parsed? ctx_0)"
" exp-e_2020"
"(if(let-values(((or-part_2045)"
"(if(expand-context-in-local-expand? ctx_0)"
"(expand-context-keep-#%expression? ctx_0)"
" #f)))"
"(if or-part_2045 or-part_2045(eq? 'top-level(expand-context-context ctx_0))))"
"(let-values()"
"(let-values(((rebuild-s467_2046) rebuild-s_2019)"
"((temp468_2047)(list #%expression455_2004 exp-e_2020)))"
"(rebuild5.1 #t rebuild-s467_2046 temp468_2047)))"
"(let-values()"
"(let-values(((result-s_2048)(syntax-track-origin$1 exp-e_2020 rebuild-s_2019)))"
"(begin"
"(let-values(((obs_2049)(expand-context-observer ctx_0)))"
"(if obs_2049"
"(let-values()(let-values()(call-expand-observe obs_2049 'tag result-s_2048)))"
"(void)))"
" result-s_2048)))))))))))))"
" (void (add-core-form!* 'unquote (lambda (s_0 ctx_0) (raise-syntax-error$1 #f \"not in quasiquote\" s_0))))"
" (void (add-core-form!* 'unquote-splicing (lambda (s_0 ctx_0) (raise-syntax-error$1 #f \"not in quasiquote\" s_0))))"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_0 id_0 at-phase_0 ns_0)"
"(begin"
"(if(not at-phase_0)"
"(let-values()"
"(let-values(((m_5)"
"(namespace->module ns_0(1/module-path-index-resolve(module-binding-nominal-module b_0)))))"
"(let-values(((b/p_6)"
"(hash-ref"
"(hash-ref(module-provides m_5)(module-binding-nominal-phase b_0) '#hasheq())"
"(module-binding-nominal-sym b_0)"
" #f)))"
"(provided-as-transformer? b/p_6))))"
"(let-values()"
"(let-values(((val_7 primitive?_8 insp_9 protected?_10)"
"(let-values(((b1_11) b_0)"
"((empty-env2_12) empty-env)"
"((null3_13) null)"
"((ns4_14) ns_0)"
"((at-phase5_15) at-phase_0)"
"((id6_16) id_0))"
"(binding-lookup50.1 #f #f b1_11 empty-env2_12 null3_13 ns4_14 at-phase5_15 id6_16))))"
"(not(variable? val_7))))))))"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_0 orig-s_0 rp_0 self_0 phase_0 ctx_0)"
"(begin"
"(let-values(((ns_7)(expand-context-namespace ctx_0)))"
"((letrec-values(((loop_8)"
"(lambda(specs_1 at-phase_0 protected?_0 layer_0)"
"(begin"
" 'loop"
"(let-values(((track-stxess_13 exp-specss_14)"
"(let-values(((track-stxes_15 exp-specs_16)"
"(let-values(((lst_17) specs_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_17)))"
"((letrec-values(((for-loop_18)"
"(lambda(track-stxes_0"
" exp-specs_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((spec_22)"
"(unsafe-car lst_0))"
"((rest_23)"
"(unsafe-cdr lst_0)))"
"(let-values(((track-stxes_24"
" exp-specs_25)"
"(let-values(((track-stxes_26)"
" track-stxes_0)"
"((exp-specs_27)"
" exp-specs_0))"
"(let-values(((track-stxes_28"
" exp-specs_29)"
"(let-values()"
"(let-values(((track-stxes1_30"
" exp-specs2_31)"
"(let-values()"
"(let-values(((disarmed-spec_32)"
"(syntax-disarm$1"
" spec_22)))"
"(let-values(((fm_33)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_32))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_32)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_32)))"
" #f)"
" #f)))"
"(let-values(((check-nested_34)"
"(lambda(want-layer_0)"
"(begin"
" 'check-nested"
"(if(member"
" want-layer_0"
"(member"
" layer_0"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                                    \"nested `~a' not allowed\""
" fm_33)"
" orig-s_0"
" spec_22)))))))"
"(let-values(((tmp_36)"
" fm_33))"
"(let-values(((index_37)"
"(if(symbol?"
" tmp_36)"
"(hash-ref"
" '#hasheq((all-defined"
" ."
" 9)"
"(all-defined-except"
" ."
" 10)"
"(all-from"
" ."
" 7)"
"(all-from-except"
" ."
" 8)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3)"
"(for-meta"
" ."
" 1)"
"(for-syntax"
" ."
" 2)"
"(prefix-all-defined"
" ."
" 11)"
"(prefix-all-defined-except"
" ."
" 12)"
"(protect"
" ."
" 4)"
"(rename ."
" 5)"
"(struct"
" ."
" 6))"
" tmp_36"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_37"
" 6)"
"(if(unsafe-fx<"
" index_37"
" 2)"
"(if(unsafe-fx<"
" index_37"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_22)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_22"
" orig-s_0"
"(syntax-e$1"
" spec_22)"
" at-phase_0"
" ns_7"
" rp_0"
" protected?_0)"
"(values"
" null"
"(list"
" spec_22))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                               \"bad syntax\""
" orig-s_0"
" spec_22))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'raw)"
"(values))))"
"(let-values(((ok?_38"
" for-meta3_39"
" phase-level4_40"
" spec5_41)"
"(let-values(((s_61)"
" disarmed-spec_32))"
"(let-values(((orig-s_62)"
" s_61))"
"(let-values(((for-meta3_63"
" phase-level4_64"
" spec5_65)"
"(let-values(((s_66)"
"(if(syntax?$1"
" s_61)"
"(syntax-e$1"
" s_61)"
" s_61)))"
"(if(pair?"
" s_66)"
"(let-values(((for-meta6_67)"
"(let-values(((s_70)"
"(car"
" s_66)))"
" s_70))"
"((phase-level7_68"
" spec8_69)"
"(let-values(((s_71)"
"(cdr"
" s_66)))"
"(let-values(((s_72)"
"(if(syntax?$1"
" s_71)"
"(syntax-e$1"
" s_71)"
" s_71)))"
"(if(pair?"
" s_72)"
"(let-values(((phase-level9_73)"
"(let-values(((s_75)"
"(car"
" s_72)))"
" s_75))"
"((spec10_74)"
"(let-values(((s_76)"
"(cdr"
" s_72)))"
"(let-values(((s_77)"
"(if(syntax?$1"
" s_76)"
"(syntax-e$1"
" s_76)"
" s_76)))"
"(let-values(((flat-s_78)"
"(to-syntax-list.1"
" s_77)))"
"(if(not"
" flat-s_78)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_62))"
"(let-values()"
" flat-s_78)))))))"
"(values"
" phase-level9_73"
" spec10_74))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_62))))))"
"(values"
" for-meta6_67"
" phase-level7_68"
" spec8_69))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_62)))))"
"(values"
" #t"
" for-meta3_63"
" phase-level4_64"
" spec5_65))))))"
"(let-values(((p_58)"
"(syntax-e$1"
" phase-level4_40)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_58)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                     \"bad `for-meta' phase\""
" orig-s_0"
" spec_22)))"
"(values))))"
"(let-values(((track-stxes_59"
" exp-specs_60)"
"(loop_8"
" spec5_41"
"(phase+"
" p_58"
" at-phase_0)"
" protected?_0"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_59"
"(let-values(((spec11_79)"
" spec_22)"
"((temp12_80)"
"(list*"
" for-meta3_39"
" phase-level4_40"
" exp-specs_60)))"
"(rebuild5.1"
" #t"
" spec11_79"
" temp12_80))))))))))))"
"(if(unsafe-fx<"
" index_37"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'raw)"
"(values))))"
"(let-values(((ok?_81"
" for-syntax13_82"
" spec14_83)"
"(let-values(((s_99)"
" disarmed-spec_32))"
"(let-values(((orig-s_100)"
" s_99))"
"(let-values(((for-syntax13_101"
" spec14_102)"
"(let-values(((s_103)"
"(if(syntax?$1"
" s_99)"
"(syntax-e$1"
" s_99)"
" s_99)))"
"(if(pair?"
" s_103)"
"(let-values(((for-syntax15_104)"
"(let-values(((s_106)"
"(car"
" s_103)))"
" s_106))"
"((spec16_105)"
"(let-values(((s_107)"
"(cdr"
" s_103)))"
"(let-values(((s_108)"
"(if(syntax?$1"
" s_107)"
"(syntax-e$1"
" s_107)"
" s_107)))"
"(let-values(((flat-s_109)"
"(to-syntax-list.1"
" s_108)))"
"(if(not"
" flat-s_109)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_100))"
"(let-values()"
" flat-s_109)))))))"
"(values"
" for-syntax15_104"
" spec16_105))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_100)))))"
"(values"
" #t"
" for-syntax13_101"
" spec14_102))))))"
"(let-values(((track-stxes_97"
" exp-specs_98)"
"(loop_8"
" spec14_83"
"(phase+"
" 1"
" at-phase_0)"
" protected?_0"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_97"
"(let-values(((spec17_110)"
" spec_22)"
"((temp18_111)"
"(list*"
" for-syntax13_82"
" exp-specs_98)))"
"(rebuild5.1"
" #t"
" spec17_110"
" temp18_111)))))))))"
"(if(unsafe-fx<"
" index_37"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'raw)"
"(values))))"
"(let-values(((ok?_112"
" for-label19_113"
" spec20_114)"
"(let-values(((s_130)"
" disarmed-spec_32))"
"(let-values(((orig-s_131)"
" s_130))"
"(let-values(((for-label19_132"
" spec20_133)"
"(let-values(((s_134)"
"(if(syntax?$1"
" s_130)"
"(syntax-e$1"
" s_130)"
" s_130)))"
"(if(pair?"
" s_134)"
"(let-values(((for-label21_135)"
"(let-values(((s_137)"
"(car"
" s_134)))"
" s_137))"
"((spec22_136)"
"(let-values(((s_138)"
"(cdr"
" s_134)))"
"(let-values(((s_139)"
"(if(syntax?$1"
" s_138)"
"(syntax-e$1"
" s_138)"
" s_138)))"
"(let-values(((flat-s_140)"
"(to-syntax-list.1"
" s_139)))"
"(if(not"
" flat-s_140)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_131))"
"(let-values()"
" flat-s_140)))))))"
"(values"
" for-label21_135"
" spec22_136))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_131)))))"
"(values"
" #t"
" for-label19_132"
" spec20_133))))))"
"(let-values(((track-stxes_128"
" exp-specs_129)"
"(loop_8"
" spec20_114"
" #f"
" protected?_0"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_128"
"(let-values(((spec23_141)"
" spec_22)"
"((temp24_142)"
"(list*"
" for-label19_113"
" exp-specs_129)))"
"(rebuild5.1"
" #t"
" spec23_141"
" temp24_142)))))))))"
"(if(unsafe-fx<"
" index_37"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_0"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                     \"nested `protect' not allowed\""
" orig-s_0"
" spec_22))"
"(void))"
"(values))))"
"(let-values(((ok?_143"
" protect25_144"
" p-spec26_145)"
"(let-values(((s_161)"
" disarmed-spec_32))"
"(let-values(((orig-s_162)"
" s_161))"
"(let-values(((protect25_163"
" p-spec26_164)"
"(let-values(((s_165)"
"(if(syntax?$1"
" s_161)"
"(syntax-e$1"
" s_161)"
" s_161)))"
"(if(pair?"
" s_165)"
"(let-values(((protect27_166)"
"(let-values(((s_168)"
"(car"
" s_165)))"
" s_168))"
"((p-spec28_167)"
"(let-values(((s_169)"
"(cdr"
" s_165)))"
"(let-values(((s_170)"
"(if(syntax?$1"
" s_169)"
"(syntax-e$1"
" s_169)"
" s_169)))"
"(let-values(((flat-s_171)"
"(to-syntax-list.1"
" s_170)))"
"(if(not"
" flat-s_171)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_162))"
"(let-values()"
" flat-s_171)))))))"
"(values"
" protect27_166"
" p-spec28_167))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_162)))))"
"(values"
" #t"
" protect25_163"
" p-spec26_164))))))"
"(let-values(((track-stxes_159"
" exp-specs_160)"
"(loop_8"
" p-spec26_145"
" at-phase_0"
" #t"
" layer_0)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_159"
"(let-values(((spec29_172)"
" spec_22)"
"((temp30_173)"
"(list*"
" protect25_144"
" exp-specs_160)))"
"(rebuild5.1"
" #t"
" spec29_172"
" temp30_173))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_174"
" rename31_175"
" id:from32_176"
" id:to33_177)"
"(let-values(((s_194)"
" disarmed-spec_32))"
"(let-values(((orig-s_195)"
" s_194))"
"(let-values(((rename31_196"
" id:from32_197"
" id:to33_198)"
"(let-values(((s_199)"
"(if(syntax?$1"
" s_194)"
"(syntax-e$1"
" s_194)"
" s_194)))"
"(if(pair?"
" s_199)"
"(let-values(((rename34_200)"
"(let-values(((s_203)"
"(car"
" s_199)))"
" s_203))"
"((id:from35_201"
" id:to36_202)"
"(let-values(((s_204)"
"(cdr"
" s_199)))"
"(let-values(((s_205)"
"(if(syntax?$1"
" s_204)"
"(syntax-e$1"
" s_204)"
" s_204)))"
"(if(pair?"
" s_205)"
"(let-values(((id:from37_206)"
"(let-values(((s_208)"
"(car"
" s_205)))"
"(if(let-values(((or-part_209)"
"(if(syntax?$1"
" s_208)"
"(symbol?"
"(syntax-e$1"
" s_208))"
" #f)))"
"(if or-part_209"
" or-part_209"
"(symbol?"
" s_208)))"
" s_208"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_195"
" s_208))))"
"((id:to38_207)"
"(let-values(((s_210)"
"(cdr"
" s_205)))"
"(let-values(((s_211)"
"(if(syntax?$1"
" s_210)"
"(syntax-e$1"
" s_210)"
" s_210)))"
"(if(pair?"
" s_211)"
"(let-values(((id:to39_212)"
"(let-values(((s_213)"
"(car"
" s_211)))"
"(if(let-values(((or-part_214)"
"(if(syntax?$1"
" s_213)"
"(symbol?"
"(syntax-e$1"
" s_213))"
" #f)))"
"(if or-part_214"
" or-part_214"
"(symbol?"
" s_213)))"
" s_213"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_195"
" s_213))))"
"(()"
"(let-values(((s_215)"
"(cdr"
" s_211)))"
"(let-values(((s_216)"
"(if(syntax?$1"
" s_215)"
"(syntax-e$1"
" s_215)"
" s_215)))"
"(if(null?"
" s_216)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_195))))))"
"(values"
" id:to39_212))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_195))))))"
"(values"
" id:from37_206"
" id:to38_207))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_195))))))"
"(values"
" rename34_200"
" id:from35_201"
" id:to36_202))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_195)))))"
"(values"
" #t"
" rename31_196"
" id:from32_197"
" id:to33_198))))))"
"(begin"
"(parse-identifier!"
" id:from32_176"
" orig-s_0"
"(syntax-e$1"
" id:to33_177)"
" at-phase_0"
" ns_7"
" rp_0"
" protected?_0)"
"(values"
" null"
"(list"
" spec_22))))))))))"
"(if(unsafe-fx<"
" index_37"
" 9)"
"(if(unsafe-fx<"
" index_37"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_217"
" struct40_218"
" id:struct41_219"
" id:field42_220)"
"(let-values(((s_237)"
" disarmed-spec_32))"
"(let-values(((orig-s_238)"
" s_237))"
"(let-values(((struct40_239"
" id:struct41_240"
" id:field42_241)"
"(let-values(((s_242)"
"(if(syntax?$1"
" s_237)"
"(syntax-e$1"
" s_237)"
" s_237)))"
"(if(pair?"
" s_242)"
"(let-values(((struct43_243)"
"(let-values(((s_246)"
"(car"
" s_242)))"
" s_246))"
"((id:struct44_244"
" id:field45_245)"
"(let-values(((s_247)"
"(cdr"
" s_242)))"
"(let-values(((s_248)"
"(if(syntax?$1"
" s_247)"
"(syntax-e$1"
" s_247)"
" s_247)))"
"(if(pair?"
" s_248)"
"(let-values(((id:struct46_249)"
"(let-values(((s_251)"
"(car"
" s_248)))"
"(if(let-values(((or-part_252)"
"(if(syntax?$1"
" s_251)"
"(symbol?"
"(syntax-e$1"
" s_251))"
" #f)))"
"(if or-part_252"
" or-part_252"
"(symbol?"
" s_251)))"
" s_251"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_238"
" s_251))))"
"((id:field47_250)"
"(let-values(((s_253)"
"(cdr"
" s_248)))"
"(let-values(((s_254)"
"(if(syntax?$1"
" s_253)"
"(syntax-e$1"
" s_253)"
" s_253)))"
"(if(pair?"
" s_254)"
"(let-values(((id:field48_255)"
"(let-values(((s_256)"
"(car"
" s_254)))"
"(let-values(((s_257)"
"(if(syntax?$1"
" s_256)"
"(syntax-e$1"
" s_256)"
" s_256)))"
"(let-values(((flat-s_258)"
"(to-syntax-list.1"
" s_257)))"
"(if(not"
" flat-s_258)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_238))"
"(let-values()"
"(let-values(((id:field_259)"
"(let-values(((lst_260)"
" flat-s_258))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_260)))"
"((letrec-values(((for-loop_261)"
"(lambda(id:field_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_264)"
"(unsafe-car"
" lst_1))"
"((rest_265)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id:field_266)"
"(let-values(((id:field_267)"
" id:field_0))"
"(let-values(((id:field_268)"
"(let-values()"
"(let-values(((id:field49_269)"
"(let-values()"
"(if(let-values(((or-part_270)"
"(if(syntax?$1"
" s_264)"
"(symbol?"
"(syntax-e$1"
" s_264))"
" #f)))"
"(if or-part_270"
" or-part_270"
"(symbol?"
" s_264)))"
" s_264"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_238"
" s_264)))))"
"(cons"
" id:field49_269"
" id:field_267)))))"
"(values"
" id:field_268)))))"
"(if(not"
" #f)"
"(for-loop_261"
" id:field_266"
" rest_265)"
" id:field_266)))"
" id:field_0)))))"
" for-loop_261)"
" null"
" lst_260)))))"
"(reverse$1"
" id:field_259))))))))"
"(()"
"(let-values(((s_271)"
"(cdr"
" s_254)))"
"(let-values(((s_272)"
"(if(syntax?$1"
" s_271)"
"(syntax-e$1"
" s_271)"
" s_271)))"
"(if(null?"
" s_272)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_238))))))"
"(values"
" id:field48_255))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_238))))))"
"(values"
" id:struct46_249"
" id:field47_250))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_238))))))"
"(values"
" struct43_243"
" id:struct44_244"
" id:field45_245))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_238)))))"
"(values"
" #t"
" struct40_239"
" id:struct41_240"
" id:field42_241))))))"
"(begin"
"(parse-struct!"
" id:struct41_219"
" orig-s_0"
" id:field42_220"
" at-phase_0"
" ns_7"
" rp_0"
" protected?_0)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_37"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_273"
" all-from50_274"
" mod-path51_275)"
"(let-values(((s_289)"
" disarmed-spec_32))"
"(let-values(((orig-s_290)"
" s_289))"
"(let-values(((all-from50_291"
" mod-path51_292)"
"(let-values(((s_293)"
"(if(syntax?$1"
" s_289)"
"(syntax-e$1"
" s_289)"
" s_289)))"
"(if(pair?"
" s_293)"
"(let-values(((all-from52_294)"
"(let-values(((s_296)"
"(car"
" s_293)))"
" s_296))"
"((mod-path53_295)"
"(let-values(((s_297)"
"(cdr"
" s_293)))"
"(let-values(((s_298)"
"(if(syntax?$1"
" s_297)"
"(syntax-e$1"
" s_297)"
" s_297)))"
"(if(pair?"
" s_298)"
"(let-values(((mod-path54_299)"
"(let-values(((s_300)"
"(car"
" s_298)))"
" s_300))"
"(()"
"(let-values(((s_301)"
"(cdr"
" s_298)))"
"(let-values(((s_302)"
"(if(syntax?$1"
" s_301)"
"(syntax-e$1"
" s_301)"
" s_301)))"
"(if(null?"
" s_302)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_290))))))"
"(values"
" mod-path54_299))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_290))))))"
"(values"
" all-from52_294"
" mod-path53_295))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_290)))))"
"(values"
" #t"
" all-from50_291"
" mod-path51_292))))))"
"(begin"
"(parse-all-from"
" mod-path51_275"
" orig-s_0"
" self_0"
" null"
" at-phase_0"
" ns_7"
" rp_0"
" protected?_0"
" ctx_0)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_303"
" all-from-except55_304"
" mod-path56_305"
" id57_306)"
"(let-values(((s_323)"
" disarmed-spec_32))"
"(let-values(((orig-s_324)"
" s_323))"
"(let-values(((all-from-except55_325"
" mod-path56_326"
" id57_327)"
"(let-values(((s_328)"
"(if(syntax?$1"
" s_323)"
"(syntax-e$1"
" s_323)"
" s_323)))"
"(if(pair?"
" s_328)"
"(let-values(((all-from-except58_329)"
"(let-values(((s_332)"
"(car"
" s_328)))"
" s_332))"
"((mod-path59_330"
" id60_331)"
"(let-values(((s_333)"
"(cdr"
" s_328)))"
"(let-values(((s_334)"
"(if(syntax?$1"
" s_333)"
"(syntax-e$1"
" s_333)"
" s_333)))"
"(if(pair?"
" s_334)"
"(let-values(((mod-path61_335)"
"(let-values(((s_337)"
"(car"
" s_334)))"
" s_337))"
"((id62_336)"
"(let-values(((s_338)"
"(cdr"
" s_334)))"
"(let-values(((s_339)"
"(if(syntax?$1"
" s_338)"
"(syntax-e$1"
" s_338)"
" s_338)))"
"(let-values(((flat-s_340)"
"(to-syntax-list.1"
" s_339)))"
"(if(not"
" flat-s_340)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_324))"
"(let-values()"
"(let-values(((id_341)"
"(let-values(((lst_342)"
" flat-s_340))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_342)))"
"((letrec-values(((for-loop_343)"
"(lambda(id_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_346)"
"(unsafe-car"
" lst_1))"
"((rest_347)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id_348)"
"(let-values(((id_349)"
" id_0))"
"(let-values(((id_350)"
"(let-values()"
"(let-values(((id63_351)"
"(let-values()"
"(if(let-values(((or-part_352)"
"(if(syntax?$1"
" s_346)"
"(symbol?"
"(syntax-e$1"
" s_346))"
" #f)))"
"(if or-part_352"
" or-part_352"
"(symbol?"
" s_346)))"
" s_346"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_324"
" s_346)))))"
"(cons"
" id63_351"
" id_349)))))"
"(values"
" id_350)))))"
"(if(not"
" #f)"
"(for-loop_343"
" id_348"
" rest_347)"
" id_348)))"
" id_0)))))"
" for-loop_343)"
" null"
" lst_342)))))"
"(reverse$1"
" id_341)))))))))"
"(values"
" mod-path61_335"
" id62_336))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_324))))))"
"(values"
" all-from-except58_329"
" mod-path59_330"
" id60_331))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_324)))))"
"(values"
" #t"
" all-from-except55_325"
" mod-path56_326"
" id57_327))))))"
"(begin"
"(parse-all-from"
" mod-path56_305"
" orig-s_0"
" self_0"
" id57_306"
" at-phase_0"
" ns_7"
" rp_0"
" protected?_0"
" ctx_0)"
"(values"
" null"
"(list"
" spec_22))))))))"
"(if(unsafe-fx<"
" index_37"
" 11)"
"(if(unsafe-fx<"
" index_37"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_353"
" all-defined64_354)"
"(let-values(((s_365)"
" disarmed-spec_32))"
"(let-values(((orig-s_366)"
" s_365))"
"(let-values(((all-defined64_367)"
"(let-values(((s_368)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(if(pair?"
" s_368)"
"(let-values(((all-defined65_369)"
"(let-values(((s_370)"
"(car"
" s_368)))"
" s_370))"
"(()"
"(let-values(((s_371)"
"(cdr"
" s_368)))"
"(let-values(((s_372)"
"(if(syntax?$1"
" s_371)"
"(syntax-e$1"
" s_371)"
" s_371)))"
"(if(null?"
" s_372)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_366))))))"
"(values"
" all-defined65_369))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_366)))))"
"(values"
" #t"
" all-defined64_367))))))"
"(begin"
"(parse-all-from-module"
" self_0"
" spec_22"
" orig-s_0"
" null"
" #f"
" at-phase_0"
" ns_7"
" rp_0"
" protected?_0)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_373"
" all-defined-except66_374"
" id67_375)"
"(let-values(((s_389)"
" disarmed-spec_32))"
"(let-values(((orig-s_390)"
" s_389))"
"(let-values(((all-defined-except66_391"
" id67_392)"
"(let-values(((s_393)"
"(if(syntax?$1"
" s_389)"
"(syntax-e$1"
" s_389)"
" s_389)))"
"(if(pair?"
" s_393)"
"(let-values(((all-defined-except68_394)"
"(let-values(((s_396)"
"(car"
" s_393)))"
" s_396))"
"((id69_395)"
"(let-values(((s_397)"
"(cdr"
" s_393)))"
"(let-values(((s_398)"
"(if(syntax?$1"
" s_397)"
"(syntax-e$1"
" s_397)"
" s_397)))"
"(let-values(((flat-s_399)"
"(to-syntax-list.1"
" s_398)))"
"(if(not"
" flat-s_399)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_390))"
"(let-values()"
"(let-values(((id_400)"
"(let-values(((lst_401)"
" flat-s_399))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_401)))"
"((letrec-values(((for-loop_402)"
"(lambda(id_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_405)"
"(unsafe-car"
" lst_1))"
"((rest_406)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id_407)"
"(let-values(((id_408)"
" id_0))"
"(let-values(((id_409)"
"(let-values()"
"(let-values(((id70_410)"
"(let-values()"
"(if(let-values(((or-part_411)"
"(if(syntax?$1"
" s_405)"
"(symbol?"
"(syntax-e$1"
" s_405))"
" #f)))"
"(if or-part_411"
" or-part_411"
"(symbol?"
" s_405)))"
" s_405"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_390"
" s_405)))))"
"(cons"
" id70_410"
" id_408)))))"
"(values"
" id_409)))))"
"(if(not"
" #f)"
"(for-loop_402"
" id_407"
" rest_406)"
" id_407)))"
" id_0)))))"
" for-loop_402)"
" null"
" lst_401)))))"
"(reverse$1"
" id_400)))))))))"
"(values"
" all-defined-except68_394"
" id69_395))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_390)))))"
"(values"
" #t"
" all-defined-except66_391"
" id67_392))))))"
"(begin"
"(parse-all-from-module"
" self_0"
" spec_22"
" orig-s_0"
" id67_375"
" #f"
" at-phase_0"
" ns_7"
" rp_0"
" protected?_0)"
"(values"
" null"
"(list"
" spec_22)))))))"
"(if(unsafe-fx<"
" index_37"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_412"
" prefix-all-defined71_413"
" id:prefix72_414)"
"(let-values(((s_428)"
" disarmed-spec_32))"
"(let-values(((orig-s_429)"
" s_428))"
"(let-values(((prefix-all-defined71_430"
" id:prefix72_431)"
"(let-values(((s_432)"
"(if(syntax?$1"
" s_428)"
"(syntax-e$1"
" s_428)"
" s_428)))"
"(if(pair?"
" s_432)"
"(let-values(((prefix-all-defined73_433)"
"(let-values(((s_435)"
"(car"
" s_432)))"
" s_435))"
"((id:prefix74_434)"
"(let-values(((s_436)"
"(cdr"
" s_432)))"
"(let-values(((s_437)"
"(if(syntax?$1"
" s_436)"
"(syntax-e$1"
" s_436)"
" s_436)))"
"(if(pair?"
" s_437)"
"(let-values(((id:prefix75_438)"
"(let-values(((s_439)"
"(car"
" s_437)))"
"(if(let-values(((or-part_440)"
"(if(syntax?$1"
" s_439)"
"(symbol?"
"(syntax-e$1"
" s_439))"
" #f)))"
"(if or-part_440"
" or-part_440"
"(symbol?"
" s_439)))"
" s_439"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_429"
" s_439))))"
"(()"
"(let-values(((s_441)"
"(cdr"
" s_437)))"
"(let-values(((s_442)"
"(if(syntax?$1"
" s_441)"
"(syntax-e$1"
" s_441)"
" s_441)))"
"(if(null?"
" s_442)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_429))))))"
"(values"
" id:prefix75_438))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_429))))))"
"(values"
" prefix-all-defined73_433"
" id:prefix74_434))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_429)))))"
"(values"
" #t"
" prefix-all-defined71_430"
" id:prefix72_431))))))"
"(begin"
"(parse-all-from-module"
" self_0"
" spec_22"
" orig-s_0"
" null"
"(syntax-e$1"
" id:prefix72_414)"
" at-phase_0"
" ns_7"
" rp_0"
" protected?_0)"
"(values"
" null"
"(list"
" spec_22))))))"
"(if(unsafe-fx<"
" index_37"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_34"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_443"
" prefix-all-defined-except76_444"
" id:prefix77_445"
" id78_446)"
"(let-values(((s_463)"
" disarmed-spec_32))"
"(let-values(((orig-s_464)"
" s_463))"
"(let-values(((prefix-all-defined-except76_465"
" id:prefix77_466"
" id78_467)"
"(let-values(((s_468)"
"(if(syntax?$1"
" s_463)"
"(syntax-e$1"
" s_463)"
" s_463)))"
"(if(pair?"
" s_468)"
"(let-values(((prefix-all-defined-except79_469)"
"(let-values(((s_472)"
"(car"
" s_468)))"
" s_472))"
"((id:prefix80_470"
" id81_471)"
"(let-values(((s_473)"
"(cdr"
" s_468)))"
"(let-values(((s_474)"
"(if(syntax?$1"
" s_473)"
"(syntax-e$1"
" s_473)"
" s_473)))"
"(if(pair?"
" s_474)"
"(let-values(((id:prefix82_475)"
"(let-values(((s_477)"
"(car"
" s_474)))"
"(if(let-values(((or-part_478)"
"(if(syntax?$1"
" s_477)"
"(symbol?"
"(syntax-e$1"
" s_477))"
" #f)))"
"(if or-part_478"
" or-part_478"
"(symbol?"
" s_477)))"
" s_477"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_464"
" s_477))))"
"((id83_476)"
"(let-values(((s_479)"
"(cdr"
" s_474)))"
"(let-values(((s_480)"
"(if(syntax?$1"
" s_479)"
"(syntax-e$1"
" s_479)"
" s_479)))"
"(let-values(((flat-s_481)"
"(to-syntax-list.1"
" s_480)))"
"(if(not"
" flat-s_481)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_464))"
"(let-values()"
"(let-values(((id_482)"
"(let-values(((lst_483)"
" flat-s_481))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_483)))"
"((letrec-values(((for-loop_484)"
"(lambda(id_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((s_487)"
"(unsafe-car"
" lst_1))"
"((rest_488)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((id_489)"
"(let-values(((id_490)"
" id_0))"
"(let-values(((id_491)"
"(let-values()"
"(let-values(((id84_492)"
"(let-values()"
"(if(let-values(((or-part_493)"
"(if(syntax?$1"
" s_487)"
"(symbol?"
"(syntax-e$1"
" s_487))"
" #f)))"
"(if or-part_493"
" or-part_493"
"(symbol?"
" s_487)))"
" s_487"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_464"
" s_487)))))"
"(cons"
" id84_492"
" id_490)))))"
"(values"
" id_491)))))"
"(if(not"
" #f)"
"(for-loop_484"
" id_489"
" rest_488)"
" id_489)))"
" id_0)))))"
" for-loop_484)"
" null"
" lst_483)))))"
"(reverse$1"
" id_482)))))))))"
"(values"
" id:prefix82_475"
" id83_476))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_464))))))"
"(values"
" prefix-all-defined-except79_469"
" id:prefix80_470"
" id81_471))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_464)))))"
"(values"
" #t"
" prefix-all-defined-except76_465"
" id:prefix77_466"
" id78_467))))))"
"(begin"
"(parse-all-from-module"
" self_0"
" spec_22"
" orig-s_0"
" id78_446"
"(syntax-e$1"
" id:prefix77_445)"
" at-phase_0"
" ns_7"
" rp_0"
" protected?_0)"
"(values"
" null"
"(list"
" spec_22))))))"
"(let-values()"
"(let-values(((ok?_494"
" expand85_495"
" id86_496"
" datum87_497)"
"(let-values(((s_549)"
" disarmed-spec_32))"
"(let-values(((orig-s_550)"
" s_549))"
"(let-values(((expand85_551"
" id86_552"
" datum87_553)"
"(let-values(((s_554)"
"(if(syntax?$1"
" s_549)"
"(syntax-e$1"
" s_549)"
" s_549)))"
"(if(pair?"
" s_554)"
"(let-values(((expand88_555)"
"(let-values(((s_558)"
"(car"
" s_554)))"
" s_558))"
"((id89_556"
" datum90_557)"
"(let-values(((s_559)"
"(cdr"
" s_554)))"
"(let-values(((s_560)"
"(if(syntax?$1"
" s_559)"
"(syntax-e$1"
" s_559)"
" s_559)))"
"(if(pair?"
" s_560)"
"(let-values(((id91_561"
" datum92_562)"
"(let-values(((s_563)"
"(car"
" s_560)))"
"(let-values(((s_564)"
"(if(syntax?$1"
" s_563)"
"(syntax-e$1"
" s_563)"
" s_563)))"
"(if(pair?"
" s_564)"
"(let-values(((id93_565)"
"(let-values(((s_567)"
"(car"
" s_564)))"
"(if(let-values(((or-part_568)"
"(if(syntax?$1"
" s_567)"
"(symbol?"
"(syntax-e$1"
" s_567))"
" #f)))"
"(if or-part_568"
" or-part_568"
"(symbol?"
" s_567)))"
" s_567"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_550"
" s_567))))"
"((datum94_566)"
"(let-values(((s_569)"
"(cdr"
" s_564)))"
" s_569)))"
"(values"
" id93_565"
" datum94_566))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_550)))))"
"(()"
"(let-values(((s_570)"
"(cdr"
" s_560)))"
"(let-values(((s_571)"
"(if(syntax?$1"
" s_570)"
"(syntax-e$1"
" s_570)"
" s_570)))"
"(if(null?"
" s_571)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_550))))))"
"(values"
" id91_561"
" datum92_562))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_550))))))"
"(values"
" expand88_555"
" id89_556"
" datum90_557))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_550)))))"
"(values"
" #t"
" expand85_551"
" id86_552"
" datum87_553))))))"
"(let-values(((ok?_514"
" expand95_515"
" form96_516)"
"(let-values(((s_572)"
" disarmed-spec_32))"
"(let-values(((orig-s_573)"
" s_572))"
"(let-values(((expand95_574"
" form96_575)"
"(let-values(((s_576)"
"(if(syntax?$1"
" s_572)"
"(syntax-e$1"
" s_572)"
" s_572)))"
"(if(pair?"
" s_576)"
"(let-values(((expand97_577)"
"(let-values(((s_579)"
"(car"
" s_576)))"
" s_579))"
"((form98_578)"
"(let-values(((s_580)"
"(cdr"
" s_576)))"
"(let-values(((s_581)"
"(if(syntax?$1"
" s_580)"
"(syntax-e$1"
" s_580)"
" s_580)))"
"(if(pair?"
" s_581)"
"(let-values(((form99_582)"
"(let-values(((s_583)"
"(car"
" s_581)))"
" s_583))"
"(()"
"(let-values(((s_584)"
"(cdr"
" s_581)))"
"(let-values(((s_585)"
"(if(syntax?$1"
" s_584)"
"(syntax-e$1"
" s_584)"
" s_584)))"
"(if(null?"
" s_585)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_573))))))"
"(values"
" form99_582))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_573))))))"
"(values"
" expand97_577"
" form98_578))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_573)))))"
"(values"
" #t"
" expand95_574"
" form96_575))))))"
"(let-values(((exp-spec_530)"
"(let-values(((temp104_586)"
" form96_516)"
"((temp105_587)"
"(let-values(((v_588)"
" ctx_0))"
"(let-values(((the-struct_589)"
" v_588))"
"(if(expand-context/outer?"
" the-struct_589)"
"(let-values(((def-ctx-scopes106_590)"
" #f)"
"((inner107_591)"
"(let-values(((the-struct_592)"
"(root-expand-context/outer-inner"
" v_588)))"
"(if(expand-context/inner?"
" the-struct_592)"
"(let-values(((stops108_593)"
"(free-id-set"
" at-phase_0"
"(list"
"(core-id"
" 'begin"
" at-phase_0)))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_592)"
"(root-expand-context/inner-module-scopes"
" the-struct_592)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_592)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_592)"
"(root-expand-context/inner-defined-syms"
" the-struct_592)"
"(root-expand-context/inner-counter"
" the-struct_592)"
"(root-expand-context/inner-lift-key"
" the-struct_592)"
"(expand-context/inner-to-parsed?"
" the-struct_592)"
"(expand-context/inner-phase"
" the-struct_592)"
"(expand-context/inner-namespace"
" the-struct_592)"
"(expand-context/inner-just-once?"
" the-struct_592)"
"(expand-context/inner-module-begin-k"
" the-struct_592)"
"(expand-context/inner-allow-unbound?"
" the-struct_592)"
"(expand-context/inner-in-local-expand?"
" the-struct_592)"
"(expand-context/inner-keep-#%expression?"
" the-struct_592)"
" stops108_593"
"(expand-context/inner-declared-submodule-names"
" the-struct_592)"
"(expand-context/inner-lifts"
" the-struct_592)"
"(expand-context/inner-lift-envs"
" the-struct_592)"
"(expand-context/inner-module-lifts"
" the-struct_592)"
"(expand-context/inner-require-lifts"
" the-struct_592)"
"(expand-context/inner-to-module-lifts"
" the-struct_592)"
"(expand-context/inner-requires+provides"
" the-struct_592)"
"(expand-context/inner-observer"
" the-struct_592)"
"(expand-context/inner-for-serializable?"
" the-struct_592)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_592)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                       \"expand-context/inner?\""
" the-struct_592)))))"
"(expand-context/outer1.1"
" inner107_591"
"(root-expand-context/outer-post-expansion"
" the-struct_589)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_589)"
"(root-expand-context/outer-frame-id"
" the-struct_589)"
"(expand-context/outer-context"
" the-struct_589)"
"(expand-context/outer-env"
" the-struct_589)"
"(expand-context/outer-scopes"
" the-struct_589)"
" def-ctx-scopes106_590"
"(expand-context/outer-binding-layer"
" the-struct_589)"
"(expand-context/outer-reference-records"
" the-struct_589)"
"(expand-context/outer-only-immediate?"
" the-struct_589)"
"(expand-context/outer-need-eventually-defined"
" the-struct_589)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_589)"
"(expand-context/outer-current-use-scopes"
" the-struct_589)"
"(expand-context/outer-name"
" the-struct_589)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                     \"expand-context/outer?\""
" the-struct_589))))))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp104_586"
" temp105_587))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_530))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_530)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_530"
" at-phase_0))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                         \"expansion was not a `begin' sequence\""
" orig-s_0"
" spec_22)))"
"(values))))"
"(let-values(((ok?_531"
" begin100_532"
" spec101_533)"
"(let-values(((s_594)"
" exp-spec_530))"
"(let-values(((orig-s_595)"
" s_594))"
"(let-values(((begin100_596"
" spec101_597)"
"(let-values(((s_598)"
"(if(syntax?$1"
" s_594)"
"(syntax-e$1"
" s_594)"
" s_594)))"
"(if(pair?"
" s_598)"
"(let-values(((begin102_599)"
"(let-values(((s_601)"
"(car"
" s_598)))"
" s_601))"
"((spec103_600)"
"(let-values(((s_602)"
"(cdr"
" s_598)))"
"(let-values(((s_603)"
"(if(syntax?$1"
" s_602)"
"(syntax-e$1"
" s_602)"
" s_602)))"
"(let-values(((flat-s_604)"
"(to-syntax-list.1"
" s_603)))"
"(if(not"
" flat-s_604)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_595))"
"(let-values()"
" flat-s_604)))))))"
"(values"
" begin102_599"
" spec103_600))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_595)))))"
"(values"
" #t"
" begin100_596"
" spec101_597))))))"
"(let-values(((track-stxes_547"
" exp-specs_548)"
"(loop_8"
" spec101_533"
" at-phase_0"
" protected?_0"
" layer_0)))"
"(values"
"(list*"
" spec_22"
" exp-spec_530"
" track-stxes_547)"
" exp-specs_548)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_30"
" track-stxes_26)"
"(cons"
" exp-specs2_31"
" exp-specs_27))))))"
"(values"
" track-stxes_28"
" exp-specs_29)))))"
"(if(not #f)"
"(for-loop_18"
" track-stxes_24"
" exp-specs_25"
" rest_23)"
"(values"
" track-stxes_24"
" exp-specs_25))))"
"(values"
" track-stxes_0"
" exp-specs_0))))))"
" for-loop_18)"
" null"
" null"
" lst_17)))))"
"(values(reverse$1 track-stxes_15)(reverse$1 exp-specs_16)))))"
"(values(apply append track-stxess_13)(apply append exp-specss_14)))))))"
" loop_8)"
" specs_0"
" phase_0"
" #f"
" 'raw)))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_0 orig-s_0 sym_0 at-phase_0 ns_0 rp_0 protected?_0)"
"(begin"
"(let-values(((b_612)(resolve+shift/extra-inspector spec_0 at-phase_0 ns_0)))"
"(let-values((()"
"(begin"
"(if b_612"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             \"provided identifier is not defined or required\""
" orig-s_0"
" spec_0)))"
"(values))))"
"(let-values(((as-transformer?_613)(binding-for-transformer? b_612 spec_0 at-phase_0 ns_0)))"
"(let-values(((immed-b_614)"
"(let-values(((spec118_616) spec_0)((at-phase119_617) at-phase_0)((temp120_618) #t))"
"(resolve+shift28.1 #f #f null temp120_618 #f spec118_616 at-phase119_617))))"
"(let-values(((rp109_620) rp_0)"
"((sym110_621) sym_0)"
"((at-phase111_622) at-phase_0)"
"((b112_623) b_612)"
"((immed-b113_624) immed-b_614)"
"((spec114_625) spec_0)"
"((orig-s115_626) orig-s_0)"
"((protected?116_627) protected?_0)"
"((as-transformer?117_628) as-transformer?_613))"
"(add-provide!117.1"
" protected?116_627"
" as-transformer?117_628"
" rp109_620"
" sym110_621"
" at-phase111_622"
" b112_623"
" immed-b113_624"
" spec114_625"
" orig-s115_626)))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_0 orig-s_0 fields_0 at-phase_0 ns_0 rp_0 protected?_0)"
"(begin"
"(let-values(((mk_636)"
"(lambda(fmt_0)"
"(begin"
" 'mk"
"(let-values(((sym_639)(string->symbol(format fmt_0(syntax-e$1 id:struct_0)))))"
"(datum->syntax$1 id:struct_0 sym_639 id:struct_0))))))"
"(let-values(((mk2_637)"
"(lambda(fmt_0 field-id_0)"
"(begin"
" 'mk2"
"(let-values(((sym_642)"
"(string->symbol"
"(format fmt_0(syntax-e$1 id:struct_0)(syntax-e$1 field-id_0)))))"
"(datum->syntax$1 id:struct_0 sym_642 id:struct_0))))))"
"(begin"
"            (let-values (((lst_643) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\")))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_643)))"
"((letrec-values(((for-loop_644)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((fmt_646)(unsafe-car lst_0))((rest_647)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_648)(mk_636 fmt_646)))"
"(parse-identifier!"
" id_648"
" orig-s_0"
"(syntax-e$1 id_648)"
" at-phase_0"
" ns_0"
" rp_0"
" protected?_0)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_644 rest_647)(values))))"
"(values))))))"
" for-loop_644)"
" lst_643)))"
"(void)"
"(let-values(((lst_649) fields_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_649)))"
"((letrec-values(((for-loop_650)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((field_652)(unsafe-car lst_0))((rest_653)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_654)"
"(mk2_637"
"                                                                                             \"~a-~a\""
" field_652)))"
"(let-values(((set-id_655)"
"(mk2_637"
"                                                                                               \"set-~a-~a!\""
" field_652)))"
"(begin"
"(parse-identifier!"
" get-id_654"
" orig-s_0"
"(syntax-e$1 get-id_654)"
" at-phase_0"
" ns_0"
" rp_0"
" protected?_0)"
"(parse-identifier!"
" set-id_655"
" orig-s_0"
"(syntax-e$1 set-id_655)"
" at-phase_0"
" ns_0"
" rp_0"
" protected?_0)))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_650 rest_653)(values))))"
"(values))))))"
" for-loop_650)"
" lst_649)))"
"(void)))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_0 orig-s_0 self_0 except-ids_0 at-phase_0 ns_0 rp_0 protected?_0 ctx_0)"
"(begin"
"(let-values(((mod-path_665)(syntax->datum$1 mod-path-stx_0)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_665)"
"(void)"
"(let-values()"
"                            (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_0 mod-path-stx_0)))"
"(values))))"
"(let-values(((mpi_666)(module-path->mpi/context mod-path_665 ctx_0)))"
"(parse-all-from-module mpi_666 #f orig-s_0 except-ids_0 #f at-phase_0 ns_0 rp_0 protected?_0)))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_0 matching-stx_0 orig-s_0 except-ids_0 prefix-sym_0 at-phase_0 ns_0 rp_0 protected?_0)"
"(begin"
"(let-values(((requireds_676)(extract-module-requires rp_0 mpi_0 at-phase_0)))"
"(let-values(((phase-desc_677)"
"(lambda()"
"(begin"
" 'phase-desc"
"(if(zero-phase? at-phase_0)"
"                            (let-values () \"\")"
"(if(label-phase? at-phase_0)"
"                              (let-values () \" for-label\")"
"                              (let-values () (format \" for phase ~a\" at-phase_0))))))))"
"(let-values((()"
"(begin"
"(if requireds_676"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                               (format \"cannot provide from a module without a matching require~a\" (phase-desc_677))"
" orig-s_0"
" matching-stx_0)))"
"(values))))"
"(let-values(((add-prefix_678)"
"(lambda(sym_0)"
"(begin"
" 'add-prefix"
"                              (if prefix-sym_0 (string->symbol (format \"~a~a\" prefix-sym_0 sym_0)) sym_0)))))"
"(let-values(((found_679)(make-hasheq)))"
"(begin"
"(let-values(((lst_681) requireds_676))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_681)))"
"((letrec-values(((for-loop_682)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((i_684)(unsafe-car lst_0))((rest_685)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_686)"
"(required-id i_684)))"
"(let-values(((phase_687)"
"(required-phase"
" i_684)))"
"(if(let-values(((or-part_688)"
"(if matching-stx_0"
"(not"
"(if(eqv?"
" phase_687"
" at-phase_0)"
"(free-identifier=?$1"
" id_686"
"(datum->syntax$1"
" matching-stx_0"
"(syntax-e$1"
" id_686))"
" phase_687"
" phase_687)"
" #f))"
" #f)))"
"(if or-part_688"
" or-part_688"
"(let-values(((lst_689)"
" except-ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_689)))"
"((letrec-values(((for-loop_690)"
"(lambda(result_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((except-id_693)"
"(unsafe-car"
" lst_1))"
"((rest_694)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((result_695)"
"(let-values()"
"(let-values(((result_697)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_686"
" except-id_693"
" phase_687"
" phase_687)"
"(hash-set!"
" found_679"
" except-id_693"
" #t)"
" #f)))))"
"(values"
" result_697)))))"
"(if(if(not"
"((lambda x_0"
" result_695)"
" except-id_693))"
"(not"
" #f)"
" #f)"
"(for-loop_690"
" result_695"
" rest_694)"
" result_695)))"
" result_0)))))"
" for-loop_690)"
" #f"
" lst_689)))))"
"(void)"
"(let-values()"
"(let-values(((b_699)"
"(resolve+shift/extra-inspector"
" id_686"
" phase_687"
" ns_0)))"
"(let-values(((immed-b_700)"
"(let-values(((id130_702)"
" id_686)"
"((phase131_703)"
" phase_687)"
"((temp132_704)"
" #t))"
"(resolve+shift28.1"
" #f"
" #f"
" null"
" temp132_704"
" #f"
" id130_702"
" phase131_703))))"
"(let-values(((rp121_706)"
" rp_0)"
"((temp122_707)"
"(add-prefix_678"
"(syntax-e$1"
" id_686)))"
"((phase123_708)"
" phase_687)"
"((b124_709)"
" b_699)"
"((immed-b125_710)"
" immed-b_700)"
"((id126_711)"
" id_686)"
"((orig-s127_712)"
" orig-s_0)"
"((protected?128_713)"
" protected?_0)"
"((temp129_714)"
"(required-as-transformer?"
" i_684)))"
"(add-provide!117.1"
" protected?128_713"
" temp129_714"
" rp121_706"
" temp122_707"
" phase123_708"
" b124_709"
" immed-b125_710"
" id126_711"
" orig-s127_712)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_682 rest_685)(values))))"
"(values))))))"
" for-loop_682)"
" lst_681)))"
"(void)"
"(if(=(hash-count found_679)(length except-ids_0))"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_715) except-ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_715)))"
"((letrec-values(((for-loop_716)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((except-id_718)(unsafe-car lst_0))"
"((rest_719)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_720)"
"(hash-ref"
" found_679"
" except-id_718"
" #f)))"
"(if or-part_720"
" or-part_720"
"(let-values(((lst_721)"
" requireds_676))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_721)))"
"((letrec-values(((for-loop_722)"
"(lambda(result_0"
" lst_1)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_1)"
"(let-values(((i_725)"
"(unsafe-car"
" lst_1))"
"((rest_726)"
"(unsafe-cdr"
" lst_1)))"
"(let-values(((result_727)"
"(let-values()"
"(let-values(((result_729)"
"(let-values()"
"(let-values()"
"(let-values(((id_730)"
"(required-id"
" i_725)))"
"(let-values(((phase_731)"
"(required-phase"
" i_725)))"
"(free-identifier=?$1"
" id_730"
" except-id_718"
" phase_731"
" phase_731)))))))"
"(values"
" result_729)))))"
"(if(if(not"
"((lambda x_0"
" result_727)"
" i_725))"
"(not"
" #f)"
" #f)"
"(for-loop_722"
" result_727"
" rest_726)"
" result_727)))"
" result_0)))))"
" for-loop_722)"
" #f"
" lst_721)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_0"
"                                                                                                  \"excluded identifier was not defined or required in the module~a\""
"                                                                                                  \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_677))"
" orig-s_0"
" except-id_718))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_716 rest_719)(values))))"
"(values))))))"
" for-loop_716)"
" lst_715)))"
"(void)))))))))))))"
"(define-values"
"(check-cross-phase-persistent-form)"
"(lambda(bodys_0 self-mpi_0)"
"(begin"
"(letrec-values(((check-body_3)"
"(lambda(bodys_1)"
"(begin"
" 'check-body"
"(begin"
"(let-values(((lst_8) bodys_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_8)))"
"((letrec-values(((for-loop_9)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((body_11)(unsafe-car lst_0))"
"((rest_12)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_13)"
"(if(expanded+parsed?"
" body_11)"
"(expanded+parsed-parsed"
" body_11)"
" body_11)))"
"(if(parsed-define-values?"
" p_13)"
"(let-values()"
"(check-expr_4"
"(parsed-define-values-rhs"
" p_13)"
"(length"
"(parsed-define-values-syms"
" p_13))"
" p_13))"
"(if(let-values(((or-part_14)"
"(parsed-#%declare?"
" p_13)))"
"(if or-part_14"
" or-part_14"
"(let-values(((or-part_15)"
"(parsed-module?"
" p_13)))"
"(if or-part_15"
" or-part_15"
"(syntax?$1"
" p_13)))))"
"(let-values()"
"(void))"
"(let-values()"
"(disallow"
" p_13))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_9 rest_12)(values))))"
"(values))))))"
" for-loop_9)"
" lst_8)))"
"(void)))))"
"((check-expr_4)"
"(lambda(e_0 num-results_0 enclosing_0)"
"(begin"
" 'check-expr"
"(if(parsed-lambda? e_0)"
"(let-values()"
"(begin(check-count 1 num-results_0 enclosing_0)(check-no-disallowed-expr_5 e_0)))"
"(if(parsed-case-lambda? e_0)"
"(let-values()"
"(begin(check-count 1 num-results_0 enclosing_0)(check-no-disallowed-expr_5 e_0)))"
"(if(parsed-quote? e_0)"
"(let-values()"
"(begin"
"(check-datum(parsed-quote-datum e_0) e_0)"
"(check-count 1 num-results_0 enclosing_0)))"
"(if(parsed-app? e_0)"
"(let-values()"
"(let-values(((rands_19)(parsed-app-rands e_0)))"
"(begin"
"(let-values(((lst_20) rands_19))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_20)))"
"((letrec-values(((for-loop_21)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((rand_23)(unsafe-car lst_0))"
"((rest_24)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr_4"
" rand_23"
" 1"
" e_0))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_21 rest_24)(values))))"
"(values))))))"
" for-loop_21)"
" lst_20)))"
"(void)"
"(let-values(((tmp_25)(cross-phase-primitive-name(parsed-app-rator e_0))))"
"(if(if(equal? tmp_25 'cons) #t(equal? tmp_25 'list))"
"(let-values()(check-count 1 num-results_0 enclosing_0))"
"(if(equal? tmp_25 'make-struct-type)"
"(let-values()(check-count 5 num-results_0 enclosing_0))"
"(if(equal? tmp_25 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_0 enclosing_0))"
"(if(equal? tmp_25 'gensym)"
"(let-values()"
"(if(let-values(((or-part_26)(= 0(length rands_19))))"
"(if or-part_26"
" or-part_26"
"(if(= 1(length rands_19))"
"(quoted-string?(car rands_19))"
" #f)))"
"(void)"
"(let-values()(disallow e_0))))"
"(if(equal? tmp_25 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_19))"
"(quoted-string?(car rands_19))"
" #f)"
"(void)"
"(let-values()(disallow e_0))))"
"(let-values()(disallow e_0)))))))))))"
"(let-values()(check-no-disallowed-expr_5 e_0)))))))))"
"((check-no-disallowed-expr_5)"
"(lambda(e_0)"
"(begin"
" 'check-no-disallowed-expr"
"(if(parsed-lambda? e_0)"
"(let-values()(check-body-no-disallowed-expr_6(parsed-lambda-body e_0)))"
"(if(parsed-case-lambda? e_0)"
"(let-values()"
"(begin"
"(let-values(((lst_28)(parsed-case-lambda-clauses e_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_28)))"
"((letrec-values(((for-loop_29)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((clause_31)(unsafe-car lst_0))"
"((rest_32)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-body-no-disallowed-expr_6"
"(cadr clause_31)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_29 rest_32)(values))))"
"(values))))))"
" for-loop_29)"
" lst_28)))"
"(void)))"
"(if(parsed-app? e_0)"
"(let-values()"
"(begin"
"(check-no-disallowed-expr_5(parsed-app-rator e_0))"
"(let-values(((lst_33)(parsed-app-rands e_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_33)))"
"((letrec-values(((for-loop_34)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_36)(unsafe-car lst_0))"
"((rest_37)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-no-disallowed-expr_5"
" e_36))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_34 rest_37)(values))))"
"(values))))))"
" for-loop_34)"
" lst_33)))"
"(void)))"
"(if(parsed-if? e_0)"
"(let-values()"
"(begin"
"(check-no-disallowed-expr_5(parsed-if-tst e_0))"
"(check-no-disallowed-expr_5(parsed-if-thn e_0))"
"(check-no-disallowed-expr_5(parsed-if-els e_0))))"
"(if(parsed-set!? e_0)"
"(let-values()"
"(let-values(((id_38)(parsed-set!-id e_0)))"
"(let-values(((normal-b_39)(parsed-id-binding id_38)))"
"(begin"
"(if(let-values(((or-part_40)(not normal-b_39)))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(parsed-top-id? id_38)))"
"(if or-part_41"
" or-part_41"
"(if(not(symbol? normal-b_39))"
"(eq?(module-binding-module normal-b_39) self-mpi_0)"
" #f)))))"
"(let-values()(disallow e_0))"
"(void))"
"(check-no-disallowed-expr_5(parsed-set!-rhs e_0))))))"
"(if(parsed-with-continuation-mark? e_0)"
"(let-values()"
"(begin"
"(check-no-disallowed-expr_5(parsed-with-continuation-mark-key e_0))"
"(check-no-disallowed-expr_5(parsed-with-continuation-mark-val e_0))"
"(check-no-disallowed-expr_5(parsed-with-continuation-mark-body e_0))))"
"(if(parsed-begin? e_0)"
"(let-values()(check-body-no-disallowed-expr_6(parsed-begin-body e_0)))"
"(if(parsed-begin0? e_0)"
"(let-values()(check-body-no-disallowed-expr_6(parsed-begin0-body e_0)))"
"(if(parsed-let_-values? e_0)"
"(let-values()"
"(begin"
"(let-values(((lst_42)(parsed-let_-values-clauses e_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_42)))"
"((letrec-values(((for-loop_43)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((clause_45)"
"(unsafe-car lst_0))"
"((rest_46)"
"(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-no-disallowed-expr_5"
"(cadr"
" clause_45)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_43 rest_46)"
"(values))))"
"(values))))))"
" for-loop_43)"
" lst_42)))"
"(void)"
"(check-body-no-disallowed-expr_6(parsed-let_-values-body e_0))))"
"(if(let-values(((or-part_47)(parsed-quote-syntax? e_0)))"
"(if or-part_47 or-part_47(parsed-#%variable-reference? e_0)))"
"(let-values()(disallow e_0))"
"(let-values()(void)))))))))))))))"
"((check-body-no-disallowed-expr_6)"
"(lambda(l_0)"
"(begin"
" 'check-body-no-disallowed-expr"
"(begin"
"(let-values(((lst_49) l_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((e_52)(unsafe-car lst_0))"
"((rest_53)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-no-disallowed-expr_5"
" e_52))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_50 rest_53)(values))))"
"(values))))))"
" for-loop_50)"
" lst_49)))"
"(void))))))"
"(check-body_3 bodys_0)))))"
"(define-values"
"(check-count)"
"(lambda(is-num_0 expected-num_0 enclosing_0)"
"(begin(if(= is-num_0 expected-num_0)(void)(let-values()(disallow enclosing_0))))))"
"(define-values"
"(check-datum)"
"(lambda(d_0 e_0)"
"(begin"
"(if(let-values(((or-part_59)(number? d_0)))"
"(if or-part_59"
" or-part_59"
"(let-values(((or-part_60)(boolean? d_0)))"
"(if or-part_60"
" or-part_60"
"(let-values(((or-part_61)(symbol? d_0)))"
"(if or-part_61"
" or-part_61"
"(let-values(((or-part_62)(string? d_0)))"
"(if or-part_62"
" or-part_62"
"(let-values(((or-part_63)(bytes? d_0)))(if or-part_63 or-part_63(null? d_0)))))))))))"
"(let-values()(void))"
"(let-values()(disallow e_0))))))"
"(define-values(quoted-string?)(lambda(e_0)(begin(if(parsed-quote? e_0)(string?(parsed-quote-datum e_0)) #f))))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_0)"
"(begin"
"(if(parsed-id? id_0)"
"(let-values()"
"(let-values(((b_66)(parsed-id-binding id_0)))"
"(if(module-binding? b_66)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_66)))"
"(module-binding-sym b_66)"
" #f)"
" #f)))"
"(let-values() #f)))))"
"(define-values"
"(disallow)"
"(lambda(body_0)"
"(begin"
"(raise-syntax-error$1"
" 'module"
"       \"not allowed in a cross-phase persistent module\""
"(if(parsed? body_0)(datum->syntax$1 #f body_0(parsed-s body_0)) body_0)))))"
"(void"
"(add-core-form!*"
" 'module"
"(lambda(s_0 ctx_0)"
"(begin"
"(if(eq?(expand-context-context ctx_0) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_53)(expand-context-observer ctx_0)))"
"(if obs_53(let-values()(let-values()(call-expand-observe obs_53 'prim-module)))(void)))"
"             (raise-syntax-error$1 #f \"allowed only at the top level\" s_0))))"
"(let-values()"
"(let-values(((s219_54) s_0)((ctx220_55) ctx_0)((temp221_56) #f))"
"(expand-module16.1 #f #f #f #f unsafe-undefined #f s219_54 ctx220_55 temp221_56)))))))"
"(void"
"(add-core-form!*"
" 'module*"
"(lambda(s_0 ctx_0)"
"(begin"
"(let-values(((obs_59)(expand-context-observer ctx_0)))"
"(if obs_59(let-values()(let-values()(call-expand-observe obs_59 'prim-module)))(void)))"
"       (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_0)))))"
"(void"
"(add-core-form!*"
" '#%module-begin"
"(lambda(s_0 ctx_0)"
"(begin"
"(let-values(((obs_62)(expand-context-observer ctx_0)))"
"(if obs_62(let-values()(let-values()(call-expand-observe obs_62 'prim-module-begin)))(void)))"
"(if(eq?(expand-context-context ctx_0) 'module-begin)"
"(void)"
"         (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_0)))"
"(if(expand-context-module-begin-k ctx_0)"
"(void)"
"         (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_0)))"
"((expand-context-module-begin-k ctx_0)"
" s_0"
"(let-values(((v_63) ctx_0))"
"(let-values(((the-struct_64) v_63))"
"(if(expand-context/outer? the-struct_64)"
"(let-values(((inner222_65)"
"(let-values(((the-struct_66)(root-expand-context/outer-inner v_63)))"
"(if(expand-context/inner? the-struct_66)"
"(let-values(((module-begin-k223_67) #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_66)"
"(root-expand-context/inner-module-scopes the-struct_66)"
"(root-expand-context/inner-top-level-bind-scope the-struct_66)"
"(root-expand-context/inner-all-scopes-stx the-struct_66)"
"(root-expand-context/inner-defined-syms the-struct_66)"
"(root-expand-context/inner-counter the-struct_66)"
"(root-expand-context/inner-lift-key the-struct_66)"
"(expand-context/inner-to-parsed? the-struct_66)"
"(expand-context/inner-phase the-struct_66)"
"(expand-context/inner-namespace the-struct_66)"
"(expand-context/inner-just-once? the-struct_66)"
" module-begin-k223_67"
"(expand-context/inner-allow-unbound? the-struct_66)"
"(expand-context/inner-in-local-expand? the-struct_66)"
"(expand-context/inner-keep-#%expression? the-struct_66)"
"(expand-context/inner-stops the-struct_66)"
"(expand-context/inner-declared-submodule-names the-struct_66)"
"(expand-context/inner-lifts the-struct_66)"
"(expand-context/inner-lift-envs the-struct_66)"
"(expand-context/inner-module-lifts the-struct_66)"
"(expand-context/inner-require-lifts the-struct_66)"
"(expand-context/inner-to-module-lifts the-struct_66)"
"(expand-context/inner-requires+provides the-struct_66)"
"(expand-context/inner-observer the-struct_66)"
"(expand-context/inner-for-serializable? the-struct_66)"
"(expand-context/inner-should-not-encounter-macros? the-struct_66)))"
"                                (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_66)))))"
"(expand-context/outer1.1"
" inner222_65"
"(root-expand-context/outer-post-expansion the-struct_64)"
"(root-expand-context/outer-use-site-scopes the-struct_64)"
"(root-expand-context/outer-frame-id the-struct_64)"
"(expand-context/outer-context the-struct_64)"
"(expand-context/outer-env the-struct_64)"
"(expand-context/outer-scopes the-struct_64)"
"(expand-context/outer-def-ctx-scopes the-struct_64)"
"(expand-context/outer-binding-layer the-struct_64)"
"(expand-context/outer-reference-records the-struct_64)"
"(expand-context/outer-only-immediate? the-struct_64)"
"(expand-context/outer-need-eventually-defined the-struct_64)"
"(expand-context/outer-current-introduction-scopes the-struct_64)"
"(expand-context/outer-current-use-scopes the-struct_64)"
"(expand-context/outer-name the-struct_64)))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_64)))))))))"
"(void"
"(add-core-form!*"
" '#%declare"
"(lambda(s_0 ctx_0)"
"(begin"
"(let-values(((obs_70)(expand-context-observer ctx_0)))"
"(if obs_70(let-values()(let-values()(call-expand-observe obs_70 'prim-declare)))(void)))"
"       (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_0)))))"
"(define-values"
"(expand-module16.1)"
"(lambda(always-produce-compiled?1_0"
" enclosing-is-cross-phase-persistent?3_0"
" enclosing-requires+provides4_0"
" keep-enclosing-scope-at-phase2_0"
" modules-being-compiled6_0"
" mpis-for-enclosing-reset5_0"
" s13_0"
" init-ctx14_0"
" enclosing-self15_0)"
"(begin"
" 'expand-module16"
"(let-values(((s_80) s13_0))"
"(let-values(((init-ctx_81) init-ctx14_0))"
"(let-values(((enclosing-self_82) enclosing-self15_0))"
"(let-values(((always-produce-compiled?_83) always-produce-compiled?1_0))"
"(let-values(((keep-enclosing-scope-at-phase_84) keep-enclosing-scope-at-phase2_0))"
"(let-values(((enclosing-is-cross-phase-persistent?_85) enclosing-is-cross-phase-persistent?3_0))"
"(let-values(((enclosing-r+p_86) enclosing-requires+provides4_0))"
"(let-values(((mpis-for-enclosing-reset_87) mpis-for-enclosing-reset5_0))"
"(let-values(((modules-being-compiled_88)"
"(if(eq? modules-being-compiled6_0 unsafe-undefined)"
"(make-hasheq)"
" modules-being-compiled6_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_160)(expand-context-observer init-ctx_81)))"
"(if obs_160"
"(let-values()(let-values()(call-expand-observe obs_160 'prim-module)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_89)(syntax-disarm$1 s_80)))"
"(let-values(((ok?_90 module224_91 id:module-name225_92 initial-require226_93 body227_94)"
"(let-values(((s_161) disarmed-s_89))"
"(let-values(((orig-s_162) s_161))"
"(let-values(((module224_163"
" id:module-name225_164"
" initial-require226_165"
" body227_166)"
"(let-values(((s_167)"
"(if(syntax?$1 s_161)"
"(syntax-e$1 s_161)"
" s_161)))"
"(if(pair? s_167)"
"(let-values(((module228_168)"
"(let-values(((s_172)(car s_167)))"
" s_172))"
"((id:module-name229_169"
" initial-require230_170"
" body231_171)"
"(let-values(((s_173)(cdr s_167)))"
"(let-values(((s_174)"
"(if(syntax?$1 s_173)"
"(syntax-e$1 s_173)"
" s_173)))"
"(if(pair? s_174)"
"(let-values(((id:module-name232_175)"
"(let-values(((s_178)"
"(car"
" s_174)))"
"(if(let-values(((or-part_179)"
"(if(syntax?$1"
" s_178)"
"(symbol?"
"(syntax-e$1"
" s_178))"
" #f)))"
"(if or-part_179"
" or-part_179"
"(symbol?"
" s_178)))"
" s_178"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"not an identifier\""
" orig-s_162"
" s_178))))"
"((initial-require233_176"
" body234_177)"
"(let-values(((s_180)"
"(cdr"
" s_174)))"
"(let-values(((s_181)"
"(if(syntax?$1"
" s_180)"
"(syntax-e$1"
" s_180)"
" s_180)))"
"(if(pair?"
" s_181)"
"(let-values(((initial-require235_182)"
"(let-values(((s_184)"
"(car"
" s_181)))"
" s_184))"
"((body236_183)"
"(let-values(((s_185)"
"(cdr"
" s_181)))"
"(let-values(((s_186)"
"(if(syntax?$1"
" s_185)"
"(syntax-e$1"
" s_185)"
" s_185)))"
"(let-values(((flat-s_187)"
"(to-syntax-list.1"
" s_186)))"
"(if(not"
" flat-s_187)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_162))"
"(let-values()"
" flat-s_187)))))))"
"(values"
" initial-require235_182"
" body236_183))"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_162))))))"
"(values"
" id:module-name232_175"
" initial-require233_176"
" body234_177))"
"(raise-syntax-error$1"
" #f"
"                                                                                       \"bad syntax\""
" orig-s_162))))))"
"(values"
" module228_168"
" id:module-name229_169"
" initial-require230_170"
" body231_171))"
"                                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_162)))))"
"(values"
" #t"
" module224_163"
" id:module-name225_164"
" initial-require226_165"
" body227_166))))))"
"(let-values(((rebuild-s_114)"
"(let-values(((init-ctx249_189) init-ctx_81)"
"((s250_190) s_80)"
"((temp251_191) #t)"
"((temp252_192) #t))"
"(keep-as-needed119.1"
" #f"
" temp252_192"
" temp251_191"
" init-ctx249_189"
" s250_190))))"
"(let-values(((initial-require_115)(syntax->datum$1 initial-require226_93)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_193) keep-enclosing-scope-at-phase_84))"
"(if or-part_193"
" or-part_193"
"(1/module-path? initial-require_115)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                         \"not a module path\""
" s_80"
" initial-require226_93)))"
"(values))))"
"(let-values(((phase_116) 0))"
"(let-values(((module-name-sym_117)(syntax-e$1 id:module-name225_92)))"
"(let-values(((outside-scope_118)(new-scope 'module)))"
"(let-values(((inside-scope_119)(new-multi-scope module-name-sym_117)))"
"(let-values(((self_120)"
"(make-self-module-path-index"
"(if enclosing-self_82"
" module-name-sym_117"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_117)))"
" enclosing-self_82)))"
"(let-values(((enclosing-mod_121)"
"(if enclosing-self_82"
"                                                                (1/module-path-index-join '(submod \"..\") self_120)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_121"
" mpis-for-enclosing-reset_87"
" #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_87"
"(cons"
" enclosing-mod_121"
"(unbox mpis-for-enclosing-reset_87))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_122)"
"(make-apply-module-scopes"
" outside-scope_118"
" inside-scope_119"
" init-ctx_81"
" keep-enclosing-scope-at-phase_84"
" self_120"
" enclosing-self_82"
" enclosing-mod_121)))"
"(let-values(((initial-require-s_123)"
"(apply-module-scopes_122 initial-require226_93)))"
"(let-values(((all-scopes-s_124) initial-require-s_123))"
"(let-values(((root-ctx_125)"
"(let-values(((self253_195) self_120)"
"((temp254_196)"
"(if keep-enclosing-scope-at-phase_84"
"(root-expand-context-module-scopes"
" init-ctx_81)"
" null))"
"((outside-scope255_197)"
" outside-scope_118)"
"((inside-scope256_198)"
" inside-scope_119)"
"((all-scopes-s257_199)"
" all-scopes-s_124))"
"(make-root-expand-context13.1"
" all-scopes-s257_199"
" temp254_196"
" outside-scope255_197"
" inside-scope256_198"
" self253_195))))"
"(let-values(((new-module-scopes_126)"
"(root-expand-context-module-scopes"
" root-ctx_125)))"
"(let-values(((frame-id_127)"
"(root-expand-context-frame-id"
" root-ctx_125)))"
"(let-values(((make-m-ns240_129)"
"(lambda(for-submodule?237_0 ns239_0)"
"(begin"
" 'make-m-ns240"
"(let-values(((ns_202) ns239_0))"
"(let-values(((for-submodule?_203)"
"(if(eq?"
" for-submodule?237_0"
" unsafe-undefined)"
"(if enclosing-self_82"
" #t"
" #f)"
" for-submodule?237_0)))"
"(let-values()"
"(let-values(((ns258_205)"
" ns_202)"
"((self259_206)"
" self_120)"
"((root-ctx260_207)"
" root-ctx_125)"
"((for-submodule?261_208)"
" for-submodule?_203))"
"(make-module-namespace50.1"
" for-submodule?261_208"
" self259_206"
" root-ctx260_207"
" ns258_205)))))))))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_132)"
"(let-values(((temp262_223)"
"(expand-context-namespace"
" init-ctx_81)))"
"(make-m-ns240_129"
" unsafe-undefined"
" temp262_223))))"
"(let-values(((ctx_133)"
"(let-values(((v_224)"
"(copy-root-expand-context"
" init-ctx_81"
" root-ctx_125)))"
"(let-values(((the-struct_225)"
" v_224))"
"(if(expand-context/outer?"
" the-struct_225)"
"(let-values(((post-expansion263_226)"
"(lambda(s_0)"
"(begin"
" 'post-expansion263"
"(add-scope"
" s_0"
" inside-scope_119))))"
"((inner264_227)"
"(let-values(((the-struct_229)"
"(root-expand-context/outer-inner"
" v_224)))"
"(if(expand-context/inner?"
" the-struct_229)"
"(let-values(((allow-unbound?265_230)"
" #f)"
"((namespace266_231)"
" m-ns_132)"
"((phase267_232)"
" phase_116)"
"((just-once?268_233)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_229)"
"(root-expand-context/inner-module-scopes"
" the-struct_229)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_229)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_229)"
"(root-expand-context/inner-defined-syms"
" the-struct_229)"
"(root-expand-context/inner-counter"
" the-struct_229)"
"(root-expand-context/inner-lift-key"
" the-struct_229)"
"(expand-context/inner-to-parsed?"
" the-struct_229)"
" phase267_232"
" namespace266_231"
" just-once?268_233"
"(expand-context/inner-module-begin-k"
" the-struct_229)"
" allow-unbound?265_230"
"(expand-context/inner-in-local-expand?"
" the-struct_229)"
"(expand-context/inner-keep-#%expression?"
" the-struct_229)"
"(expand-context/inner-stops"
" the-struct_229)"
"(expand-context/inner-declared-submodule-names"
" the-struct_229)"
"(expand-context/inner-lifts"
" the-struct_229)"
"(expand-context/inner-lift-envs"
" the-struct_229)"
"(expand-context/inner-module-lifts"
" the-struct_229)"
"(expand-context/inner-require-lifts"
" the-struct_229)"
"(expand-context/inner-to-module-lifts"
" the-struct_229)"
"(expand-context/inner-requires+provides"
" the-struct_229)"
"(expand-context/inner-observer"
" the-struct_229)"
"(expand-context/inner-for-serializable?"
" the-struct_229)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_229)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                               \"expand-context/inner?\""
" the-struct_229)))))"
"(expand-context/outer1.1"
" inner264_227"
" post-expansion263_226"
"(root-expand-context/outer-use-site-scopes"
" the-struct_225)"
"(root-expand-context/outer-frame-id"
" the-struct_225)"
"(expand-context/outer-context"
" the-struct_225)"
"(expand-context/outer-env"
" the-struct_225)"
"(expand-context/outer-scopes"
" the-struct_225)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_225)"
"(expand-context/outer-binding-layer"
" the-struct_225)"
"(expand-context/outer-reference-records"
" the-struct_225)"
"(expand-context/outer-only-immediate?"
" the-struct_225)"
"(expand-context/outer-need-eventually-defined"
" the-struct_225)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_225)"
"(expand-context/outer-current-use-scopes"
" the-struct_225)"
"(expand-context/outer-name"
" the-struct_225)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                             \"expand-context/outer?\""
" the-struct_225))))))"
"(let-values(((bodys_134)"
"(let-values(((scoped-s_234)"
"(apply-module-scopes_122"
" disarmed-s_89)))"
"(let-values(((ok?_235"
" _269_236"
" _270_237"
" _271_238"
" body272_239)"
"(let-values(((s_259)"
" scoped-s_234))"
"(let-values(((orig-s_260)"
" s_259))"
"(let-values(((_269_261"
" _270_262"
" _271_263"
" body272_264)"
"(let-values(((s_265)"
"(if(syntax?$1"
" s_259)"
"(syntax-e$1"
" s_259)"
" s_259)))"
"(if(pair?"
" s_265)"
"(let-values(((_273_266)"
"(let-values(((s_270)"
"(car"
" s_265)))"
" s_270))"
"((_274_267"
" _275_268"
" body276_269)"
"(let-values(((s_271)"
"(cdr"
" s_265)))"
"(let-values(((s_272)"
"(if(syntax?$1"
" s_271)"
"(syntax-e$1"
" s_271)"
" s_271)))"
"(if(pair?"
" s_272)"
"(let-values(((_277_273)"
"(let-values(((s_276)"
"(car"
" s_272)))"
" s_276))"
"((_278_274"
" body279_275)"
"(let-values(((s_277)"
"(cdr"
" s_272)))"
"(let-values(((s_278)"
"(if(syntax?$1"
" s_277)"
"(syntax-e$1"
" s_277)"
" s_277)))"
"(if(pair?"
" s_278)"
"(let-values(((_280_279)"
"(let-values(((s_281)"
"(car"
" s_278)))"
" s_281))"
"((body281_280)"
"(let-values(((s_282)"
"(cdr"
" s_278)))"
"(let-values(((s_283)"
"(if(syntax?$1"
" s_282)"
"(syntax-e$1"
" s_282)"
" s_282)))"
"(let-values(((flat-s_284)"
"(to-syntax-list.1"
" s_283)))"
"(if(not"
" flat-s_284)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_260))"
"(let-values()"
" flat-s_284)))))))"
"(values"
" _280_279"
" body281_280))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_260))))))"
"(values"
" _277_273"
" _278_274"
" body279_275))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_260))))))"
"(values"
" _273_266"
" _274_267"
" _275_268"
" body276_269))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_260)))))"
"(values"
" #t"
" _269_261"
" _270_262"
" _271_263"
" body272_264))))))"
" body272_239))))"
"(let-values(((requires+provides_135)"
"(let-values(((self282_285)"
" self_120))"
"(make-requires+provides8.1"
" #f"
" self282_285))))"
"(let-values(((defined-syms_136)"
"(root-expand-context-defined-syms"
" root-ctx_125)))"
"(let-values(((compiled-submodules_137)"
"(make-hasheq)))"
"(let-values(((compiled-module-box_138)"
"(box #f)))"
"(let-values(((mpis-to-reset_139)"
"(box null)))"
"(let-values(((initial-require!245_146)"
"(lambda(bind?243_0)"
"(begin"
" 'initial-require!245"
"(let-values(((bind?_287)"
" bind?243_0))"
"(let-values()"
"(if(not"
" keep-enclosing-scope-at-phase_84)"
"(let-values()"
"(let-values(((initial-require283_289)"
" initial-require_115)"
"((self284_290)"
" self_120)"
"((all-scopes-s285_291)"
" all-scopes-s_124)"
"((m-ns286_292)"
" m-ns_132)"
"((requires+provides287_293)"
" requires+provides_135)"
"((bind?288_294)"
" bind?_287)"
"((temp289_295)"
" 'module))"
"(perform-initial-require!42.1"
" bind?288_294"
" temp289_295"
" initial-require283_289"
" self284_290"
" all-scopes-s285_291"
" m-ns286_292"
" requires+provides287_293)))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_135"
" enclosing-mod_121"
" keep-enclosing-scope-at-phase_84"
" enclosing-is-cross-phase-persistent?_85)"
"(let-values(((requires+provides290_297)"
" requires+provides_135)"
"((enclosing-r+p291_298)"
" enclosing-r+p_86)"
"((enclosing-mod292_299)"
" enclosing-mod_121)"
"((keep-enclosing-scope-at-phase293_300)"
" keep-enclosing-scope-at-phase_84))"
"(add-enclosing-module-defined-and-required!67.1"
" enclosing-r+p291_298"
" requires+provides290_297"
" enclosing-mod292_299"
" keep-enclosing-scope-at-phase293_300))"
"(let-values(((m-ns294_301)"
" m-ns_132)"
"((enclosing-mod295_302)"
" enclosing-mod_121)"
"((keep-enclosing-scope-at-phase296_303)"
" keep-enclosing-scope-at-phase_84))"
"(namespace-module-visit!104.1"
" unsafe-undefined"
" m-ns294_301"
" enclosing-mod295_302"
" keep-enclosing-scope-at-phase296_303)))))))))))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_312)"
"(expand-context-observer"
" init-ctx_81)))"
"(if obs_312"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_312"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((temp248_314)"
" #t))"
"(initial-require!245_146"
" temp248_314))"
"(values))))"
"(let-values(((again?_149)"
" #f))"
"(letrec-values(((module-begin-k_150)"
"(lambda(mb-s_0"
" mb-init-ctx_0)"
"(begin"
" 'module-begin-k"
"(let-values((()"
"(begin"
"(if again?_149"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_135)"
"(let-values(((temp301_350)"
" #f))"
"(initial-require!245_146"
" temp301_350))"
"(hash-clear!"
" compiled-submodules_137)"
"(set-box!"
" compiled-module-box_138"
" #f)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_149"
" #t)"
"(values))))"
"(let-values(((ctx_317)"
"(let-values(((v_351)"
" mb-init-ctx_0))"
"(let-values(((the-struct_352)"
" v_351))"
"(if(expand-context/outer?"
" the-struct_352)"
"(let-values(((post-expansion302_353)"
"(lambda(s_0)"
"(begin"
" 'post-expansion302"
"(add-scope"
" s_0"
" inside-scope_119))))"
"((inner303_354)"
"(let-values(((the-struct_356)"
"(root-expand-context/outer-inner"
" v_351)))"
"(if(expand-context/inner?"
" the-struct_356)"
"(let-values(((module-begin-k304_357)"
"(lambda(s_0"
" ctx_0)"
"(begin"
" 'module-begin-k304"
"(let-values(((new-requires+provides_360)"
"(let-values(((self313_362)"
" self_120)"
"((requires+provides314_363)"
" requires+provides_135))"
"(make-requires+provides8.1"
" requires+provides314_363"
" self313_362))))"
"(let-values(((requires+provides305_364)"
" requires+provides_135)"
"((compiled-submodules306_365)"
" compiled-submodules_137)"
"((compiled-module-box307_366)"
" compiled-module-box_138)"
"((defined-syms308_367)"
" defined-syms_136)"
"((requires+provides309_368)"
" new-requires+provides_360)"
"((compiled-submodules310_369)"
"(make-hasheq))"
"((compiled-module-box311_370)"
"(box"
" #f))"
"((defined-syms312_371)"
"(make-hasheq)))"
"(dynamic-wind"
"(lambda()"
"(begin"
"(set! requires+provides_135"
" requires+provides309_368)"
"(set! compiled-submodules_137"
" compiled-submodules310_369)"
"(set! compiled-module-box_138"
" compiled-module-box311_370)"
"(set! defined-syms_136"
" defined-syms312_371)))"
"(lambda()"
"(module-begin-k_150"
" s_0"
" ctx_0))"
"(lambda()"
"(begin"
"(set! requires+provides_135"
" requires+provides305_364)"
"(set! compiled-submodules_137"
" compiled-submodules306_365)"
"(set! compiled-module-box_138"
" compiled-module-box307_366)"
"(set! defined-syms_136"
" defined-syms308_367))))))))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_356)"
"(root-expand-context/inner-module-scopes"
" the-struct_356)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_356)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_356)"
"(root-expand-context/inner-defined-syms"
" the-struct_356)"
"(root-expand-context/inner-counter"
" the-struct_356)"
"(root-expand-context/inner-lift-key"
" the-struct_356)"
"(expand-context/inner-to-parsed?"
" the-struct_356)"
"(expand-context/inner-phase"
" the-struct_356)"
"(expand-context/inner-namespace"
" the-struct_356)"
"(expand-context/inner-just-once?"
" the-struct_356)"
" module-begin-k304_357"
"(expand-context/inner-allow-unbound?"
" the-struct_356)"
"(expand-context/inner-in-local-expand?"
" the-struct_356)"
"(expand-context/inner-keep-#%expression?"
" the-struct_356)"
"(expand-context/inner-stops"
" the-struct_356)"
"(expand-context/inner-declared-submodule-names"
" the-struct_356)"
"(expand-context/inner-lifts"
" the-struct_356)"
"(expand-context/inner-lift-envs"
" the-struct_356)"
"(expand-context/inner-module-lifts"
" the-struct_356)"
"(expand-context/inner-require-lifts"
" the-struct_356)"
"(expand-context/inner-to-module-lifts"
" the-struct_356)"
"(expand-context/inner-requires+provides"
" the-struct_356)"
"(expand-context/inner-observer"
" the-struct_356)"
"(expand-context/inner-for-serializable?"
" the-struct_356)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_356)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                  \"expand-context/inner?\""
" the-struct_356)))))"
"(expand-context/outer1.1"
" inner303_354"
" post-expansion302_353"
"(root-expand-context/outer-use-site-scopes"
" the-struct_352)"
"(root-expand-context/outer-frame-id"
" the-struct_352)"
"(expand-context/outer-context"
" the-struct_352)"
"(expand-context/outer-env"
" the-struct_352)"
"(expand-context/outer-scopes"
" the-struct_352)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_352)"
"(expand-context/outer-binding-layer"
" the-struct_352)"
"(expand-context/outer-reference-records"
" the-struct_352)"
"(expand-context/outer-only-immediate?"
" the-struct_352)"
"(expand-context/outer-need-eventually-defined"
" the-struct_352)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_352)"
"(expand-context/outer-current-use-scopes"
" the-struct_352)"
"(expand-context/outer-name"
" the-struct_352)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                \"expand-context/outer?\""
" the-struct_352))))))"
"(let-values(((added-s_318)"
"(add-scope"
" mb-s_0"
" inside-scope_119)))"
"(let-values((()"
"(begin"
"(let-values(((obs_372)"
"(expand-context-observer"
" ctx_317)))"
"(if obs_372"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_372"
" 'rename-one"
" added-s_318)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_319)"
"(syntax-disarm$1"
" added-s_318)))"
"(let-values(((ok?_320"
" #%module-begin297_321"
" body298_322)"
"(let-values(((s_373)"
" disarmed-mb-s_319))"
"(let-values(((orig-s_374)"
" s_373))"
"(let-values(((#%module-begin297_375"
" body298_376)"
"(let-values(((s_377)"
"(if(syntax?$1"
" s_373)"
"(syntax-e$1"
" s_373)"
" s_373)))"
"(if(pair?"
" s_377)"
"(let-values(((#%module-begin299_378)"
"(let-values(((s_380)"
"(car"
" s_377)))"
" s_380))"
"((body300_379)"
"(let-values(((s_381)"
"(cdr"
" s_377)))"
"(let-values(((s_382)"
"(if(syntax?$1"
" s_381)"
"(syntax-e$1"
" s_381)"
" s_381)))"
"(let-values(((flat-s_383)"
"(to-syntax-list.1"
" s_382)))"
"(if(not"
" flat-s_383)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_374))"
"(let-values()"
" flat-s_383)))))))"
"(values"
" #%module-begin299_378"
" body300_379))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                        \"bad syntax\""
" orig-s_374)))))"
"(values"
" #t"
" #%module-begin297_375"
" body298_376))))))"
"(let-values(((bodys_336)"
" body298_322))"
"(let-values(((rebuild-mb-s_337)"
"(let-values(((ctx315_384)"
" ctx_317)"
"((mb-s316_385)"
" mb-s_0))"
"(keep-as-needed119.1"
" #f"
" #f"
" #f"
" ctx315_384"
" mb-s316_385))))"
"(let-values(((need-eventually-defined_338)"
"(make-hasheqv)))"
"(let-values(((module-ends_339)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_340)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_341)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_342)"
"((letrec-values(((pass-1-and-2-loop_386)"
"(lambda(bodys_0"
" phase_0"
" keep-stops?_0)"
"(begin"
" 'pass-1-and-2-loop"
"(let-values(((def-ctx-scopes_390)"
"(box"
" null)))"
"(let-values(((partial-body-ctx_391)"
"(let-values(((v_394)"
" ctx_317))"
"(let-values(((the-struct_395)"
" v_394))"
"(if(expand-context/outer?"
" the-struct_395)"
"(let-values(((context325_396)"
" 'module)"
"((def-ctx-scopes326_397)"
" def-ctx-scopes_390)"
"((need-eventually-defined327_398)"
" need-eventually-defined_338)"
"((inner328_399)"
"(let-values(((the-struct_400)"
"(root-expand-context/outer-inner"
" v_394)))"
"(if(expand-context/inner?"
" the-struct_400)"
"(let-values(((phase329_401)"
" phase_0)"
"((namespace330_402)"
"(namespace->namespace-at-phase"
" m-ns_132"
" phase_0))"
"((stops331_403)"
"(free-id-set"
" phase_0"
"(module-expand-stop-ids"
" phase_0)))"
"((declared-submodule-names332_404)"
" declared-submodule-names_341)"
"((lift-key333_405)"
"(generate-lift-key))"
"((lifts334_406)"
"(let-values(((temp338_410)"
"(make-wrap-as-definition"
" self_120"
" frame-id_127"
" inside-scope_119"
" all-scopes-s_124"
" defined-syms_136"
" requires+provides_135)))"
"(make-lift-context6.1"
" #f"
" temp338_410)))"
"((module-lifts335_407)"
"(make-module-lift-context"
" phase_0"
" #t))"
"((require-lifts336_408)"
"(make-require-lift-context"
" phase_0"
"(let-values(((m-ns339_412)"
" m-ns_132)"
"((self340_413)"
" self_120)"
"((requires+provides341_414)"
" requires+provides_135)"
"((declared-submodule-names342_415)"
" declared-submodule-names_341))"
"(make-parse-lifted-require216.1"
" declared-submodule-names342_415"
" m-ns339_412"
" self340_413"
" requires+provides341_414))))"
"((to-module-lifts337_409)"
"(let-values(((phase343_417)"
" phase_0)"
"((module-ends344_418)"
" module-ends_339)"
"((temp345_419)"
" #f))"
"(make-to-module-lift-context27.1"
" temp345_419"
" module-ends344_418"
" phase343_417))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_400)"
"(root-expand-context/inner-module-scopes"
" the-struct_400)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_400)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_400)"
"(root-expand-context/inner-defined-syms"
" the-struct_400)"
"(root-expand-context/inner-counter"
" the-struct_400)"
" lift-key333_405"
"(expand-context/inner-to-parsed?"
" the-struct_400)"
" phase329_401"
" namespace330_402"
"(expand-context/inner-just-once?"
" the-struct_400)"
"(expand-context/inner-module-begin-k"
" the-struct_400)"
"(expand-context/inner-allow-unbound?"
" the-struct_400)"
"(expand-context/inner-in-local-expand?"
" the-struct_400)"
"(expand-context/inner-keep-#%expression?"
" the-struct_400)"
" stops331_403"
" declared-submodule-names332_404"
" lifts334_406"
"(expand-context/inner-lift-envs"
" the-struct_400)"
" module-lifts335_407"
" require-lifts336_408"
" to-module-lifts337_409"
"(expand-context/inner-requires+provides"
" the-struct_400)"
"(expand-context/inner-observer"
" the-struct_400)"
"(expand-context/inner-for-serializable?"
" the-struct_400)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_400)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                              \"expand-context/inner?\""
" the-struct_400)))))"
"(expand-context/outer1.1"
" inner328_399"
"(root-expand-context/outer-post-expansion"
" the-struct_395)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_395)"
"(root-expand-context/outer-frame-id"
" the-struct_395)"
" context325_396"
"(expand-context/outer-env"
" the-struct_395)"
"(expand-context/outer-scopes"
" the-struct_395)"
" def-ctx-scopes326_397"
"(expand-context/outer-binding-layer"
" the-struct_395)"
"(expand-context/outer-reference-records"
" the-struct_395)"
"(expand-context/outer-only-immediate?"
" the-struct_395)"
" need-eventually-defined327_398"
"(expand-context/outer-current-introduction-scopes"
" the-struct_395)"
"(expand-context/outer-current-use-scopes"
" the-struct_395)"
"(expand-context/outer-name"
" the-struct_395)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                            \"expand-context/outer?\""
" the-struct_395))))))"
"(let-values(((partially-expanded-bodys_392)"
"(let-values(((bodys346_421)"
" bodys_0)"
"((phase347_422)"
" phase_0)"
"((partial-body-ctx348_423)"
" partial-body-ctx_391)"
"((m-ns349_424)"
" m-ns_132)"
"((self350_425)"
" self_120)"
"((frame-id351_426)"
" frame-id_127)"
"((requires+provides352_427)"
" requires+provides_135)"
"((need-eventually-defined353_428)"
" need-eventually-defined_338)"
"((all-scopes-s354_429)"
" all-scopes-s_124)"
"((defined-syms355_430)"
" defined-syms_136)"
"((declared-keywords356_431)"
" declared-keywords_340)"
"((declared-submodule-names357_432)"
" declared-submodule-names_341)"
"((compiled-submodules358_433)"
" compiled-submodules_137)"
"((modules-being-compiled359_434)"
" modules-being-compiled_88)"
"((mpis-to-reset360_435)"
" mpis-to-reset_139)"
"((pass-1-and-2-loop361_436)"
" pass-1-and-2-loop_386))"
"(partially-expand-bodys79.1"
" all-scopes-s354_429"
" compiled-submodules358_433"
" partial-body-ctx348_423"
" declared-keywords356_431"
" declared-submodule-names357_432"
" defined-syms355_430"
" frame-id351_426"
" pass-1-and-2-loop361_436"
" modules-being-compiled359_434"
" mpis-to-reset360_435"
" m-ns349_424"
" need-eventually-defined353_428"
" phase347_422"
" requires+provides352_427"
" self350_425"
" bodys346_421))))"
"(let-values((()"
"(begin"
"(let-values(((obs_437)"
"(expand-context-observer"
" partial-body-ctx_391)))"
"(if obs_437"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_437"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_393)"
"(let-values(((v_438)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_391"
" def-ctx-scopes_390)))"
"(let-values(((the-struct_439)"
" v_438))"
"(if(expand-context/outer?"
" the-struct_439)"
"(let-values(((def-ctx-scopes362_440)"
" #f)"
"((post-expansion363_441)"
" #f)"
"((inner364_442)"
"(let-values(((the-struct_443)"
"(root-expand-context/outer-inner"
" v_438)))"
"(if(expand-context/inner?"
" the-struct_443)"
"(let-values(((stops365_444)"
"(if keep-stops?_0"
"(expand-context-stops"
" ctx_317)"
" empty-free-id-set))"
"((to-module-lifts366_445)"
"(let-values(((phase367_447)"
" phase_0)"
"((module-ends368_448)"
" module-ends_339)"
"((temp369_449)"
" #t))"
"(make-to-module-lift-context27.1"
" temp369_449"
" module-ends368_448"
" phase367_447))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_443)"
"(root-expand-context/inner-module-scopes"
" the-struct_443)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_443)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_443)"
"(root-expand-context/inner-defined-syms"
" the-struct_443)"
"(root-expand-context/inner-counter"
" the-struct_443)"
"(root-expand-context/inner-lift-key"
" the-struct_443)"
"(expand-context/inner-to-parsed?"
" the-struct_443)"
"(expand-context/inner-phase"
" the-struct_443)"
"(expand-context/inner-namespace"
" the-struct_443)"
"(expand-context/inner-just-once?"
" the-struct_443)"
"(expand-context/inner-module-begin-k"
" the-struct_443)"
"(expand-context/inner-allow-unbound?"
" the-struct_443)"
"(expand-context/inner-in-local-expand?"
" the-struct_443)"
"(expand-context/inner-keep-#%expression?"
" the-struct_443)"
" stops365_444"
"(expand-context/inner-declared-submodule-names"
" the-struct_443)"
"(expand-context/inner-lifts"
" the-struct_443)"
"(expand-context/inner-lift-envs"
" the-struct_443)"
"(expand-context/inner-module-lifts"
" the-struct_443)"
"(expand-context/inner-require-lifts"
" the-struct_443)"
" to-module-lifts366_445"
"(expand-context/inner-requires+provides"
" the-struct_443)"
"(expand-context/inner-observer"
" the-struct_443)"
"(expand-context/inner-for-serializable?"
" the-struct_443)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_443)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                                    \"expand-context/inner?\""
" the-struct_443)))))"
"(expand-context/outer1.1"
" inner364_442"
" post-expansion363_441"
"(root-expand-context/outer-use-site-scopes"
" the-struct_439)"
"(root-expand-context/outer-frame-id"
" the-struct_439)"
"(expand-context/outer-context"
" the-struct_439)"
"(expand-context/outer-env"
" the-struct_439)"
"(expand-context/outer-scopes"
" the-struct_439)"
" def-ctx-scopes362_440"
"(expand-context/outer-binding-layer"
" the-struct_439)"
"(expand-context/outer-reference-records"
" the-struct_439)"
"(expand-context/outer-only-immediate?"
" the-struct_439)"
"(expand-context/outer-need-eventually-defined"
" the-struct_439)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_439)"
"(expand-context/outer-current-use-scopes"
" the-struct_439)"
"(expand-context/outer-name"
" the-struct_439)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                  \"expand-context/outer?\""
" the-struct_439))))))"
"(let-values(((partially-expanded-bodys317_451)"
" partially-expanded-bodys_392)"
"((phase318_452)"
" phase_0)"
"((body-ctx319_453)"
" body-ctx_393)"
"((self320_454)"
" self_120)"
"((declared-submodule-names321_455)"
" declared-submodule-names_341)"
"((compiled-submodules322_456)"
" compiled-submodules_137)"
"((modules-being-compiled323_457)"
" modules-being-compiled_88)"
"((mpis-to-reset324_458)"
" mpis-to-reset_139))"
"(finish-expanding-body-expressons97.1"
" compiled-submodules322_456"
" body-ctx319_453"
" declared-submodule-names321_455"
" modules-being-compiled323_457"
" mpis-to-reset324_458"
" phase318_452"
" self320_454"
" partially-expanded-bodys317_451)))))))))))"
" pass-1-and-2-loop_386)"
" bodys_336"
" phase_116"
"(stop-at-module*?"
" ctx_317))))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_338"
" self_120"
" ctx_317"
" requires+provides_135)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_459)"
"(expand-context-observer"
" ctx_317)))"
"(if obs_459"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_459"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_343)"
"(let-values(((expression-expanded-bodys370_461)"
" expression-expanded-bodys_342)"
"((requires+provides371_462)"
" requires+provides_135)"
"((declared-submodule-names372_463)"
" declared-submodule-names_341)"
"((m-ns373_464)"
" m-ns_132)"
"((phase374_465)"
" phase_116)"
"((self375_466)"
" self_120)"
"((ctx376_467)"
" ctx_317))"
"(resolve-provides113.1"
" ctx376_467"
" declared-submodule-names372_463"
" m-ns373_464"
" phase374_465"
" requires+provides371_462"
" self375_466"
" expression-expanded-bodys370_461))))"
"(let-values(((is-cross-phase-persistent?_344)"
"(hash-ref"
" declared-keywords_340"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_344"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_135)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                      \"cannot be cross-phase persistent due to required modules\""
" rebuild-s_114"
"(hash-ref"
" declared-keywords_340"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_343"
" self_120)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_468)"
"(expand-context-observer"
" ctx_317)))"
"(if obs_468"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_468"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((submod-m-ns_345)"
"(let-values(((m-ns377_470)"
" m-ns_132)"
"((temp378_471)"
" #t))"
"(make-m-ns240_129"
" temp378_471"
" m-ns377_470))))"
"(let-values(((submod-ctx_346)"
"(let-values(((v_472)"
" ctx_317))"
"(let-values(((the-struct_473)"
" v_472))"
"(if(expand-context/outer?"
" the-struct_473)"
"(let-values(((frame-id379_474)"
" #f)"
"((post-expansion380_475)"
" #f)"
"((inner381_476)"
"(let-values(((the-struct_477)"
"(root-expand-context/outer-inner"
" v_472)))"
"(if(expand-context/inner?"
" the-struct_477)"
"(let-values(((namespace382_478)"
" submod-m-ns_345))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_477)"
"(root-expand-context/inner-module-scopes"
" the-struct_477)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_477)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_477)"
"(root-expand-context/inner-defined-syms"
" the-struct_477)"
"(root-expand-context/inner-counter"
" the-struct_477)"
"(root-expand-context/inner-lift-key"
" the-struct_477)"
"(expand-context/inner-to-parsed?"
" the-struct_477)"
"(expand-context/inner-phase"
" the-struct_477)"
" namespace382_478"
"(expand-context/inner-just-once?"
" the-struct_477)"
"(expand-context/inner-module-begin-k"
" the-struct_477)"
"(expand-context/inner-allow-unbound?"
" the-struct_477)"
"(expand-context/inner-in-local-expand?"
" the-struct_477)"
"(expand-context/inner-keep-#%expression?"
" the-struct_477)"
"(expand-context/inner-stops"
" the-struct_477)"
"(expand-context/inner-declared-submodule-names"
" the-struct_477)"
"(expand-context/inner-lifts"
" the-struct_477)"
"(expand-context/inner-lift-envs"
" the-struct_477)"
"(expand-context/inner-module-lifts"
" the-struct_477)"
"(expand-context/inner-require-lifts"
" the-struct_477)"
"(expand-context/inner-to-module-lifts"
" the-struct_477)"
"(expand-context/inner-requires+provides"
" the-struct_477)"
"(expand-context/inner-observer"
" the-struct_477)"
"(expand-context/inner-for-serializable?"
" the-struct_477)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_477)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                        \"expand-context/inner?\""
" the-struct_477)))))"
"(expand-context/outer1.1"
" inner381_476"
" post-expansion380_475"
"(root-expand-context/outer-use-site-scopes"
" the-struct_473)"
" frame-id379_474"
"(expand-context/outer-context"
" the-struct_473)"
"(expand-context/outer-env"
" the-struct_473)"
"(expand-context/outer-scopes"
" the-struct_473)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_473)"
"(expand-context/outer-binding-layer"
" the-struct_473)"
"(expand-context/outer-reference-records"
" the-struct_473)"
"(expand-context/outer-only-immediate?"
" the-struct_473)"
"(expand-context/outer-need-eventually-defined"
" the-struct_473)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_473)"
"(expand-context/outer-current-use-scopes"
" the-struct_473)"
"(expand-context/outer-name"
" the-struct_473)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                      \"expand-context/outer?\""
" the-struct_473))))))"
"(let-values(((declare-enclosing-module_347)"
"(promise1.1"
"(lambda()"
"(let-values(((fully-expanded-bodys-except-post-submodules383_480)"
" fully-expanded-bodys-except-post-submodules_343)"
"((temp384_481)"
" id:module-name225_92)"
"((rebuild-s385_482)"
" rebuild-s_114)"
"((requires+provides386_483)"
" requires+provides_135)"
"((submod-m-ns387_484)"
" submod-m-ns_345)"
"((self388_485)"
" self_120)"
"((enclosing-self389_486)"
" enclosing-self_82)"
"((root-ctx390_487)"
" root-ctx_125)"
"((submod-ctx391_488)"
" submod-ctx_346)"
"((modules-being-compiled392_489)"
" modules-being-compiled_88)"
"((compiled-module-box393_490)"
" compiled-module-box_138))"
"(declare-module-for-expansion137.1"
" submod-ctx391_488"
" enclosing-self389_486"
" compiled-module-box393_490"
" temp384_481"
" modules-being-compiled392_489"
" submod-m-ns387_484"
" rebuild-s385_482"
" requires+provides386_483"
" root-ctx390_487"
" self388_485"
" fully-expanded-bodys-except-post-submodules383_480)))"
" #f)))"
"(let-values(((fully-expanded-bodys_348)"
"(if(stop-at-module*?"
" submod-ctx_346)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_343)"
"(let-values()"
"(let-values(((fully-expanded-bodys-except-post-submodules394_492)"
" fully-expanded-bodys-except-post-submodules_343)"
"((declare-enclosing-module395_493)"
" declare-enclosing-module_347)"
"((phase396_494)"
" phase_116)"
"((self397_495)"
" self_120)"
"((requires+provides398_496)"
" requires+provides_135)"
"((is-cross-phase-persistent?399_497)"
" is-cross-phase-persistent?_344)"
"((all-scopes-s400_498)"
" all-scopes-s_124)"
"((mpis-to-reset401_499)"
" mpis-to-reset_139)"
"((declared-submodule-names402_500)"
" declared-submodule-names_341)"
"((compiled-submodules403_501)"
" compiled-submodules_137)"
"((modules-being-compiled404_502)"
" modules-being-compiled_88)"
"((submod-ctx405_503)"
" submod-ctx_346))"
"(expand-post-submodules163.1"
" all-scopes-s400_498"
" compiled-submodules403_501"
" submod-ctx405_503"
" declare-enclosing-module395_493"
" declared-submodule-names402_500"
" is-cross-phase-persistent?399_497"
" modules-being-compiled404_502"
" mpis-to-reset401_499"
" phase396_494"
" requires+provides398_496"
" self397_495"
" fully-expanded-bodys-except-post-submodules394_492))))))"
"(if(expand-context-to-parsed?"
" submod-ctx_346)"
"(let-values()"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_337"
"(parsed-only"
" fully-expanded-bodys_348)))"
"(let-values()"
"(let-values(((mb-result-s_504)"
"(let-values(((rebuild-mb-s406_505)"
" rebuild-mb-s_337)"
"((temp407_506)"
"(list*"
" #%module-begin297_321"
"(syntax-only"
" fully-expanded-bodys_348))))"
"(rebuild5.1"
" #t"
" rebuild-mb-s406_505"
" temp407_506))))"
"(if(not"
"(expand-context-in-local-expand?"
" submod-ctx_346))"
"(let-values()"
"(expanded+parsed1.1"
" mb-result-s_504"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_337"
"(parsed-only"
" fully-expanded-bodys_348))))"
"(let-values()"
" mb-result-s_504)))))))))))))))))))))))))))))))))"
"(let-values(((mb-ctx_151)"
"(let-values(((v_507)"
" ctx_133))"
"(let-values(((the-struct_508)"
" v_507))"
"(if(expand-context/outer?"
" the-struct_508)"
"(let-values(((context408_509)"
" 'module-begin)"
"((inner409_510)"
"(let-values(((the-struct_511)"
"(root-expand-context/outer-inner"
" v_507)))"
"(if(expand-context/inner?"
" the-struct_511)"
"(let-values(((module-begin-k410_512)"
" module-begin-k_150)"
"((in-local-expand?411_513)"
" #f)"
"((lifts412_514)"
" #f)"
"((module-lifts413_515)"
" #f)"
"((to-module-lifts414_516)"
" #f)"
"((require-lifts415_517)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_511)"
"(root-expand-context/inner-module-scopes"
" the-struct_511)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_511)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_511)"
"(root-expand-context/inner-defined-syms"
" the-struct_511)"
"(root-expand-context/inner-counter"
" the-struct_511)"
"(root-expand-context/inner-lift-key"
" the-struct_511)"
"(expand-context/inner-to-parsed?"
" the-struct_511)"
"(expand-context/inner-phase"
" the-struct_511)"
"(expand-context/inner-namespace"
" the-struct_511)"
"(expand-context/inner-just-once?"
" the-struct_511)"
" module-begin-k410_512"
"(expand-context/inner-allow-unbound?"
" the-struct_511)"
" in-local-expand?411_513"
"(expand-context/inner-keep-#%expression?"
" the-struct_511)"
"(expand-context/inner-stops"
" the-struct_511)"
"(expand-context/inner-declared-submodule-names"
" the-struct_511)"
" lifts412_514"
"(expand-context/inner-lift-envs"
" the-struct_511)"
" module-lifts413_515"
" require-lifts415_517"
" to-module-lifts414_516"
"(expand-context/inner-requires+provides"
" the-struct_511)"
"(expand-context/inner-observer"
" the-struct_511)"
"(expand-context/inner-for-serializable?"
" the-struct_511)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_511)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                           \"expand-context/inner?\""
" the-struct_511)))))"
"(expand-context/outer1.1"
" inner409_510"
"(root-expand-context/outer-post-expansion"
" the-struct_508)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_508)"
"(root-expand-context/outer-frame-id"
" the-struct_508)"
" context408_509"
"(expand-context/outer-env"
" the-struct_508)"
"(expand-context/outer-scopes"
" the-struct_508)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_508)"
"(expand-context/outer-binding-layer"
" the-struct_508)"
"(expand-context/outer-reference-records"
" the-struct_508)"
"(expand-context/outer-only-immediate?"
" the-struct_508)"
"(expand-context/outer-need-eventually-defined"
" the-struct_508)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_508)"
"(expand-context/outer-current-use-scopes"
" the-struct_508)"
"(expand-context/outer-name"
" the-struct_508)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                         \"expand-context/outer?\""
" the-struct_508))))))"
"(let-values(((mb-scopes-s_152)"
"(if keep-enclosing-scope-at-phase_84"
"(apply-module-scopes_122"
" disarmed-s_89)"
" all-scopes-s_124)))"
"(let-values(((mb-def-ctx-scopes_153)"
"(box"
" null)))"
"(let-values(((mb_154)"
"(let-values(((bodys416_519)"
" bodys_134)"
"((module-name-sym417_520)"
" module-name-sym_117)"
"((mb-scopes-s418_521)"
" mb-scopes-s_152)"
"((m-ns419_522)"
" m-ns_132)"
"((mb-ctx420_523)"
" mb-ctx_151)"
"((mb-def-ctx-scopes421_524)"
" mb-def-ctx-scopes_153)"
"((phase422_525)"
" phase_116)"
"((s423_526)"
" s_80))"
"(ensure-module-begin34.1"
" mb-ctx420_523"
" mb-def-ctx-scopes421_524"
" m-ns419_522"
" module-name-sym417_520"
" phase422_525"
" s423_526"
" mb-scopes-s418_521"
" bodys416_519))))"
"(let-values(((expanded-mb_155)"
"(let-values()"
"(let-values(((mb424_527)"
" mb_154)"
"((temp425_528)"
"(let-values(((v_529)"
"(accumulate-def-ctx-scopes"
" mb-ctx_151"
" mb-def-ctx-scopes_153)))"
"(let-values(((the-struct_530)"
" v_529))"
"(if(expand-context/outer?"
" the-struct_530)"
"(let-values(((def-ctx-scopes426_531)"
" #f)"
"((inner427_532)"
"(root-expand-context/outer-inner"
" v_529)))"
"(expand-context/outer1.1"
" inner427_532"
"(root-expand-context/outer-post-expansion"
" the-struct_530)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_530)"
"(root-expand-context/outer-frame-id"
" the-struct_530)"
"(expand-context/outer-context"
" the-struct_530)"
"(expand-context/outer-env"
" the-struct_530)"
"(expand-context/outer-scopes"
" the-struct_530)"
" def-ctx-scopes426_531"
"(expand-context/outer-binding-layer"
" the-struct_530)"
"(expand-context/outer-reference-records"
" the-struct_530)"
"(expand-context/outer-only-immediate?"
" the-struct_530)"
"(expand-context/outer-need-eventually-defined"
" the-struct_530)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_530)"
"(expand-context/outer-current-use-scopes"
" the-struct_530)"
"(expand-context/outer-name"
" the-struct_530)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                 \"expand-context/outer?\""
" the-struct_530))))))"
"(expand9.1"
" #f"
" #f"
" #f"
" mb424_527"
" temp425_528)))))"
"(let-values(((requires_156"
" provides_157)"
"(extract-requires-and-provides"
" requires+provides_135"
" self_120"
" self_120)))"
"(let-values(((result-form_158)"
"(if(let-values(((or-part_533)"
"(expand-context-to-parsed?"
" init-ctx_81)))"
"(if or-part_533"
" or-part_533"
" always-produce-compiled?_83))"
"(parsed-module25.1"
" rebuild-s_114"
" #f"
" id:module-name225_92"
" self_120"
" requires_156"
" provides_157"
"(requires+provides-all-bindings-simple?"
" requires+provides_135)"
"(root-expand-context-encode-for-module"
" root-ctx_125"
" self_120"
" self_120)"
"(parsed-#%module-begin-body"
"(if(expanded+parsed?"
" expanded-mb_155)"
"(expanded+parsed-parsed"
" expanded-mb_155)"
" expanded-mb_155))"
"(unbox"
" compiled-module-box_138)"
" compiled-submodules_137)"
" #f)))"
"(let-values(((result-s_159)"
"(if(not"
"(expand-context-to-parsed?"
" init-ctx_81))"
"(let-values()"
"(let-values(((generic-self_534)"
"(make-generic-self-module-path-index"
" self_120)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_120)"
"(let-values(((lst_535)"
"(unbox"
" mpis-to-reset_139)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_535)))"
"((letrec-values(((for-loop_536)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((mpi_538)"
"(unsafe-car"
" lst_0))"
"((rest_539)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_538))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_536"
" rest_539)"
"(values))))"
"(values))))))"
" for-loop_536)"
" lst_535)))"
"(void)"
"(let-values(((result-s_540)"
"(let-values(((rebuild-s428_541)"
" rebuild-s_114)"
"((temp429_542)"
"(list"
" module224_91"
" id:module-name225_92"
" initial-require-s_123"
"(expanded+parsed-s"
" expanded-mb_155))))"
"(rebuild5.1"
" #t"
" rebuild-s428_541"
" temp429_542))))"
"(let-values(((result-s_543)"
"(let-values(((result-s430_544)"
" result-s_540)"
"((self431_545)"
" self_120)"
"((generic-self432_546)"
" generic-self_534))"
"(syntax-module-path-index-shift13.1"
" #f"
" result-s430_544"
" self431_545"
" generic-self432_546"
" #f))))"
"(let-values(((result-s_547)"
"(attach-root-expand-context-properties"
" result-s_543"
" root-ctx_125"
" self_120"
" generic-self_534)))"
"(let-values(((result-s_548)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_135)"
"(syntax-property$1"
" result-s_547"
" 'module-body-context-simple?"
" #t)"
" result-s_547)))"
"(begin"
"(let-values(((obs_549)"
"(expand-context-observer"
" init-ctx_81)))"
"(if obs_549"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_549"
" 'rename-one"
" result-s_548)))"
"(void)))"
" result-s_548))))))))"
"(void))))"
"(if(expand-context-to-parsed?"
" init-ctx_81)"
"(let-values()"
" result-form_158)"
"(if always-produce-compiled?_83"
"(let-values()"
"(expanded+parsed1.1"
" result-s_159"
" result-form_158))"
"(let-values()"
" result-s_159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(ensure-module-begin34.1)"
"(lambda(ctx22_0 def-ctx-scopes23_0 m-ns21_0 module-name-sym19_0 phase24_0 s25_0 scopes-s20_0 bodys33_0)"
"(begin"
" 'ensure-module-begin34"
"(let-values(((bodys_614) bodys33_0))"
"(let-values(((module-name-sym_615) module-name-sym19_0))"
"(let-values(((scopes-s_616) scopes-s20_0))"
"(let-values()"
"(let-values(((ctx_618) ctx22_0))"
"(let-values(((def-ctx-scopes_619) def-ctx-scopes23_0))"
"(let-values(((phase_620) phase24_0))"
"(let-values(((s_621) s25_0))"
"(let-values()"
"(let-values(((make-mb-ctx_622)"
"(lambda()"
"(begin"
" 'make-mb-ctx"
"(let-values(((v_624) ctx_618))"
"(let-values(((the-struct_625) v_624))"
"(if(expand-context/outer? the-struct_625)"
"(let-values(((context433_626) 'module-begin)"
"((only-immediate?434_627) #t)"
"((def-ctx-scopes435_628) def-ctx-scopes_619)"
"((inner436_629)(root-expand-context/outer-inner v_624)))"
"(expand-context/outer1.1"
" inner436_629"
"(root-expand-context/outer-post-expansion the-struct_625)"
"(root-expand-context/outer-use-site-scopes the-struct_625)"
"(root-expand-context/outer-frame-id the-struct_625)"
" context433_626"
"(expand-context/outer-env the-struct_625)"
"(expand-context/outer-scopes the-struct_625)"
" def-ctx-scopes435_628"
"(expand-context/outer-binding-layer the-struct_625)"
"(expand-context/outer-reference-records the-struct_625)"
" only-immediate?434_627"
"(expand-context/outer-need-eventually-defined the-struct_625)"
"(expand-context/outer-current-introduction-scopes the-struct_625)"
"(expand-context/outer-current-use-scopes the-struct_625)"
"(expand-context/outer-name the-struct_625)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_625))))))))"
"(let-values(((mb_623)"
"(if(= 1(length bodys_614))"
"(let-values()"
"(begin"
"(let-values(((obs_630)(expand-context-observer ctx_618)))"
"(if obs_630"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_630 'rename-one(car bodys_614))))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_614)) phase_620))"
"(let-values()(car bodys_614))"
"(let-values()"
"(let-values(((partly-expanded-body_631)"
"(let-values()"
"(let-values(((temp437_632)"
"(add-enclosing-name-property"
"(car bodys_614)"
" module-name-sym_615))"
"((temp438_633)(make-mb-ctx_622)))"
"(expand9.1 #f #f #f temp437_632 temp438_633)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_631)"
" phase_620))"
"(let-values() partly-expanded-body_631)"
"(let-values()"
"(let-values(((temp439_635)(list partly-expanded-body_631))"
"((s440_636) s_621)"
"((scopes-s441_637) scopes-s_616)"
"((phase442_638) phase_620)"
"((module-name-sym443_639) module-name-sym_615)"
"((temp444_640)(make-mb-ctx_622))"
"((temp445_641) #f))"
"(add-module-begin45.1"
" temp445_641"
" temp439_635"
" s440_636"
" scopes-s441_637"
" phase442_638"
" module-name-sym443_639"
" temp444_640)))))))))"
"(let-values()"
"(let-values(((bodys446_642) bodys_614)"
"((s447_643) s_621)"
"((scopes-s448_644) scopes-s_616)"
"((phase449_645) phase_620)"
"((module-name-sym450_646) module-name-sym_615)"
"((temp451_647)(make-mb-ctx_622)))"
"(add-module-begin45.1"
" #t"
" bodys446_642"
" s447_643"
" scopes-s448_644"
" phase449_645"
" module-name-sym450_646"
" temp451_647))))))"
"(add-enclosing-name-property mb_623 module-name-sym_615)))))))))))))))"
"(define-values"
"(add-module-begin45.1)"
"(lambda(log-rename-one?37_0 bodys39_0 s40_0 scopes-s41_0 phase42_0 module-name-sym43_0 mb-ctx44_0)"
"(begin"
" 'add-module-begin45"
"(let-values(((bodys_689) bodys39_0))"
"(let-values(((s_690) s40_0))"
"(let-values(((scopes-s_691) scopes-s41_0))"
"(let-values(((phase_692) phase42_0))"
"(let-values(((module-name-sym_693) module-name-sym43_0))"
"(let-values(((mb-ctx_694) mb-ctx44_0))"
"(let-values(((log-rename-one?_695) log-rename-one?37_0))"
"(let-values()"
"(let-values(((disarmed-scopes-s_696)(syntax-disarm$1 scopes-s_691)))"
"(let-values(((mb-id_697)(datum->syntax$1 disarmed-scopes-s_696 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id452_700) mb-id_697)((phase453_701) phase_692))"
"(resolve40.1 #f #f null #f mb-id452_700 phase453_701))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                               \"no #%module-begin binding in the module's language\""
" s_690)))"
"(values))))"
"(let-values(((mb_698)"
"(datum->syntax$1"
" disarmed-scopes-s_696"
"(list* mb-id_697 bodys_689)"
" s_690"
" s_690)))"
"(let-values((()"
"(begin"
"(let-values(((obs_702)(expand-context-observer mb-ctx_694)))"
"(if obs_702"
"(let-values()"
"(let-values()(call-expand-observe obs_702 'tag mb_698)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_695"
"(let-values()"
"(let-values(((obs_703)(expand-context-observer mb-ctx_694)))"
"(if obs_703"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_703 'rename-one mb_698)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_699)"
"(let-values()"
"(let-values(((temp454_704)"
"(add-enclosing-name-property"
" mb_698"
" module-name-sym_693))"
"((mb-ctx455_705) mb-ctx_694))"
"(expand9.1 #f #f #f temp454_704 mb-ctx455_705)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_699) phase_692))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                           \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_690"
" partly-expanded-mb_699)))"
" partly-expanded-mb_699)))))))))))))))))))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_0 module-name-sym_0)(begin(syntax-property$1 stx_0 'enclosing-module-name module-name-sym_0))))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_0"
" outside-scope_0"
" init-ctx_0"
" keep-enclosing-scope-at-phase_0"
" self_0"
" enclosing-self_0"
" enclosing-mod_0)"
"(begin"
"(lambda(s_0)"
"(let-values()"
"(let-values(((s-without-enclosing_745)"
"(if keep-enclosing-scope-at-phase_0"
" s_0"
"(remove-use-site-scopes"
"(remove-scopes s_0(root-expand-context-module-scopes init-ctx_0))"
" init-ctx_0))))"
"(let-values(((s-with-edges_746)"
"(add-scope(add-scope s-without-enclosing_745 outside-scope_0) inside-scope_0)))"
"(let-values(((s-with-suitable-enclosing_747)"
"(if keep-enclosing-scope-at-phase_0"
"(let-values()"
"(let-values(((s-with-edges460_748) s-with-edges_746)"
"((enclosing-self461_749) enclosing-self_0)"
"((enclosing-mod462_750) enclosing-mod_0))"
"(syntax-module-path-index-shift13.1"
" #f"
" s-with-edges460_748"
" enclosing-self461_749"
" enclosing-mod462_750"
" #f)))"
"(let-values() s-with-edges_746))))"
"(let-values(((s-with-suitable-enclosing456_751) s-with-suitable-enclosing_747)"
"((temp457_752)(make-generic-self-module-path-index self_0))"
"((self458_753) self_0)"
"((temp459_754)(current-code-inspector)))"
"(syntax-module-path-index-shift13.1"
" #f"
" s-with-suitable-enclosing456_751"
" temp457_752"
" self458_753"
" temp459_754))))))))))"
"(define-values"
"(partially-expand-bodys79.1)"
"(lambda(all-scopes-stx55_0"
" compiled-submodules59_0"
" ctx49_0"
" declared-keywords57_0"
" declared-submodule-names58_0"
" defined-syms56_0"
" frame-id52_0"
" loop62_0"
" modules-being-compiled60_0"
" mpis-to-reset61_0"
" namespace50_0"
" need-eventually-defined54_0"
" phase48_0"
" requires-and-provides53_0"
" self51_0"
" bodys78_0)"
"(begin"
" 'partially-expand-bodys79"
"(let-values(((bodys_775) bodys78_0))"
"(let-values(((phase_776) phase48_0))"
"(let-values(((partial-body-ctx_777) ctx49_0))"
"(let-values(((m-ns_778) namespace50_0))"
"(let-values(((self_779) self51_0))"
"(let-values(((frame-id_780) frame-id52_0))"
"(let-values(((requires+provides_781) requires-and-provides53_0))"
"(let-values(((need-eventually-defined_782) need-eventually-defined54_0))"
"(let-values(((all-scopes-stx_783) all-scopes-stx55_0))"
"(let-values(((defined-syms_784) defined-syms56_0))"
"(let-values(((declared-keywords_785) declared-keywords57_0))"
"(let-values(((declared-submodule-names_786) declared-submodule-names58_0))"
"(let-values(((compiled-submodules_787) compiled-submodules59_0))"
"(let-values(((modules-being-compiled_788) modules-being-compiled60_0))"
"(let-values(((mpis-to-reset_789) mpis-to-reset61_0))"
"(let-values(((pass-1-and-2-loop_790) loop62_0))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_778 phase_776)"
"((letrec-values(((loop_791)"
"(lambda(tail?_0 bodys_0)"
"(begin"
" 'loop"
"(if(null? bodys_0)"
"(let-values()"
"(if(if tail?_0(not(zero? phase_776)) #f)"
"(let-values()"
"(begin"
"(let-values(((obs_794)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_794"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_794"
" 'module-lift-end-loop"
" '())))"
"(void)))"
" null))"
"(if tail?_0"
"(let-values()"
"(let-values(((bodys_795)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_777))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_777)))))"
"(begin"
"(let-values(((obs_796)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_796"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_796"
" 'module-lift-end-loop"
" bodys_795)))"
"(void)))"
"(if(null? bodys_795)"
"(let-values() null)"
"(let-values()"
"(loop_791"
" #t"
"(add-post-expansion-scope"
" bodys_795"
" partial-body-ctx_777)))))))"
"(let-values() null))))"
"(let-values()"
"(let-values(((rest-bodys_797)(cdr bodys_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_801)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_801"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_801"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_798)"
"(let-values()"
"(let-values(((temp463_802)"
"(car bodys_0))"
"((partial-body-ctx464_803)"
" partial-body-ctx_777))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp463_802"
" partial-body-ctx464_803)))))"
"(let-values(((disarmed-exp-body_799)"
"(syntax-disarm$1 exp-body_798)))"
"(let-values(((lifted-defns_800)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_777))))"
"(begin"
"(if(pair? lifted-defns_800)"
"(let-values()"
"(log-lifted-defns"
" partial-body-ctx_777"
" lifted-defns_800"
" exp-body_798"
" rest-bodys_797))"
"(void))"
"(let-values(((obs_804)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_804"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_804"
" 'rename-one"
" exp-body_798)))"
"(void)))"
"(let-values(((finish_805)"
"(lambda()"
"(begin"
" 'finish"
"(let-values(((tmp_806)"
"(core-form-sym"
" disarmed-exp-body_799"
" phase_776)))"
"(if(equal?"
" tmp_806"
" 'begin)"
"(let-values()"
"(let-values(((ok?_807"
" begin465_808"
" e466_809)"
"(let-values(((s_825)"
" disarmed-exp-body_799))"
"(let-values(((orig-s_826)"
" s_825))"
"(let-values(((begin465_827"
" e466_828)"
"(let-values(((s_829)"
"(if(syntax?$1"
" s_825)"
"(syntax-e$1"
" s_825)"
" s_825)))"
"(if(pair?"
" s_829)"
"(let-values(((begin467_830)"
"(let-values(((s_832)"
"(car"
" s_829)))"
" s_832))"
"((e468_831)"
"(let-values(((s_833)"
"(cdr"
" s_829)))"
"(let-values(((s_834)"
"(if(syntax?$1"
" s_833)"
"(syntax-e$1"
" s_833)"
" s_833)))"
"(let-values(((flat-s_835)"
"(to-syntax-list.1"
" s_834)))"
"(if(not"
" flat-s_835)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_826))"
"(let-values()"
" flat-s_835)))))))"
"(values"
" begin467_830"
" e468_831))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_826)))))"
"(values"
" #t"
" begin465_827"
" e466_828))))))"
"(let-values(((track_823)"
"(lambda(e_0)"
"(begin"
" 'track"
"(syntax-track-origin$1"
" e_0"
" exp-body_798)))))"
"(let-values(((spliced-bodys_824)"
"(append"
"(map2"
" track_823"
" e466_809)"
" rest-bodys_797)))"
"(begin"
"(let-values(((obs_837)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_837"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_837"
" 'splice"
" spliced-bodys_824)))"
"(void)))"
"(loop_791"
" tail?_0"
" spliced-bodys_824))))))"
"(if(equal?"
" tmp_806"
" 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_856)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_856"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_856"
" 'enter-prim"
" exp-body_798)"
"(call-expand-observe"
" obs_856"
" 'prim-begin-for-syntax)"
"(call-expand-observe"
" obs_856"
" 'prepare-env))))"
"(void)))"
"(values))))"
"(let-values(((ct-m-ns_838)"
"(namespace->namespace-at-phase"
" m-ns_778"
"(add1"
" phase_776))))"
"(let-values((()"
"(begin"
"(prepare-next-phase-namespace"
" partial-body-ctx_777)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_857)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_857"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_857"
" 'phase-up)))"
"(void)))"
"(values))))"
"(let-values(((ok?_839"
" begin-for-syntax469_840"
" e470_841)"
"(let-values(((s_858)"
" disarmed-exp-body_799))"
"(let-values(((orig-s_859)"
" s_858))"
"(let-values(((begin-for-syntax469_860"
" e470_861)"
"(let-values(((s_862)"
"(if(syntax?$1"
" s_858)"
"(syntax-e$1"
" s_858)"
" s_858)))"
"(if(pair?"
" s_862)"
"(let-values(((begin-for-syntax471_863)"
"(let-values(((s_865)"
"(car"
" s_862)))"
" s_865))"
"((e472_864)"
"(let-values(((s_866)"
"(cdr"
" s_862)))"
"(let-values(((s_867)"
"(if(syntax?$1"
" s_866)"
"(syntax-e$1"
" s_866)"
" s_866)))"
"(let-values(((flat-s_868)"
"(to-syntax-list.1"
" s_867)))"
"(if(not"
" flat-s_868)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_859))"
"(let-values()"
" flat-s_868)))))))"
"(values"
" begin-for-syntax471_863"
" e472_864))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_859)))))"
"(values"
" #t"
" begin-for-syntax469_860"
" e470_861))))))"
"(let-values(((nested-bodys_855)"
"(pass-1-and-2-loop_790"
" e470_841"
"(add1"
" phase_776)"
" #f)))"
"(begin"
"(let-values(((obs_869)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_869"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_869"
" 'next-group)))"
"(void)))"
"(namespace-run-available-modules!"
" m-ns_778"
"(add1"
" phase_776))"
"(eval-nested-bodys"
" nested-bodys_855"
"(add1"
" phase_776)"
" ct-m-ns_838"
" self_779"
" partial-body-ctx_777)"
"(namespace-visit-available-modules!"
" m-ns_778"
" phase_776)"
"(let-values(((obs_870)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_870"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_870"
" 'exit-prim"
"(let-values(((s-nested-bodys_871)"
"(reverse$1"
"(let-values(((lst_872)"
" nested-bodys_855))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_872)))"
"((letrec-values(((for-loop_873)"
"(lambda(fold-var_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((nested-body_876)"
"(unsafe-car"
" lst_0))"
"((rest_877)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((fold-var_878)"
"(let-values(((fold-var_879)"
" fold-var_0))"
"(let-values(((fold-var_880)"
"(let-values()"
"(cons"
"(let-values()"
"(extract-syntax"
" nested-body_876))"
" fold-var_879))))"
"(values"
" fold-var_880)))))"
"(if(not"
" #f)"
"(for-loop_873"
" fold-var_878"
" rest_877)"
" fold-var_878)))"
" fold-var_0)))))"
" for-loop_873)"
" null"
" lst_872))))))"
"(datum->syntax$1"
" #f"
"(cons"
" begin-for-syntax469_840"
" s-nested-bodys_871)"
" exp-body_798)))))"
"(void)))"
"(cons"
"(semi-parsed-begin-for-syntax3.1"
" exp-body_798"
" nested-bodys_855)"
"(loop_791"
" tail?_0"
" rest-bodys_797))))))))))"
"(if(equal?"
" tmp_806"
" 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_903)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_903"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_903"
" 'enter-prim"
" exp-body_798)"
"(call-expand-observe"
" obs_903"
" 'prim-define-values))))"
"(void)))"
"(values))))"
"(let-values(((ok?_881"
" define-values473_882"
" id474_883"
" rhs475_884)"
"(let-values(((s_904)"
" disarmed-exp-body_799))"
"(let-values(((orig-s_905)"
" s_904))"
"(let-values(((define-values473_906"
" id474_907"
" rhs475_908)"
"(let-values(((s_909)"
"(if(syntax?$1"
" s_904)"
"(syntax-e$1"
" s_904)"
" s_904)))"
"(if(pair?"
" s_909)"
"(let-values(((define-values476_910)"
"(let-values(((s_913)"
"(car"
" s_909)))"
" s_913))"
"((id477_911"
" rhs478_912)"
"(let-values(((s_914)"
"(cdr"
" s_909)))"
"(let-values(((s_915)"
"(if(syntax?$1"
" s_914)"
"(syntax-e$1"
" s_914)"
" s_914)))"
"(if(pair?"
" s_915)"
"(let-values(((id479_916)"
"(let-values(((s_918)"
"(car"
" s_915)))"
"(let-values(((s_919)"
"(if(syntax?$1"
" s_918)"
"(syntax-e$1"
" s_918)"
" s_918)))"
"(let-values(((flat-s_920)"
"(to-syntax-list.1"
" s_919)))"
"(if(not"
" flat-s_920)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_905))"
"(let-values()"
"(let-values(((id_921)"
"(let-values(((lst_922)"
" flat-s_920))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_922)))"
"((letrec-values(((for-loop_923)"
"(lambda(id_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_926)"
"(unsafe-car"
" lst_0))"
"((rest_927)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id_928)"
"(let-values(((id_929)"
" id_0))"
"(let-values(((id_930)"
"(let-values()"
"(let-values(((id492_931)"
"(let-values()"
"(if(let-values(((or-part_932)"
"(if(syntax?$1"
" s_926)"
"(symbol?"
"(syntax-e$1"
" s_926))"
" #f)))"
"(if or-part_932"
" or-part_932"
"(symbol?"
" s_926)))"
" s_926"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_905"
" s_926)))))"
"(cons"
" id492_931"
" id_929)))))"
"(values"
" id_930)))))"
"(if(not"
" #f)"
"(for-loop_923"
" id_928"
" rest_927)"
" id_928)))"
" id_0)))))"
" for-loop_923)"
" null"
" lst_922)))))"
"(reverse$1"
" id_921))))))))"
"((rhs480_917)"
"(let-values(((s_933)"
"(cdr"
" s_915)))"
"(let-values(((s_934)"
"(if(syntax?$1"
" s_933)"
"(syntax-e$1"
" s_933)"
" s_933)))"
"(if(pair?"
" s_934)"
"(let-values(((rhs481_935)"
"(let-values(((s_936)"
"(car"
" s_934)))"
" s_936))"
"(()"
"(let-values(((s_937)"
"(cdr"
" s_934)))"
"(let-values(((s_938)"
"(if(syntax?$1"
" s_937)"
"(syntax-e$1"
" s_937)"
" s_937)))"
"(if(null?"
" s_938)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_905))))))"
"(values"
" rhs481_935))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_905))))))"
"(values"
" id479_916"
" rhs480_917))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_905))))))"
"(values"
" define-values476_910"
" id477_911"
" rhs478_912))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_905)))))"
"(values"
" #t"
" define-values473_906"
" id474_907"
" rhs475_908))))))"
"(let-values(((ids_901)"
"(remove-use-site-scopes"
" id474_883"
" partial-body-ctx_777)))"
"(let-values((()"
"(begin"
"(let-values(((ids482_939)"
" ids_901)"
"((phase483_940)"
" phase_776)"
"((exp-body484_941)"
" exp-body_798))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" ids482_939"
" phase483_940"
" exp-body484_941"
" unsafe-undefined))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ids485_943)"
" ids_901)"
"((phase486_944)"
" phase_776)"
"((requires+provides487_945)"
" requires+provides_781)"
"((exp-body488_946)"
" exp-body_798))"
"(check-ids-unbound171.1"
" exp-body488_946"
" ids485_943"
" phase486_944"
" requires+provides487_945))"
"(values))))"
"(let-values(((syms_902)"
"(let-values(((ids493_948)"
" ids_901)"
"((defined-syms494_949)"
" defined-syms_784)"
"((self495_950)"
" self_779)"
"((phase496_951)"
" phase_776)"
"((all-scopes-stx497_952)"
" all-scopes-stx_783)"
"((frame-id498_953)"
" frame-id_780)"
"((requires+provides499_954)"
" requires+provides_781)"
"((exp-body500_955)"
" exp-body_798))"
"(select-defined-syms-and-bind!16.1"
" #f"
" frame-id498_953"
" exp-body500_955"
" requires+provides499_954"
" #f"
" ids493_948"
" defined-syms494_949"
" self495_950"
" phase496_951"
" all-scopes-stx497_952))))"
"(begin"
"(let-values(((lst_956)"
" syms_902))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_956)))"
"((letrec-values(((for-loop_957)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((sym_959)"
"(unsafe-car"
" lst_0))"
"((rest_960)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-unset-transformer!"
" m-ns_778"
" phase_776"
" sym_959))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_957"
" rest_960)"
"(values))))"
"(values))))))"
" for-loop_957)"
" lst_956)))"
"(void)"
"(let-values(((requires+provides489_961)"
" requires+provides_781)"
"((syms490_962)"
" syms_902)"
"((phase491_963)"
" phase_776))"
"(add-defined-syms!103.1"
" #f"
" requires+provides489_961"
" syms490_962"
" phase491_963))"
"(let-values(((obs_964)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_964"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_964"
" 'exit-prim"
"(datum->syntax$1"
" #f"
"(list"
" define-values473_882"
" ids_901"
" rhs475_884)"
" exp-body_798))))"
"(void)))"
"(cons"
"(semi-parsed-define-values2.1"
" exp-body_798"
" syms_902"
" ids_901"
" rhs475_884)"
"(loop_791"
" tail?_0"
" rest-bodys_797))))))))))"
"(if(equal?"
" tmp_806"
" 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_991)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_991"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_991"
" 'enter-prim"
" exp-body_798)"
"(call-expand-observe"
" obs_991"
" 'prim-define-syntaxes)"
"(call-expand-observe"
" obs_991"
" 'prepare-env))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(prepare-next-phase-namespace"
" partial-body-ctx_777)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_992)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_992"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_992"
" 'phase-up)))"
"(void)))"
"(values))))"
"(let-values(((ok?_965"
" define-syntaxes501_966"
" id502_967"
" rhs503_968)"
"(let-values(((s_993)"
" disarmed-exp-body_799))"
"(let-values(((orig-s_994)"
" s_993))"
"(let-values(((define-syntaxes501_995"
" id502_996"
" rhs503_997)"
"(let-values(((s_998)"
"(if(syntax?$1"
" s_993)"
"(syntax-e$1"
" s_993)"
" s_993)))"
"(if(pair?"
" s_998)"
"(let-values(((define-syntaxes504_999)"
"(let-values(((s_1002)"
"(car"
" s_998)))"
" s_1002))"
"((id505_1000"
" rhs506_1001)"
"(let-values(((s_1003)"
"(cdr"
" s_998)))"
"(let-values(((s_1004)"
"(if(syntax?$1"
" s_1003)"
"(syntax-e$1"
" s_1003)"
" s_1003)))"
"(if(pair?"
" s_1004)"
"(let-values(((id507_1005)"
"(let-values(((s_1007)"
"(car"
" s_1004)))"
"(let-values(((s_1008)"
"(if(syntax?$1"
" s_1007)"
"(syntax-e$1"
" s_1007)"
" s_1007)))"
"(let-values(((flat-s_1009)"
"(to-syntax-list.1"
" s_1008)))"
"(if(not"
" flat-s_1009)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_994))"
"(let-values()"
"(let-values(((id_1010)"
"(let-values(((lst_1011)"
" flat-s_1009))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_1011)))"
"((letrec-values(((for-loop_1012)"
"(lambda(id_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_1015)"
"(unsafe-car"
" lst_0))"
"((rest_1016)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id_1017)"
"(let-values(((id_1018)"
" id_0))"
"(let-values(((id_1019)"
"(let-values()"
"(let-values(((id521_1020)"
"(let-values()"
"(if(let-values(((or-part_1021)"
"(if(syntax?$1"
" s_1015)"
"(symbol?"
"(syntax-e$1"
" s_1015))"
" #f)))"
"(if or-part_1021"
" or-part_1021"
"(symbol?"
" s_1015)))"
" s_1015"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_994"
" s_1015)))))"
"(cons"
" id521_1020"
" id_1018)))))"
"(values"
" id_1019)))))"
"(if(not"
" #f)"
"(for-loop_1012"
" id_1017"
" rest_1016)"
" id_1017)))"
" id_0)))))"
" for-loop_1012)"
" null"
" lst_1011)))))"
"(reverse$1"
" id_1010))))))))"
"((rhs508_1006)"
"(let-values(((s_1022)"
"(cdr"
" s_1004)))"
"(let-values(((s_1023)"
"(if(syntax?$1"
" s_1022)"
"(syntax-e$1"
" s_1022)"
" s_1022)))"
"(if(pair?"
" s_1023)"
"(let-values(((rhs509_1024)"
"(let-values(((s_1025)"
"(car"
" s_1023)))"
" s_1025))"
"(()"
"(let-values(((s_1026)"
"(cdr"
" s_1023)))"
"(let-values(((s_1027)"
"(if(syntax?$1"
" s_1026)"
"(syntax-e$1"
" s_1026)"
" s_1026)))"
"(if(null?"
" s_1027)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_994))))))"
"(values"
" rhs509_1024))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_994))))))"
"(values"
" id507_1005"
" rhs508_1006))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_994))))))"
"(values"
" define-syntaxes504_999"
" id505_1000"
" rhs506_1001))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_994)))))"
"(values"
" #t"
" define-syntaxes501_995"
" id502_996"
" rhs503_997))))))"
"(let-values(((ids_985)"
"(remove-use-site-scopes"
" id502_967"
" partial-body-ctx_777)))"
"(let-values((()"
"(begin"
"(let-values(((ids510_1028)"
" ids_985)"
"((phase511_1029)"
" phase_776)"
"((exp-body512_1030)"
" exp-body_798))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" ids510_1028"
" phase511_1029"
" exp-body512_1030"
" unsafe-undefined))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ids513_1032)"
" ids_985)"
"((phase514_1033)"
" phase_776)"
"((requires+provides515_1034)"
" requires+provides_781)"
"((exp-body516_1035)"
" exp-body_798))"
"(check-ids-unbound171.1"
" exp-body516_1035"
" ids513_1032"
" phase514_1033"
" requires+provides515_1034))"
"(values))))"
"(let-values(((syms_986)"
"(let-values(((ids522_1037)"
" ids_985)"
"((defined-syms523_1038)"
" defined-syms_784)"
"((self524_1039)"
" self_779)"
"((phase525_1040)"
" phase_776)"
"((all-scopes-stx526_1041)"
" all-scopes-stx_783)"
"((frame-id527_1042)"
" frame-id_780)"
"((requires+provides528_1043)"
" requires+provides_781)"
"((exp-body529_1044)"
" exp-body_798)"
"((temp530_1045)"
" #t))"
"(select-defined-syms-and-bind!16.1"
" temp530_1045"
" frame-id527_1042"
" exp-body529_1044"
" requires+provides528_1043"
" #f"
" ids522_1037"
" defined-syms523_1038"
" self524_1039"
" phase525_1040"
" all-scopes-stx526_1041))))"
"(let-values((()"
"(begin"
"(let-values(((requires+provides517_1047)"
" requires+provides_781)"
"((syms518_1048)"
" syms_986)"
"((phase519_1049)"
" phase_776)"
"((temp520_1050)"
" #t))"
"(add-defined-syms!103.1"
" temp520_1050"
" requires+provides517_1047"
" syms518_1048"
" phase519_1049))"
"(values))))"
"(let-values(((exp-rhs_987"
" parsed-rhs_988"
" vals_989)"
"(let-values(((temp531_1052)"
" 'define-syntaxes)"
"((temp532_1053)"
" rhs503_968)"
"((ids533_1054)"
" ids_985)"
"((temp534_1055)"
"(let-values(((v_1057)"
" partial-body-ctx_777))"
"(let-values(((the-struct_1058)"
" v_1057))"
"(if(expand-context/outer?"
" the-struct_1058)"
"(let-values(((need-eventually-defined536_1059)"
" need-eventually-defined_782)"
"((inner537_1060)"
"(let-values(((the-struct_1061)"
"(root-expand-context/outer-inner"
" v_1057)))"
"(if(expand-context/inner?"
" the-struct_1061)"
"(let-values(((lifts538_1062)"
" #f)"
"((module-lifts539_1063)"
" #f)"
"((to-module-lifts540_1064)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_1061)"
"(root-expand-context/inner-module-scopes"
" the-struct_1061)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_1061)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_1061)"
"(root-expand-context/inner-defined-syms"
" the-struct_1061)"
"(root-expand-context/inner-counter"
" the-struct_1061)"
"(root-expand-context/inner-lift-key"
" the-struct_1061)"
"(expand-context/inner-to-parsed?"
" the-struct_1061)"
"(expand-context/inner-phase"
" the-struct_1061)"
"(expand-context/inner-namespace"
" the-struct_1061)"
"(expand-context/inner-just-once?"
" the-struct_1061)"
"(expand-context/inner-module-begin-k"
" the-struct_1061)"
"(expand-context/inner-allow-unbound?"
" the-struct_1061)"
"(expand-context/inner-in-local-expand?"
" the-struct_1061)"
"(expand-context/inner-keep-#%expression?"
" the-struct_1061)"
"(expand-context/inner-stops"
" the-struct_1061)"
"(expand-context/inner-declared-submodule-names"
" the-struct_1061)"
" lifts538_1062"
"(expand-context/inner-lift-envs"
" the-struct_1061)"
" module-lifts539_1063"
"(expand-context/inner-require-lifts"
" the-struct_1061)"
" to-module-lifts540_1064"
"(expand-context/inner-requires+provides"
" the-struct_1061)"
"(expand-context/inner-observer"
" the-struct_1061)"
"(expand-context/inner-for-serializable?"
" the-struct_1061)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_1061)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                     \"expand-context/inner?\""
" the-struct_1061)))))"
"(expand-context/outer1.1"
" inner537_1060"
"(root-expand-context/outer-post-expansion"
" the-struct_1058)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_1058)"
"(root-expand-context/outer-frame-id"
" the-struct_1058)"
"(expand-context/outer-context"
" the-struct_1058)"
"(expand-context/outer-env"
" the-struct_1058)"
"(expand-context/outer-scopes"
" the-struct_1058)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_1058)"
"(expand-context/outer-binding-layer"
" the-struct_1058)"
"(expand-context/outer-reference-records"
" the-struct_1058)"
"(expand-context/outer-only-immediate?"
" the-struct_1058)"
" need-eventually-defined536_1059"
"(expand-context/outer-current-introduction-scopes"
" the-struct_1058)"
"(expand-context/outer-current-use-scopes"
" the-struct_1058)"
"(expand-context/outer-name"
" the-struct_1058)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                   \"expand-context/outer?\""
" the-struct_1058)))))"
"((temp535_1056)"
" #f))"
"(expand+eval-for-syntaxes-binding108.1"
" temp535_1056"
" temp531_1052"
" temp532_1053"
" ids533_1054"
" temp534_1055))))"
"(let-values((()"
"(begin"
"(let-values(((lst_1065)"
" syms_986)"
"((lst_1066)"
" vals_989)"
"((lst_1067)"
" ids_985))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_1065)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_1066)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_1067)))"
"((letrec-values(((for-loop_1068)"
"(lambda(lst_0"
" lst_1"
" lst_2)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_0)"
"(if(pair?"
" lst_1)"
"(pair?"
" lst_2)"
" #f)"
" #f)"
"(let-values(((sym_1072)"
"(unsafe-car"
" lst_0))"
"((rest_1073)"
"(unsafe-cdr"
" lst_0))"
"((val_1074)"
"(unsafe-car"
" lst_1))"
"((rest_1075)"
"(unsafe-cdr"
" lst_1))"
"((id_1076)"
"(unsafe-car"
" lst_2))"
"((rest_1077)"
"(unsafe-cdr"
" lst_2)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_1074"
" id_1076"
" phase_776"
" partial-body-ctx_777)"
"(namespace-set-transformer!"
" m-ns_778"
" phase_776"
" sym_1072"
" val_1074)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_1068"
" rest_1073"
" rest_1075"
" rest_1077)"
"(values))))"
"(values))))))"
" for-loop_1068)"
" lst_1065"
" lst_1066"
" lst_1067)))"
"(values))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1078)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_1078"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1078"
" 'exit-prim"
"(datum->syntax$1"
" #f"
"(list"
" define-syntaxes501_966"
" ids_985"
" exp-rhs_987)))))"
"(void)))"
"(values))))"
"(let-values(((parsed-body_990)"
"(parsed-define-syntaxes20.1"
"(keep-properties-only"
" exp-body_798)"
" ids_985"
" syms_986"
" parsed-rhs_988)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_777)"
" parsed-body_990"
"(expanded+parsed1.1"
"(let-values(((exp-body541_1079)"
" exp-body_798)"
"((temp542_1080)"
"(list"
" define-syntaxes501_966"
" ids_985"
" exp-rhs_987)))"
"(rebuild5.1"
" #t"
" exp-body541_1079"
" temp542_1080))"
" parsed-body_990))"
"(loop_791"
" tail?_0"
" rest-bodys_797)))))))))))))))))"
"(if(equal?"
" tmp_806"
" '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1098)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_1098"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_1098"
" 'enter-prim"
" exp-body_798)"
"(call-expand-observe"
" obs_1098"
" 'prim-require))))"
"(void)))"
"(values))))"
"(let-values(((ready-body_1081)"
"(remove-use-site-scopes"
" disarmed-exp-body_799"
" partial-body-ctx_777)))"
"(let-values(((ok?_1082"
" #%require543_1083"
" req544_1084)"
"(let-values(((s_1099)"
" ready-body_1081))"
"(let-values(((orig-s_1100)"
" s_1099))"
"(let-values(((#%require543_1101"
" req544_1102)"
"(let-values(((s_1103)"
"(if(syntax?$1"
" s_1099)"
"(syntax-e$1"
" s_1099)"
" s_1099)))"
"(if(pair?"
" s_1103)"
"(let-values(((#%require545_1104)"
"(let-values(((s_1106)"
"(car"
" s_1103)))"
" s_1106))"
"((req546_1105)"
"(let-values(((s_1107)"
"(cdr"
" s_1103)))"
"(let-values(((s_1108)"
"(if(syntax?$1"
" s_1107)"
"(syntax-e$1"
" s_1107)"
" s_1107)))"
"(let-values(((flat-s_1109)"
"(to-syntax-list.1"
" s_1108)))"
"(if(not"
" flat-s_1109)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_1100))"
"(let-values()"
" flat-s_1109)))))))"
"(values"
" #%require545_1104"
" req546_1105))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_1100)))))"
"(values"
" #t"
" #%require543_1101"
" req544_1102))))))"
"(begin"
"(let-values(((temp547_1111)"
" req544_1084)"
"((exp-body548_1112)"
" exp-body_798)"
"((self549_1113)"
" self_779)"
"((m-ns550_1114)"
" m-ns_778)"
"((phase551_1115)"
" phase_776)"
"((phase552_1116)"
" phase_776)"
"((requires+provides553_1117)"
" requires+provides_781)"
"((declared-submodule-names554_1118)"
" declared-submodule-names_786)"
"((temp555_1119)"
" 'module))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" declared-submodule-names554_1118"
" #f"
" phase552_1116"
" #f"
" self549_1113"
" #f"
" #t"
" temp555_1119"
" temp547_1111"
" exp-body548_1112"
" m-ns550_1114"
" phase551_1115"
" requires+provides553_1117))"
"(let-values(((obs_1120)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_1120"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1120"
" 'exit-prim"
" ready-body_1081)))"
"(void)))"
"(cons"
" exp-body_798"
"(loop_791"
" tail?_0"
" rest-bodys_797)))))))"
"(if(equal?"
" tmp_806"
" '#%provide)"
"(let-values()"
"(cons"
" exp-body_798"
"(loop_791"
" tail?_0"
" rest-bodys_797)))"
"(if(equal?"
" tmp_806"
" 'module)"
"(let-values()"
"(let-values(((ready-body_1121)"
"(remove-use-site-scopes"
" exp-body_798"
" partial-body-ctx_777)))"
"(let-values(((submod_1122)"
"(let-values(((ready-body556_1124)"
" ready-body_1121)"
"((self557_1125)"
" self_779)"
"((partial-body-ctx558_1126)"
" partial-body-ctx_777)"
"((temp559_1127)"
" #f)"
"((declared-submodule-names560_1128)"
" declared-submodule-names_786)"
"((mpis-to-reset561_1129)"
" mpis-to-reset_789)"
"((compiled-submodules562_1130)"
" compiled-submodules_787)"
"((modules-being-compiled563_1131)"
" modules-being-compiled_788))"
"(expand-submodule193.1"
" compiled-submodules562_1130"
" declared-submodule-names560_1128"
" #f"
" #f"
" temp559_1127"
" #f"
" modules-being-compiled563_1131"
" mpis-to-reset561_1129"
" ready-body556_1124"
" self557_1125"
" partial-body-ctx558_1126))))"
"(cons"
" submod_1122"
"(loop_791"
" tail?_0"
" rest-bodys_797)))))"
"(if(equal?"
" tmp_806"
" 'module*)"
"(let-values()"
"(begin"
"(let-values(((obs_1132)"
"(expand-context-observer"
" partial-body-ctx_777)))"
"(if obs_1132"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_1132"
" 'enter-prim"
" exp-body_798)"
"(call-expand-observe"
" obs_1132"
" 'prim-submodule*)"
"(call-expand-observe"
" obs_1132"
" 'exit-prim"
" exp-body_798))))"
"(void)))"
"(cons"
" exp-body_798"
"(loop_791"
" tail?_0"
" rest-bodys_797))))"
"(if(equal?"
" tmp_806"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_1133"
" #%declare564_1134"
" kw565_1135)"
"(let-values(((s_1150)"
" disarmed-exp-body_799))"
"(let-values(((orig-s_1151)"
" s_1150))"
"(let-values(((#%declare564_1152"
" kw565_1153)"
"(let-values(((s_1154)"
"(if(syntax?$1"
" s_1150)"
"(syntax-e$1"
" s_1150)"
" s_1150)))"
"(if(pair?"
" s_1154)"
"(let-values(((#%declare566_1155)"
"(let-values(((s_1157)"
"(car"
" s_1154)))"
" s_1157))"
"((kw567_1156)"
"(let-values(((s_1158)"
"(cdr"
" s_1154)))"
"(let-values(((s_1159)"
"(if(syntax?$1"
" s_1158)"
"(syntax-e$1"
" s_1158)"
" s_1158)))"
"(let-values(((flat-s_1160)"
"(to-syntax-list.1"
" s_1159)))"
"(if(not"
" flat-s_1160)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_1151))"
"(let-values()"
" flat-s_1160)))))))"
"(values"
" #%declare566_1155"
" kw567_1156))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_1151)))))"
"(values"
" #t"
" #%declare564_1152"
" kw565_1153))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_1161)"
" kw565_1135))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_1161)))"
"((letrec-values(((for-loop_1162)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((kw_1164)"
"(unsafe-car"
" lst_0))"
"((rest_1165)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_1164))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"expected a keyword\""
" exp-body_798"
" kw_1164)))"
"(if(memq"
"(syntax-e$1"
" kw_1164)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"not an allowed declaration keyword\""
" exp-body_798"
" kw_1164)))"
"(if(hash-ref"
" declared-keywords_785"
"(syntax-e$1"
" kw_1164)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"keyword declared multiple times\""
" exp-body_798"
" kw_1164))"
"(void))"
"(hash-set!"
" declared-keywords_785"
"(syntax-e$1"
" kw_1164)"
" kw_1164)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_1162"
" rest_1165)"
"(values))))"
"(values))))))"
" for-loop_1162)"
" lst_1161)))"
"(values))))"
"(let-values()"
"(let-values(((parsed-body_1149)"
"(parsed-#%declare22.1"
" exp-body_798)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_777)"
" parsed-body_1149"
"(expanded+parsed1.1"
" exp-body_798"
" parsed-body_1149))"
"(loop_791"
" tail?_0"
" rest-bodys_797)))))))"
"(let-values()"
"(cons"
" exp-body_798"
"(loop_791"
" tail?_0"
" rest-bodys_797)))))))))))))))))"
"(let-values(((l_1166)"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_777))"
" lifted-defns_800"
"(loop_791"
" #f"
"(add-post-expansion-scope"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_777))"
" partial-body-ctx_777)))))"
"(if(null? l_1166)"
"(finish_805)"
"(append"
" l_1166"
"(finish_805)))))))))))))))))"
" loop_791)"
" #t"
" bodys_775))))))))))))))))))))))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_0 frame-id_0 inside-scope_0 all-scopes-stx_0 defined-syms_0 requires+provides_0)"
"(begin"
"(lambda(ids_0 rhs_0 phase_0)"
"(let-values(((scoped-ids_1242)"
"(reverse$1"
"(let-values(((lst_1245) ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_1245)))"
"((letrec-values(((for-loop_1246)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_1249)(unsafe-car lst_0))"
"((rest_1250)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_1251)"
"(let-values(((fold-var_1252) fold-var_0))"
"(let-values(((fold-var_1253)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_1249"
" inside-scope_0))"
" fold-var_1252))))"
"(values fold-var_1253)))))"
"(if(not #f)"
"(for-loop_1246 fold-var_1251 rest_1250)"
" fold-var_1251)))"
" fold-var_0)))))"
" for-loop_1246)"
" null"
" lst_1245))))))"
"(let-values(((syms_1243)"
"(let-values(((scoped-ids568_1255) scoped-ids_1242)"
"((defined-syms569_1256) defined-syms_0)"
"((self570_1257) self_0)"
"((phase571_1258) phase_0)"
"((all-scopes-stx572_1259) all-scopes-stx_0)"
"((frame-id573_1260) frame-id_0)"
"((requires+provides574_1261) requires+provides_0))"
"(select-defined-syms-and-bind!16.1"
" #f"
" frame-id573_1260"
" #f"
" requires+provides574_1261"
" #f"
" scoped-ids568_1255"
" defined-syms569_1256"
" self570_1257"
" phase571_1258"
" all-scopes-stx572_1259))))"
"(let-values(((s_1244)"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_0) 'define-values)"
" scoped-ids_1242"
" rhs_0))"
" inside-scope_0)))"
"(values scoped-ids_1242(semi-parsed-define-values2.1 s_1244 syms_1243 scoped-ids_1242 rhs_0)))))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_0 ctx_0)"
"(begin"
"(let-values(((pe_1264)(root-expand-context-post-expansion ctx_0)))"
"(if pe_1264"
"(reverse$1"
"(let-values(((lst_1265) bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_1265)))"
"((letrec-values(((for-loop_1266)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((body_1269)(unsafe-car lst_0))((rest_1270)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_1271)"
"(let-values(((fold-var_1272) fold-var_0))"
"(let-values(((fold-var_1273)"
"(let-values()"
"(cons"
"(let-values()"
"(apply-post-expansion pe_1264 body_1269))"
" fold-var_1272))))"
"(values fold-var_1273)))))"
"(if(not #f)(for-loop_1266 fold-var_1271 rest_1270) fold-var_1271)))"
" fold-var_0)))))"
" for-loop_1266)"
" null"
" lst_1265))))"
" bodys_0)))))"
"(define-values"
"(finish-expanding-body-expressons97.1)"
"(lambda(compiled-submodules86_0"
" ctx83_0"
" declared-submodule-names85_0"
" modules-being-compiled87_0"
" mpis-to-reset88_0"
" phase82_0"
" self84_0"
" partially-expanded-bodys96_0)"
"(begin"
" 'finish-expanding-body-expressons97"
"(let-values(((partially-expanded-bodys_1286) partially-expanded-bodys96_0))"
"(let-values(((phase_1287) phase82_0))"
"(let-values(((body-ctx_1288) ctx83_0))"
"(let-values(((self_1289) self84_0))"
"(let-values(((declared-submodule-names_1290) declared-submodule-names85_0))"
"(let-values(((compiled-submodules_1291) compiled-submodules86_0))"
"(let-values(((modules-being-compiled_1292) modules-being-compiled87_0))"
"(let-values(((mpis-to-reset_1293) mpis-to-reset88_0))"
"(let-values()"
"((letrec-values(((loop_1294)"
"(lambda(tail?_0 bodys_0)"
"(begin"
" 'loop"
"(if(null? bodys_0)"
"(let-values()"
"(if(if tail?_0(not(zero? phase_1287)) #f)"
"(let-values()"
"(begin"
"(let-values(((obs_1297)"
"(expand-context-observer body-ctx_1288)))"
"(if obs_1297"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1297"
" 'module-lift-end-loop"
" '())))"
"(void)))"
" null))"
"(if tail?_0"
"(let-values()"
"(let-values(((bodys_1298)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_1288))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" body-ctx_1288)))))"
"(if(null? bodys_1298)"
"(let-values()"
"(begin"
"(let-values(((obs_1299)"
"(expand-context-observer body-ctx_1288)))"
"(if obs_1299"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1299"
" 'module-lift-end-loop"
" '())))"
"(void)))"
" null))"
"(let-values()"
"(loop_1294"
" #t"
"(add-post-expansion-scope bodys_1298 body-ctx_1288))))))"
"(let-values() null))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1309)"
"(expand-context-observer"
" body-ctx_1288)))"
"(if obs_1309"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1309 'next)))"
"(void)))"
"(values))))"
"(let-values(((body_1300)(car bodys_0)))"
"(let-values(((rest-bodys_1301)(cdr bodys_0)))"
"(let-values(((exp-body_1302)"
"(if(let-values(((or-part_1310)"
"(parsed? body_1300)))"
"(if or-part_1310"
" or-part_1310"
"(let-values(((or-part_1311)"
"(expanded+parsed?"
" body_1300)))"
"(if or-part_1311"
" or-part_1311"
"(semi-parsed-begin-for-syntax?"
" body_1300)))))"
"(let-values() body_1300)"
"(if(semi-parsed-define-values? body_1300)"
"(let-values()"
"(let-values(((ids_1312)"
"(semi-parsed-define-values-ids"
" body_1300)))"
"(let-values(((rhs-ctx_1313)"
"(as-named-context"
"(as-expression-context"
" body-ctx_1288)"
" ids_1312)))"
"(let-values(((syms_1314)"
"(semi-parsed-define-values-syms"
" body_1300)))"
"(let-values(((s_1315)"
"(semi-parsed-define-values-s"
" body_1300)))"
"(let-values(((ok?_1316"
" define-values575_1317"
" _576_1318"
" _577_1319)"
"(let-values(((s_1339)"
"(syntax-disarm$1"
" s_1315)))"
"(if(if(not"
"(expand-context-to-parsed?"
" rhs-ctx_1313))"
" #t"
" #f)"
"(let-values(((orig-s_1340)"
" s_1339))"
"(let-values(((define-values575_1341"
" _576_1342"
" _577_1343)"
"(let-values(((s_1344)"
"(if(syntax?$1"
" s_1339)"
"(syntax-e$1"
" s_1339)"
" s_1339)))"
"(if(pair?"
" s_1344)"
"(let-values(((define-values578_1345)"
"(let-values(((s_1348)"
"(car"
" s_1344)))"
" s_1348))"
"((_579_1346"
" _580_1347)"
"(let-values(((s_1349)"
"(cdr"
" s_1344)))"
"(let-values(((s_1350)"
"(if(syntax?$1"
" s_1349)"
"(syntax-e$1"
" s_1349)"
" s_1349)))"
"(if(pair?"
" s_1350)"
"(let-values(((_581_1351)"
"(let-values(((s_1353)"
"(car"
" s_1350)))"
" s_1353))"
"((_582_1352)"
"(let-values(((s_1354)"
"(cdr"
" s_1350)))"
"(let-values(((s_1355)"
"(if(syntax?$1"
" s_1354)"
"(syntax-e$1"
" s_1354)"
" s_1354)))"
"(if(pair?"
" s_1355)"
"(let-values(((_583_1356)"
"(let-values(((s_1357)"
"(car"
" s_1355)))"
" s_1357))"
"(()"
"(let-values(((s_1358)"
"(cdr"
" s_1355)))"
"(let-values(((s_1359)"
"(if(syntax?$1"
" s_1358)"
"(syntax-e$1"
" s_1358)"
" s_1358)))"
"(if(null?"
" s_1359)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_1340))))))"
"(values"
" _583_1356))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_1340))))))"
"(values"
" _581_1351"
" _582_1352))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_1340))))))"
"(values"
" define-values578_1345"
" _579_1346"
" _580_1347))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_1340)))))"
"(values"
" #t"
" define-values575_1341"
" _576_1342"
" _577_1343)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((rebuild-s_1336)"
"(let-values(((rhs-ctx584_1361)"
" rhs-ctx_1313)"
"((s585_1362)"
" s_1315)"
"((temp586_1363)"
" #t))"
"(keep-as-needed119.1"
" #f"
" #f"
" temp586_1363"
" rhs-ctx584_1361"
" s585_1362))))"
"(let-values((()"
"(begin"
"(log-defn-enter"
" body-ctx_1288"
" body_1300)"
"(values))))"
"(let-values(((exp-rhs_1337)"
"(let-values()"
"(let-values(((temp587_1364)"
"(semi-parsed-define-values-rhs"
" body_1300))"
"((rhs-ctx588_1365)"
" rhs-ctx_1313))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp587_1364"
" rhs-ctx588_1365)))))"
"(let-values((()"
"(begin"
"(log-defn-exit"
" body-ctx_1288"
" body_1300"
" exp-rhs_1337)"
"(values))))"
"(let-values(((comp-form_1338)"
"(parsed-define-values19.1"
" rebuild-s_1336"
" ids_1312"
" syms_1314"
"(if(expand-context-to-parsed?"
" rhs-ctx_1313)"
" exp-rhs_1337"
"(let-values(((exp-rhs589_1366)"
" exp-rhs_1337)"
"((temp590_1367)"
"(as-to-parsed-context"
" rhs-ctx_1313)))"
"(expand9.1"
" #f"
" #f"
" #f"
" exp-rhs589_1366"
" temp590_1367))))))"
"(if(expand-context-to-parsed?"
" rhs-ctx_1313)"
" comp-form_1338"
"(expanded+parsed1.1"
"(let-values(((rebuild-s591_1368)"
" rebuild-s_1336)"
"((temp592_1369)"
"(list"
" define-values575_1317"
" ids_1312"
" exp-rhs_1337)))"
"(rebuild5.1"
" #t"
" rebuild-s591_1368"
" temp592_1369))"
" comp-form_1338)))))))))))))"
"(let-values()"
"(let-values(((disarmed-body_1370)"
"(syntax-disarm$1 body_1300)))"
"(let-values(((tmp_1371)"
"(core-form-sym"
" disarmed-body_1370"
" phase_1287)))"
"(if(if(equal? tmp_1371 '#%require)"
" #t"
"(if(equal? tmp_1371 '#%provide)"
" #t"
"(equal? tmp_1371 'module*)))"
"(let-values() body_1300)"
"(let-values()"
"(let-values()"
"(let-values(((exp-body_1372)"
"(let-values(((body593_1373)"
" body_1300)"
"((temp594_1374)"
"(as-expression-context"
" body-ctx_1288)))"
"(expand9.1"
" #f"
" #f"
" #f"
" body593_1373"
" temp594_1374))))"
"(if(expand-context-to-parsed?"
" body-ctx_1288)"
" exp-body_1372"
"(expanded+parsed1.1"
" exp-body_1372"
"(let-values(((exp-body595_1375)"
" exp-body_1372)"
"((temp596_1376)"
"(as-to-parsed-context"
" body-ctx_1288)))"
"(expand9.1"
" #f"
" #f"
" #f"
" exp-body595_1375"
" temp596_1376)))))))))))))))"
"(let-values(((lifted-defns_1303)"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_1288))))"
"(let-values(((lifted-requires_1304)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" body-ctx_1288))))"
"(let-values(((lifted-modules_1305)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" body-ctx_1288))))"
"(let-values(((no-lifts?_1306)"
"(if(null? lifted-defns_1303)"
"(if(null? lifted-modules_1305)"
"(null? lifted-requires_1304)"
" #f)"
" #f)))"
"(let-values((()"
"(begin"
"(if no-lifts?_1306"
"(void)"
"(let-values()"
"(let-values(((obs_1377)"
"(expand-context-observer"
" body-ctx_1288)))"
"(if obs_1377"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1377"
" 'module-lift-loop"
"(append"
" lifted-requires_1304"
"(lifted-defns-extract-syntax"
" lifted-defns_1303)"
"(add-post-expansion-scope"
" lifted-modules_1305"
" body-ctx_1288)))))"
"(void)))))"
"(values))))"
"(let-values(((exp-lifted-modules_1307)"
"(let-values(((lifted-modules597_1379)"
" lifted-modules_1305)"
"((phase598_1380)"
" phase_1287)"
"((self599_1381)"
" self_1289)"
"((body-ctx600_1382)"
" body-ctx_1288)"
"((mpis-to-reset601_1383)"
" mpis-to-reset_1293)"
"((declared-submodule-names602_1384)"
" declared-submodule-names_1290)"
"((compiled-submodules603_1385)"
" compiled-submodules_1291)"
"((modules-being-compiled604_1386)"
" modules-being-compiled_1292))"
"(expand-non-module*-submodules208.1"
" compiled-submodules603_1385"
" declared-submodule-names602_1384"
" modules-being-compiled604_1386"
" mpis-to-reset601_1383"
" lifted-modules597_1379"
" phase598_1380"
" self599_1381"
" body-ctx600_1382))))"
"(let-values(((exp-lifted-defns_1308)"
"(loop_1294 #f lifted-defns_1303)))"
"(begin"
"(if no-lifts?_1306"
"(void)"
"(let-values()"
"(let-values(((obs_1387)"
"(expand-context-observer"
" body-ctx_1288)))"
"(if obs_1387"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1387"
" 'next)))"
"(void)))))"
"(append"
" lifted-requires_1304"
" exp-lifted-defns_1308"
" exp-lifted-modules_1307"
"(cons"
" exp-body_1302"
"(loop_1294"
" tail?_0"
" rest-bodys_1301)))))))))))))))))))))"
" loop_1294)"
" #t"
" partially-expanded-bodys_1286)))))))))))))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_0 self_0 ctx_0 requires+provides_0)"
"(begin"
"(begin"
"(let-values(((ht_1426) need-eventually-defined_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_1426)))"
"((letrec-values(((for-loop_1427)"
"(lambda(i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((phase_1429 l_1430)(hash-iterate-key+value ht_1426 i_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_1431)"
"(reverse$1 l_1430)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_1431)))"
"((letrec-values(((for-loop_1432)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_1434)"
"(unsafe-car"
" lst_0))"
"((rest_1435)"
"(unsafe-cdr"
" lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_1436)"
"(let-values(((id605_1439)"
" id_1434)"
"((phase606_1440)"
" phase_1429))"
"(resolve+shift28.1"
" #f"
" #f"
" null"
" unsafe-undefined"
" #f"
" id605_1439"
" phase606_1440))))"
"(let-values(((bound-here?_1437)"
"(if b_1436"
"(if(module-binding?"
" b_1436)"
"(if(eq?"
"(module-binding-sym"
" b_1436)"
"(syntax-e$1"
" id_1434))"
"(eq?"
"(module-binding-module"
" b_1436)"
" self_0)"
" #f)"
" #f)"
" #f)))"
"(let-values(((bound-kind_1438)"
"(if bound-here?_1437"
"(defined-sym-kind"
" requires+provides_0"
"(module-binding-sym"
" b_1436)"
" phase_1429)"
" #f)))"
"(if(eq?"
" bound-kind_1438"
" 'variable)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"(if(not"
" b_1436)"
"(let-values()"
"                                                                                                                                                              \"reference to an unbound identifier\")"
"(if(eq?"
" bound-kind_1438"
" 'transformer)"
"(let-values()"
"                                                                                                                                                                \"identifier treated as a variable, but later defined as syntax\")"
"(let-values()"
"                                                                                                                                                                \"identifier treated as a variable, but later bound differently\")))"
"(format"
"                                                                                                                                                           \"\\n  at phase: ~a\""
"(let-values(((tmp_1441)"
" phase_1429))"
"(if(equal?"
" tmp_1441"
" 1)"
"(let-values()"
"                                                                                                                                                                 \"1; the transformer environment\")"
"(let-values()"
" phase_1429)))))"
" id_1434"
" #f"
" null"
"(syntax-debug-info-string"
" id_1434"
" ctx_0))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_1432"
" rest_1435)"
"(values))))"
"(values))))))"
" for-loop_1432)"
" lst_1431)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_1427(hash-iterate-next ht_1426 i_0))(values))))"
"(values))))))"
" for-loop_1427)"
"(hash-iterate-first ht_1426))))"
"(void)))))"
"(define-values"
"(resolve-provides113.1)"
"(lambda(ctx105_0"
" declared-submodule-names101_0"
" namespace102_0"
" phase103_0"
" requires-and-provides100_0"
" self104_0"
" expression-expanded-bodys112_0)"
"(begin"
" 'resolve-provides113"
"(let-values(((expression-expanded-bodys_1453) expression-expanded-bodys112_0))"
"(let-values(((requires+provides_1454) requires-and-provides100_0))"
"(let-values(((declared-submodule-names_1455) declared-submodule-names101_0))"
"(let-values(((m-ns_1456) namespace102_0))"
"(let-values(((phase_1457) phase103_0))"
"(let-values(((self_1458) self104_0))"
"(let-values(((ctx_1459) ctx105_0))"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_1460)"
"(lambda(bodys_0 phase_0)"
"(begin"
" 'loop"
"(if(null? bodys_0)"
"(let-values() null)"
"(if(let-values(((or-part_1463)(parsed?(car bodys_0))))"
"(if or-part_1463 or-part_1463(expanded+parsed?(car bodys_0))))"
"(let-values()(cons(car bodys_0)(loop_1460(cdr bodys_0) phase_0)))"
"(if(semi-parsed-begin-for-syntax?(car bodys_0))"
"(let-values()"
"(let-values(((nested-bodys_1464)"
"(loop_1460"
"(semi-parsed-begin-for-syntax-body(car bodys_0))"
"(add1 phase_0))))"
"(cons"
"(let-values(((the-struct_1465)(car bodys_0)))"
"(if(semi-parsed-begin-for-syntax? the-struct_1465)"
"(let-values(((body607_1466) nested-bodys_1464))"
"(semi-parsed-begin-for-syntax3.1"
"(semi-parsed-begin-for-syntax-s the-struct_1465)"
" body607_1466))"
"(raise-argument-error"
" 'struct-copy"
"                                                              \"semi-parsed-begin-for-syntax?\""
" the-struct_1465)))"
"(loop_1460(cdr bodys_0) phase_0))))"
"(let-values()"
"(let-values(((disarmed-body_1467)"
"(syntax-disarm$1(car bodys_0))))"
"(let-values(((tmp_1468)"
"(core-form-sym disarmed-body_1467 phase_0)))"
"(if(equal? tmp_1468 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_1487)"
"(expand-context-observer"
" ctx_1459)))"
"(if obs_1487"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_1487"
" 'enter-prim"
"(car bodys_0))"
"(call-expand-observe"
" obs_1487"
" 'prim-provide))))"
"(void)))"
"(values))))"
"(let-values(((ok?_1469 #%provide608_1470 spec609_1471)"
"(let-values(((s_1488)"
" disarmed-body_1467))"
"(let-values(((orig-s_1489) s_1488))"
"(let-values(((#%provide608_1490"
" spec609_1491)"
"(let-values(((s_1492)"
"(if(syntax?$1"
" s_1488)"
"(syntax-e$1"
" s_1488)"
" s_1488)))"
"(if(pair? s_1492)"
"(let-values(((#%provide610_1493)"
"(let-values(((s_1495)"
"(car"
" s_1492)))"
" s_1495))"
"((spec611_1494)"
"(let-values(((s_1496)"
"(cdr"
" s_1492)))"
"(let-values(((s_1497)"
"(if(syntax?$1"
" s_1496)"
"(syntax-e$1"
" s_1496)"
" s_1496)))"
"(let-values(((flat-s_1498)"
"(to-syntax-list.1"
" s_1497)))"
"(if(not"
" flat-s_1498)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_1489))"
"(let-values()"
" flat-s_1498)))))))"
"(values"
" #%provide610_1493"
" spec611_1494))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_1489)))))"
"(values"
" #t"
" #%provide608_1490"
" spec609_1491))))))"
"(let-values(((track-stxes_1485 specs_1486)"
"(parse-and-expand-provides!"
" spec609_1471"
"(car bodys_0)"
" requires+provides_1454"
" self_1458"
" phase_0"
"(let-values(((v_1499) ctx_1459))"
"(let-values(((the-struct_1500)"
" v_1499))"
"(if(expand-context/outer?"
" the-struct_1500)"
"(let-values(((context612_1501)"
" 'top-level)"
"((inner613_1502)"
"(let-values(((the-struct_1503)"
"(root-expand-context/outer-inner"
" v_1499)))"
"(if(expand-context/inner?"
" the-struct_1503)"
"(let-values(((phase614_1504)"
" phase_0)"
"((namespace615_1505)"
"(namespace->namespace-at-phase"
" m-ns_1456"
" phase_0))"
"((requires+provides616_1506)"
" requires+provides_1454)"
"((declared-submodule-names617_1507)"
" declared-submodule-names_1455))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_1503)"
"(root-expand-context/inner-module-scopes"
" the-struct_1503)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_1503)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_1503)"
"(root-expand-context/inner-defined-syms"
" the-struct_1503)"
"(root-expand-context/inner-counter"
" the-struct_1503)"
"(root-expand-context/inner-lift-key"
" the-struct_1503)"
"(expand-context/inner-to-parsed?"
" the-struct_1503)"
" phase614_1504"
" namespace615_1505"
"(expand-context/inner-just-once?"
" the-struct_1503)"
"(expand-context/inner-module-begin-k"
" the-struct_1503)"
"(expand-context/inner-allow-unbound?"
" the-struct_1503)"
"(expand-context/inner-in-local-expand?"
" the-struct_1503)"
"(expand-context/inner-keep-#%expression?"
" the-struct_1503)"
"(expand-context/inner-stops"
" the-struct_1503)"
" declared-submodule-names617_1507"
"(expand-context/inner-lifts"
" the-struct_1503)"
"(expand-context/inner-lift-envs"
" the-struct_1503)"
"(expand-context/inner-module-lifts"
" the-struct_1503)"
"(expand-context/inner-require-lifts"
" the-struct_1503)"
"(expand-context/inner-to-module-lifts"
" the-struct_1503)"
" requires+provides616_1506"
"(expand-context/inner-observer"
" the-struct_1503)"
"(expand-context/inner-for-serializable?"
" the-struct_1503)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_1503)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                          \"expand-context/inner?\""
" the-struct_1503)))))"
"(expand-context/outer1.1"
" inner613_1502"
"(root-expand-context/outer-post-expansion"
" the-struct_1500)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_1500)"
"(root-expand-context/outer-frame-id"
" the-struct_1500)"
" context612_1501"
"(expand-context/outer-env"
" the-struct_1500)"
"(expand-context/outer-scopes"
" the-struct_1500)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_1500)"
"(expand-context/outer-binding-layer"
" the-struct_1500)"
"(expand-context/outer-reference-records"
" the-struct_1500)"
"(expand-context/outer-only-immediate?"
" the-struct_1500)"
"(expand-context/outer-need-eventually-defined"
" the-struct_1500)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_1500)"
"(expand-context/outer-current-use-scopes"
" the-struct_1500)"
"(expand-context/outer-name"
" the-struct_1500)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                        \"expand-context/outer?\""
" the-struct_1500)))))))"
"(if(expand-context-to-parsed? ctx_1459)"
"(let-values()(loop_1460(cdr bodys_0) phase_0))"
"(let-values()"
"(let-values(((new-s_1508)"
"(syntax-track-origin*"
" track-stxes_1485"
"(let-values(((temp618_1509)"
"(car bodys_0))"
"((temp619_1510)"
"(list*"
" #%provide608_1470"
" specs_1486)))"
"(rebuild5.1"
" #t"
" temp618_1509"
" temp619_1510)))))"
"(begin"
"(let-values(((obs_1511)"
"(expand-context-observer"
" ctx_1459)))"
"(if obs_1511"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_1511"
" 'exit-prim"
" new-s_1508)))"
"(void)))"
"(cons"
" new-s_1508"
"(loop_1460(cdr bodys_0) phase_0))))))))))"
"(let-values()"
"(cons"
"(car bodys_0)"
"(loop_1460(cdr bodys_0) phase_0))))))))))))))"
" loop_1460)"
" expression-expanded-bodys_1453"
" phase_1457)))))))))))))"
"(define-values"
"(declare-module-for-expansion137.1)"
"(lambda(ctx123_0"
" enclosing121_0"
" fill125_0"
" module-name-id116_0"
" modules-being-compiled124_0"
" namespace119_0"
" rebuild-s117_0"
" requires-and-provides118_0"
" root-ctx122_0"
" self120_0"
" fully-expanded-bodys-except-post-submodules136_0)"
"(begin"
" 'declare-module-for-expansion137"
"(let-values(((fully-expanded-bodys-except-post-submodules_1557)"
" fully-expanded-bodys-except-post-submodules136_0))"
"(let-values(((module-name-id_1558) module-name-id116_0))"
"(let-values(((rebuild-s_1559) rebuild-s117_0))"
"(let-values(((requires+provides_1560) requires-and-provides118_0))"
"(let-values(((m-ns_1561) namespace119_0))"
"(let-values(((self_1562) self120_0))"
"(let-values(((enclosing-self_1563) enclosing121_0))"
"(let-values(((root-ctx_1564) root-ctx122_0))"
"(let-values(((ctx_1565) ctx123_0))"
"(let-values(((modules-being-compiled_1566) modules-being-compiled124_0))"
"(let-values(((compiled-module-box_1567) fill125_0))"
"(let-values()"
"(let-values(((requires_1568 provides_1569)"
"(extract-requires-and-provides requires+provides_1560 self_1562 self_1562)))"
"(let-values(((parsed-mod_1570)"
"(parsed-module25.1"
" rebuild-s_1559"
" #f"
" module-name-id_1558"
" self_1562"
" requires_1568"
" provides_1569"
"(requires+provides-all-bindings-simple? requires+provides_1560)"
"(root-expand-context-encode-for-module root-ctx_1564 self_1562 self_1562)"
"(parsed-only fully-expanded-bodys-except-post-submodules_1557)"
" #f"
"(hasheq))))"
"(let-values(((module-name_1571)"
"(1/module-path-index-resolve"
"(let-values(((or-part_1574) enclosing-self_1563))"
"(if or-part_1574 or-part_1574 self_1562)))))"
"(let-values(((compiled-module_1572)"
"(let-values(((parsed-mod620_1576) parsed-mod_1570)"
"((temp621_1577)"
"(let-values(((m-ns625_1582) m-ns_1561)"
"((enclosing-self626_1583)"
" enclosing-self_1563)"
"((temp627_1584)"
"(if enclosing-self_1563"
"(1/resolved-module-path-name"
" module-name_1571)"
" #f)))"
"(make-compile-context14.1"
" temp627_1584"
" unsafe-undefined"
" enclosing-self626_1583"
" m-ns625_1582"
" unsafe-undefined"
" unsafe-undefined)))"
"((temp622_1578)"
"(expand-context-for-serializable? ctx_1565))"
"((modules-being-compiled623_1579)"
" modules-being-compiled_1566)"
"((temp624_1580) #f))"
"(compile-module13.1"
" #f"
" modules-being-compiled623_1579"
" temp624_1580"
" temp622_1578"
" #f"
" parsed-mod620_1576"
" temp621_1577))))"
"(let-values((()"
"(begin"
"(set-box! compiled-module-box_1567 compiled-module_1572)"
"(values))))"
"(let-values(((root-module-name_1573)"
"(resolved-module-path-root-name module-name_1571)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_1561"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1573))"
"(let-values()"
"(let-values(((compiled-module628_1586) compiled-module_1572)"
"((temp629_1587) #f))"
"(eval-module8.1"
" unsafe-undefined"
" #f"
" temp629_1587"
" compiled-module628_1586)))))))))))))))))))))))))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_0 root-ctx_0 orig-self_0 new-self_0)"
"(begin"
"(let-values(((s_1638)"
"(syntax-property$1 s_0 'module-body-context(root-expand-context-all-scopes-stx root-ctx_0))))"
"(let-values(((s_1639)"
"(syntax-property$1"
" s_1638"
" 'module-body-inside-context"
"(apply-post-expansion(root-expand-context-post-expansion root-ctx_0) empty-syntax))))"
" s_1639)))))"
"(define-values"
"(expand-post-submodules163.1)"
"(lambda(all-scopes-s145_0"
" compiled-submodules148_0"
" ctx150_0"
" declare-enclosing140_0"
" declared-submodule-names147_0"
" enclosing-is-cross-phase-persistent?144_0"
" modules-being-compiled149_0"
" mpis-to-reset146_0"
" phase141_0"
" requires-and-provides143_0"
" self142_0"
" fully-expanded-bodys-except-post-submodules162_0)"
"(begin"
" 'expand-post-submodules163"
"(let-values(((fully-expanded-bodys-except-post-submodules_1656)"
" fully-expanded-bodys-except-post-submodules162_0))"
"(let-values(((declare-enclosing-module_1657) declare-enclosing140_0))"
"(let-values(((phase_1658) phase141_0))"
"(let-values(((self_1659) self142_0))"
"(let-values(((requires+provides_1660) requires-and-provides143_0))"
"(let-values(((enclosing-is-cross-phase-persistent?_1661) enclosing-is-cross-phase-persistent?144_0))"
"(let-values()"
"(let-values(((mpis-to-reset_1663) mpis-to-reset146_0))"
"(let-values(((declared-submodule-names_1664) declared-submodule-names147_0))"
"(let-values(((compiled-submodules_1665) compiled-submodules148_0))"
"(let-values(((modules-being-compiled_1666) modules-being-compiled149_0))"
"(let-values(((submod-ctx_1667) ctx150_0))"
"(let-values()"
"((letrec-values(((loop_1668)"
"(lambda(bodys_0 phase_0)"
"(begin"
" 'loop"
"(if(null? bodys_0)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_1671)(car bodys_0)))"
"(let-values(((rest-bodys_1672)(cdr bodys_0)))"
"(if(semi-parsed-begin-for-syntax? body_1671)"
"(let-values()"
"(let-values(((body-s_1673)"
"(semi-parsed-begin-for-syntax-s"
" body_1671)))"
"(let-values(((ok?_1674"
" begin-for-syntax630_1675"
" _631_1676)"
"(let-values(((s_1693)"
"(syntax-disarm$1"
" body-s_1673)))"
"(let-values(((orig-s_1694) s_1693))"
"(let-values(((begin-for-syntax630_1695"
" _631_1696)"
"(let-values(((s_1697)"
"(if(syntax?$1"
" s_1693)"
"(syntax-e$1"
" s_1693)"
" s_1693)))"
"(if(pair? s_1697)"
"(let-values(((begin-for-syntax632_1698)"
"(let-values(((s_1700)"
"(car"
" s_1697)))"
" s_1700))"
"((_633_1699)"
"(let-values(((s_1701)"
"(cdr"
" s_1697)))"
"(let-values(((s_1702)"
"(if(syntax?$1"
" s_1701)"
"(syntax-e$1"
" s_1701)"
" s_1701)))"
"(let-values(((flat-s_1703)"
"(to-syntax-list.1"
" s_1702)))"
"(if(not"
" flat-s_1703)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_1694))"
"(let-values()"
" flat-s_1703)))))))"
"(values"
" begin-for-syntax632_1698"
" _633_1699))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_1694)))))"
"(values"
" #t"
" begin-for-syntax630_1695"
" _631_1696))))))"
"(let-values(((rebuild-body-s_1690)"
"(let-values(((submod-ctx634_1704)"
" submod-ctx_1667)"
"((body-s635_1705)"
" body-s_1673))"
"(keep-as-needed119.1"
" #f"
" #f"
" #f"
" submod-ctx634_1704"
" body-s635_1705))))"
"(let-values(((nested-bodys_1691)"
"(loop_1668"
"(semi-parsed-begin-for-syntax-body"
" body_1671)"
"(add1 phase_0))))"
"(let-values(((parsed-bfs_1692)"
"(parsed-begin-for-syntax21.1"
" rebuild-body-s_1690"
"(parsed-only"
" nested-bodys_1691))))"
"(cons"
"(if(expand-context-to-parsed?"
" submod-ctx_1667)"
" parsed-bfs_1692"
"(expanded+parsed1.1"
"(let-values(((rebuild-body-s636_1706)"
" rebuild-body-s_1690)"
"((temp637_1707)"
"(list*"
" begin-for-syntax630_1675"
"(syntax-only"
" nested-bodys_1691))))"
"(rebuild5.1"
" #t"
" rebuild-body-s636_1706"
" temp637_1707))"
" parsed-bfs_1692))"
"(loop_1668 rest-bodys_1672 phase_0))))))))"
"(if(let-values(((or-part_1708)(parsed? body_1671)))"
"(if or-part_1708"
" or-part_1708"
"(expanded+parsed? body_1671)))"
"(let-values()"
"(cons"
" body_1671"
"(loop_1668 rest-bodys_1672 phase_0)))"
"(let-values()"
"(let-values(((disarmed-body_1709)"
"(syntax-disarm$1 body_1671)))"
"(let-values(((tmp_1710)"
"(core-form-sym"
" disarmed-body_1709"
" phase_0)))"
"(if(equal? tmp_1710 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force"
" declare-enclosing-module_1657)"
"(values))))"
"(let-values(((ready-body_1711)"
"(remove-use-site-scopes"
" body_1671"
" submod-ctx_1667)))"
"(let-values(((ok?_1712"
" module*638_1713"
" name639_1714"
" _640_1715)"
"(let-values(((s_1733)"
" disarmed-body_1709))"
"(if(let-values(((s_1734)"
"(if(syntax?$1"
" s_1733)"
"(syntax-e$1"
" s_1733)"
" s_1733)))"
"(if(pair? s_1734)"
"(if(let-values(((s_1735)"
"(car"
" s_1734)))"
" #t)"
"(let-values(((s_1736)"
"(cdr"
" s_1734)))"
"(let-values(((s_1737)"
"(if(syntax?$1"
" s_1736)"
"(syntax-e$1"
" s_1736)"
" s_1736)))"
"(if(pair?"
" s_1737)"
"(if(let-values(((s_1738)"
"(car"
" s_1737)))"
" #t)"
"(let-values(((s_1739)"
"(cdr"
" s_1737)))"
"(let-values(((s_1740)"
"(if(syntax?$1"
" s_1739)"
"(syntax-e$1"
" s_1739)"
" s_1739)))"
"(if(pair?"
" s_1740)"
"(if(let-values(((s_1741)"
"(car"
" s_1740)))"
"(let-values(((s_1742)"
"(if(syntax?$1"
" s_1741)"
"(syntax-e$1"
" s_1741)"
" s_1741)))"
"(eq?"
" #f"
" s_1742)))"
"(let-values(((s_1743)"
"(cdr"
" s_1740)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((module*638_1745"
" name639_1746"
" _640_1747)"
"(let-values(((s_1748)"
"(if(syntax?$1"
" s_1733)"
"(syntax-e$1"
" s_1733)"
" s_1733)))"
"(let-values(((module*641_1749)"
"(let-values(((s_1752)"
"(car"
" s_1748)))"
" s_1752))"
"((name642_1750"
" _643_1751)"
"(let-values(((s_1753)"
"(cdr"
" s_1748)))"
"(let-values(((s_1754)"
"(if(syntax?$1"
" s_1753)"
"(syntax-e$1"
" s_1753)"
" s_1753)))"
"(let-values(((name644_1755)"
"(let-values(((s_1757)"
"(car"
" s_1754)))"
" s_1757))"
"((_645_1756)"
"(let-values(((s_1758)"
"(cdr"
" s_1754)))"
"(let-values(((s_1759)"
"(if(syntax?$1"
" s_1758)"
"(syntax-e$1"
" s_1758)"
" s_1758)))"
"(let-values((()"
"(let-values(((s_1761)"
"(car"
" s_1759)))"
"(let-values(((s_1762)"
"(if(syntax?$1"
" s_1761)"
"(syntax-e$1"
" s_1761)"
" s_1761)))"
"(values))))"
"((_646_1760)"
"(let-values(((s_1763)"
"(cdr"
" s_1759)))"
" s_1763)))"
"(values"
" _646_1760))))))"
"(values"
" name644_1755"
" _645_1756))))))"
"(values"
" module*641_1749"
" name642_1750"
" _643_1751)))))"
"(values"
" #t"
" module*638_1745"
" name639_1746"
" _640_1747)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((submod_1732)"
"(if ok?_1712"
"(let-values()"
"(let-values(((neg-phase_1764)"
"(phase-"
" 0"
" phase_0)))"
"(let-values(((shifted-s_1765)"
"(syntax-shift-phase-level$1"
" ready-body_1711"
" neg-phase_1764)))"
"(let-values(((submod_1766)"
"(let-values(((shifted-s647_1768)"
" shifted-s_1765)"
"((self648_1769)"
" self_1659)"
"((submod-ctx649_1770)"
" submod-ctx_1667)"
"((temp650_1771)"
" #t)"
"((neg-phase651_1772)"
" neg-phase_1764)"
"((requires+provides652_1773)"
" requires+provides_1660)"
"((enclosing-is-cross-phase-persistent?653_1774)"
" enclosing-is-cross-phase-persistent?_1661)"
"((mpis-to-reset654_1775)"
" mpis-to-reset_1663)"
"((declared-submodule-names655_1776)"
" declared-submodule-names_1664)"
"((compiled-submodules656_1777)"
" compiled-submodules_1665)"
"((modules-being-compiled657_1778)"
" modules-being-compiled_1666))"
"(expand-submodule193.1"
" compiled-submodules656_1777"
" declared-submodule-names655_1776"
" enclosing-is-cross-phase-persistent?653_1774"
" requires+provides652_1773"
" temp650_1771"
" neg-phase651_1772"
" modules-being-compiled657_1778"
" mpis-to-reset654_1775"
" shifted-s647_1768"
" self648_1769"
" submod-ctx649_1770))))"
"(if(parsed?"
" submod_1766)"
"(let-values()"
" submod_1766)"
"(if(expanded+parsed?"
" submod_1766)"
"(let-values()"
"(let-values(((the-struct_1779)"
" submod_1766))"
"(if(expanded+parsed?"
" the-struct_1779)"
"(let-values(((s658_1780)"
"(syntax-shift-phase-level$1"
"(expanded+parsed-s"
" submod_1766)"
" phase_0)))"
"(expanded+parsed1.1"
" s658_1780"
"(expanded+parsed-parsed"
" the-struct_1779)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                     \"expanded+parsed?\""
" the-struct_1779))))"
"(let-values()"
"(syntax-shift-phase-level$1"
" submod_1766"
" phase_0))))))))"
"(let-values()"
"(let-values(((ready-body659_1782)"
" ready-body_1711)"
"((self660_1783)"
" self_1659)"
"((submod-ctx661_1784)"
" submod-ctx_1667)"
"((temp662_1785)"
" #t)"
"((mpis-to-reset663_1786)"
" mpis-to-reset_1663)"
"((declared-submodule-names664_1787)"
" declared-submodule-names_1664)"
"((compiled-submodules665_1788)"
" compiled-submodules_1665)"
"((modules-being-compiled666_1789)"
" modules-being-compiled_1666))"
"(expand-submodule193.1"
" compiled-submodules665_1788"
" declared-submodule-names664_1787"
" #f"
" #f"
" temp662_1785"
" #f"
" modules-being-compiled666_1789"
" mpis-to-reset663_1786"
" ready-body659_1782"
" self660_1783"
" submod-ctx661_1784))))))"
"(cons"
" submod_1732"
"(loop_1668"
" rest-bodys_1672"
" phase_0)))))))"
"(let-values()"
"(cons"
" body_1671"
"(loop_1668"
" rest-bodys_1672"
" phase_0)))))))))))))))))"
" loop_1668)"
" fully-expanded-bodys-except-post-submodules_1656"
" phase_1658)))))))))))))))))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_0)"
"(begin"
"(free-id-set-member?"
"(expand-context-stops ctx_0)"
"(expand-context-phase ctx_0)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_0))))))"
"(define-values"
"(check-ids-unbound171.1)"
"(lambda(in166_0 ids168_0 phase169_0 requires+provides170_0)"
"(begin"
" 'check-ids-unbound171"
"(let-values(((ids_1853) ids168_0))"
"(let-values(((phase_1854) phase169_0))"
"(let-values(((requires+provides_1855) requires+provides170_0))"
"(let-values(((s_1856) in166_0))"
"(let-values()"
"(begin"
"(let-values(((lst_1857) ids_1853))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_1857)))"
"((letrec-values(((for-loop_1858)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_1860)(unsafe-car lst_0))"
"((rest_1861)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((requires+provides667_1863)"
" requires+provides_1855)"
"((id668_1864) id_1860)"
"((phase669_1865)"
" phase_1854)"
"((s670_1866) s_1856)"
"((temp671_1867)"
" 'module))"
"(check-not-defined95.1"
" #f"
" #f"
" #f"
" s670_1866"
" #f"
" #f"
" temp671_1867"
" requires+provides667_1863"
" id668_1864"
" phase669_1865)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_1858 rest_1861)(values))))"
"(values))))))"
" for-loop_1858)"
" lst_1857)))"
"(void))))))))))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_0 phase_0 m-ns_0 self_0 ctx_0)"
"(begin"
"(begin"
"(let-values(((lst_1887) bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_1887)))"
"((letrec-values(((for-loop_1888)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((body_1890)(unsafe-car lst_0))((rest_1891)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_1892)"
"(if(expanded+parsed? body_1890)"
"(expanded+parsed-parsed"
" body_1890)"
" body_1890)))"
"(if(parsed-define-values? p_1892)"
"(let-values()"
"(let-values(((ids_1893)"
"(parsed-define-values-ids"
" p_1892)))"
"(let-values(((vals_1894)"
"(eval-for-bindings"
" 'define-values"
" ids_1893"
"(parsed-define-values-rhs"
" p_1892)"
" phase_0"
" m-ns_0"
" ctx_0)))"
"(begin"
"(let-values(((lst_1895) ids_1893)"
"((lst_1896)"
"(parsed-define-values-syms"
" p_1892))"
"((lst_1897)"
" vals_1894))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_1895)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_1896)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_1897)))"
"((letrec-values(((for-loop_1898)"
"(lambda(lst_1"
" lst_2"
" lst_3)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_1)"
"(if(pair?"
" lst_2)"
"(pair?"
" lst_3)"
" #f)"
" #f)"
"(let-values(((id_1902)"
"(unsafe-car"
" lst_1))"
"((rest_1903)"
"(unsafe-cdr"
" lst_1))"
"((sym_1904)"
"(unsafe-car"
" lst_2))"
"((rest_1905)"
"(unsafe-cdr"
" lst_2))"
"((val_1906)"
"(unsafe-car"
" lst_3))"
"((rest_1907)"
"(unsafe-cdr"
" lst_3)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" m-ns_0"
" phase_0"
" sym_1904"
" val_1906))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_1898"
" rest_1903"
" rest_1905"
" rest_1907)"
"(values))))"
"(values))))))"
" for-loop_1898)"
" lst_1895"
" lst_1896"
" lst_1897)))"
"(void)))))"
"(if(let-values(((or-part_1908)"
"(parsed-define-syntaxes?"
" p_1892)))"
"(if or-part_1908"
" or-part_1908"
"(semi-parsed-begin-for-syntax?"
" p_1892)))"
"(let-values()(void))"
"(if(let-values(((or-part_1909)"
"(parsed-#%declare?"
" p_1892)))"
"(if or-part_1909"
" or-part_1909"
"(syntax?$1 p_1892)))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_0"
" 1/current-namespace"
" m-ns_0)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" p_1892"
"(let-values(((m-ns672_1911)"
" m-ns_0)"
"((phase673_1912)"
" phase_0))"
"(make-compile-context14.1"
" #f"
" unsafe-undefined"
" #f"
" m-ns672_1911"
" phase673_1912"
" unsafe-undefined)))"
" m-ns_0)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_1888 rest_1891)(values))))"
"(values))))))"
" for-loop_1888)"
" lst_1887)))"
"(void)))))"
"(define-values"
"(expand-submodule193.1)"
"(lambda(compiled-submodules180_0"
" declared-submodule-names179_0"
" enclosing-is-cross-phase-persistent?177_0"
" enclosing-requires+provides176_0"
" is-star?174_0"
" keep-enclosing-scope-at-phase175_0"
" modules-being-compiled181_0"
" mpis-to-reset178_0"
" s190_0"
" self191_0"
" ctx192_0)"
"(begin"
" 'expand-submodule193"
"(let-values(((s_1932) s190_0))"
"(let-values(((self_1933) self191_0))"
"(let-values(((ctx_1934) ctx192_0))"
"(let-values(((is-star?_1935) is-star?174_0))"
"(let-values(((keep-enclosing-scope-at-phase_1936) keep-enclosing-scope-at-phase175_0))"
"(let-values(((enclosing-r+p_1937) enclosing-requires+provides176_0))"
"(let-values(((enclosing-is-cross-phase-persistent?_1938) enclosing-is-cross-phase-persistent?177_0))"
"(let-values(((mpis-to-reset_1939) mpis-to-reset178_0))"
"(let-values(((declared-submodule-names_1940) declared-submodule-names179_0))"
"(let-values(((compiled-submodules_1941) compiled-submodules180_0))"
"(let-values(((modules-being-compiled_1942) modules-being-compiled181_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if is-star?_1935"
"(void)"
"(let-values()"
"(let-values(((obs_1969)(expand-context-observer ctx_1934)))"
"(if obs_1969"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_1969 'enter-prim s_1932)"
"(call-expand-observe"
" obs_1969"
"(if is-star?_1935 'prim-submodule* 'prim-submodule)))))"
"(void)))))"
"(values))))"
"(let-values(((ok?_1943 module674_1944 name675_1945 _676_1946)"
"(let-values(((s_1970) s_1932))"
"(let-values(((orig-s_1971) s_1970))"
"(let-values(((module674_1972 name675_1973 _676_1974)"
"(let-values(((s_1975)"
"(if(syntax?$1 s_1970)"
"(syntax-e$1 s_1970)"
" s_1970)))"
"(if(pair? s_1975)"
"(let-values(((module677_1976)"
"(let-values(((s_1979)(car s_1975)))"
" s_1979))"
"((name678_1977 _679_1978)"
"(let-values(((s_1980)(cdr s_1975)))"
"(let-values(((s_1981)"
"(if(syntax?$1 s_1980)"
"(syntax-e$1 s_1980)"
" s_1980)))"
"(if(pair? s_1981)"
"(let-values(((name680_1982)"
"(let-values(((s_1984)"
"(car"
" s_1981)))"
" s_1984))"
"((_681_1983)"
"(let-values(((s_1985)"
"(cdr"
" s_1981)))"
" s_1985)))"
"(values"
" name680_1982"
" _681_1983))"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_1971))))))"
"(values module677_1976 name678_1977 _679_1978))"
"(raise-syntax-error$1"
" #f"
"                                                                     \"bad syntax\""
" orig-s_1971)))))"
"(values #t module674_1972 name675_1973 _676_1974))))))"
"(let-values(((name_1963)(syntax-e$1 name675_1945)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_1940 name_1963 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                         \"submodule already declared with the same name\""
" s_1932"
" name_1963))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_1940"
" name_1963"
"(syntax-e$1 module674_1944))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_1986)(expand-context-observer ctx_1934)))"
"(if obs_1986"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_1986 'enter-prim s_1932)))"
"(void)))"
"(values))))"
"(let-values(((submod_1964)"
"(let-values(((s682_1988) s_1932)"
"((temp683_1989)"
"(let-values(((v_1997) ctx_1934))"
"(let-values(((the-struct_1998) v_1997))"
"(if(expand-context/outer? the-struct_1998)"
"(let-values(((context691_1999) 'module)"
"((post-expansion692_2000) #f)"
"((inner693_2001)"
"(let-values(((the-struct_2002)"
"(root-expand-context/outer-inner"
" v_1997)))"
"(if(expand-context/inner?"
" the-struct_2002)"
"(let-values(((stops694_2003)"
" empty-free-id-set))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_2002)"
"(root-expand-context/inner-module-scopes"
" the-struct_2002)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_2002)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_2002)"
"(root-expand-context/inner-defined-syms"
" the-struct_2002)"
"(root-expand-context/inner-counter"
" the-struct_2002)"
"(root-expand-context/inner-lift-key"
" the-struct_2002)"
"(expand-context/inner-to-parsed?"
" the-struct_2002)"
"(expand-context/inner-phase"
" the-struct_2002)"
"(expand-context/inner-namespace"
" the-struct_2002)"
"(expand-context/inner-just-once?"
" the-struct_2002)"
"(expand-context/inner-module-begin-k"
" the-struct_2002)"
"(expand-context/inner-allow-unbound?"
" the-struct_2002)"
"(expand-context/inner-in-local-expand?"
" the-struct_2002)"
"(expand-context/inner-keep-#%expression?"
" the-struct_2002)"
" stops694_2003"
"(expand-context/inner-declared-submodule-names"
" the-struct_2002)"
"(expand-context/inner-lifts"
" the-struct_2002)"
"(expand-context/inner-lift-envs"
" the-struct_2002)"
"(expand-context/inner-module-lifts"
" the-struct_2002)"
"(expand-context/inner-require-lifts"
" the-struct_2002)"
"(expand-context/inner-to-module-lifts"
" the-struct_2002)"
"(expand-context/inner-requires+provides"
" the-struct_2002)"
"(expand-context/inner-observer"
" the-struct_2002)"
"(expand-context/inner-for-serializable?"
" the-struct_2002)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_2002)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                               \"expand-context/inner?\""
" the-struct_2002)))))"
"(expand-context/outer1.1"
" inner693_2001"
" post-expansion692_2000"
"(root-expand-context/outer-use-site-scopes"
" the-struct_1998)"
"(root-expand-context/outer-frame-id"
" the-struct_1998)"
" context691_1999"
"(expand-context/outer-env"
" the-struct_1998)"
"(expand-context/outer-scopes"
" the-struct_1998)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_1998)"
"(expand-context/outer-binding-layer"
" the-struct_1998)"
"(expand-context/outer-reference-records"
" the-struct_1998)"
"(expand-context/outer-only-immediate?"
" the-struct_1998)"
"(expand-context/outer-need-eventually-defined"
" the-struct_1998)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_1998)"
"(expand-context/outer-current-use-scopes"
" the-struct_1998)"
"(expand-context/outer-name"
" the-struct_1998)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                             \"expand-context/outer?\""
" the-struct_1998)))))"
"((self684_1990) self_1933)"
"((temp685_1991) #t)"
"((keep-enclosing-scope-at-phase686_1992)"
" keep-enclosing-scope-at-phase_1936)"
"((enclosing-r+p687_1993) enclosing-r+p_1937)"
"((enclosing-is-cross-phase-persistent?688_1994)"
" enclosing-is-cross-phase-persistent?_1938)"
"((mpis-to-reset689_1995) mpis-to-reset_1939)"
"((modules-being-compiled690_1996)"
" modules-being-compiled_1942))"
"(expand-module16.1"
" temp685_1991"
" enclosing-is-cross-phase-persistent?688_1994"
" enclosing-r+p687_1993"
" keep-enclosing-scope-at-phase686_1992"
" modules-being-compiled690_1996"
" mpis-to-reset689_1995"
" s682_1988"
" temp683_1989"
" self684_1990))))"
"(let-values((()"
"(begin"
"(let-values(((obs_2004)"
"(expand-context-observer ctx_1934)))"
"(if obs_2004"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_2004"
" 'exit-prim"
"(extract-syntax submod_1964))))"
"(void)))"
"(values))))"
"(let-values(((ns_1965)(expand-context-namespace ctx_1934)))"
"(let-values(((module-name_1966)"
"(1/module-path-index-resolve self_1933)))"
"(let-values(((root-module-name_1967)"
"(resolved-module-path-root-name module-name_1966)))"
"(let-values(((compiled-submodule_1968)"
"(let-values(((temp695_2006)"
"(if(expanded+parsed? submod_1964)"
"(expanded+parsed-parsed submod_1964)"
" submod_1964))"
"((temp696_2007)"
"(let-values(((ns701_2013) ns_1965)"
"((self702_2014) self_1933)"
"((temp703_2015)"
"(1/resolved-module-path-name"
" module-name_1966)))"
"(make-compile-context14.1"
" temp703_2015"
" unsafe-undefined"
" self702_2014"
" ns701_2013"
" unsafe-undefined"
" unsafe-undefined)))"
"((temp697_2008) #t)"
"((temp698_2009)"
"(expand-context-for-serializable?"
" ctx_1934))"
"((modules-being-compiled699_2010)"
" modules-being-compiled_1942)"
"((temp700_2011) #f))"
"(compile-module13.1"
" temp697_2008"
" modules-being-compiled699_2010"
" temp700_2011"
" temp698_2009"
" #f"
" temp695_2006"
" temp696_2007))))"
"(begin"
"(hash-set!"
" compiled-submodules_1941"
" name_1963"
"(cons is-star?_1935 compiled-submodule_1968))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_1965"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1967))"
"(let-values()"
"(let-values(((compiled-submodule704_2017)"
" compiled-submodule_1968)"
"((temp705_2018) #f))"
"(eval-module8.1"
" unsafe-undefined"
" #f"
" temp705_2018"
" compiled-submodule704_2017))))"
"(if is-star?_1935"
"(void)"
"(let-values()"
"(let-values(((obs_2019)"
"(expand-context-observer ctx_1934)))"
"(if obs_2019"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_2019"
" 'exit-prim"
"(extract-syntax submod_1964))))"
"(void)))))"
"(if(not is-star?_1935)"
"(let-values() submod_1964)"
"(if(expanded+parsed? submod_1964)"
"(let-values()"
"(let-values(((the-struct_2020) submod_1964))"
"(if(expanded+parsed? the-struct_2020)"
"(let-values(((parsed706_2021)"
"(let-values(((the-struct_2022)"
"(expanded+parsed-parsed"
" submod_1964)))"
"(if(parsed-module? the-struct_2022)"
"(let-values(((star?707_2023) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_2022)"
" star?707_2023"
"(parsed-module-name-id"
" the-struct_2022)"
"(parsed-module-self"
" the-struct_2022)"
"(parsed-module-requires"
" the-struct_2022)"
"(parsed-module-provides"
" the-struct_2022)"
"(parsed-module-root-ctx-simple?"
" the-struct_2022)"
"(parsed-module-encoded-root-ctx"
" the-struct_2022)"
"(parsed-module-body"
" the-struct_2022)"
"(parsed-module-compiled-module"
" the-struct_2022)"
"(parsed-module-compiled-submodules"
" the-struct_2022)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                     \"parsed-module?\""
" the-struct_2022)))))"
"(expanded+parsed1.1"
"(expanded+parsed-s the-struct_2020)"
" parsed706_2021))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"expanded+parsed?\""
" the-struct_2020))))"
"(let-values()"
"(let-values(((the-struct_2024) submod_1964))"
"(if(parsed-module? the-struct_2024)"
"(let-values(((star?708_2025) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_2024)"
" star?708_2025"
"(parsed-module-name-id the-struct_2024)"
"(parsed-module-self the-struct_2024)"
"(parsed-module-requires the-struct_2024)"
"(parsed-module-provides the-struct_2024)"
"(parsed-module-root-ctx-simple? the-struct_2024)"
"(parsed-module-encoded-root-ctx the-struct_2024)"
"(parsed-module-body the-struct_2024)"
"(parsed-module-compiled-module the-struct_2024)"
"(parsed-module-compiled-submodules"
" the-struct_2024)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                   \"parsed-module?\""
" the-struct_2024))))))))))))))))))))))))))))))))))"
"(define-values"
"(expand-non-module*-submodules208.1)"
"(lambda(compiled-submodules198_0"
" declared-submodule-names197_0"
" modules-being-compiled199_0"
" mpis-to-reset196_0"
" bodys204_0"
" phase205_0"
" self206_0"
" ctx207_0)"
"(begin"
" 'expand-non-module*-submodules208"
"(let-values(((bodys_2081) bodys204_0))"
"(let-values(((phase_2082) phase205_0))"
"(let-values(((self_2083) self206_0))"
"(let-values(((ctx_2084) ctx207_0))"
"(let-values(((mpis-to-reset_2085) mpis-to-reset196_0))"
"(let-values(((declared-submodule-names_2086) declared-submodule-names197_0))"
"(let-values(((compiled-submodules_2087) compiled-submodules198_0))"
"(let-values(((modules-being-compiled_2088) modules-being-compiled199_0))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_2089) bodys_2081))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_2089)))"
"((letrec-values(((for-loop_2090)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((body_2093)(unsafe-car lst_0))"
"((rest_2094)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_2095)"
"(let-values(((fold-var_2096) fold-var_0))"
"(let-values(((fold-var_2097)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_2098)"
"(core-form-sym"
"(syntax-disarm$1"
" body_2093)"
" phase_2082)))"
"(if(equal?"
" tmp_2098"
" 'module)"
"(let-values()"
"(let-values(((body709_2100)"
" body_2093)"
"((self710_2101)"
" self_2083)"
"((ctx711_2102)"
" ctx_2084)"
"((temp712_2103)"
" #f)"
"((mpis-to-reset713_2104)"
" mpis-to-reset_2085)"
"((declared-submodule-names714_2105)"
" declared-submodule-names_2086)"
"((compiled-submodules715_2106)"
" compiled-submodules_2087)"
"((modules-being-compiled716_2107)"
" modules-being-compiled_2088))"
"(expand-submodule193.1"
" compiled-submodules715_2106"
" declared-submodule-names714_2105"
" #f"
" #f"
" temp712_2103"
" #f"
" modules-being-compiled716_2107"
" mpis-to-reset713_2104"
" body709_2100"
" self710_2101"
" ctx711_2102)))"
"(let-values()"
" body_2093))))"
" fold-var_2096))))"
"(values fold-var_2097)))))"
"(if(not #f)"
"(for-loop_2090 fold-var_2095 rest_2094)"
" fold-var_2095)))"
" fold-var_0)))))"
" for-loop_2090)"
" null"
" lst_2089))))))))))))))))"
"(define-values"
"(make-parse-lifted-require216.1)"
"(lambda(declared-submodule-names211_0 m-ns213_0 self214_0 requires+provides215_0)"
"(begin"
" 'make-parse-lifted-require216"
"(let-values(((m-ns_2148) m-ns213_0))"
"(let-values(((self_2149) self214_0))"
"(let-values(((requires+provides_2150) requires+provides215_0))"
"(let-values(((declared-submodule-names_2151) declared-submodule-names211_0))"
"(let-values()"
"(lambda(s_0 phase_0)"
"(let-values(((ok?_2154 #%require717_2155 req718_2156)"
"(let-values(((s_2170)(syntax-disarm$1 s_0)))"
"(let-values(((orig-s_2171) s_2170))"
"(let-values(((#%require717_2172 req718_2173)"
"(let-values(((s_2174)"
"(if(syntax?$1 s_2170)(syntax-e$1 s_2170) s_2170)))"
"(if(pair? s_2174)"
"(let-values(((#%require719_2175)"
"(let-values(((s_2177)(car s_2174))) s_2177))"
"((req720_2176)"
"(let-values(((s_2178)(cdr s_2174)))"
"(let-values(((s_2179)"
"(if(syntax?$1 s_2178)"
"(syntax-e$1 s_2178)"
" s_2178)))"
"(if(pair? s_2179)"
"(let-values(((req721_2180)"
"(let-values(((s_2181)"
"(car s_2179)))"
" s_2181))"
"(()"
"(let-values(((s_2182)"
"(cdr s_2179)))"
"(let-values(((s_2183)"
"(if(syntax?$1"
" s_2182)"
"(syntax-e$1"
" s_2182)"
" s_2182)))"
"(if(null? s_2183)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_2171))))))"
"(values req721_2180))"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_2171))))))"
"(values #%require719_2175 req720_2176))"
"                                                      (raise-syntax-error$1 #f \"bad syntax\" orig-s_2171)))))"
"(values #t #%require717_2172 req718_2173))))))"
"(let-values(((temp722_2185)(list req718_2156))"
"((s723_2186) s_0)"
"((self724_2187) self_2149)"
"((m-ns725_2188) m-ns_2148)"
"((phase726_2189) phase_0)"
"((phase727_2190) phase_0)"
"((requires+provides728_2191) requires+provides_2150)"
"((declared-submodule-names729_2192) declared-submodule-names_2151)"
"((temp730_2193) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" declared-submodule-names729_2192"
" #f"
" phase727_2190"
" #f"
" self724_2187"
" #f"
" #t"
" temp730_2193"
" temp722_2185"
" s723_2186"
" m-ns725_2188"
" phase726_2189"
" requires+provides728_2191))))))))))))"
"(define-values"
"(defn-extract-syntax)"
"(lambda(defn_0)"
"(begin"
"(datum->syntax$1"
" #f"
"(list 'define-values(semi-parsed-define-values-ids defn_0)(semi-parsed-define-values-rhs defn_0))"
"(semi-parsed-define-values-s defn_0)))))"
"(define-values"
"(lifted-defns-extract-syntax)"
"(lambda(lifted-defns_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_2210) lifted-defns_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_2210)))"
"((letrec-values(((for-loop_2211)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((lifted-defn_2214)(unsafe-car lst_0))"
"((rest_2215)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_2216)"
"(let-values(((fold-var_2217) fold-var_0))"
"(let-values(((fold-var_2218)"
"(let-values()"
"(cons"
"(let-values()"
"(defn-extract-syntax lifted-defn_2214))"
" fold-var_2217))))"
"(values fold-var_2218)))))"
"(if(not #f)(for-loop_2211 fold-var_2216 rest_2215) fold-var_2216)))"
" fold-var_0)))))"
" for-loop_2211)"
" null"
" lst_2210)))))))"
"(define-values"
"(log-lifted-defns)"
"(lambda(partial-body-ctx_0 lifted-defns_0 exp-body_0 rest-bodys_0)"
"(begin"
"(let-values(((obs_2223)(expand-context-observer partial-body-ctx_0)))"
"(if obs_2223"
"(let-values()"
"(let-values(((s-lifted-defns_2224)(lifted-defns-extract-syntax lifted-defns_0)))"
"(let-values((()"
"(begin"
"(call-expand-observe obs_2223 'rename-list(cons exp-body_0 rest-bodys_0))"
"(values))))"
"(let-values((()(begin(call-expand-observe obs_2223 'module-lift-loop s-lifted-defns_2224)(values))))"
"(let-values((()"
"(begin"
"(let-values(((lst_2241) s-lifted-defns_2224))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_2241)))"
"((letrec-values(((for-loop_2242)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((s-lifted-defn_2244)(unsafe-car lst_0))"
"((rest_2245)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ok?_2246"
" define-values735_2247"
" _736_2248)"
"(let-values(((s_2262)"
" s-lifted-defn_2244))"
"(let-values(((orig-s_2263)"
" s_2262))"
"(let-values(((define-values735_2264"
" _736_2265)"
"(let-values(((s_2266)"
"(if(syntax?$1"
" s_2262)"
"(syntax-e$1"
" s_2262)"
" s_2262)))"
"(if(pair?"
" s_2266)"
"(let-values(((define-values737_2267)"
"(let-values(((s_2269)"
"(car"
" s_2266)))"
" s_2269))"
"((_738_2268)"
"(let-values(((s_2270)"
"(cdr"
" s_2266)))"
"(let-values(((s_2271)"
"(if(syntax?$1"
" s_2270)"
"(syntax-e$1"
" s_2270)"
" s_2270)))"
"(let-values(((flat-s_2272)"
"(to-syntax-list.1"
" s_2271)))"
"(if(not"
" flat-s_2272)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_2263))"
"(let-values()"
" flat-s_2272)))))))"
"(values"
" define-values737_2267"
" _738_2268))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_2263)))))"
"(values"
" #t"
" define-values735_2264"
" _736_2265))))))"
"(begin"
"(call-expand-observe"
" obs_2223"
" 'next)"
"(call-expand-observe"
" obs_2223"
" 'visit"
" s-lifted-defn_2244)"
"(call-expand-observe"
" obs_2223"
" 'resolve"
" define-values735_2247)"
"(call-expand-observe"
" obs_2223"
" 'enter-prim"
" s-lifted-defn_2244)"
"(call-expand-observe"
" obs_2223"
" 'prim-stop)"
"(call-expand-observe"
" obs_2223"
" 'exit-prim"
" s-lifted-defn_2244)"
"(call-expand-observe"
" obs_2223"
" 'return"
" s-lifted-defn_2244)"
"(call-expand-observe"
" obs_2223"
" 'rename-one"
" s-lifted-defn_2244)"
"(call-expand-observe"
" obs_2223"
" 'enter-prim"
" s-lifted-defn_2244)"
"(call-expand-observe"
" obs_2223"
" 'prim-define-values)"
"(call-expand-observe"
" obs_2223"
" 'exit-prim"
" s-lifted-defn_2244))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_2242 rest_2245)(values))))"
"(values))))))"
" for-loop_2242)"
" lst_2241)))"
"(values))))"
"(let-values()"
"(let-values(((ok?_2225 form-id731_2226 _732_2227)"
"(let-values(((s_2273) exp-body_0))"
"(let-values(((orig-s_2274) s_2273))"
"(let-values(((form-id731_2275 _732_2276)"
"(let-values(((s_2277)"
"(if(syntax?$1 s_2273)(syntax-e$1 s_2273) s_2273)))"
"(if(pair? s_2277)"
"(let-values(((form-id733_2278)"
"(let-values(((s_2280)(car s_2277))) s_2280))"
"((_734_2279)"
"(let-values(((s_2281)(cdr s_2277))) s_2281)))"
"(values form-id733_2278 _734_2279))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_2274)))))"
"(values #t form-id731_2275 _732_2276))))))"
"(begin"
"(call-expand-observe obs_2223 'next)"
"(call-expand-observe obs_2223 'visit exp-body_0)"
"(call-expand-observe obs_2223 'resolve form-id731_2226)"
"(call-expand-observe obs_2223 'enter-prim exp-body_0)"
"(call-expand-observe obs_2223 'prim-stop)"
"(call-expand-observe obs_2223 'exit-prim exp-body_0)"
"(call-expand-observe obs_2223 'return exp-body_0)))))))))"
"(void))))))"
"(define-values"
"(log-defn-enter)"
"(lambda(ctx_0 defn_0)"
"(begin"
"(let-values(((obs_2284)(expand-context-observer ctx_0)))"
"(if obs_2284"
"(let-values()"
"(let-values(((s-defn_2285)(defn-extract-syntax defn_0)))"
"(let-values(((ok?_2286 define-values739_2287 _740_2288)"
"(let-values(((s_2302) s-defn_2285))"
"(let-values(((orig-s_2303) s_2302))"
"(let-values(((define-values739_2304 _740_2305)"
"(let-values(((s_2306)"
"(if(syntax?$1 s_2302)(syntax-e$1 s_2302) s_2302)))"
"(if(pair? s_2306)"
"(let-values(((define-values741_2307)"
"(let-values(((s_2309)(car s_2306))) s_2309))"
"((_742_2308)"
"(let-values(((s_2310)(cdr s_2306)))"
"(let-values(((s_2311)"
"(if(syntax?$1 s_2310)"
"(syntax-e$1 s_2310)"
" s_2310)))"
"(let-values(((flat-s_2312)"
"(to-syntax-list.1 s_2311)))"
"(if(not flat-s_2312)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_2303))"
"(let-values() flat-s_2312)))))))"
"(values define-values741_2307 _742_2308))"
"                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_2303)))))"
"(values #t define-values739_2304 _740_2305))))))"
"(begin"
"(call-expand-observe obs_2284 'visit s-defn_2285)"
"(call-expand-observe obs_2284 'resolve define-values739_2287)"
"(call-expand-observe obs_2284 'enter-prim s-defn_2285)"
"(call-expand-observe obs_2284 'prim-define-values)))))"
"(void))))))"
"(define-values"
"(log-defn-exit)"
"(lambda(ctx_0 defn_0 exp-rhs_0)"
"(begin"
"(let-values(((obs_2316)(expand-context-observer ctx_0)))"
"(if obs_2316"
"(let-values()"
"(let-values(((s-defn_2317)"
"(datum->syntax$1"
" #f"
"(list 'define-values(semi-parsed-define-values-ids defn_0) exp-rhs_0)"
"(semi-parsed-define-values-s defn_0))))"
"(begin"
"(call-expand-observe obs_2316 'exit-prim s-defn_2317)"
"(call-expand-observe obs_2316 'return s-defn_2317))))"
"(void))))))"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_0 s_0 ctx_0)"
"(begin"
"(let-values(((top-level-bind-scope_4)(root-expand-context-top-level-bind-scope ctx_0)))"
"(let-values(((tl-ids_5)"
"(reverse$1"
"(let-values(((lst_7) ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_7)))"
"((letrec-values(((for-loop_8)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_11)(unsafe-car lst_0))"
"((rest_12)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_13)"
"(let-values(((fold-var_14) fold-var_0))"
"(let-values(((fold-var_15)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-use-site-scopes"
" id_11"
" ctx_0))"
" fold-var_14))))"
"(values fold-var_15)))))"
"(if(not #f)(for-loop_8 fold-var_13 rest_12) fold-var_13)))"
" fold-var_0)))))"
" for-loop_8)"
" null"
" lst_7))))))"
"(let-values((()"
"(begin"
"(let-values(((tl-ids1_16) tl-ids_5)((temp2_17)(expand-context-phase ctx_0))((s3_18) s_0))"
"(check-no-duplicate-ids7.1 unsafe-undefined tl-ids1_16 temp2_17 s3_18 unsafe-undefined))"
"(values))))"
"(let-values(((tmp-bind-ids_6)"
"(reverse$1"
"(let-values(((lst_19) tl-ids_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_19)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((id_23)(unsafe-car lst_0))"
"((rest_24)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_25)"
"(let-values(((fold-var_26) fold-var_0))"
"(let-values(((fold-var_27)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_23"
" top-level-bind-scope_4))"
" fold-var_26))))"
"(values fold-var_27)))))"
"(if(not #f)(for-loop_20 fold-var_25 rest_24) fold-var_25)))"
" fold-var_0)))))"
" for-loop_20)"
" null"
" lst_19))))))"
"(values tl-ids_5(select-defined-syms-and-bind!/ctx tmp-bind-ids_6 ctx_0)))))))))"
"(void"
"(add-core-form!*"
" 'define-values"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_27)(expand-context-observer ctx_0)))"
"(if obs_27"
"(let-values()(let-values()(call-expand-observe obs_27 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_0) 'top-level)"
"(void)"
"                         (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_0)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_4 define-values1_5 id2_6 rhs3_7)"
"(let-values(((s_28) s_0))"
"(let-values(((orig-s_29) s_28))"
"(let-values(((define-values1_30 id2_31 rhs3_32)"
"(let-values(((s_33)(if(syntax?$1 s_28)(syntax-e$1 s_28) s_28)))"
"(if(pair? s_33)"
"(let-values(((define-values4_34)"
"(let-values(((s_37)(car s_33))) s_37))"
"((id5_35 rhs6_36)"
"(let-values(((s_38)(cdr s_33)))"
"(let-values(((s_39)"
"(if(syntax?$1 s_38)"
"(syntax-e$1 s_38)"
" s_38)))"
"(if(pair? s_39)"
"(let-values(((id7_40)"
"(let-values(((s_42)(car s_39)))"
"(let-values(((s_43)"
"(if(syntax?$1 s_42)"
"(syntax-e$1 s_42)"
" s_42)))"
"(let-values(((flat-s_44)"
"(to-syntax-list.1"
" s_43)))"
"(if(not flat-s_44)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_29))"
"(let-values()"
"(let-values(((id_45)"
"(let-values(((lst_46)"
" flat-s_44))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_46)))"
"((letrec-values(((for-loop_47)"
"(lambda(id_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_50)"
"(unsafe-car"
" lst_0))"
"((rest_51)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id_52)"
"(let-values(((id_53)"
" id_0))"
"(let-values(((id_54)"
"(let-values()"
"(let-values(((id10_55)"
"(let-values()"
"(if(let-values(((or-part_56)"
"(if(syntax?$1"
" s_50)"
"(symbol?"
"(syntax-e$1"
" s_50))"
" #f)))"
"(if or-part_56"
" or-part_56"
"(symbol?"
" s_50)))"
" s_50"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"not an identifier\""
" orig-s_29"
" s_50)))))"
"(cons"
" id10_55"
" id_53)))))"
"(values"
" id_54)))))"
"(if(not"
" #f)"
"(for-loop_47"
" id_52"
" rest_51)"
" id_52)))"
" id_0)))))"
" for-loop_47)"
" null"
" lst_46)))))"
"(reverse$1 id_45))))))))"
"((rhs8_41)"
"(let-values(((s_57)(cdr s_39)))"
"(let-values(((s_58)"
"(if(syntax?$1 s_57)"
"(syntax-e$1 s_57)"
" s_57)))"
"(if(pair? s_58)"
"(let-values(((rhs9_59)"
"(let-values(((s_60)"
"(car"
" s_58)))"
" s_60))"
"(()"
"(let-values(((s_61)"
"(cdr"
" s_58)))"
"(let-values(((s_62)"
"(if(syntax?$1"
" s_61)"
"(syntax-e$1"
" s_61)"
" s_61)))"
"(if(null?"
" s_62)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_29))))))"
"(values rhs9_59))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_29))))))"
"(values id7_40 rhs8_41))"
"                                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_29))))))"
"(values define-values4_34 id5_35 rhs6_36))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_29)))))"
"(values #t define-values1_30 id2_31 rhs3_32))))))"
"(let-values(((ids_24 syms_25)(as-expand-time-top-level-bindings id2_6 s_0 ctx_0)))"
"(let-values(((exp-rhs_26)"
"(let-values(((temp11_63) rhs3_7)"
"((temp12_64)(as-named-context(as-expression-context ctx_0) ids_24)))"
"(expand9.1 #f #f #f temp11_63 temp12_64))))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-define-values19.1 s_0 ids_24 syms_25 exp-rhs_26)"
"(let-values(((s13_65) s_0)((temp14_66)(list define-values1_5 ids_24 exp-rhs_26)))"
"(rebuild5.1 #t s13_65 temp14_66))))))))))))"
"(void"
"(add-core-form!*"
" 'define-syntaxes"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_93)(expand-context-observer ctx_0)))"
"(if obs_93"
"(let-values()(let-values()(call-expand-observe obs_93 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_94)(expand-context-observer ctx_0)))"
"(if obs_94(let-values()(let-values()(call-expand-observe obs_94 'prepare-env)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_0) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not in a definition context\" s_0)))"
"(values))))"
"(let-values(((disarmed-s_69)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_70 define-syntaxes15_71 id16_72 rhs17_73)"
"(let-values(((s_95) disarmed-s_69))"
"(let-values(((orig-s_96) s_95))"
"(let-values(((define-syntaxes15_97 id16_98 rhs17_99)"
"(let-values(((s_100)(if(syntax?$1 s_95)(syntax-e$1 s_95) s_95)))"
"(if(pair? s_100)"
"(let-values(((define-syntaxes18_101)"
"(let-values(((s_104)(car s_100))) s_104))"
"((id19_102 rhs20_103)"
"(let-values(((s_105)(cdr s_100)))"
"(let-values(((s_106)"
"(if(syntax?$1 s_105)"
"(syntax-e$1 s_105)"
" s_105)))"
"(if(pair? s_106)"
"(let-values(((id21_107)"
"(let-values(((s_109)(car s_106)))"
"(let-values(((s_110)"
"(if(syntax?$1 s_109)"
"(syntax-e$1 s_109)"
" s_109)))"
"(let-values(((flat-s_111)"
"(to-syntax-list.1"
" s_110)))"
"(if(not flat-s_111)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_96))"
"(let-values()"
"(let-values(((id_112)"
"(let-values(((lst_113)"
" flat-s_111))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_113)))"
"((letrec-values(((for-loop_114)"
"(lambda(id_0"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_117)"
"(unsafe-car"
" lst_0))"
"((rest_118)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id_119)"
"(let-values(((id_120)"
" id_0))"
"(let-values(((id_121)"
"(let-values()"
"(let-values(((id24_122)"
"(let-values()"
"(if(let-values(((or-part_123)"
"(if(syntax?$1"
" s_117)"
"(symbol?"
"(syntax-e$1"
" s_117))"
" #f)))"
"(if or-part_123"
" or-part_123"
"(symbol?"
" s_117)))"
" s_117"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"not an identifier\""
" orig-s_96"
" s_117)))))"
"(cons"
" id24_122"
" id_120)))))"
"(values"
" id_121)))))"
"(if(not"
" #f)"
"(for-loop_114"
" id_119"
" rest_118)"
" id_119)))"
" id_0)))))"
" for-loop_114)"
" null"
" lst_113)))))"
"(reverse$1 id_112))))))))"
"((rhs22_108)"
"(let-values(((s_124)(cdr s_106)))"
"(let-values(((s_125)"
"(if(syntax?$1 s_124)"
"(syntax-e$1 s_124)"
" s_124)))"
"(if(pair? s_125)"
"(let-values(((rhs23_126)"
"(let-values(((s_127)"
"(car"
" s_125)))"
" s_127))"
"(()"
"(let-values(((s_128)"
"(cdr"
" s_125)))"
"(let-values(((s_129)"
"(if(syntax?$1"
" s_128)"
"(syntax-e$1"
" s_128)"
" s_128)))"
"(if(null?"
" s_129)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_96))))))"
"(values rhs23_126))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_96))))))"
"(values id21_107 rhs22_108))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_96))))))"
"(values define-syntaxes18_101 id19_102 rhs20_103))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_96)))))"
"(values #t define-syntaxes15_97 id16_98 rhs17_99))))))"
"(let-values(((ids_90 syms_91)(as-expand-time-top-level-bindings id16_72 s_0 ctx_0)))"
"(let-values(((exp-rhs_92)"
"(let-values(((temp25_130) rhs17_73)((temp26_131)(as-named-context ctx_0 ids_90)))"
"(expand-transformer92.1"
" #f"
" #f"
" 'expression"
" #t"
" #f"
" unsafe-undefined"
" temp25_130"
" temp26_131))))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-define-syntaxes20.1 s_0 ids_90 syms_91 exp-rhs_92)"
"(let-values(((s27_132) s_0)((temp28_133)(list define-syntaxes15_71 ids_90 exp-rhs_92)))"
"(rebuild5.1 #t s27_132 temp28_133)))))))))))))"
"(void"
"(add-core-form!*"
" 'begin-for-syntax"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_0) 'top-level)"
"(void)"
"                       (let-values () (raise-syntax-error$1 #f \"not in a definition context\" s_0)))"
"(values))))"
"(let-values(((ok?_136 begin-for-syntax29_137 form30_138)"
"(let-values(((s_156) s_0))"
"(let-values(((orig-s_157) s_156))"
"(let-values(((begin-for-syntax29_158 form30_159)"
"(let-values(((s_160)(if(syntax?$1 s_156)(syntax-e$1 s_156) s_156)))"
"(if(pair? s_160)"
"(let-values(((begin-for-syntax31_161)"
"(let-values(((s_163)(car s_160))) s_163))"
"((form32_162)"
"(let-values(((s_164)(cdr s_160)))"
"(let-values(((s_165)"
"(if(syntax?$1 s_164)"
"(syntax-e$1 s_164)"
" s_164)))"
"(let-values(((flat-s_166)(to-syntax-list.1 s_165)))"
"(if(not flat-s_166)"
"(let-values()"
"                                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_157))"
"(let-values() flat-s_166)))))))"
"(values begin-for-syntax31_161 form32_162))"
"                                           (raise-syntax-error$1 #f \"bad syntax\" orig-s_157)))))"
"(values #t begin-for-syntax29_158 form30_159))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_167)(expand-context-observer ctx_0)))"
"(if obs_167"
"(let-values()(let-values()(call-expand-observe obs_167 'prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_168)(expand-context-observer ctx_0)))"
"(if obs_168"
"(let-values()(let-values()(call-expand-observe obs_168 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values(((trans-ctx_152)"
"(let-values(((ctx33_170) ctx_0)((temp34_171) 'top-level)((temp35_172) #t))"
"(context->transformer-context99.1 temp35_172 ctx33_170 temp34_171))))"
"(let-values(((lift-ctx_153)"
"(let-values(((temp36_173)(make-top-level-lift trans-ctx_152)))"
"(make-lift-context6.1 #f temp36_173))))"
"(let-values(((capture-ctx_154)"
"(let-values(((v_174) trans-ctx_152))"
"(let-values(((the-struct_175) v_174))"
"(if(expand-context/outer? the-struct_175)"
"(let-values(((inner37_176)"
"(let-values(((the-struct_177)"
"(root-expand-context/outer-inner v_174)))"
"(if(expand-context/inner? the-struct_177)"
"(let-values(((lift-key38_178)(generate-lift-key))"
"((lifts39_179) lift-ctx_153))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_177)"
"(root-expand-context/inner-module-scopes the-struct_177)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_177)"
"(root-expand-context/inner-all-scopes-stx the-struct_177)"
"(root-expand-context/inner-defined-syms the-struct_177)"
"(root-expand-context/inner-counter the-struct_177)"
" lift-key38_178"
"(expand-context/inner-to-parsed? the-struct_177)"
"(expand-context/inner-phase the-struct_177)"
"(expand-context/inner-namespace the-struct_177)"
"(expand-context/inner-just-once? the-struct_177)"
"(expand-context/inner-module-begin-k the-struct_177)"
"(expand-context/inner-allow-unbound? the-struct_177)"
"(expand-context/inner-in-local-expand? the-struct_177)"
"(expand-context/inner-keep-#%expression? the-struct_177)"
"(expand-context/inner-stops the-struct_177)"
"(expand-context/inner-declared-submodule-names the-struct_177)"
" lifts39_179"
"(expand-context/inner-lift-envs the-struct_177)"
"(expand-context/inner-module-lifts the-struct_177)"
"(expand-context/inner-require-lifts the-struct_177)"
"(expand-context/inner-to-module-lifts the-struct_177)"
"(expand-context/inner-requires+provides the-struct_177)"
"(expand-context/inner-observer the-struct_177)"
"(expand-context/inner-for-serializable? the-struct_177)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_177)))"
"(raise-argument-error"
" 'struct-copy"
"                                                        \"expand-context/inner?\""
" the-struct_177)))))"
"(expand-context/outer1.1"
" inner37_176"
"(root-expand-context/outer-post-expansion the-struct_175)"
"(root-expand-context/outer-use-site-scopes the-struct_175)"
"(root-expand-context/outer-frame-id the-struct_175)"
"(expand-context/outer-context the-struct_175)"
"(expand-context/outer-env the-struct_175)"
"(expand-context/outer-scopes the-struct_175)"
"(expand-context/outer-def-ctx-scopes the-struct_175)"
"(expand-context/outer-binding-layer the-struct_175)"
"(expand-context/outer-reference-records the-struct_175)"
"(expand-context/outer-only-immediate? the-struct_175)"
"(expand-context/outer-need-eventually-defined the-struct_175)"
"(expand-context/outer-current-introduction-scopes the-struct_175)"
"(expand-context/outer-current-use-scopes the-struct_175)"
"(expand-context/outer-name the-struct_175)))"
"                                     (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_175))))))"
"(let-values(((all-exp-forms_155)"
"((letrec-values(((loop_180)"
"(lambda(forms_0)"
"(begin"
" 'loop"
"(let-values((()"
"(begin"
"(let-values(((obs_184)"
"(expand-context-observer ctx_0)))"
"(if obs_184"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_184"
" 'enter-list"
"(datum->syntax$1 #f form30_138 s_0))))"
"(void)))"
"(values))))"
"(let-values(((exp-forms_182)"
"((letrec-values(((loop_185)"
"(lambda(forms_1 accum_0)"
"(begin"
" 'loop"
"(if(null? forms_1)"
"(let-values()"
"(let-values(((forms_188)"
"(reverse$1"
" accum_0)))"
"(begin"
"(let-values(((obs_189)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_189"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_189"
" 'exit-list"
"(datum->syntax$1"
" #f"
" forms_188"
" s_0))))"
"(void)))"
" forms_188)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_191)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_191"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_191"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-form_190)"
"(let-values(((temp40_192)"
"(car"
" forms_1))"
"((capture-ctx41_193)"
" capture-ctx_154))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp40_192"
" capture-ctx41_193))))"
"(loop_185"
"(cdr forms_1)"
"(cons"
" exp-form_190"
" accum_0))))))))))"
" loop_185)"
" forms_0"
" null)))"
"(let-values(((lifts_183)"
"(get-and-clear-lifts! lift-ctx_153)))"
"(if(null? lifts_183)"
"(let-values() exp-forms_182)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_196)"
"(expand-context-observer"
" ctx_0)))"
"(if obs_196"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_196"
" 'module-lift-loop"
" lifts_183)))"
"(void)))"
"(values))))"
"(let-values(((beg_194)"
"(let-values(((lifts42_197) lifts_183)"
"((temp43_198) #f)"
"((temp44_199)"
"(expand-context-phase"
" trans-ctx_152)))"
"(wrap-lifts-as-begin16.1"
" unsafe-undefined"
" unsafe-undefined"
" lifts42_197"
" temp43_198"
" temp44_199))))"
"(let-values(((exprs_195)"
"(reverse$1"
"(cdr"
"(reverse$1"
"(cdr(syntax-e$1 beg_194)))))))"
"(append"
"(loop_180 exprs_195)"
" exp-forms_182)))))))))))))"
" loop_180)"
" form30_138)))"
"(if(expand-context-to-parsed? ctx_0)"
"(parsed-begin-for-syntax21.1 s_0 all-exp-forms_155)"
"(let-values(((s45_200) s_0)((temp46_201)(cons begin-for-syntax29_137 all-exp-forms_155)))"
"(rebuild5.1 #t s45_200 temp46_201))))))))))))))"
"(void"
"(add-core-form!*"
" '#%require"
"(lambda(s_0 ctx_0)"
"(let-values((()"
"(begin"
"(let-values(((obs_222)(expand-context-observer ctx_0)))"
"(if obs_222(let-values()(let-values()(call-expand-observe obs_222 'prim-require)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_0) 'top-level)"
"(void)"
"                         (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_0)))"
"(values))))"
"(let-values(((disarmed-s_204)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_205 #%require47_206 req48_207)"
"(let-values(((s_223) disarmed-s_204))"
"(let-values(((orig-s_224) s_223))"
"(let-values(((#%require47_225 req48_226)"
"(let-values(((s_227)(if(syntax?$1 s_223)(syntax-e$1 s_223) s_223)))"
"(if(pair? s_227)"
"(let-values(((#%require49_228)"
"(let-values(((s_230)(car s_227))) s_230))"
"((req50_229)"
"(let-values(((s_231)(cdr s_227)))"
"(let-values(((s_232)"
"(if(syntax?$1 s_231)"
"(syntax-e$1 s_231)"
" s_231)))"
"(let-values(((flat-s_233)(to-syntax-list.1 s_232)))"
"(if(not flat-s_233)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_224))"
"(let-values() flat-s_233)))))))"
"(values #%require49_228 req50_229))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_224)))))"
"(values #t #%require47_225 req48_226))))))"
"(let-values(((sc_221)(new-scope 'macro)))"
"(begin"
"(let-values(((temp51_235)"
"(reverse$1"
"(let-values(((lst_243) req48_207))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_243)))"
"((letrec-values(((for-loop_244)"
"(lambda(fold-var_0 lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((req_247)(unsafe-car lst_0))"
"((rest_248)(unsafe-cdr lst_0)))"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250) fold-var_0))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_247"
" sc_221))"
" fold-var_250))))"
"(values fold-var_251)))))"
"(if(not #f)"
"(for-loop_244 fold-var_249 rest_248)"
" fold-var_249)))"
" fold-var_0)))))"
" for-loop_244)"
" null"
" lst_243)))))"
"((s52_236) s_0)"
"((temp53_237) #f)"
"((temp54_238)(expand-context-namespace ctx_0))"
"((temp55_239)(expand-context-phase ctx_0))"
"((temp56_240)(let-values(((temp59_252) #f))(make-requires+provides8.1 #f temp59_252)))"
"((temp57_241) 'require)"
"((temp58_242) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" unsafe-undefined"
" temp58_242"
" unsafe-undefined"
" #f"
" #f"
" #f"
" temp53_237"
" temp57_241"
" temp51_235"
" s52_236"
" temp54_238"
" temp55_239"
" temp56_240))"
"(if(expand-context-to-parsed? ctx_0)(parsed-require23.1 s_0) s_0))))))))))"
"(void"
"(add-core-form!*"
" '#%provide"
"(lambda(s_0 ctx_0)"
"(begin"
"(let-values(((obs_255)(expand-context-observer ctx_0)))"
"(if obs_255(let-values()(let-values()(call-expand-observe obs_255 'prim-provide)))(void)))"
"       (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_0)))))"
"(define-values(ns)(make-namespace))"
"(void"
"(begin"
"(declare-core-module! ns)"
"(let-values(((temp1_2) '#%read)((read-primitives2_3) read-primitives)((ns3_4) ns))"
"(declare-hash-based-module!41.1 ns3_4 #f null #f #f temp1_2 read-primitives2_3))"
"(let-values(((temp4_6) '#%main)((main-primitives5_7) main-primitives)((ns6_8) ns))"
"(declare-hash-based-module!41.1 ns6_8 #f null #f #f temp4_6 main-primitives5_7))"
"(let-values(((temp7_10) '#%utils)((utils-primitives8_11) utils-primitives)((ns9_12) ns))"
"(declare-hash-based-module!41.1 ns9_12 #f null #f #f temp7_10 utils-primitives8_11))"
"(let-values(((temp10_14) '#%place-struct)"
"((place-struct-primitives11_15) place-struct-primitives)"
"((ns12_16) ns)"
"((temp13_17) '(dynamic-place)))"
"(declare-hash-based-module!41.1 ns12_16 #f temp13_17 #f #f temp10_14 place-struct-primitives11_15))"
"(let-values(((temp14_19) '#%boot)((boot-primitives15_20) boot-primitives)((ns16_21) ns))"
"(declare-hash-based-module!41.1 ns16_21 #f null #f #f temp14_19 boot-primitives15_20))"
"(let-values(((linklet-primitives_22)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((temp17_24) '#%linklet)"
"((linklet-primitives18_25) linklet-primitives_22)"
"((ns19_26) ns)"
"((temp20_27) #t)"
"((temp21_28) #t))"
"(declare-hash-based-module!41.1 ns19_26 temp20_27 null #f temp21_28 temp17_24 linklet-primitives18_25)))"
"(let-values(((temp22_30) '#%expobs)((expobs-primitives23_31) expobs-primitives)((ns24_32) ns)((temp25_33) #t))"
"(declare-hash-based-module!41.1 ns24_32 #f null temp25_33 #f temp22_30 expobs-primitives23_31))"
"(let-values(((ns26_35) ns)"
"((eval27_36) 1/eval)"
"((temp28_37)"
"(let-values(((ht_39) main-primitives))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_39)))"
"((letrec-values(((for-loop_40)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((name_43)(hash-iterate-key ht_39 i_0)))"
"(let-values(((table_44)"
"(let-values(((table_45) table_0))"
"(let-values(((table_46)"
"(let-values()"
"(let-values(((key_47 val_48)"
"(let-values()"
"(values"
"(let-values() name_43)"
" #t))))"
"(hash-set table_45 key_47 val_48)))))"
"(values table_46)))))"
"(if(not #f)"
"(for-loop_40 table_44(hash-iterate-next ht_39 i_0))"
" table_44)))"
" table_0)))))"
" for-loop_40)"
" '#hash()"
"(hash-iterate-first ht_39)))))"
"((temp29_38)"
"(let-values(((ht_49) read-primitives))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_49)))"
"((letrec-values(((for-loop_50)"
"(lambda(table_0 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((name_53)(hash-iterate-key ht_49 i_0)))"
"(let-values(((table_54)"
"(let-values(((table_55) table_0))"
"(let-values(((table_56)"
"(let-values()"
"(let-values(((key_57 val_58)"
"(let-values()"
"(values"
"(let-values() name_53)"
" #t))))"
"(hash-set table_55 key_57 val_58)))))"
"(values table_56)))))"
"(if(not #f)"
"(for-loop_50 table_54(hash-iterate-next ht_49 i_0))"
" table_54)))"
" table_0)))))"
" for-loop_50)"
" '#hash()"
"(hash-iterate-first ht_49))))))"
"(declare-kernel-module!8.1 eval27_36 temp28_37 temp29_38 ns26_35))"
"(begin"
"(let-values(((lst_59) runtime-instances))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_59)))"
"((letrec-values(((for-loop_60)"
"(lambda(lst_0)"
"(begin"
" 'for-loop"
"(if(pair? lst_0)"
"(let-values(((name_62)(unsafe-car lst_0))((rest_63)(unsafe-cdr lst_0)))"
"(let-values((()"
"(let-values()"
"(if(eq? name_62 '#%kernel)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name30_65) name_62)"
"((ns31_66) ns)"
"((temp32_67)"
"(let-values(((or-part_68)"
"(eq?"
" name_62"
" '#%foreign)))"
"(if or-part_68"
" or-part_68"
"(let-values(((or-part_69)"
"(eq?"
" name_62"
" '#%futures)))"
"(if or-part_69"
" or-part_69"
"(eq?"
" name_62"
" '#%unsafe)))))))"
"(copy-runtime-module!26.1"
" unsafe-undefined"
" unsafe-undefined"
" ns31_66"
" #t"
" temp32_67"
" unsafe-undefined"
" unsafe-undefined"
" name30_65)))"
"(values)))))"
"(values)))))))"
"(if(not #f)(for-loop_60 rest_63)(values))))"
"(values))))))"
" for-loop_60)"
" lst_59)))"
"(void))"
"(let-values(((temp33_71) '#%builtin)"
"((temp34_72)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns35_73) ns)"
"((temp36_74) #f))"
"(declare-reexporting-module!50.1 ns35_73 temp36_74 temp33_71 temp34_72))"
"(1/current-namespace ns)"
"(1/dynamic-require ''#%kernel 0)))"
"(define-values(datum->kernel-syntax)(lambda(s_0)(begin(1/datum->syntax core-stx s_0)))))"
;
