/* >>>> Generated by mkmark.rkt from mzmarksrc.c <<<< */

static int mark_srcloc_SIZE(void *p, struct NewGC *gc) {
  return
  gcBYTES_TO_WORDS(sizeof(Scheme_Stx_Srcloc));
}

static int mark_srcloc_MARK(void *p, struct NewGC *gc) {
  Scheme_Stx_Srcloc *s = (Scheme_Stx_Srcloc *)p;
  gcMARK2(s->src, gc);
  return
  gcBYTES_TO_WORDS(sizeof(Scheme_Stx_Srcloc));
}

static int mark_srcloc_FIXUP(void *p, struct NewGC *gc) {
  Scheme_Stx_Srcloc *s = (Scheme_Stx_Srcloc *)p;
  gcFIXUP2(s->src, gc);
  return
  gcBYTES_TO_WORDS(sizeof(Scheme_Stx_Srcloc));
}

#define mark_srcloc_IS_ATOMIC 0
#define mark_srcloc_IS_CONST_SIZE 1


static int mark_mark_SIZE(void *p, struct NewGC *gc) {
  return
  gcBYTES_TO_WORDS(sizeof(Scheme_Mark));
}

static int mark_mark_MARK(void *p, struct NewGC *gc) {
  Scheme_Mark *m = (Scheme_Mark *)p;
  gcMARK2(m->bindings, gc);
  return
  gcBYTES_TO_WORDS(sizeof(Scheme_Mark));
}

static int mark_mark_FIXUP(void *p, struct NewGC *gc) {
  Scheme_Mark *m = (Scheme_Mark *)p;
  gcFIXUP2(m->bindings, gc);
  return
  gcBYTES_TO_WORDS(sizeof(Scheme_Mark));
}

#define mark_mark_IS_ATOMIC 0
#define mark_mark_IS_CONST_SIZE 1


