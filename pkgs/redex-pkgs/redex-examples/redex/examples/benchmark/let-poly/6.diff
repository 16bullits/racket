3c3
< (define the-error "no error")
---
> (define the-error "∨ has an incorrect duplicated variable, leading to an uncovered case")
240c240
<   [(∨ boolean_1 boolean_2) #t])
---
>   [(∨ boolean boolean) #t])
560,571c560,575
<       (let ([t-type (type-check M)])
<         (implies
<          t-type
<          (let loop ([Σ+M `(· ,M)])
<            (define new-type (type-check (list-ref Σ+M 1) (list-ref Σ+M 0)))
<            (and (consistent-with? t-type new-type)
<                 (or (v? (list-ref Σ+M 1))
<                     (let ([red-res (apply-reduction-relation red Σ+M)])
<                       (and (= (length red-res) 1)
<                            (let ([red-t (car red-res)])
<                              (or (equal? red-t "error")
<                                  (loop red-t))))))))))))
---
>       (with-handlers ([exn:fail? (λ (x) #f)])
>         (let ([t-type (type-check M)])
>           (implies
>            t-type
>            (let loop ([Σ+M `(· ,M)])
>              (define new-type (type-check (list-ref Σ+M 1) (list-ref Σ+M 0)))
>              (and (consistent-with? t-type new-type)
>                   (or (v? (list-ref Σ+M 1))
>                       (let ([red-res (apply-reduction-relation red Σ+M)])
>                         (and (= (length red-res) 1)
>                              (let ([red-t (car red-res)])
>                                (or (equal? red-t "error")
>                                    (loop red-t)))))))))))))
> 
> (define small-counter-example (term ((λ x x) 1)))
> (test-equal (check small-counter-example) #f)
